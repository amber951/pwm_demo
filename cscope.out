cscope 15 $HOME/ncku/STM32f4_discovery_TIM_PWM_Output -q 0000013917 0001510795
	@TIM_PWM_Output/main.c

22 
	~"maö.h
"

25 
	~"°m32f4xx_c⁄f.h
"

40 
RCC_C⁄figuøti⁄
();

41 
TIM_C⁄figuøti⁄
();

42 
GPIO_C⁄figuøti⁄
();;

51 
	$maö
()

53 vﬁ©ûê
i
;

54 
n
 = 1;

55 
uöt16_t
 
brighäess
 = 0;

56 
uöt16_t
 
who_run
 = 1;

58 
	`RCC_C⁄figuøti⁄
();

59 
	`TIM_C⁄figuøti⁄
();

60 
	`GPIO_C⁄figuøti⁄
();

66 if(
brighäess
 + 
n
 <= 0)

67 
who_run
 = (who_run + 1) % 4;

69 i‡(((
brighäess
 + 
n
) >= 3000) || ((brightness +Ç) <= 0))

70 
n
 = -n;

72 
brighäess
 +
n
;

79 
who_run
){

81 
TIM4
->
CCR1
 = 
brighäess
 - 1;

84 
TIM4
->
CCR2
 = 
brighäess
 - 1;

87 
TIM4
->
CCR3
 = 
brighäess
 - 1;

90 
TIM4
->
CCR4
 = 
brighäess
 - 1;

93 
i
=0;i<10000;i++);

97 
	}
}

106 
	$RCC_C⁄figuøti⁄
()

108 
	`RCC_AHB1PîùhClockCmd
–
RCC_AHB1Pîùh_GPIOD
 , 
ENABLE
 );

109 
	`RCC_APB1PîùhClockCmd
–
RCC_APB1Pîùh_TIM4
, 
ENABLE
 );

110 
	}
}

117 
	$GPIO_C⁄figuøti⁄
()

119 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

120 
	`GPIO_Såu˘Inô
(&
GPIO_InôSåu˘uª
);

122 
	`GPIO_PöAFC⁄fig
(
GPIOD
, 
GPIO_PöSour˚12
, 
GPIO_AF_TIM4
);

123 
	`GPIO_PöAFC⁄fig
(
GPIOD
, 
GPIO_PöSour˚13
, 
GPIO_AF_TIM4
);

124 
	`GPIO_PöAFC⁄fig
(
GPIOD
, 
GPIO_PöSour˚14
, 
GPIO_AF_TIM4
);

125 
	`GPIO_PöAFC⁄fig
(
GPIOD
, 
GPIO_PöSour˚15
, 
GPIO_AF_TIM4
);

129 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_12
 | 
GPIO_Pö_13
| 
GPIO_Pö_14
| 
GPIO_Pö_15
;

130 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

131 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

132 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

133 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

134 
	`GPIO_Inô
–
GPIOD
, &
GPIO_InôSåu˘uª
 );

135 
	}
}

142 
	$TIM_C⁄figuøti⁄
()

144 
TIM_TimeBa£InôTy≥Def
 
TIM_TimeBa£InôSåu˘
;

145 
TIM_OCInôTy≥Def
 
TIM_OCInôSåu˘
;

150 
	`TIM_TimeBa£Såu˘Inô
–&
TIM_TimeBa£InôSåu˘
 );

151 
TIM_TimeBa£InôSåu˘
.
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV4
;

152 
TIM_TimeBa£InôSåu˘
.
TIM_Pîiod
 = 1680 - 1;

153 
TIM_TimeBa£InôSåu˘
.
TIM_PªsˇÀr
 = 500 - 1;

154 
TIM_TimeBa£InôSåu˘
.
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

155 
	`TIM_TimeBa£Inô
–
TIM4
, &
TIM_TimeBa£InôSåu˘
 );

157 
	`TIM_OCSåu˘Inô
–&
TIM_OCInôSåu˘
 );

158 
TIM_OCInôSåu˘
.
TIM_OuçutSèã
 = 
TIM_OuçutSèã_E«bÀ
;

159 
TIM_OCInôSåu˘
.
TIM_OCMode
 = 
TIM_OCMode_PWM1
;

163 
TIM_OCInôSåu˘
.
TIM_Pul£
 = 65535;

165 
	`TIM_OC1Inô
–
TIM4
, &
TIM_OCInôSåu˘
 );

166 
	`TIM_OC2Inô
–
TIM4
, &
TIM_OCInôSåu˘
 );

167 
	`TIM_OC3Inô
–
TIM4
, &
TIM_OCInôSåu˘
 );

168 
	`TIM_OC4Inô
–
TIM4
, &
TIM_OCInôSåu˘
 );

170 
	`TIM_Cmd
–
TIM4
, 
ENABLE
 );

171 
	}
}

	@TIM_PWM_Output/main.h

23 #i‚de‡
__STM32F4_DISCOVERY_DEMO_H


24 
	#__STM32F4_DISCOVERY_DEMO_H


	)

27 
	~"°m32f4_discovîy.h
"

31 
	~<°dio.h
>

37 
	#TIM_ARR
 (
uöt16_t
)1999

	)

38 
	#TIM_CCR
 (
uöt16_t
)1000

	)

41 
	#SPI_SCK_PIN
 
GPIO_Pö_10


	)

42 
	#SPI_SCK_GPIO_PORT
 
GPIOB


	)

43 
	#SPI_SCK_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOB


	)

44 
	#SPI_SCK_SOURCE
 
GPIO_PöSour˚10


	)

45 
	#SPI_SCK_AF
 
GPIO_AF_SPI2


	)

47 
	#SPI_MOSI_PIN
 
GPIO_Pö_3


	)

48 
	#SPI_MOSI_GPIO_PORT
 
GPIOC


	)

49 
	#SPI_MOSI_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOC


	)

50 
	#SPI_MOSI_SOURCE
 
GPIO_PöSour˚3


	)

51 
	#SPI_MOSI_AF
 
GPIO_AF_SPI2


	)

54 
	#ABS
(
x
Ë(x < 0Ë? (-xË: 
	)
x

55 
	#MAX
(
a
,
b
Ë◊ < bË? (bË: 
	)
a

57 
TimögDñay_De¸emít
();

58 
Dñay
(
__IO
 
uöt32_t
 
nTime
);

59 
Faû_H™dÀr
();

	@TIM_PWM_Output/stm32f4xx_conf.h

23 #i‚de‡
__STM32F4xx_CONF_H


24 
	#__STM32F4xx_CONF_H


	)

26 #i‡
deföed
 (
HSE_VALUE
)

28 #unde‡
HSE_VALUE


29 
	#HSE_VALUE
 ((
uöt32_t
)8000000)

	)

34 
	~"°m32f4xx_adc.h
"

35 
	~"°m32f4xx_ˇn.h
"

36 
	~"°m32f4xx_¸c.h
"

37 
	~"°m32f4xx_¸yp.h
"

38 
	~"°m32f4xx_dac.h
"

39 
	~"°m32f4xx_dbgmcu.h
"

40 
	~"°m32f4xx_dcmi.h
"

41 
	~"°m32f4xx_dma.h
"

42 
	~"°m32f4xx_exti.h
"

43 
	~"°m32f4xx_Êash.h
"

44 
	~"°m32f4xx_fsmc.h
"

45 
	~"°m32f4xx_hash.h
"

46 
	~"°m32f4xx_gpio.h
"

47 
	~"°m32f4xx_i2c.h
"

48 
	~"°m32f4xx_iwdg.h
"

49 
	~"°m32f4xx_pwr.h
"

50 
	~"°m32f4xx_rcc.h
"

51 
	~"°m32f4xx_∫g.h
"

52 
	~"°m32f4xx_πc.h
"

53 
	~"°m32f4xx_sdio.h
"

54 
	~"°m32f4xx_•i.h
"

55 
	~"°m32f4xx_syscfg.h
"

56 
	~"°m32f4xx_tim.h
"

57 
	~"°m32f4xx_ußπ.h
"

58 
	~"°m32f4xx_wwdg.h
"

59 
	~"misc.h
"

75 #ifde‡ 
USE_FULL_ASSERT


84 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

86 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

88 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@TIM_PWM_Output/stm32f4xx_it.c

25 
	~"°m32f4xx_ô.h
"

51 
	$NMI_H™dÀr
()

53 
	}
}

60 
	$H¨dFau…_H™dÀr
()

65 
	}
}

72 
	$MemM™age_H™dÀr
()

77 
	}
}

84 
	$BusFau…_H™dÀr
()

89 
	}
}

96 
	$UßgeFau…_H™dÀr
()

101 
	}
}

108 
	$DebugM⁄_H™dÀr
()

109 {
	}
}

116 
	$SVC_H™dÀr
()

117 {
	}
}

124 
	$PídSV_H™dÀr
()

125 {
	}
}

132 
	$SysTick_H™dÀr
()

133 {
	}
}

	@TIM_PWM_Output/stm32f4xx_it.h

23 #i‚de‡
__STM32F4xx_IT_H


24 
	#__STM32F4xx_IT_H


	)

27 
	~"°m32f4xx.h
"

34 
NMI_H™dÀr
();

35 
H¨dFau…_H™dÀr
();

36 
MemM™age_H™dÀr
();

37 
BusFau…_H™dÀr
();

38 
UßgeFau…_H™dÀr
();

39 
SVC_H™dÀr
();

40 
DebugM⁄_H™dÀr
();

41 
PídSV_H™dÀr
();

42 
SysTick_H™dÀr
();

	@TIM_PWM_Output/system_stm32f4xx.c

117 
	~"°m32f4xx.h
"

142 
	#VECT_TAB_OFFSET
 0x00

	)

147 
	#PLL_M
 8

	)

148 
	#PLL_N
 336

	)

151 
	#PLL_P
 2

	)

154 
	#PLL_Q
 7

	)

172 
uöt32_t
 
	gSy°emC‹eClock
 = 168000000;

174 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

184 
SëSysClock
();

185 #ifde‡
DATA_IN_ExtSRAM


186 
Sy°emInô_ExtMemCé
();

204 
	$Sy°emInô
()

208 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

211 
RCC
->
CFGR
 = 0x00000000;

214 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

217 
RCC
->
PLLCFGR
 = 0x24003010;

220 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

223 
RCC
->
CIR
 = 0x00000000;

225 #ifde‡
DATA_IN_ExtSRAM


226 
	`Sy°emInô_ExtMemCé
();

231 
	`SëSysClock
();

234 #ifde‡
VECT_TAB_SRAM


235 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

237 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

239 
	}
}

277 
	$Sy°emC‹eClockUpd©e
()

279 
uöt32_t
 
tmp
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

282 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

284 
tmp
)

287 
Sy°emC‹eClock
 = 
HSI_VALUE
;

290 
Sy°emC‹eClock
 = 
HSE_VALUE
;

297 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

298 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

300 i‡(
∂lsour˚
 != 0)

303 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

308 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

311 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

312 
Sy°emC‹eClock
 = 
∂lvco
/
∂Õ
;

315 
Sy°emC‹eClock
 = 
HSI_VALUE
;

320 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

322 
Sy°emC‹eClock
 >>
tmp
;

323 
	}
}

333 
	$SëSysClock
()

338 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

341 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

346 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

347 
SèπUpCou¡î
++;

348 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

350 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

352 
HSESètus
 = (
uöt32_t
)0x01;

356 
HSESètus
 = (
uöt32_t
)0x00;

359 i‡(
HSESètus
 =(
uöt32_t
)0x01)

362 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

363 
PWR
->
CR
 |
PWR_CR_PMODE
;

366 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

369 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV2
;

372 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV4
;

375 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1) -1) << 16) |

376 (
RCC_PLLCFGR_PLLSRC_HSE
Ë| (
PLL_Q
 << 24);

379 
RCC
->
CR
 |
RCC_CR_PLLON
;

382 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

387 
FLASH
->
ACR
 = 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_5WS
;

390 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

391 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

394 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

403 
	}
}

411 #ifde‡
DATA_IN_ExtSRAM


420 
	$Sy°emInô_ExtMemCé
()

443 
RCC
->
AHB1ENR
 = 0x00000078;

446 
GPIOD
->
AFR
[0] = 0x00cc00cc;

447 
GPIOD
->
AFR
[1] = 0xcc0ccccc;

449 
GPIOD
->
MODER
 = 0xaaaa0a0a;

451 
GPIOD
->
OSPEEDR
 = 0xffff0f0f;

453 
GPIOD
->
OTYPER
 = 0x00000000;

455 
GPIOD
->
PUPDR
 = 0x00000000;

458 
GPIOE
->
AFR
[0] = 0xc00cc0cc;

459 
GPIOE
->
AFR
[1] = 0xcccccccc;

461 
GPIOE
->
MODER
 = 0xaaaa828a;

463 
GPIOE
->
OSPEEDR
 = 0xffffc3cf;

465 
GPIOE
->
OTYPER
 = 0x00000000;

467 
GPIOE
->
PUPDR
 = 0x00000000;

470 
GPIOF
->
AFR
[0] = 0x00cccccc;

471 
GPIOF
->
AFR
[1] = 0xcccc0000;

473 
GPIOF
->
MODER
 = 0xaa000aaa;

475 
GPIOF
->
OSPEEDR
 = 0xff000fff;

477 
GPIOF
->
OTYPER
 = 0x00000000;

479 
GPIOF
->
PUPDR
 = 0x00000000;

482 
GPIOG
->
AFR
[0] = 0x00cccccc;

483 
GPIOG
->
AFR
[1] = 0x000000c0;

485 
GPIOG
->
MODER
 = 0x00080aaa;

487 
GPIOG
->
OSPEEDR
 = 0x000c0fff;

489 
GPIOG
->
OTYPER
 = 0x00000000;

491 
GPIOG
->
PUPDR
 = 0x00000000;

495 
RCC
->
AHB3ENR
 = 0x00000001;

498 
FSMC_B™k1
->
BTCR
[2] = 0x00001015;

499 
FSMC_B™k1
->
BTCR
[3] = 0x00010603;

500 
FSMC_B™k1E
->
BWTR
[2] = 0x0fffffff;

529 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/arm_common_tables.h

24 #i‚de‡
_ARM_COMMON_TABLES_H


25 
	#_ARM_COMMON_TABLES_H


	)

27 
	~"¨m_m©h.h
"

29 
uöt16_t
 
¨mBôRevTabÀ
[256];

30 
q15_t
 
¨mRecùTabÀQ15
[64];

31 
q31_t
 
¨mRecùTabÀQ31
[64];

32 c⁄° 
q31_t
 
ªÆC€fAQ31
[1024];

33 c⁄° 
q31_t
 
ªÆC€fBQ31
[1024];

	@libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/arm_math.h

251 #i‚de‡
_ARM_MATH_H


252 
	#_ARM_MATH_H


	)

254 
	#__CMSIS_GENERIC


	)

256 #i‡
deföed
 (
ARM_MATH_CM4
)

257 
	~"c‹e_cm4.h
"

258 #ñi‡
deföed
 (
ARM_MATH_CM3
)

259 
	~"c‹e_cm3.h
"

260 #ñi‡
deföed
 (
ARM_MATH_CM0
)

261 
	~"c‹e_cm0.h
"

263 
	~"ARMCM4.h
"

267 #unde‡
__CMSIS_GENERIC


268 
	~"°rög.h
"

269 
	~"m©h.h
"

270 #ifdef 
__˝lu•lus


280 
	#DELTA_Q31
 (0x100)

	)

281 
	#DELTA_Q15
 0x5

	)

282 
	#INDEX_MASK
 0x0000003F

	)

283 
	#PI
 3.14159265358979f

	)

289 
	#TABLE_SIZE
 256

	)

290 
	#TABLE_SPACING_Q31
 0x800000

	)

291 
	#TABLE_SPACING_Q15
 0x80

	)

298 
	#INPUT_SPACING
 0xB60B61

	)

307 
ARM_MATH_SUCCESS
 = 0,

308 
ARM_MATH_ARGUMENT_ERROR
 = -1,

309 
ARM_MATH_LENGTH_ERROR
 = -2,

310 
ARM_MATH_SIZE_MISMATCH
 = -3,

311 
ARM_MATH_NANINF
 = -4,

312 
ARM_MATH_SINGULAR
 = -5,

313 
ARM_MATH_TEST_FAILURE
 = -6

314 } 
	t¨m_°©us
;

319 
öt8_t
 
	tq7_t
;

324 
öt16_t
 
	tq15_t
;

329 
öt32_t
 
	tq31_t
;

334 
öt64_t
 
	tq63_t
;

339 
	tÊﬂt32_t
;

344 
	tÊﬂt64_t
;

349 
	#__SIMD32
(
addr
Ë(*(
öt32_t
 **Ë& (addr))

	)

351 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

355 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1) << 0) & (int32_t)0x0000FFFF) | \

356 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
Ë& (öt32_t)0xFFFF0000Ë)

	)

364 #i‚de‡
ARM_MATH_BIG_ENDIAN


366 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0) << 0) & (int32_t)0x000000FF) | \

367 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

368 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

369 (((
öt32_t
)(
v3
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

372 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3) << 0) & (int32_t)0x000000FF) | \

373 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

374 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

375 (((
öt32_t
)(
v0
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

383 
__INLINE
 
q31_t
 
˛ù_q63_to_q31
(

384 
q63_t
 
x
)

386  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

387 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

393 
__INLINE
 
q15_t
 
˛ù_q63_to_q15
(

394 
q63_t
 
x
)

396  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

397 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

403 
__INLINE
 
q7_t
 
˛ù_q31_to_q7
(

404 
q31_t
 
x
)

406  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

407 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

413 
__INLINE
 
q15_t
 
˛ù_q31_to_q15
(

414 
q31_t
 
x
)

416  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

417 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

424 
__INLINE
 
q63_t
 
mu…32x64
(

425 
q63_t
 
x
,

426 
q31_t
 
y
)

428  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

429 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

433 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& deföed ( 
__CC_ARM
 )

434 
	#__CLZ
 
__˛z


	)

437 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& ((deföed (
__ICCARM__
)Ë||(deföed (
__GNUC__
)Ë|| deföed (
__TASKING__
) )

439 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
);

442 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
)

444 
uöt32_t
 
cou¡
 = 0;

445 
uöt32_t
 
mask
 = 0x80000000;

447 (
d©a
 & 
mask
) == 0)

449 
cou¡
 += 1u;

450 
mask
 = mask >> 1u;

453 (
cou¡
);

463 
__INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

464 
q31_t
 
ö
,

465 
q31_t
 * 
d°
,

466 
q31_t
 * 
pRecùTabÀ
)

469 
uöt32_t
 
out
, 
ãmpVÆ
;

470 
uöt32_t
 
ödex
, 
i
;

471 
uöt32_t
 
signBôs
;

473 if(
ö
 > 0)

475 
signBôs
 = 
__CLZ
(
ö
) - 1;

479 
signBôs
 = 
__CLZ
(-
ö
) - 1;

483 
ö
 = i¿<< 
signBôs
;

486 
ödex
 = (
uöt32_t
Ë(
ö
 >> 24u);

487 
ödex
 = (ödex & 
INDEX_MASK
);

490 
out
 = 
pRecùTabÀ
[
ödex
];

494 
i
 = 0u; i < 2u; i++)

496 
ãmpVÆ
 = (
q31_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31u);

497 
ãmpVÆ
 = 0x7FFFFFFF -ÅempVal;

500 
out
 = (
q31_t
Ë
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30u);

504 *
d°
 = 
out
;

507  (
signBôs
 + 1u);

514 
__INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

515 
q15_t
 
ö
,

516 
q15_t
 * 
d°
,

517 
q15_t
 * 
pRecùTabÀ
)

520 
uöt32_t
 
out
 = 0, 
ãmpVÆ
 = 0;

521 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

522 
uöt32_t
 
signBôs
 = 0;

524 if(
ö
 > 0)

526 
signBôs
 = 
__CLZ
(
ö
) - 17;

530 
signBôs
 = 
__CLZ
(-
ö
) - 17;

534 
ö
 = i¿<< 
signBôs
;

537 
ödex
 = 
ö
 >> 8;

538 
ödex
 = (ödex & 
INDEX_MASK
);

541 
out
 = 
pRecùTabÀ
[
ödex
];

545 
i
 = 0; i < 2; i++)

547 
ãmpVÆ
 = (
q15_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

548 
ãmpVÆ
 = 0x7FFF -ÅempVal;

550 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

554 *
d°
 = 
out
;

557  (
signBôs
 + 1);

565 #i‡
deföed
(
ARM_MATH_CM0
)

567 
__INLINE
 
q31_t
 
__SSAT
(

568 
q31_t
 
x
,

569 
uöt32_t
 
y
)

571 
öt32_t
 
posMax
, 
√gMö
;

572 
uöt32_t
 
i
;

574 
posMax
 = 1;

575 
i
 = 0; i < (
y
 - 1); i++)

577 
posMax
 =ÖosMax * 2;

580 if(
x
 > 0)

582 
posMax
 = (posMax - 1);

584 if(
x
 > 
posMax
)

586 
x
 = 
posMax
;

591 
√gMö
 = -
posMax
;

593 if(
x
 < 
√gMö
)

595 
x
 = 
√gMö
;

598  (
x
);

610 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

615 
__INLINE
 
q31_t
 
__QADD8
(

616 
q31_t
 
x
,

617 
q31_t
 
y
)

620 
q31_t
 
sum
;

621 
q7_t
 
r
, 
s
, 
t
, 
u
;

623 
r
 = (Ë
x
;

624 
s
 = (Ë
y
;

626 
r
 = 
__SSAT
((
q31_t
Ë‘ + 
s
), 8);

627 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë+ ((
y
 << 16) >> 24))), 8);

628 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë+ ((
y
 << 8) >> 24))), 8);

629 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë+ (
y
 >> 24))), 8);

631 
sum
 = (((
q31_t
Ë
u
 << 24Ë& 0xFF000000Ë| (((q31_tË
t
 << 16) & 0x00FF0000) |

632 (((
q31_t
Ë
s
 << 8Ë& 0x0000FF00Ë| (
r
 & 0x000000FF);

634  
sum
;

641 
__INLINE
 
q31_t
 
__QSUB8
(

642 
q31_t
 
x
,

643 
q31_t
 
y
)

646 
q31_t
 
sum
;

647 
q31_t
 
r
, 
s
, 
t
, 
u
;

649 
r
 = (Ë
x
;

650 
s
 = (Ë
y
;

652 
r
 = 
__SSAT
(‘ - 
s
), 8);

653 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë- ((
y
 << 16) >> 24))), 8) << 8;

654 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë- ((
y
 << 8) >> 24))), 8) << 16;

655 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë- (
y
 >> 24))), 8) << 24;

657 
sum
 =

658 (
u
 & 0xFF000000Ë| (
t
 & 0x00FF0000Ë| (
s
 & 0x0000FF00Ë| (
r
 & 0x000000FF);

660  
sum
;

670 
__INLINE
 
q31_t
 
__QADD16
(

671 
q31_t
 
x
,

672 
q31_t
 
y
)

675 
q31_t
 
sum
;

676 
q31_t
 
r
, 
s
;

678 
r
 = (Ë
x
;

679 
s
 = (Ë
y
;

681 
r
 = 
__SSAT
‘ + 
s
, 16);

682 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë+ (
y
 >> 16))), 16) << 16;

684 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

686  
sum
;

693 
__INLINE
 
q31_t
 
__SHADD16
(

694 
q31_t
 
x
,

695 
q31_t
 
y
)

698 
q31_t
 
sum
;

699 
q31_t
 
r
, 
s
;

701 
r
 = (Ë
x
;

702 
s
 = (Ë
y
;

704 
r
 = (‘ >> 1Ë+ (
s
 >> 1));

705 
s
 = ((
q31_t
Ë((
x
 >> 17Ë+ (
y
 >> 17))) << 16;

707 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

709  
sum
;

716 
__INLINE
 
q31_t
 
__QSUB16
(

717 
q31_t
 
x
,

718 
q31_t
 
y
)

721 
q31_t
 
sum
;

722 
q31_t
 
r
, 
s
;

724 
r
 = (Ë
x
;

725 
s
 = (Ë
y
;

727 
r
 = 
__SSAT
‘ - 
s
, 16);

728 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë- (
y
 >> 16))), 16) << 16;

730 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

732  
sum
;

738 
__INLINE
 
q31_t
 
__SHSUB16
(

739 
q31_t
 
x
,

740 
q31_t
 
y
)

743 
q31_t
 
diff
;

744 
q31_t
 
r
, 
s
;

746 
r
 = (Ë
x
;

747 
s
 = (Ë
y
;

749 
r
 = (‘ >> 1Ë- (
s
 >> 1));

750 
s
 = (((
x
 >> 17Ë- (
y
 >> 17)) << 16);

752 
diff
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

754  
diff
;

760 
__INLINE
 
q31_t
 
__QASX
(

761 
q31_t
 
x
,

762 
q31_t
 
y
)

765 
q31_t
 
sum
 = 0;

767 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë+ (Ë
y
))) << 16) +

768 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 - (Ë(
y
 >> 16)));

770  
sum
;

776 
__INLINE
 
q31_t
 
__SHASX
(

777 
q31_t
 
x
,

778 
q31_t
 
y
)

781 
q31_t
 
sum
;

782 
q31_t
 
r
, 
s
;

784 
r
 = (Ë
x
;

785 
s
 = (Ë
y
;

787 
r
 = (‘ >> 1Ë- (
y
 >> 17));

788 
s
 = (((
x
 >> 17) + (s >> 1)) << 16);

790 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

792  
sum
;

799 
__INLINE
 
q31_t
 
__QSAX
(

800 
q31_t
 
x
,

801 
q31_t
 
y
)

804 
q31_t
 
sum
 = 0;

806 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë- (Ë
y
))) << 16) +

807 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 + (Ë(
y
 >> 16)));

809  
sum
;

815 
__INLINE
 
q31_t
 
__SHSAX
(

816 
q31_t
 
x
,

817 
q31_t
 
y
)

820 
q31_t
 
sum
;

821 
q31_t
 
r
, 
s
;

823 
r
 = (Ë
x
;

824 
s
 = (Ë
y
;

826 
r
 = (‘ >> 1Ë+ (
y
 >> 17));

827 
s
 = (((
x
 >> 17) - (s >> 1)) << 16);

829 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

831  
sum
;

837 
__INLINE
 
q31_t
 
__SMUSDX
(

838 
q31_t
 
x
,

839 
q31_t
 
y
)

842  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) -

843 ((Ë(
x
 >> 16Ë* (Ë
y
)));

849 
__INLINE
 
q31_t
 
__SMUADX
(

850 
q31_t
 
x
,

851 
q31_t
 
y
)

854  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) +

855 ((Ë(
x
 >> 16Ë* (Ë
y
)));

861 
__INLINE
 
q31_t
 
__QADD
(

862 
q31_t
 
x
,

863 
q31_t
 
y
)

865  
˛ù_q63_to_q31
((
q63_t
Ë
x
 + 
y
);

871 
__INLINE
 
q31_t
 
__QSUB
(

872 
q31_t
 
x
,

873 
q31_t
 
y
)

875  
˛ù_q63_to_q31
((
q63_t
Ë
x
 - 
y
);

881 
__INLINE
 
q31_t
 
__SMLAD
(

882 
q31_t
 
x
,

883 
q31_t
 
y
,

884 
q31_t
 
sum
)

887  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

888 ((Ë
x
 * (Ë
y
));

894 
__INLINE
 
q31_t
 
__SMLADX
(

895 
q31_t
 
x
,

896 
q31_t
 
y
,

897 
q31_t
 
sum
)

900  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

901 ((Ë
x
 * (Ë(
y
 >> 16)));

907 
__INLINE
 
q31_t
 
__SMLSDX
(

908 
q31_t
 
x
,

909 
q31_t
 
y
,

910 
q31_t
 
sum
)

913  (
sum
 - ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

914 ((Ë
x
 * (Ë(
y
 >> 16)));

920 
__INLINE
 
q63_t
 
__SMLALD
(

921 
q31_t
 
x
,

922 
q31_t
 
y
,

923 
q63_t
 
sum
)

926  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

927 ((Ë
x
 * (Ë
y
));

933 
__INLINE
 
q63_t
 
__SMLALDX
(

934 
q31_t
 
x
,

935 
q31_t
 
y
,

936 
q63_t
 
sum
)

939  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë
y
)) +

940 ((Ë
x
 * (Ë(
y
 >> 16));

946 
__INLINE
 
q31_t
 
__SMUAD
(

947 
q31_t
 
x
,

948 
q31_t
 
y
)

951  (((
x
 >> 16Ë* (
y
 >> 16)) +

952 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

958 
__INLINE
 
q31_t
 
__SMUSD
(

959 
q31_t
 
x
,

960 
q31_t
 
y
)

963  (-((
x
 >> 16Ë* (
y
 >> 16)) +

964 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

978 
uöt16_t
 
numT≠s
;

979 
q7_t
 *
pSèã
;

980 
q7_t
 *
pC€ffs
;

981 } 
	t¨m_fú_ö°™˚_q7
;

988 
uöt16_t
 
numT≠s
;

989 
q15_t
 *
pSèã
;

990 
q15_t
 *
pC€ffs
;

991 } 
	t¨m_fú_ö°™˚_q15
;

998 
uöt16_t
 
numT≠s
;

999 
q31_t
 *
pSèã
;

1000 
q31_t
 *
pC€ffs
;

1001 } 
	t¨m_fú_ö°™˚_q31
;

1008 
uöt16_t
 
numT≠s
;

1009 
Êﬂt32_t
 *
pSèã
;

1010 
Êﬂt32_t
 *
pC€ffs
;

1011 } 
	t¨m_fú_ö°™˚_f32
;

1022 
¨m_fú_q7
(

1023 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1024 
q7_t
 * 
pSrc
,

1025 
q7_t
 * 
pD°
,

1026 
uöt32_t
 
blockSize
);

1038 
¨m_fú_öô_q7
(

1039 
¨m_fú_ö°™˚_q7
 * 
S
,

1040 
uöt16_t
 
numT≠s
,

1041 
q7_t
 * 
pC€ffs
,

1042 
q7_t
 * 
pSèã
,

1043 
uöt32_t
 
blockSize
);

1054 
¨m_fú_q15
(

1055 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1056 
q15_t
 * 
pSrc
,

1057 
q15_t
 * 
pD°
,

1058 
uöt32_t
 
blockSize
);

1068 
¨m_fú_Á°_q15
(

1069 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1070 
q15_t
 * 
pSrc
,

1071 
q15_t
 * 
pD°
,

1072 
uöt32_t
 
blockSize
);

1085 
¨m_°©us
 
¨m_fú_öô_q15
(

1086 
¨m_fú_ö°™˚_q15
 * 
S
,

1087 
uöt16_t
 
numT≠s
,

1088 
q15_t
 * 
pC€ffs
,

1089 
q15_t
 * 
pSèã
,

1090 
uöt32_t
 
blockSize
);

1100 
¨m_fú_q31
(

1101 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1102 
q31_t
 * 
pSrc
,

1103 
q31_t
 * 
pD°
,

1104 
uöt32_t
 
blockSize
);

1114 
¨m_fú_Á°_q31
(

1115 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1116 
q31_t
 * 
pSrc
,

1117 
q31_t
 * 
pD°
,

1118 
uöt32_t
 
blockSize
);

1129 
¨m_fú_öô_q31
(

1130 
¨m_fú_ö°™˚_q31
 * 
S
,

1131 
uöt16_t
 
numT≠s
,

1132 
q31_t
 * 
pC€ffs
,

1133 
q31_t
 * 
pSèã
,

1134 
uöt32_t
 
blockSize
);

1144 
¨m_fú_f32
(

1145 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1146 
Êﬂt32_t
 * 
pSrc
,

1147 
Êﬂt32_t
 * 
pD°
,

1148 
uöt32_t
 
blockSize
);

1159 
¨m_fú_öô_f32
(

1160 
¨m_fú_ö°™˚_f32
 * 
S
,

1161 
uöt16_t
 
numT≠s
,

1162 
Êﬂt32_t
 * 
pC€ffs
,

1163 
Êﬂt32_t
 * 
pSèã
,

1164 
uöt32_t
 
blockSize
);

1172 
öt8_t
 
numSèges
;

1173 
q15_t
 *
pSèã
;

1174 
q15_t
 *
pC€ffs
;

1175 
öt8_t
 
po°Shi·
;

1177 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1185 
uöt32_t
 
numSèges
;

1186 
q31_t
 *
pSèã
;

1187 
q31_t
 *
pC€ffs
;

1188 
uöt8_t
 
po°Shi·
;

1190 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1197 
uöt32_t
 
numSèges
;

1198 
Êﬂt32_t
 *
pSèã
;

1199 
Êﬂt32_t
 *
pC€ffs
;

1202 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1215 
¨m_biquad_ˇsˇde_df1_q15
(

1216 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1217 
q15_t
 * 
pSrc
,

1218 
q15_t
 * 
pD°
,

1219 
uöt32_t
 
blockSize
);

1231 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1232 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1233 
uöt8_t
 
numSèges
,

1234 
q15_t
 * 
pC€ffs
,

1235 
q15_t
 * 
pSèã
,

1236 
öt8_t
 
po°Shi·
);

1248 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1249 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1250 
q15_t
 * 
pSrc
,

1251 
q15_t
 * 
pD°
,

1252 
uöt32_t
 
blockSize
);

1264 
¨m_biquad_ˇsˇde_df1_q31
(

1265 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1266 
q31_t
 * 
pSrc
,

1267 
q31_t
 * 
pD°
,

1268 
uöt32_t
 
blockSize
);

1279 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1280 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1281 
q31_t
 * 
pSrc
,

1282 
q31_t
 * 
pD°
,

1283 
uöt32_t
 
blockSize
);

1295 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1296 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1297 
uöt8_t
 
numSèges
,

1298 
q31_t
 * 
pC€ffs
,

1299 
q31_t
 * 
pSèã
,

1300 
öt8_t
 
po°Shi·
);

1311 
¨m_biquad_ˇsˇde_df1_f32
(

1312 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1313 
Êﬂt32_t
 * 
pSrc
,

1314 
Êﬂt32_t
 * 
pD°
,

1315 
uöt32_t
 
blockSize
);

1326 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1327 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1328 
uöt8_t
 
numSèges
,

1329 
Êﬂt32_t
 * 
pC€ffs
,

1330 
Êﬂt32_t
 * 
pSèã
);

1339 
uöt16_t
 
numRows
;

1340 
uöt16_t
 
numCﬁs
;

1341 
Êﬂt32_t
 *
pD©a
;

1342 } 
	t¨m_m©rix_ö°™˚_f32
;

1350 
uöt16_t
 
numRows
;

1351 
uöt16_t
 
numCﬁs
;

1352 
q15_t
 *
pD©a
;

1354 } 
	t¨m_m©rix_ö°™˚_q15
;

1362 
uöt16_t
 
numRows
;

1363 
uöt16_t
 
numCﬁs
;

1364 
q31_t
 *
pD©a
;

1366 } 
	t¨m_m©rix_ö°™˚_q31
;

1379 
¨m_°©us
 
¨m_m©_add_f32
(

1380 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1381 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1382 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1393 
¨m_°©us
 
¨m_m©_add_q15
(

1394 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1395 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1396 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1407 
¨m_°©us
 
¨m_m©_add_q31
(

1408 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1409 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1410 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1421 
¨m_°©us
 
¨m_m©_å™s_f32
(

1422 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1423 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1434 
¨m_°©us
 
¨m_m©_å™s_q15
(

1435 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1436 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1446 
¨m_°©us
 
¨m_m©_å™s_q31
(

1447 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1448 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1460 
¨m_°©us
 
¨m_m©_mu…_f32
(

1461 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1462 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1463 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1474 
¨m_°©us
 
¨m_m©_mu…_q15
(

1475 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1476 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1477 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1478 
q15_t
 * 
pSèã
);

1490 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1491 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1492 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1493 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1494 
q15_t
 * 
pSèã
);

1505 
¨m_°©us
 
¨m_m©_mu…_q31
(

1506 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1507 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1508 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1519 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1520 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1521 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1522 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1534 
¨m_°©us
 
¨m_m©_sub_f32
(

1535 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1536 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1537 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1548 
¨m_°©us
 
¨m_m©_sub_q15
(

1549 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1550 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1551 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1562 
¨m_°©us
 
¨m_m©_sub_q31
(

1563 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1564 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1565 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1576 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1577 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1578 
Êﬂt32_t
 
sˇÀ
,

1579 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1591 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1592 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1593 
q15_t
 
sˇÀFø˘
,

1594 
öt32_t
 
shi·
,

1595 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1607 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1608 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1609 
q31_t
 
sˇÀFø˘
,

1610 
öt32_t
 
shi·
,

1611 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1623 
¨m_m©_öô_q31
(

1624 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1625 
uöt16_t
 
nRows
,

1626 
uöt16_t
 
nCﬁumns
,

1627 
q31_t
 *
pD©a
);

1638 
¨m_m©_öô_q15
(

1639 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1640 
uöt16_t
 
nRows
,

1641 
uöt16_t
 
nCﬁumns
,

1642 
q15_t
 *
pD©a
);

1653 
¨m_m©_öô_f32
(

1654 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1655 
uöt16_t
 
nRows
,

1656 
uöt16_t
 
nCﬁumns
,

1657 
Êﬂt32_t
 *
pD©a
);

1666 
q15_t
 
A0
;

1667 #ifde‡
ARM_MATH_CM0


1668 
q15_t
 
A1
;

1669 
q15_t
 
A2
;

1671 
q31_t
 
A1
;

1673 
q15_t
 
°©e
[3];

1674 
q15_t
 
Kp
;

1675 
q15_t
 
Ki
;

1676 
q15_t
 
Kd
;

1677 } 
	t¨m_pid_ö°™˚_q15
;

1684 
q31_t
 
A0
;

1685 
q31_t
 
A1
;

1686 
q31_t
 
A2
;

1687 
q31_t
 
°©e
[3];

1688 
q31_t
 
Kp
;

1689 
q31_t
 
Ki
;

1690 
q31_t
 
Kd
;

1692 } 
	t¨m_pid_ö°™˚_q31
;

1699 
Êﬂt32_t
 
A0
;

1700 
Êﬂt32_t
 
A1
;

1701 
Êﬂt32_t
 
A2
;

1702 
Êﬂt32_t
 
°©e
[3];

1703 
Êﬂt32_t
 
Kp
;

1704 
Êﬂt32_t
 
Ki
;

1705 
Êﬂt32_t
 
Kd
;

1706 } 
	t¨m_pid_ö°™˚_f32
;

1716 
¨m_pid_öô_f32
(

1717 
¨m_pid_ö°™˚_f32
 * 
S
,

1718 
öt32_t
 
ª£tSèãFœg
);

1725 
¨m_pid_ª£t_f32
(

1726 
¨m_pid_ö°™˚_f32
 * 
S
);

1735 
¨m_pid_öô_q31
(

1736 
¨m_pid_ö°™˚_q31
 * 
S
,

1737 
öt32_t
 
ª£tSèãFœg
);

1746 
¨m_pid_ª£t_q31
(

1747 
¨m_pid_ö°™˚_q31
 * 
S
);

1755 
¨m_pid_öô_q15
(

1756 
¨m_pid_ö°™˚_q15
 * 
S
,

1757 
öt32_t
 
ª£tSèãFœg
);

1764 
¨m_pid_ª£t_q15
(

1765 
¨m_pid_ö°™˚_q15
 * 
S
);

1773 
uöt32_t
 
nVÆues
;

1774 
Êﬂt32_t
 
x1
;

1775 
Êﬂt32_t
 
xS∑cög
;

1776 
Êﬂt32_t
 *
pYD©a
;

1777 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1785 
uöt16_t
 
numRows
;

1786 
uöt16_t
 
numCﬁs
;

1787 
Êﬂt32_t
 *
pD©a
;

1788 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1796 
uöt16_t
 
numRows
;

1797 
uöt16_t
 
numCﬁs
;

1798 
q31_t
 *
pD©a
;

1799 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1807 
uöt16_t
 
numRows
;

1808 
uöt16_t
 
numCﬁs
;

1809 
q15_t
 *
pD©a
;

1810 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1818 
uöt16_t
 
numRows
;

1819 
uöt16_t
 
numCﬁs
;

1820 
q7_t
 *
pD©a
;

1821 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1833 
¨m_mu…_q7
(

1834 
q7_t
 * 
pSrcA
,

1835 
q7_t
 * 
pSrcB
,

1836 
q7_t
 * 
pD°
,

1837 
uöt32_t
 
blockSize
);

1848 
¨m_mu…_q15
(

1849 
q15_t
 * 
pSrcA
,

1850 
q15_t
 * 
pSrcB
,

1851 
q15_t
 * 
pD°
,

1852 
uöt32_t
 
blockSize
);

1863 
¨m_mu…_q31
(

1864 
q31_t
 * 
pSrcA
,

1865 
q31_t
 * 
pSrcB
,

1866 
q31_t
 * 
pD°
,

1867 
uöt32_t
 
blockSize
);

1878 
¨m_mu…_f32
(

1879 
Êﬂt32_t
 * 
pSrcA
,

1880 
Êﬂt32_t
 * 
pSrcB
,

1881 
Êﬂt32_t
 * 
pD°
,

1882 
uöt32_t
 
blockSize
);

1891 
uöt16_t
 
f·Lí
;

1892 
uöt8_t
 
if·Fœg
;

1893 
uöt8_t
 
bôRevî£Fœg
;

1894 
q15_t
 *
pTwiddÀ
;

1895 
uöt16_t
 *
pBôRevTabÀ
;

1896 
uöt16_t
 
twidC€fModifõr
;

1897 
uöt16_t
 
bôRevFa˘‹
;

1898 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

1906 
uöt16_t
 
f·Lí
;

1907 
uöt8_t
 
if·Fœg
;

1908 
uöt8_t
 
bôRevî£Fœg
;

1909 
q31_t
 *
pTwiddÀ
;

1910 
uöt16_t
 *
pBôRevTabÀ
;

1911 
uöt16_t
 
twidC€fModifõr
;

1912 
uöt16_t
 
bôRevFa˘‹
;

1913 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

1921 
uöt16_t
 
f·Lí
;

1922 
uöt8_t
 
if·Fœg
;

1923 
uöt8_t
 
bôRevî£Fœg
;

1924 
Êﬂt32_t
 *
pTwiddÀ
;

1925 
uöt16_t
 *
pBôRevTabÀ
;

1926 
uöt16_t
 
twidC€fModifõr
;

1927 
uöt16_t
 
bôRevFa˘‹
;

1928 
Êﬂt32_t
 
⁄ebyf·Lí
;

1929 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

1938 
¨m_cf·_ødix4_q15
(

1939 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1940 
q15_t
 * 
pSrc
);

1951 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

1952 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1953 
uöt16_t
 
f·Lí
,

1954 
uöt8_t
 
if·Fœg
,

1955 
uöt8_t
 
bôRevî£Fœg
);

1964 
¨m_cf·_ødix4_q31
(

1965 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1966 
q31_t
 * 
pSrc
);

1977 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

1978 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1979 
uöt16_t
 
f·Lí
,

1980 
uöt8_t
 
if·Fœg
,

1981 
uöt8_t
 
bôRevî£Fœg
);

1990 
¨m_cf·_ødix4_f32
(

1991 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

1992 
Êﬂt32_t
 * 
pSrc
);

2003 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2004 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2005 
uöt16_t
 
f·Lí
,

2006 
uöt8_t
 
if·Fœg
,

2007 
uöt8_t
 
bôRevî£Fœg
);

2024 
¨m_ødix4_buâîÊy_f32
(

2025 
Êﬂt32_t
 * 
pSrc
,

2026 
uöt16_t
 
f·Lí
,

2027 
Êﬂt32_t
 * 
pC€f
,

2028 
uöt16_t
 
twidC€fModifõr
);

2040 
¨m_ødix4_buâîÊy_övî£_f32
(

2041 
Êﬂt32_t
 * 
pSrc
,

2042 
uöt16_t
 
f·Lí
,

2043 
Êﬂt32_t
 * 
pC€f
,

2044 
uöt16_t
 
twidC€fModifõr
,

2045 
Êﬂt32_t
 
⁄ebyf·Lí
);

2056 
¨m_bôªvîßl_f32
(

2057 
Êﬂt32_t
 *
pSrc
,

2058 
uöt16_t
 
f·Size
,

2059 
uöt16_t
 
bôRevFa˘‹
,

2060 
uöt16_t
 *
pBôRevTab
);

2071 
¨m_ødix4_buâîÊy_q31
(

2072 
q31_t
 *
pSrc
,

2073 
uöt32_t
 
f·Lí
,

2074 
q31_t
 *
pC€f
,

2075 
uöt32_t
 
twidC€fModifõr
);

2086 
¨m_ødix4_buâîÊy_övî£_q31
(

2087 
q31_t
 * 
pSrc
,

2088 
uöt32_t
 
f·Lí
,

2089 
q31_t
 * 
pC€f
,

2090 
uöt32_t
 
twidC€fModifõr
);

2101 
¨m_bôªvîßl_q31
(

2102 
q31_t
 * 
pSrc
,

2103 
uöt32_t
 
f·Lí
,

2104 
uöt16_t
 
bôRevFa˘‹
,

2105 
uöt16_t
 *
pBôRevTab
);

2116 
¨m_ødix4_buâîÊy_q15
(

2117 
q15_t
 *
pSrc16
,

2118 
uöt32_t
 
f·Lí
,

2119 
q15_t
 *
pC€f16
,

2120 
uöt32_t
 
twidC€fModifõr
);

2131 
¨m_ødix4_buâîÊy_övî£_q15
(

2132 
q15_t
 *
pSrc16
,

2133 
uöt32_t
 
f·Lí
,

2134 
q15_t
 *
pC€f16
,

2135 
uöt32_t
 
twidC€fModifõr
);

2146 
¨m_bôªvîßl_q15
(

2147 
q15_t
 * 
pSrc
,

2148 
uöt32_t
 
f·Lí
,

2149 
uöt16_t
 
bôRevFa˘‹
,

2150 
uöt16_t
 *
pBôRevTab
);

2158 
uöt32_t
 
f·LíRól
;

2159 
uöt32_t
 
f·LíBy2
;

2160 
uöt8_t
 
if·FœgR
;

2161 
uöt8_t
 
bôRevî£FœgR
;

2162 
uöt32_t
 
twidC€fRModifõr
;

2163 
q15_t
 *
pTwiddÀARól
;

2164 
q15_t
 *
pTwiddÀBRól
;

2165 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2166 } 
	t¨m_rf·_ö°™˚_q15
;

2174 
uöt32_t
 
f·LíRól
;

2175 
uöt32_t
 
f·LíBy2
;

2176 
uöt8_t
 
if·FœgR
;

2177 
uöt8_t
 
bôRevî£FœgR
;

2178 
uöt32_t
 
twidC€fRModifõr
;

2179 
q31_t
 *
pTwiddÀARól
;

2180 
q31_t
 *
pTwiddÀBRól
;

2181 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2182 } 
	t¨m_rf·_ö°™˚_q31
;

2190 
uöt32_t
 
f·LíRól
;

2191 
uöt16_t
 
f·LíBy2
;

2192 
uöt8_t
 
if·FœgR
;

2193 
uöt8_t
 
bôRevî£FœgR
;

2194 
uöt32_t
 
twidC€fRModifõr
;

2195 
Êﬂt32_t
 *
pTwiddÀARól
;

2196 
Êﬂt32_t
 *
pTwiddÀBRól
;

2197 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2198 } 
	t¨m_rf·_ö°™˚_f32
;

2208 
¨m_rf·_q15
(

2209 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2210 
q15_t
 * 
pSrc
,

2211 
q15_t
 * 
pD°
);

2223 
¨m_°©us
 
¨m_rf·_öô_q15
(

2224 
¨m_rf·_ö°™˚_q15
 * 
S
,

2225 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2226 
uöt32_t
 
f·LíRól
,

2227 
uöt32_t
 
if·FœgR
,

2228 
uöt32_t
 
bôRevî£Fœg
);

2238 
¨m_rf·_q31
(

2239 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2240 
q31_t
 * 
pSrc
,

2241 
q31_t
 * 
pD°
);

2253 
¨m_°©us
 
¨m_rf·_öô_q31
(

2254 
¨m_rf·_ö°™˚_q31
 * 
S
,

2255 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2256 
uöt32_t
 
f·LíRól
,

2257 
uöt32_t
 
if·FœgR
,

2258 
uöt32_t
 
bôRevî£Fœg
);

2270 
¨m_°©us
 
¨m_rf·_öô_f32
(

2271 
¨m_rf·_ö°™˚_f32
 * 
S
,

2272 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2273 
uöt32_t
 
f·LíRól
,

2274 
uöt32_t
 
if·FœgR
,

2275 
uöt32_t
 
bôRevî£Fœg
);

2285 
¨m_rf·_f32
(

2286 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2287 
Êﬂt32_t
 * 
pSrc
,

2288 
Êﬂt32_t
 * 
pD°
);

2296 
uöt16_t
 
N
;

2297 
uöt16_t
 
Nby2
;

2298 
Êﬂt32_t
 
n‹mÆize
;

2299 
Êﬂt32_t
 *
pTwiddÀ
;

2300 
Êﬂt32_t
 *
pCosFa˘‹
;

2301 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2302 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2303 } 
	t¨m_d˘4_ö°™˚_f32
;

2316 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2317 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2318 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2319 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2320 
uöt16_t
 
N
,

2321 
uöt16_t
 
Nby2
,

2322 
Êﬂt32_t
 
n‹mÆize
);

2332 
¨m_d˘4_f32
(

2333 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2334 
Êﬂt32_t
 * 
pSèã
,

2335 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2343 
uöt16_t
 
N
;

2344 
uöt16_t
 
Nby2
;

2345 
q31_t
 
n‹mÆize
;

2346 
q31_t
 *
pTwiddÀ
;

2347 
q31_t
 *
pCosFa˘‹
;

2348 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2349 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2350 } 
	t¨m_d˘4_ö°™˚_q31
;

2363 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2364 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2365 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2366 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2367 
uöt16_t
 
N
,

2368 
uöt16_t
 
Nby2
,

2369 
q31_t
 
n‹mÆize
);

2379 
¨m_d˘4_q31
(

2380 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2381 
q31_t
 * 
pSèã
,

2382 
q31_t
 * 
pI∆öeBuf„r
);

2390 
uöt16_t
 
N
;

2391 
uöt16_t
 
Nby2
;

2392 
q15_t
 
n‹mÆize
;

2393 
q15_t
 *
pTwiddÀ
;

2394 
q15_t
 *
pCosFa˘‹
;

2395 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2396 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2397 } 
	t¨m_d˘4_ö°™˚_q15
;

2410 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2411 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2412 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2413 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2414 
uöt16_t
 
N
,

2415 
uöt16_t
 
Nby2
,

2416 
q15_t
 
n‹mÆize
);

2426 
¨m_d˘4_q15
(

2427 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2428 
q15_t
 * 
pSèã
,

2429 
q15_t
 * 
pI∆öeBuf„r
);

2440 
¨m_add_f32
(

2441 
Êﬂt32_t
 * 
pSrcA
,

2442 
Êﬂt32_t
 * 
pSrcB
,

2443 
Êﬂt32_t
 * 
pD°
,

2444 
uöt32_t
 
blockSize
);

2455 
¨m_add_q7
(

2456 
q7_t
 * 
pSrcA
,

2457 
q7_t
 * 
pSrcB
,

2458 
q7_t
 * 
pD°
,

2459 
uöt32_t
 
blockSize
);

2470 
¨m_add_q15
(

2471 
q15_t
 * 
pSrcA
,

2472 
q15_t
 * 
pSrcB
,

2473 
q15_t
 * 
pD°
,

2474 
uöt32_t
 
blockSize
);

2485 
¨m_add_q31
(

2486 
q31_t
 * 
pSrcA
,

2487 
q31_t
 * 
pSrcB
,

2488 
q31_t
 * 
pD°
,

2489 
uöt32_t
 
blockSize
);

2500 
¨m_sub_f32
(

2501 
Êﬂt32_t
 * 
pSrcA
,

2502 
Êﬂt32_t
 * 
pSrcB
,

2503 
Êﬂt32_t
 * 
pD°
,

2504 
uöt32_t
 
blockSize
);

2515 
¨m_sub_q7
(

2516 
q7_t
 * 
pSrcA
,

2517 
q7_t
 * 
pSrcB
,

2518 
q7_t
 * 
pD°
,

2519 
uöt32_t
 
blockSize
);

2530 
¨m_sub_q15
(

2531 
q15_t
 * 
pSrcA
,

2532 
q15_t
 * 
pSrcB
,

2533 
q15_t
 * 
pD°
,

2534 
uöt32_t
 
blockSize
);

2545 
¨m_sub_q31
(

2546 
q31_t
 * 
pSrcA
,

2547 
q31_t
 * 
pSrcB
,

2548 
q31_t
 * 
pD°
,

2549 
uöt32_t
 
blockSize
);

2560 
¨m_sˇÀ_f32
(

2561 
Êﬂt32_t
 * 
pSrc
,

2562 
Êﬂt32_t
 
sˇÀ
,

2563 
Êﬂt32_t
 * 
pD°
,

2564 
uöt32_t
 
blockSize
);

2576 
¨m_sˇÀ_q7
(

2577 
q7_t
 * 
pSrc
,

2578 
q7_t
 
sˇÀFø˘
,

2579 
öt8_t
 
shi·
,

2580 
q7_t
 * 
pD°
,

2581 
uöt32_t
 
blockSize
);

2593 
¨m_sˇÀ_q15
(

2594 
q15_t
 * 
pSrc
,

2595 
q15_t
 
sˇÀFø˘
,

2596 
öt8_t
 
shi·
,

2597 
q15_t
 * 
pD°
,

2598 
uöt32_t
 
blockSize
);

2610 
¨m_sˇÀ_q31
(

2611 
q31_t
 * 
pSrc
,

2612 
q31_t
 
sˇÀFø˘
,

2613 
öt8_t
 
shi·
,

2614 
q31_t
 * 
pD°
,

2615 
uöt32_t
 
blockSize
);

2625 
¨m_abs_q7
(

2626 
q7_t
 * 
pSrc
,

2627 
q7_t
 * 
pD°
,

2628 
uöt32_t
 
blockSize
);

2638 
¨m_abs_f32
(

2639 
Êﬂt32_t
 * 
pSrc
,

2640 
Êﬂt32_t
 * 
pD°
,

2641 
uöt32_t
 
blockSize
);

2651 
¨m_abs_q15
(

2652 
q15_t
 * 
pSrc
,

2653 
q15_t
 * 
pD°
,

2654 
uöt32_t
 
blockSize
);

2664 
¨m_abs_q31
(

2665 
q31_t
 * 
pSrc
,

2666 
q31_t
 * 
pD°
,

2667 
uöt32_t
 
blockSize
);

2678 
¨m_dŸ_¥od_f32
(

2679 
Êﬂt32_t
 * 
pSrcA
,

2680 
Êﬂt32_t
 * 
pSrcB
,

2681 
uöt32_t
 
blockSize
,

2682 
Êﬂt32_t
 * 
ªsu…
);

2693 
¨m_dŸ_¥od_q7
(

2694 
q7_t
 * 
pSrcA
,

2695 
q7_t
 * 
pSrcB
,

2696 
uöt32_t
 
blockSize
,

2697 
q31_t
 * 
ªsu…
);

2708 
¨m_dŸ_¥od_q15
(

2709 
q15_t
 * 
pSrcA
,

2710 
q15_t
 * 
pSrcB
,

2711 
uöt32_t
 
blockSize
,

2712 
q63_t
 * 
ªsu…
);

2723 
¨m_dŸ_¥od_q31
(

2724 
q31_t
 * 
pSrcA
,

2725 
q31_t
 * 
pSrcB
,

2726 
uöt32_t
 
blockSize
,

2727 
q63_t
 * 
ªsu…
);

2738 
¨m_shi·_q7
(

2739 
q7_t
 * 
pSrc
,

2740 
öt8_t
 
shi·Bôs
,

2741 
q7_t
 * 
pD°
,

2742 
uöt32_t
 
blockSize
);

2753 
¨m_shi·_q15
(

2754 
q15_t
 * 
pSrc
,

2755 
öt8_t
 
shi·Bôs
,

2756 
q15_t
 * 
pD°
,

2757 
uöt32_t
 
blockSize
);

2768 
¨m_shi·_q31
(

2769 
q31_t
 * 
pSrc
,

2770 
öt8_t
 
shi·Bôs
,

2771 
q31_t
 * 
pD°
,

2772 
uöt32_t
 
blockSize
);

2783 
¨m_off£t_f32
(

2784 
Êﬂt32_t
 * 
pSrc
,

2785 
Êﬂt32_t
 
off£t
,

2786 
Êﬂt32_t
 * 
pD°
,

2787 
uöt32_t
 
blockSize
);

2798 
¨m_off£t_q7
(

2799 
q7_t
 * 
pSrc
,

2800 
q7_t
 
off£t
,

2801 
q7_t
 * 
pD°
,

2802 
uöt32_t
 
blockSize
);

2813 
¨m_off£t_q15
(

2814 
q15_t
 * 
pSrc
,

2815 
q15_t
 
off£t
,

2816 
q15_t
 * 
pD°
,

2817 
uöt32_t
 
blockSize
);

2828 
¨m_off£t_q31
(

2829 
q31_t
 * 
pSrc
,

2830 
q31_t
 
off£t
,

2831 
q31_t
 * 
pD°
,

2832 
uöt32_t
 
blockSize
);

2842 
¨m_√g©e_f32
(

2843 
Êﬂt32_t
 * 
pSrc
,

2844 
Êﬂt32_t
 * 
pD°
,

2845 
uöt32_t
 
blockSize
);

2855 
¨m_√g©e_q7
(

2856 
q7_t
 * 
pSrc
,

2857 
q7_t
 * 
pD°
,

2858 
uöt32_t
 
blockSize
);

2868 
¨m_√g©e_q15
(

2869 
q15_t
 * 
pSrc
,

2870 
q15_t
 * 
pD°
,

2871 
uöt32_t
 
blockSize
);

2881 
¨m_√g©e_q31
(

2882 
q31_t
 * 
pSrc
,

2883 
q31_t
 * 
pD°
,

2884 
uöt32_t
 
blockSize
);

2892 
¨m_c›y_f32
(

2893 
Êﬂt32_t
 * 
pSrc
,

2894 
Êﬂt32_t
 * 
pD°
,

2895 
uöt32_t
 
blockSize
);

2904 
¨m_c›y_q7
(

2905 
q7_t
 * 
pSrc
,

2906 
q7_t
 * 
pD°
,

2907 
uöt32_t
 
blockSize
);

2916 
¨m_c›y_q15
(

2917 
q15_t
 * 
pSrc
,

2918 
q15_t
 * 
pD°
,

2919 
uöt32_t
 
blockSize
);

2928 
¨m_c›y_q31
(

2929 
q31_t
 * 
pSrc
,

2930 
q31_t
 * 
pD°
,

2931 
uöt32_t
 
blockSize
);

2939 
¨m_fûl_f32
(

2940 
Êﬂt32_t
 
vÆue
,

2941 
Êﬂt32_t
 * 
pD°
,

2942 
uöt32_t
 
blockSize
);

2951 
¨m_fûl_q7
(

2952 
q7_t
 
vÆue
,

2953 
q7_t
 * 
pD°
,

2954 
uöt32_t
 
blockSize
);

2963 
¨m_fûl_q15
(

2964 
q15_t
 
vÆue
,

2965 
q15_t
 * 
pD°
,

2966 
uöt32_t
 
blockSize
);

2975 
¨m_fûl_q31
(

2976 
q31_t
 
vÆue
,

2977 
q31_t
 * 
pD°
,

2978 
uöt32_t
 
blockSize
);

2990 
¨m_c⁄v_f32
(

2991 
Êﬂt32_t
 * 
pSrcA
,

2992 
uöt32_t
 
§cALí
,

2993 
Êﬂt32_t
 * 
pSrcB
,

2994 
uöt32_t
 
§cBLí
,

2995 
Êﬂt32_t
 * 
pD°
);

3007 
¨m_c⁄v_q15
(

3008 
q15_t
 * 
pSrcA
,

3009 
uöt32_t
 
§cALí
,

3010 
q15_t
 * 
pSrcB
,

3011 
uöt32_t
 
§cBLí
,

3012 
q15_t
 * 
pD°
);

3024 
¨m_c⁄v_Á°_q15
(

3025 
q15_t
 * 
pSrcA
,

3026 
uöt32_t
 
§cALí
,

3027 
q15_t
 * 
pSrcB
,

3028 
uöt32_t
 
§cBLí
,

3029 
q15_t
 * 
pD°
);

3041 
¨m_c⁄v_q31
(

3042 
q31_t
 * 
pSrcA
,

3043 
uöt32_t
 
§cALí
,

3044 
q31_t
 * 
pSrcB
,

3045 
uöt32_t
 
§cBLí
,

3046 
q31_t
 * 
pD°
);

3058 
¨m_c⁄v_Á°_q31
(

3059 
q31_t
 * 
pSrcA
,

3060 
uöt32_t
 
§cALí
,

3061 
q31_t
 * 
pSrcB
,

3062 
uöt32_t
 
§cBLí
,

3063 
q31_t
 * 
pD°
);

3075 
¨m_c⁄v_q7
(

3076 
q7_t
 * 
pSrcA
,

3077 
uöt32_t
 
§cALí
,

3078 
q7_t
 * 
pSrcB
,

3079 
uöt32_t
 
§cBLí
,

3080 
q7_t
 * 
pD°
);

3094 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3095 
Êﬂt32_t
 * 
pSrcA
,

3096 
uöt32_t
 
§cALí
,

3097 
Êﬂt32_t
 * 
pSrcB
,

3098 
uöt32_t
 
§cBLí
,

3099 
Êﬂt32_t
 * 
pD°
,

3100 
uöt32_t
 
fú°Index
,

3101 
uöt32_t
 
numPoöts
);

3115 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3116 
q15_t
 * 
pSrcA
,

3117 
uöt32_t
 
§cALí
,

3118 
q15_t
 * 
pSrcB
,

3119 
uöt32_t
 
§cBLí
,

3120 
q15_t
 * 
pD°
,

3121 
uöt32_t
 
fú°Index
,

3122 
uöt32_t
 
numPoöts
);

3136 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3137 
q15_t
 * 
pSrcA
,

3138 
uöt32_t
 
§cALí
,

3139 
q15_t
 * 
pSrcB
,

3140 
uöt32_t
 
§cBLí
,

3141 
q15_t
 * 
pD°
,

3142 
uöt32_t
 
fú°Index
,

3143 
uöt32_t
 
numPoöts
);

3157 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3158 
q31_t
 * 
pSrcA
,

3159 
uöt32_t
 
§cALí
,

3160 
q31_t
 * 
pSrcB
,

3161 
uöt32_t
 
§cBLí
,

3162 
q31_t
 * 
pD°
,

3163 
uöt32_t
 
fú°Index
,

3164 
uöt32_t
 
numPoöts
);

3179 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3180 
q31_t
 * 
pSrcA
,

3181 
uöt32_t
 
§cALí
,

3182 
q31_t
 * 
pSrcB
,

3183 
uöt32_t
 
§cBLí
,

3184 
q31_t
 * 
pD°
,

3185 
uöt32_t
 
fú°Index
,

3186 
uöt32_t
 
numPoöts
);

3200 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3201 
q7_t
 * 
pSrcA
,

3202 
uöt32_t
 
§cALí
,

3203 
q7_t
 * 
pSrcB
,

3204 
uöt32_t
 
§cBLí
,

3205 
q7_t
 * 
pD°
,

3206 
uöt32_t
 
fú°Index
,

3207 
uöt32_t
 
numPoöts
);

3216 
uöt8_t
 
M
;

3217 
uöt16_t
 
numT≠s
;

3218 
q15_t
 *
pC€ffs
;

3219 
q15_t
 *
pSèã
;

3220 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3228 
uöt8_t
 
M
;

3229 
uöt16_t
 
numT≠s
;

3230 
q31_t
 *
pC€ffs
;

3231 
q31_t
 *
pSèã
;

3233 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3241 
uöt8_t
 
M
;

3242 
uöt16_t
 
numT≠s
;

3243 
Êﬂt32_t
 *
pC€ffs
;

3244 
Êﬂt32_t
 *
pSèã
;

3246 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3259 
¨m_fú_decim©e_f32
(

3260 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3261 
Êﬂt32_t
 * 
pSrc
,

3262 
Êﬂt32_t
 * 
pD°
,

3263 
uöt32_t
 
blockSize
);

3278 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3279 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3280 
uöt16_t
 
numT≠s
,

3281 
uöt8_t
 
M
,

3282 
Êﬂt32_t
 * 
pC€ffs
,

3283 
Êﬂt32_t
 * 
pSèã
,

3284 
uöt32_t
 
blockSize
);

3295 
¨m_fú_decim©e_q15
(

3296 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3297 
q15_t
 * 
pSrc
,

3298 
q15_t
 * 
pD°
,

3299 
uöt32_t
 
blockSize
);

3310 
¨m_fú_decim©e_Á°_q15
(

3311 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3312 
q15_t
 * 
pSrc
,

3313 
q15_t
 * 
pD°
,

3314 
uöt32_t
 
blockSize
);

3330 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3331 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3332 
uöt16_t
 
numT≠s
,

3333 
uöt8_t
 
M
,

3334 
q15_t
 * 
pC€ffs
,

3335 
q15_t
 * 
pSèã
,

3336 
uöt32_t
 
blockSize
);

3347 
¨m_fú_decim©e_q31
(

3348 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3349 
q31_t
 * 
pSrc
,

3350 
q31_t
 * 
pD°
,

3351 
uöt32_t
 
blockSize
);

3362 
¨m_fú_decim©e_Á°_q31
(

3363 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3364 
q31_t
 * 
pSrc
,

3365 
q31_t
 * 
pD°
,

3366 
uöt32_t
 
blockSize
);

3381 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3382 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3383 
uöt16_t
 
numT≠s
,

3384 
uöt8_t
 
M
,

3385 
q31_t
 * 
pC€ffs
,

3386 
q31_t
 * 
pSèã
,

3387 
uöt32_t
 
blockSize
);

3397 
uöt8_t
 
L
;

3398 
uöt16_t
 
pha£Lígth
;

3399 
q15_t
 *
pC€ffs
;

3400 
q15_t
 *
pSèã
;

3401 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3409 
uöt8_t
 
L
;

3410 
uöt16_t
 
pha£Lígth
;

3411 
q31_t
 *
pC€ffs
;

3412 
q31_t
 *
pSèã
;

3413 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3421 
uöt8_t
 
L
;

3422 
uöt16_t
 
pha£Lígth
;

3423 
Êﬂt32_t
 *
pC€ffs
;

3424 
Êﬂt32_t
 *
pSèã
;

3425 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3437 
¨m_fú_öãΩﬁ©e_q15
(

3438 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3439 
q15_t
 * 
pSrc
,

3440 
q15_t
 * 
pD°
,

3441 
uöt32_t
 
blockSize
);

3456 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3457 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3458 
uöt8_t
 
L
,

3459 
uöt16_t
 
numT≠s
,

3460 
q15_t
 * 
pC€ffs
,

3461 
q15_t
 * 
pSèã
,

3462 
uöt32_t
 
blockSize
);

3473 
¨m_fú_öãΩﬁ©e_q31
(

3474 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3475 
q31_t
 * 
pSrc
,

3476 
q31_t
 * 
pD°
,

3477 
uöt32_t
 
blockSize
);

3491 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3492 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3493 
uöt8_t
 
L
,

3494 
uöt16_t
 
numT≠s
,

3495 
q31_t
 * 
pC€ffs
,

3496 
q31_t
 * 
pSèã
,

3497 
uöt32_t
 
blockSize
);

3509 
¨m_fú_öãΩﬁ©e_f32
(

3510 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3511 
Êﬂt32_t
 * 
pSrc
,

3512 
Êﬂt32_t
 * 
pD°
,

3513 
uöt32_t
 
blockSize
);

3527 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3528 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3529 
uöt8_t
 
L
,

3530 
uöt16_t
 
numT≠s
,

3531 
Êﬂt32_t
 * 
pC€ffs
,

3532 
Êﬂt32_t
 * 
pSèã
,

3533 
uöt32_t
 
blockSize
);

3541 
uöt8_t
 
numSèges
;

3542 
q63_t
 *
pSèã
;

3543 
q31_t
 *
pC€ffs
;

3544 
uöt8_t
 
po°Shi·
;

3546 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3557 
¨m_biquad_ˇs_df1_32x64_q31
(

3558 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3559 
q31_t
 * 
pSrc
,

3560 
q31_t
 * 
pD°
,

3561 
uöt32_t
 
blockSize
);

3573 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3574 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3575 
uöt8_t
 
numSèges
,

3576 
q31_t
 * 
pC€ffs
,

3577 
q63_t
 * 
pSèã
,

3578 
uöt8_t
 
po°Shi·
);

3588 
uöt8_t
 
numSèges
;

3589 
Êﬂt32_t
 *
pSèã
;

3590 
Êﬂt32_t
 *
pC€ffs
;

3591 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3603 
¨m_biquad_ˇsˇde_df2T_f32
(

3604 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3605 
Êﬂt32_t
 * 
pSrc
,

3606 
Êﬂt32_t
 * 
pD°
,

3607 
uöt32_t
 
blockSize
);

3619 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3620 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3621 
uöt8_t
 
numSèges
,

3622 
Êﬂt32_t
 * 
pC€ffs
,

3623 
Êﬂt32_t
 * 
pSèã
);

3633 
uöt16_t
 
numSèges
;

3634 
q15_t
 *
pSèã
;

3635 
q15_t
 *
pC€ffs
;

3636 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3644 
uöt16_t
 
numSèges
;

3645 
q31_t
 *
pSèã
;

3646 
q31_t
 *
pC€ffs
;

3647 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3655 
uöt16_t
 
numSèges
;

3656 
Êﬂt32_t
 *
pSèã
;

3657 
Êﬂt32_t
 *
pC€ffs
;

3658 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3669 
¨m_fú_œâi˚_öô_q15
(

3670 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3671 
uöt16_t
 
numSèges
,

3672 
q15_t
 * 
pC€ffs
,

3673 
q15_t
 * 
pSèã
);

3684 
¨m_fú_œâi˚_q15
(

3685 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3686 
q15_t
 * 
pSrc
,

3687 
q15_t
 * 
pD°
,

3688 
uöt32_t
 
blockSize
);

3699 
¨m_fú_œâi˚_öô_q31
(

3700 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3701 
uöt16_t
 
numSèges
,

3702 
q31_t
 * 
pC€ffs
,

3703 
q31_t
 * 
pSèã
);

3715 
¨m_fú_œâi˚_q31
(

3716 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3717 
q31_t
 * 
pSrc
,

3718 
q31_t
 * 
pD°
,

3719 
uöt32_t
 
blockSize
);

3730 
¨m_fú_œâi˚_öô_f32
(

3731 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3732 
uöt16_t
 
numSèges
,

3733 
Êﬂt32_t
 * 
pC€ffs
,

3734 
Êﬂt32_t
 * 
pSèã
);

3745 
¨m_fú_œâi˚_f32
(

3746 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3747 
Êﬂt32_t
 * 
pSrc
,

3748 
Êﬂt32_t
 * 
pD°
,

3749 
uöt32_t
 
blockSize
);

3756 
uöt16_t
 
numSèges
;

3757 
q15_t
 *
pSèã
;

3758 
q15_t
 *
pkC€ffs
;

3759 
q15_t
 *
pvC€ffs
;

3760 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

3767 
uöt16_t
 
numSèges
;

3768 
q31_t
 *
pSèã
;

3769 
q31_t
 *
pkC€ffs
;

3770 
q31_t
 *
pvC€ffs
;

3771 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

3778 
uöt16_t
 
numSèges
;

3779 
Êﬂt32_t
 *
pSèã
;

3780 
Êﬂt32_t
 *
pkC€ffs
;

3781 
Êﬂt32_t
 *
pvC€ffs
;

3782 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

3793 
¨m_iú_œâi˚_f32
(

3794 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3795 
Êﬂt32_t
 * 
pSrc
,

3796 
Êﬂt32_t
 * 
pD°
,

3797 
uöt32_t
 
blockSize
);

3810 
¨m_iú_œâi˚_öô_f32
(

3811 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3812 
uöt16_t
 
numSèges
,

3813 
Êﬂt32_t
 *
pkC€ffs
,

3814 
Êﬂt32_t
 *
pvC€ffs
,

3815 
Êﬂt32_t
 *
pSèã
,

3816 
uöt32_t
 
blockSize
);

3828 
¨m_iú_œâi˚_q31
(

3829 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3830 
q31_t
 * 
pSrc
,

3831 
q31_t
 * 
pD°
,

3832 
uöt32_t
 
blockSize
);

3846 
¨m_iú_œâi˚_öô_q31
(

3847 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3848 
uöt16_t
 
numSèges
,

3849 
q31_t
 *
pkC€ffs
,

3850 
q31_t
 *
pvC€ffs
,

3851 
q31_t
 *
pSèã
,

3852 
uöt32_t
 
blockSize
);

3864 
¨m_iú_œâi˚_q15
(

3865 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3866 
q15_t
 * 
pSrc
,

3867 
q15_t
 * 
pD°
,

3868 
uöt32_t
 
blockSize
);

3882 
¨m_iú_œâi˚_öô_q15
(

3883 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3884 
uöt16_t
 
numSèges
,

3885 
q15_t
 *
pkC€ffs
,

3886 
q15_t
 *
pvC€ffs
,

3887 
q15_t
 *
pSèã
,

3888 
uöt32_t
 
blockSize
);

3896 
uöt16_t
 
numT≠s
;

3897 
Êﬂt32_t
 *
pSèã
;

3898 
Êﬂt32_t
 *
pC€ffs
;

3899 
Êﬂt32_t
 
mu
;

3900 } 
	t¨m_lms_ö°™˚_f32
;

3913 
¨m_lms_f32
(

3914 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

3915 
Êﬂt32_t
 * 
pSrc
,

3916 
Êﬂt32_t
 * 
pRef
,

3917 
Êﬂt32_t
 * 
pOut
,

3918 
Êﬂt32_t
 * 
pEº
,

3919 
uöt32_t
 
blockSize
);

3932 
¨m_lms_öô_f32
(

3933 
¨m_lms_ö°™˚_f32
 * 
S
,

3934 
uöt16_t
 
numT≠s
,

3935 
Êﬂt32_t
 * 
pC€ffs
,

3936 
Êﬂt32_t
 * 
pSèã
,

3937 
Êﬂt32_t
 
mu
,

3938 
uöt32_t
 
blockSize
);

3946 
uöt16_t
 
numT≠s
;

3947 
q15_t
 *
pSèã
;

3948 
q15_t
 *
pC€ffs
;

3949 
q15_t
 
mu
;

3950 
uöt32_t
 
po°Shi·
;

3951 } 
	t¨m_lms_ö°™˚_q15
;

3966 
¨m_lms_öô_q15
(

3967 
¨m_lms_ö°™˚_q15
 * 
S
,

3968 
uöt16_t
 
numT≠s
,

3969 
q15_t
 * 
pC€ffs
,

3970 
q15_t
 * 
pSèã
,

3971 
q15_t
 
mu
,

3972 
uöt32_t
 
blockSize
,

3973 
uöt32_t
 
po°Shi·
);

3986 
¨m_lms_q15
(

3987 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

3988 
q15_t
 * 
pSrc
,

3989 
q15_t
 * 
pRef
,

3990 
q15_t
 * 
pOut
,

3991 
q15_t
 * 
pEº
,

3992 
uöt32_t
 
blockSize
);

4001 
uöt16_t
 
numT≠s
;

4002 
q31_t
 *
pSèã
;

4003 
q31_t
 *
pC€ffs
;

4004 
q31_t
 
mu
;

4005 
uöt32_t
 
po°Shi·
;

4007 } 
	t¨m_lms_ö°™˚_q31
;

4020 
¨m_lms_q31
(

4021 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4022 
q31_t
 * 
pSrc
,

4023 
q31_t
 * 
pRef
,

4024 
q31_t
 * 
pOut
,

4025 
q31_t
 * 
pEº
,

4026 
uöt32_t
 
blockSize
);

4040 
¨m_lms_öô_q31
(

4041 
¨m_lms_ö°™˚_q31
 * 
S
,

4042 
uöt16_t
 
numT≠s
,

4043 
q31_t
 *
pC€ffs
,

4044 
q31_t
 *
pSèã
,

4045 
q31_t
 
mu
,

4046 
uöt32_t
 
blockSize
,

4047 
uöt32_t
 
po°Shi·
);

4055 
uöt16_t
 
numT≠s
;

4056 
Êﬂt32_t
 *
pSèã
;

4057 
Êﬂt32_t
 *
pC€ffs
;

4058 
Êﬂt32_t
 
mu
;

4059 
Êﬂt32_t
 
íîgy
;

4060 
Êﬂt32_t
 
x0
;

4061 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4074 
¨m_lms_n‹m_f32
(

4075 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4076 
Êﬂt32_t
 * 
pSrc
,

4077 
Êﬂt32_t
 * 
pRef
,

4078 
Êﬂt32_t
 * 
pOut
,

4079 
Êﬂt32_t
 * 
pEº
,

4080 
uöt32_t
 
blockSize
);

4093 
¨m_lms_n‹m_öô_f32
(

4094 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4095 
uöt16_t
 
numT≠s
,

4096 
Êﬂt32_t
 * 
pC€ffs
,

4097 
Êﬂt32_t
 * 
pSèã
,

4098 
Êﬂt32_t
 
mu
,

4099 
uöt32_t
 
blockSize
);

4107 
uöt16_t
 
numT≠s
;

4108 
q31_t
 *
pSèã
;

4109 
q31_t
 *
pC€ffs
;

4110 
q31_t
 
mu
;

4111 
uöt8_t
 
po°Shi·
;

4112 
q31_t
 *
ªcùTabÀ
;

4113 
q31_t
 
íîgy
;

4114 
q31_t
 
x0
;

4115 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4128 
¨m_lms_n‹m_q31
(

4129 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4130 
q31_t
 * 
pSrc
,

4131 
q31_t
 * 
pRef
,

4132 
q31_t
 * 
pOut
,

4133 
q31_t
 * 
pEº
,

4134 
uöt32_t
 
blockSize
);

4148 
¨m_lms_n‹m_öô_q31
(

4149 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4150 
uöt16_t
 
numT≠s
,

4151 
q31_t
 * 
pC€ffs
,

4152 
q31_t
 * 
pSèã
,

4153 
q31_t
 
mu
,

4154 
uöt32_t
 
blockSize
,

4155 
uöt8_t
 
po°Shi·
);

4163 
uöt16_t
 
numT≠s
;

4164 
q15_t
 *
pSèã
;

4165 
q15_t
 *
pC€ffs
;

4166 
q15_t
 
mu
;

4167 
uöt8_t
 
po°Shi·
;

4168 
q15_t
 *
ªcùTabÀ
;

4169 
q15_t
 
íîgy
;

4170 
q15_t
 
x0
;

4171 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4184 
¨m_lms_n‹m_q15
(

4185 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4186 
q15_t
 * 
pSrc
,

4187 
q15_t
 * 
pRef
,

4188 
q15_t
 * 
pOut
,

4189 
q15_t
 * 
pEº
,

4190 
uöt32_t
 
blockSize
);

4205 
¨m_lms_n‹m_öô_q15
(

4206 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4207 
uöt16_t
 
numT≠s
,

4208 
q15_t
 * 
pC€ffs
,

4209 
q15_t
 * 
pSèã
,

4210 
q15_t
 
mu
,

4211 
uöt32_t
 
blockSize
,

4212 
uöt8_t
 
po°Shi·
);

4224 
¨m_c‹ªœã_f32
(

4225 
Êﬂt32_t
 * 
pSrcA
,

4226 
uöt32_t
 
§cALí
,

4227 
Êﬂt32_t
 * 
pSrcB
,

4228 
uöt32_t
 
§cBLí
,

4229 
Êﬂt32_t
 * 
pD°
);

4241 
¨m_c‹ªœã_q15
(

4242 
q15_t
 * 
pSrcA
,

4243 
uöt32_t
 
§cALí
,

4244 
q15_t
 * 
pSrcB
,

4245 
uöt32_t
 
§cBLí
,

4246 
q15_t
 * 
pD°
);

4258 
¨m_c‹ªœã_Á°_q15
(

4259 
q15_t
 * 
pSrcA
,

4260 
uöt32_t
 
§cALí
,

4261 
q15_t
 * 
pSrcB
,

4262 
uöt32_t
 
§cBLí
,

4263 
q15_t
 * 
pD°
);

4275 
¨m_c‹ªœã_q31
(

4276 
q31_t
 * 
pSrcA
,

4277 
uöt32_t
 
§cALí
,

4278 
q31_t
 * 
pSrcB
,

4279 
uöt32_t
 
§cBLí
,

4280 
q31_t
 * 
pD°
);

4292 
¨m_c‹ªœã_Á°_q31
(

4293 
q31_t
 * 
pSrcA
,

4294 
uöt32_t
 
§cALí
,

4295 
q31_t
 * 
pSrcB
,

4296 
uöt32_t
 
§cBLí
,

4297 
q31_t
 * 
pD°
);

4309 
¨m_c‹ªœã_q7
(

4310 
q7_t
 * 
pSrcA
,

4311 
uöt32_t
 
§cALí
,

4312 
q7_t
 * 
pSrcB
,

4313 
uöt32_t
 
§cBLí
,

4314 
q7_t
 * 
pD°
);

4321 
uöt16_t
 
numT≠s
;

4322 
uöt16_t
 
°©eIndex
;

4323 
Êﬂt32_t
 *
pSèã
;

4324 
Êﬂt32_t
 *
pC€ffs
;

4325 
uöt16_t
 
maxDñay
;

4326 
öt32_t
 *
pT≠Dñay
;

4327 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4335 
uöt16_t
 
numT≠s
;

4336 
uöt16_t
 
°©eIndex
;

4337 
q31_t
 *
pSèã
;

4338 
q31_t
 *
pC€ffs
;

4339 
uöt16_t
 
maxDñay
;

4340 
öt32_t
 *
pT≠Dñay
;

4341 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4349 
uöt16_t
 
numT≠s
;

4350 
uöt16_t
 
°©eIndex
;

4351 
q15_t
 *
pSèã
;

4352 
q15_t
 *
pC€ffs
;

4353 
uöt16_t
 
maxDñay
;

4354 
öt32_t
 *
pT≠Dñay
;

4355 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4363 
uöt16_t
 
numT≠s
;

4364 
uöt16_t
 
°©eIndex
;

4365 
q7_t
 *
pSèã
;

4366 
q7_t
 *
pC€ffs
;

4367 
uöt16_t
 
maxDñay
;

4368 
öt32_t
 *
pT≠Dñay
;

4369 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4381 
¨m_fú_•¨£_f32
(

4382 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4383 
Êﬂt32_t
 * 
pSrc
,

4384 
Êﬂt32_t
 * 
pD°
,

4385 
Êﬂt32_t
 * 
pS¸©chIn
,

4386 
uöt32_t
 
blockSize
);

4400 
¨m_fú_•¨£_öô_f32
(

4401 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4402 
uöt16_t
 
numT≠s
,

4403 
Êﬂt32_t
 * 
pC€ffs
,

4404 
Êﬂt32_t
 * 
pSèã
,

4405 
öt32_t
 * 
pT≠Dñay
,

4406 
uöt16_t
 
maxDñay
,

4407 
uöt32_t
 
blockSize
);

4419 
¨m_fú_•¨£_q31
(

4420 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4421 
q31_t
 * 
pSrc
,

4422 
q31_t
 * 
pD°
,

4423 
q31_t
 * 
pS¸©chIn
,

4424 
uöt32_t
 
blockSize
);

4438 
¨m_fú_•¨£_öô_q31
(

4439 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4440 
uöt16_t
 
numT≠s
,

4441 
q31_t
 * 
pC€ffs
,

4442 
q31_t
 * 
pSèã
,

4443 
öt32_t
 * 
pT≠Dñay
,

4444 
uöt16_t
 
maxDñay
,

4445 
uöt32_t
 
blockSize
);

4458 
¨m_fú_•¨£_q15
(

4459 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4460 
q15_t
 * 
pSrc
,

4461 
q15_t
 * 
pD°
,

4462 
q15_t
 * 
pS¸©chIn
,

4463 
q31_t
 * 
pS¸©chOut
,

4464 
uöt32_t
 
blockSize
);

4479 
¨m_fú_•¨£_öô_q15
(

4480 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4481 
uöt16_t
 
numT≠s
,

4482 
q15_t
 * 
pC€ffs
,

4483 
q15_t
 * 
pSèã
,

4484 
öt32_t
 * 
pT≠Dñay
,

4485 
uöt16_t
 
maxDñay
,

4486 
uöt32_t
 
blockSize
);

4499 
¨m_fú_•¨£_q7
(

4500 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4501 
q7_t
 * 
pSrc
,

4502 
q7_t
 * 
pD°
,

4503 
q7_t
 * 
pS¸©chIn
,

4504 
q31_t
 * 
pS¸©chOut
,

4505 
uöt32_t
 
blockSize
);

4519 
¨m_fú_•¨£_öô_q7
(

4520 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4521 
uöt16_t
 
numT≠s
,

4522 
q7_t
 * 
pC€ffs
,

4523 
q7_t
 * 
pSèã
,

4524 
öt32_t
 *
pT≠Dñay
,

4525 
uöt16_t
 
maxDñay
,

4526 
uöt32_t
 
blockSize
);

4537 
¨m_sö_cos_f32
(

4538 
Êﬂt32_t
 
thëa
,

4539 
Êﬂt32_t
 *
pSöVÆ
,

4540 
Êﬂt32_t
 *
pCcosVÆ
);

4550 
¨m_sö_cos_q31
(

4551 
q31_t
 
thëa
,

4552 
q31_t
 *
pSöVÆ
,

4553 
q31_t
 *
pCosVÆ
);

4564 
¨m_cm∂x_c⁄j_f32
(

4565 
Êﬂt32_t
 * 
pSrc
,

4566 
Êﬂt32_t
 * 
pD°
,

4567 
uöt32_t
 
numSam∂es
);

4577 
¨m_cm∂x_c⁄j_q31
(

4578 
q31_t
 * 
pSrc
,

4579 
q31_t
 * 
pD°
,

4580 
uöt32_t
 
numSam∂es
);

4590 
¨m_cm∂x_c⁄j_q15
(

4591 
q15_t
 * 
pSrc
,

4592 
q15_t
 * 
pD°
,

4593 
uöt32_t
 
numSam∂es
);

4605 
¨m_cm∂x_mag_squ¨ed_f32
(

4606 
Êﬂt32_t
 * 
pSrc
,

4607 
Êﬂt32_t
 * 
pD°
,

4608 
uöt32_t
 
numSam∂es
);

4618 
¨m_cm∂x_mag_squ¨ed_q31
(

4619 
q31_t
 * 
pSrc
,

4620 
q31_t
 * 
pD°
,

4621 
uöt32_t
 
numSam∂es
);

4631 
¨m_cm∂x_mag_squ¨ed_q15
(

4632 
q15_t
 * 
pSrc
,

4633 
q15_t
 * 
pD°
,

4634 
uöt32_t
 
numSam∂es
);

4711 
__INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

4712 
¨m_pid_ö°™˚_f32
 * 
S
,

4713 
Êﬂt32_t
 
ö
)

4715 
Êﬂt32_t
 
out
;

4718 
out
 = (
S
->
A0
 * 
ö
) +

4719 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

4722 
S
->
°©e
[1] = S->state[0];

4723 
S
->
°©e
[0] = 
ö
;

4724 
S
->
°©e
[2] = 
out
;

4727  (
out
);

4746 
__INLINE
 
q31_t
 
¨m_pid_q31
(

4747 
¨m_pid_ö°™˚_q31
 * 
S
,

4748 
q31_t
 
ö
)

4750 
q63_t
 
acc
;

4751 
q31_t
 
out
;

4754 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

4757 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

4760 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

4763 
out
 = (
q31_t
Ë(
acc
 >> 31u);

4766 
out
 +
S
->
°©e
[2];

4769 
S
->
°©e
[1] = S->state[0];

4770 
S
->
°©e
[0] = 
ö
;

4771 
S
->
°©e
[2] = 
out
;

4774  (
out
);

4794 
__INLINE
 
q15_t
 
¨m_pid_q15
(

4795 
¨m_pid_ö°™˚_q15
 * 
S
,

4796 
q15_t
 
ö
)

4798 
q63_t
 
acc
;

4799 
q15_t
 
out
;

4803 #ifde‡
ARM_MATH_CM0


4806 
acc
 = ((
q31_t
Ë
S
->
A0
 )* 
ö
 ;

4811 
acc
 = (
q31_t
Ë
__SMUAD
(
S
->
A0
, 
ö
);

4815 #ifde‡
ARM_MATH_CM0


4818 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0] ;

4819 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1] ;

4824 
acc
 = 
__SMLALD
(
S
->
A1
, (
q31_t
)
__SIMD32
(S->
°©e
),ácc);

4829 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

4832 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

4835 
S
->
°©e
[1] = S->state[0];

4836 
S
->
°©e
[0] = 
ö
;

4837 
S
->
°©e
[2] = 
out
;

4840  (
out
);

4857 
¨m_°©us
 
¨m_m©_övî£_f32
(

4858 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

4859 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

4905 
__INLINE
 
¨m_˛¨ke_f32
(

4906 
Êﬂt32_t
 
Ia
,

4907 
Êﬂt32_t
 
Ib
,

4908 
Êﬂt32_t
 * 
pIÆpha
,

4909 
Êﬂt32_t
 * 
pIbëa
)

4912 *
pIÆpha
 = 
Ia
;

4915 *
pIbëa
 = ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

4934 
__INLINE
 
¨m_˛¨ke_q31
(

4935 
q31_t
 
Ia
,

4936 
q31_t
 
Ib
,

4937 
q31_t
 * 
pIÆpha
,

4938 
q31_t
 * 
pIbëa
)

4940 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

4943 *
pIÆpha
 = 
Ia
;

4946 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

4949 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

4952 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

4966 
¨m_q7_to_q31
(

4967 
q7_t
 * 
pSrc
,

4968 
q31_t
 * 
pD°
,

4969 
uöt32_t
 
blockSize
);

5009 
__INLINE
 
¨m_öv_˛¨ke_f32
(

5010 
Êﬂt32_t
 
IÆpha
,

5011 
Êﬂt32_t
 
Ibëa
,

5012 
Êﬂt32_t
 * 
pIa
,

5013 
Êﬂt32_t
 * 
pIb
)

5016 *
pIa
 = 
IÆpha
;

5019 *
pIb
 = -0.5 * 
IÆpha
 + (
Êﬂt32_t
Ë0.8660254039 *
Ibëa
;

5038 
__INLINE
 
¨m_öv_˛¨ke_q31
(

5039 
q31_t
 
IÆpha
,

5040 
q31_t
 
Ibëa
,

5041 
q31_t
 * 
pIa
,

5042 
q31_t
 * 
pIb
)

5044 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5047 *
pIa
 = 
IÆpha
;

5050 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5053 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5056 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5071 
¨m_q7_to_q15
(

5072 
q7_t
 * 
pSrc
,

5073 
q15_t
 * 
pD°
,

5074 
uöt32_t
 
blockSize
);

5125 
__INLINE
 
¨m_∑rk_f32
(

5126 
Êﬂt32_t
 
IÆpha
,

5127 
Êﬂt32_t
 
Ibëa
,

5128 
Êﬂt32_t
 * 
pId
,

5129 
Êﬂt32_t
 * 
pIq
,

5130 
Êﬂt32_t
 
söVÆ
,

5131 
Êﬂt32_t
 
cosVÆ
)

5134 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5137 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5159 
__INLINE
 
¨m_∑rk_q31
(

5160 
q31_t
 
IÆpha
,

5161 
q31_t
 
Ibëa
,

5162 
q31_t
 * 
pId
,

5163 
q31_t
 * 
pIq
,

5164 
q31_t
 
söVÆ
,

5165 
q31_t
 
cosVÆ
)

5167 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5168 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5171 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5174 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5178 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5181 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5184 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5187 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5201 
¨m_q7_to_Êﬂt
(

5202 
q7_t
 * 
pSrc
,

5203 
Êﬂt32_t
 * 
pD°
,

5204 
uöt32_t
 
blockSize
);

5244 
__INLINE
 
¨m_öv_∑rk_f32
(

5245 
Êﬂt32_t
 
Id
,

5246 
Êﬂt32_t
 
Iq
,

5247 
Êﬂt32_t
 * 
pIÆpha
,

5248 
Êﬂt32_t
 * 
pIbëa
,

5249 
Êﬂt32_t
 
söVÆ
,

5250 
Êﬂt32_t
 
cosVÆ
)

5253 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5256 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5279 
__INLINE
 
¨m_öv_∑rk_q31
(

5280 
q31_t
 
Id
,

5281 
q31_t
 
Iq
,

5282 
q31_t
 * 
pIÆpha
,

5283 
q31_t
 * 
pIbëa
,

5284 
q31_t
 
söVÆ
,

5285 
q31_t
 
cosVÆ
)

5287 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5288 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5291 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5294 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5298 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5301 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5304 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5307 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5323 
¨m_q31_to_Êﬂt
(

5324 
q31_t
 * 
pSrc
,

5325 
Êﬂt32_t
 * 
pD°
,

5326 
uöt32_t
 
blockSize
);

5377 
__INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5378 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5379 
Êﬂt32_t
 
x
)

5382 
Êﬂt32_t
 
y
;

5383 
Êﬂt32_t
 
x0
, 
x1
;

5384 
Êﬂt32_t
 
y0
, 
y1
;

5385 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5386 
öt32_t
 
i
;

5387 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5390 
i
 = (
x
 - 
S
->
x1
Ë/ 
xS∑cög
;

5392 if(
i
 < 0)

5395 
y
 = 
pYD©a
[0];

5397 if(
i
 >
S
->
nVÆues
)

5400 
y
 = 
pYD©a
[
S
->
nVÆues
-1];

5405 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5406 
x1
 = 
S
->x1 + (
i
 +1Ë* 
xS∑cög
;

5409 
y0
 = 
pYD©a
[
i
];

5410 
y1
 = 
pYD©a
[
i
 + 1];

5413 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0)/(
x1
-x0));

5418  (
y
);

5436 
__INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(q31_à*
pYD©a
,

5437 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5439 
q31_t
 
y
;

5440 
q31_t
 
y0
, 
y1
;

5441 
q31_t
 
‰a˘
;

5442 
öt32_t
 
ödex
;

5447 
ödex
 = ((
x
 & 0xFFF00000) >> 20);

5449 if(
ödex
 >(
nVÆues
 - 1))

5451 (
pYD©a
[
nVÆues
 - 1]);

5453 if(
ödex
 < 0)

5455 (
pYD©a
[0]);

5462 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5465 
y0
 = 
pYD©a
[
ödex
];

5466 
y1
 = 
pYD©a
[
ödex
 + 1u];

5469 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5472 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5475  (
y
 << 1u);

5496 
__INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(q15_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5498 
q63_t
 
y
;

5499 
q15_t
 
y0
, 
y1
;

5500 
q31_t
 
‰a˘
;

5501 
öt32_t
 
ödex
;

5506 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5508 if(
ödex
 >(
nVÆues
 - 1))

5510 (
pYD©a
[
nVÆues
 - 1]);

5512 if(
ödex
 < 0)

5514 (
pYD©a
[0]);

5520 
‰a˘
 = (
x
 & 0x000FFFFF);

5523 
y0
 = 
pYD©a
[
ödex
];

5524 
y1
 = 
pYD©a
[
ödex
 + 1u];

5527 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5530 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5533  (
y
 >> 20);

5553 
__INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(q7_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5555 
q31_t
 
y
;

5556 
q7_t
 
y0
, 
y1
;

5557 
q31_t
 
‰a˘
;

5558 
öt32_t
 
ödex
;

5563 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5566 if(
ödex
 >(
nVÆues
 - 1))

5568 (
pYD©a
[
nVÆues
 - 1]);

5570 if(
ödex
 < 0)

5572 (
pYD©a
[0]);

5579 
‰a˘
 = (
x
 & 0x000FFFFF);

5582 
y0
 = 
pYD©a
[
ödex
];

5583 
y1
 = 
pYD©a
[
ödex
 + 1u];

5586 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5589 
y
 +(
y1
 * 
‰a˘
);

5592  (
y
 >> 20u);

5607 
Êﬂt32_t
 
¨m_sö_f32
(

5608 
Êﬂt32_t
 
x
);

5616 
q31_t
 
¨m_sö_q31
(

5617 
q31_t
 
x
);

5625 
q15_t
 
¨m_sö_q15
(

5626 
q15_t
 
x
);

5634 
Êﬂt32_t
 
¨m_cos_f32
(

5635 
Êﬂt32_t
 
x
);

5643 
q31_t
 
¨m_cos_q31
(

5644 
q31_t
 
x
);

5652 
q15_t
 
¨m_cos_q15
(

5653 
q15_t
 
x
);

5695 
__INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

5696 
Êﬂt32_t
 
ö
, flﬂt32_à*
pOut
)

5698 if(
ö
 > 0)

5702 #i‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

5703 *
pOut
 = 
__sqπf
(
ö
);

5705 *
pOut
 = 
sqπf
(
ö
);

5708  (
ARM_MATH_SUCCESS
);

5712 *
pOut
 = 0.0f;

5713  (
ARM_MATH_ARGUMENT_ERROR
);

5726 
¨m_°©us
 
¨m_sqπ_q31
(

5727 
q31_t
 
ö
, q31_à*
pOut
);

5736 
¨m_°©us
 
¨m_sqπ_q15
(

5737 
q15_t
 
ö
, q15_à*
pOut
);

5752 
__INLINE
 
¨m_cúcuœrWrôe_f32
(

5753 
öt32_t
 * 
cúcBuf„r
,

5754 
öt32_t
 
L
,

5755 
uöt16_t
 * 
wrôeOff£t
,

5756 
öt32_t
 
buf„rInc
,

5757 c⁄° 
öt32_t
 * 
§c
,

5758 
öt32_t
 
§cInc
,

5759 
uöt32_t
 
blockSize
)

5761 
uöt32_t
 
i
 = 0u;

5762 
öt32_t
 
wOff£t
;

5766 
wOff£t
 = *
wrôeOff£t
;

5769 
i
 = 
blockSize
;

5771 
i
 > 0u)

5774 
cúcBuf„r
[
wOff£t
] = *
§c
;

5777 
§c
 +
§cInc
;

5780 
wOff£t
 +
buf„rInc
;

5781 if(
wOff£t
 >
L
)

5782 
wOff£t
 -
L
;

5785 
i
--;

5789 *
wrôeOff£t
 = 
wOff£t
;

5797 
__INLINE
 
¨m_cúcuœrRód_f32
(

5798 
öt32_t
 * 
cúcBuf„r
,

5799 
öt32_t
 
L
,

5800 
öt32_t
 * 
ªadOff£t
,

5801 
öt32_t
 
buf„rInc
,

5802 
öt32_t
 * 
d°
,

5803 
öt32_t
 * 
d°_ba£
,

5804 
öt32_t
 
d°_Àngth
,

5805 
öt32_t
 
d°Inc
,

5806 
uöt32_t
 
blockSize
)

5808 
uöt32_t
 
i
 = 0u;

5809 
öt32_t
 
rOff£t
, 
d°_íd
;

5813 
rOff£t
 = *
ªadOff£t
;

5814 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5817 
i
 = 
blockSize
;

5819 
i
 > 0u)

5822 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5825 
d°
 +
d°Inc
;

5827 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

5829 
d°
 = 
d°_ba£
;

5833 
rOff£t
 +
buf„rInc
;

5835 if(
rOff£t
 >
L
)

5837 
rOff£t
 -
L
;

5841 
i
--;

5845 *
ªadOff£t
 = 
rOff£t
;

5852 
__INLINE
 
¨m_cúcuœrWrôe_q15
(

5853 
q15_t
 * 
cúcBuf„r
,

5854 
öt32_t
 
L
,

5855 
uöt16_t
 * 
wrôeOff£t
,

5856 
öt32_t
 
buf„rInc
,

5857 c⁄° 
q15_t
 * 
§c
,

5858 
öt32_t
 
§cInc
,

5859 
uöt32_t
 
blockSize
)

5861 
uöt32_t
 
i
 = 0u;

5862 
öt32_t
 
wOff£t
;

5866 
wOff£t
 = *
wrôeOff£t
;

5869 
i
 = 
blockSize
;

5871 
i
 > 0u)

5874 
cúcBuf„r
[
wOff£t
] = *
§c
;

5877 
§c
 +
§cInc
;

5880 
wOff£t
 +
buf„rInc
;

5881 if(
wOff£t
 >
L
)

5882 
wOff£t
 -
L
;

5885 
i
--;

5889 *
wrôeOff£t
 = 
wOff£t
;

5897 
__INLINE
 
¨m_cúcuœrRód_q15
(

5898 
q15_t
 * 
cúcBuf„r
,

5899 
öt32_t
 
L
,

5900 
öt32_t
 * 
ªadOff£t
,

5901 
öt32_t
 
buf„rInc
,

5902 
q15_t
 * 
d°
,

5903 
q15_t
 * 
d°_ba£
,

5904 
öt32_t
 
d°_Àngth
,

5905 
öt32_t
 
d°Inc
,

5906 
uöt32_t
 
blockSize
)

5908 
uöt32_t
 
i
 = 0;

5909 
öt32_t
 
rOff£t
, 
d°_íd
;

5913 
rOff£t
 = *
ªadOff£t
;

5915 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5918 
i
 = 
blockSize
;

5920 
i
 > 0u)

5923 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5926 
d°
 +
d°Inc
;

5928 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

5930 
d°
 = 
d°_ba£
;

5934 
rOff£t
 +
buf„rInc
;

5936 if(
rOff£t
 >
L
)

5938 
rOff£t
 -
L
;

5942 
i
--;

5946 *
ªadOff£t
 = 
rOff£t
;

5954 
__INLINE
 
¨m_cúcuœrWrôe_q7
(

5955 
q7_t
 * 
cúcBuf„r
,

5956 
öt32_t
 
L
,

5957 
uöt16_t
 * 
wrôeOff£t
,

5958 
öt32_t
 
buf„rInc
,

5959 c⁄° 
q7_t
 * 
§c
,

5960 
öt32_t
 
§cInc
,

5961 
uöt32_t
 
blockSize
)

5963 
uöt32_t
 
i
 = 0u;

5964 
öt32_t
 
wOff£t
;

5968 
wOff£t
 = *
wrôeOff£t
;

5971 
i
 = 
blockSize
;

5973 
i
 > 0u)

5976 
cúcBuf„r
[
wOff£t
] = *
§c
;

5979 
§c
 +
§cInc
;

5982 
wOff£t
 +
buf„rInc
;

5983 if(
wOff£t
 >
L
)

5984 
wOff£t
 -
L
;

5987 
i
--;

5991 *
wrôeOff£t
 = 
wOff£t
;

5999 
__INLINE
 
¨m_cúcuœrRód_q7
(

6000 
q7_t
 * 
cúcBuf„r
,

6001 
öt32_t
 
L
,

6002 
öt32_t
 * 
ªadOff£t
,

6003 
öt32_t
 
buf„rInc
,

6004 
q7_t
 * 
d°
,

6005 
q7_t
 * 
d°_ba£
,

6006 
öt32_t
 
d°_Àngth
,

6007 
öt32_t
 
d°Inc
,

6008 
uöt32_t
 
blockSize
)

6010 
uöt32_t
 
i
 = 0;

6011 
öt32_t
 
rOff£t
, 
d°_íd
;

6015 
rOff£t
 = *
ªadOff£t
;

6017 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6020 
i
 = 
blockSize
;

6022 
i
 > 0u)

6025 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6028 
d°
 +
d°Inc
;

6030 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6032 
d°
 = 
d°_ba£
;

6036 
rOff£t
 +
buf„rInc
;

6038 if(
rOff£t
 >
L
)

6040 
rOff£t
 -
L
;

6044 
i
--;

6048 *
ªadOff£t
 = 
rOff£t
;

6060 
¨m_powî_q31
(

6061 
q31_t
 * 
pSrc
,

6062 
uöt32_t
 
blockSize
,

6063 
q63_t
 * 
pResu…
);

6073 
¨m_powî_f32
(

6074 
Êﬂt32_t
 * 
pSrc
,

6075 
uöt32_t
 
blockSize
,

6076 
Êﬂt32_t
 * 
pResu…
);

6086 
¨m_powî_q15
(

6087 
q15_t
 * 
pSrc
,

6088 
uöt32_t
 
blockSize
,

6089 
q63_t
 * 
pResu…
);

6099 
¨m_powî_q7
(

6100 
q7_t
 * 
pSrc
,

6101 
uöt32_t
 
blockSize
,

6102 
q31_t
 * 
pResu…
);

6112 
¨m_món_q7
(

6113 
q7_t
 * 
pSrc
,

6114 
uöt32_t
 
blockSize
,

6115 
q7_t
 * 
pResu…
);

6124 
¨m_món_q15
(

6125 
q15_t
 * 
pSrc
,

6126 
uöt32_t
 
blockSize
,

6127 
q15_t
 * 
pResu…
);

6136 
¨m_món_q31
(

6137 
q31_t
 * 
pSrc
,

6138 
uöt32_t
 
blockSize
,

6139 
q31_t
 * 
pResu…
);

6148 
¨m_món_f32
(

6149 
Êﬂt32_t
 * 
pSrc
,

6150 
uöt32_t
 
blockSize
,

6151 
Êﬂt32_t
 * 
pResu…
);

6161 
¨m_v¨_f32
(

6162 
Êﬂt32_t
 * 
pSrc
,

6163 
uöt32_t
 
blockSize
,

6164 
Êﬂt32_t
 * 
pResu…
);

6174 
¨m_v¨_q31
(

6175 
q31_t
 * 
pSrc
,

6176 
uöt32_t
 
blockSize
,

6177 
q63_t
 * 
pResu…
);

6187 
¨m_v¨_q15
(

6188 
q15_t
 * 
pSrc
,

6189 
uöt32_t
 
blockSize
,

6190 
q31_t
 * 
pResu…
);

6200 
¨m_rms_f32
(

6201 
Êﬂt32_t
 * 
pSrc
,

6202 
uöt32_t
 
blockSize
,

6203 
Êﬂt32_t
 * 
pResu…
);

6213 
¨m_rms_q31
(

6214 
q31_t
 * 
pSrc
,

6215 
uöt32_t
 
blockSize
,

6216 
q31_t
 * 
pResu…
);

6226 
¨m_rms_q15
(

6227 
q15_t
 * 
pSrc
,

6228 
uöt32_t
 
blockSize
,

6229 
q15_t
 * 
pResu…
);

6239 
¨m_°d_f32
(

6240 
Êﬂt32_t
 * 
pSrc
,

6241 
uöt32_t
 
blockSize
,

6242 
Êﬂt32_t
 * 
pResu…
);

6252 
¨m_°d_q31
(

6253 
q31_t
 * 
pSrc
,

6254 
uöt32_t
 
blockSize
,

6255 
q31_t
 * 
pResu…
);

6265 
¨m_°d_q15
(

6266 
q15_t
 * 
pSrc
,

6267 
uöt32_t
 
blockSize
,

6268 
q15_t
 * 
pResu…
);

6278 
¨m_cm∂x_mag_f32
(

6279 
Êﬂt32_t
 * 
pSrc
,

6280 
Êﬂt32_t
 * 
pD°
,

6281 
uöt32_t
 
numSam∂es
);

6291 
¨m_cm∂x_mag_q31
(

6292 
q31_t
 * 
pSrc
,

6293 
q31_t
 * 
pD°
,

6294 
uöt32_t
 
numSam∂es
);

6304 
¨m_cm∂x_mag_q15
(

6305 
q15_t
 * 
pSrc
,

6306 
q15_t
 * 
pD°
,

6307 
uöt32_t
 
numSam∂es
);

6319 
¨m_cm∂x_dŸ_¥od_q15
(

6320 
q15_t
 * 
pSrcA
,

6321 
q15_t
 * 
pSrcB
,

6322 
uöt32_t
 
numSam∂es
,

6323 
q31_t
 * 
ªÆResu…
,

6324 
q31_t
 * 
imagResu…
);

6336 
¨m_cm∂x_dŸ_¥od_q31
(

6337 
q31_t
 * 
pSrcA
,

6338 
q31_t
 * 
pSrcB
,

6339 
uöt32_t
 
numSam∂es
,

6340 
q63_t
 * 
ªÆResu…
,

6341 
q63_t
 * 
imagResu…
);

6353 
¨m_cm∂x_dŸ_¥od_f32
(

6354 
Êﬂt32_t
 * 
pSrcA
,

6355 
Êﬂt32_t
 * 
pSrcB
,

6356 
uöt32_t
 
numSam∂es
,

6357 
Êﬂt32_t
 * 
ªÆResu…
,

6358 
Êﬂt32_t
 * 
imagResu…
);

6369 
¨m_cm∂x_mu…_ªÆ_q15
(

6370 
q15_t
 * 
pSrcCm∂x
,

6371 
q15_t
 * 
pSrcRól
,

6372 
q15_t
 * 
pCm∂xD°
,

6373 
uöt32_t
 
numSam∂es
);

6384 
¨m_cm∂x_mu…_ªÆ_q31
(

6385 
q31_t
 * 
pSrcCm∂x
,

6386 
q31_t
 * 
pSrcRól
,

6387 
q31_t
 * 
pCm∂xD°
,

6388 
uöt32_t
 
numSam∂es
);

6399 
¨m_cm∂x_mu…_ªÆ_f32
(

6400 
Êﬂt32_t
 * 
pSrcCm∂x
,

6401 
Êﬂt32_t
 * 
pSrcRól
,

6402 
Êﬂt32_t
 * 
pCm∂xD°
,

6403 
uöt32_t
 
numSam∂es
);

6414 
¨m_mö_q7
(

6415 
q7_t
 * 
pSrc
,

6416 
uöt32_t
 
blockSize
,

6417 
q7_t
 * 
ªsu…
,

6418 
uöt32_t
 * 
ödex
);

6429 
¨m_mö_q15
(

6430 
q15_t
 * 
pSrc
,

6431 
uöt32_t
 
blockSize
,

6432 
q15_t
 * 
pResu…
,

6433 
uöt32_t
 * 
pIndex
);

6443 
¨m_mö_q31
(

6444 
q31_t
 * 
pSrc
,

6445 
uöt32_t
 
blockSize
,

6446 
q31_t
 * 
pResu…
,

6447 
uöt32_t
 * 
pIndex
);

6458 
¨m_mö_f32
(

6459 
Êﬂt32_t
 * 
pSrc
,

6460 
uöt32_t
 
blockSize
,

6461 
Êﬂt32_t
 * 
pResu…
,

6462 
uöt32_t
 * 
pIndex
);

6473 
¨m_max_q7
(

6474 
q7_t
 * 
pSrc
,

6475 
uöt32_t
 
blockSize
,

6476 
q7_t
 * 
pResu…
,

6477 
uöt32_t
 * 
pIndex
);

6488 
¨m_max_q15
(

6489 
q15_t
 * 
pSrc
,

6490 
uöt32_t
 
blockSize
,

6491 
q15_t
 * 
pResu…
,

6492 
uöt32_t
 * 
pIndex
);

6503 
¨m_max_q31
(

6504 
q31_t
 * 
pSrc
,

6505 
uöt32_t
 
blockSize
,

6506 
q31_t
 * 
pResu…
,

6507 
uöt32_t
 * 
pIndex
);

6518 
¨m_max_f32
(

6519 
Êﬂt32_t
 * 
pSrc
,

6520 
uöt32_t
 
blockSize
,

6521 
Êﬂt32_t
 * 
pResu…
,

6522 
uöt32_t
 * 
pIndex
);

6533 
¨m_cm∂x_mu…_cm∂x_q15
(

6534 
q15_t
 * 
pSrcA
,

6535 
q15_t
 * 
pSrcB
,

6536 
q15_t
 * 
pD°
,

6537 
uöt32_t
 
numSam∂es
);

6548 
¨m_cm∂x_mu…_cm∂x_q31
(

6549 
q31_t
 * 
pSrcA
,

6550 
q31_t
 * 
pSrcB
,

6551 
q31_t
 * 
pD°
,

6552 
uöt32_t
 
numSam∂es
);

6563 
¨m_cm∂x_mu…_cm∂x_f32
(

6564 
Êﬂt32_t
 * 
pSrcA
,

6565 
Êﬂt32_t
 * 
pSrcB
,

6566 
Êﬂt32_t
 * 
pD°
,

6567 
uöt32_t
 
numSam∂es
);

6576 
¨m_Êﬂt_to_q31
(

6577 
Êﬂt32_t
 * 
pSrc
,

6578 
q31_t
 * 
pD°
,

6579 
uöt32_t
 
blockSize
);

6588 
¨m_Êﬂt_to_q15
(

6589 
Êﬂt32_t
 * 
pSrc
,

6590 
q15_t
 * 
pD°
,

6591 
uöt32_t
 
blockSize
);

6600 
¨m_Êﬂt_to_q7
(

6601 
Êﬂt32_t
 * 
pSrc
,

6602 
q7_t
 * 
pD°
,

6603 
uöt32_t
 
blockSize
);

6613 
¨m_q31_to_q15
(

6614 
q31_t
 * 
pSrc
,

6615 
q15_t
 * 
pD°
,

6616 
uöt32_t
 
blockSize
);

6625 
¨m_q31_to_q7
(

6626 
q31_t
 * 
pSrc
,

6627 
q7_t
 * 
pD°
,

6628 
uöt32_t
 
blockSize
);

6637 
¨m_q15_to_Êﬂt
(

6638 
q15_t
 * 
pSrc
,

6639 
Êﬂt32_t
 * 
pD°
,

6640 
uöt32_t
 
blockSize
);

6650 
¨m_q15_to_q31
(

6651 
q15_t
 * 
pSrc
,

6652 
q31_t
 * 
pD°
,

6653 
uöt32_t
 
blockSize
);

6663 
¨m_q15_to_q7
(

6664 
q15_t
 * 
pSrc
,

6665 
q7_t
 * 
pD°
,

6666 
uöt32_t
 
blockSize
);

6740 
__INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

6741 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

6742 
Êﬂt32_t
 
X
,

6743 
Êﬂt32_t
 
Y
)

6745 
Êﬂt32_t
 
out
;

6746 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

6747 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

6748 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

6749 
Êﬂt32_t
 
xdiff
, 
ydiff
;

6750 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

6752 
xIndex
 = (
öt32_t
Ë
X
;

6753 
yIndex
 = (
öt32_t
Ë
Y
;

6757 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
-1Ë|| 
yIndex
 < 0 || yIndex > ( S->
numCﬁs
-1))

6763 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
-1Ë* 
S
->
numCﬁs
 ;

6767 
f00
 = 
pD©a
[
ödex
];

6768 
f01
 = 
pD©a
[
ödex
 + 1];

6771 
ödex
 = (
xIndex
-1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

6775 
f10
 = 
pD©a
[
ödex
];

6776 
f11
 = 
pD©a
[
ödex
 + 1];

6779 
b1
 = 
f00
;

6780 
b2
 = 
f01
 - 
f00
;

6781 
b3
 = 
f10
 - 
f00
;

6782 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

6785 
xdiff
 = 
X
 - 
xIndex
;

6788 
ydiff
 = 
Y
 - 
yIndex
;

6791 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

6794  (
out
);

6807 
__INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

6808 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

6809 
q31_t
 
X
,

6810 
q31_t
 
Y
)

6812 
q31_t
 
out
;

6813 
q31_t
 
acc
 = 0;

6814 
q31_t
 
x‰a˘
, 
y‰a˘
;

6815 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

6816 
öt32_t
 
rI
, 
cI
;

6817 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

6818 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6824 
rI
 = ((
X
 & 0xFFF00000) >> 20u);

6829 
cI
 = ((
Y
 & 0xFFF00000) >> 20u);

6833 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6840 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

6843 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6844 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6848 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

6851 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6852 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6855 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

6856 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

6859 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

6860 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

6863 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

6864 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6867 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

6868 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6871  (
acc
 << 2u);

6883 
__INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

6884 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

6885 
q31_t
 
X
,

6886 
q31_t
 
Y
)

6888 
q63_t
 
acc
 = 0;

6889 
q31_t
 
out
;

6890 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

6891 
q31_t
 
x‰a˘
, 
y‰a˘
;

6892 
öt32_t
 
rI
, 
cI
;

6893 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

6894 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6899 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6904 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6908 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6915 
x‰a˘
 = (
X
 & 0x000FFFFF);

6918 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6919 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6924 
y‰a˘
 = (
Y
 & 0x000FFFFF);

6927 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6928 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6934 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6935 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

6938 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

6939 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

6942 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6943 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6946 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

6947 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6951  (
acc
 >> 36);

6963 
__INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

6964 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

6965 
q31_t
 
X
,

6966 
q31_t
 
Y
)

6968 
q63_t
 
acc
 = 0;

6969 
q31_t
 
out
;

6970 
q31_t
 
x‰a˘
, 
y‰a˘
;

6971 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

6972 
öt32_t
 
rI
, 
cI
;

6973 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

6974 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6979 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6984 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6988 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6995 
x‰a˘
 = (
X
 & 0x000FFFFF);

6998 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6999 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7004 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7007 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7008 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7011 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7012 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7015 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7016 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7019 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7020 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7023 
out
 = ((
y2
 * (
y‰a˘
)));

7024 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7027  (
acc
 >> 40);

7040 #ifdef 
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cm0.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM0_H_GENERIC


32 
	#__CORE_CM0_H_GENERIC


	)

75 
	#__CM0_CMSIS_VERSION_MAIN
 (0x02Ë

	)

76 
	#__CM0_CMSIS_VERSION_SUB
 (0x10Ë

	)

77 
	#__CM0_CMSIS_VERSION
 ((
__CM0_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM0_CMSIS_VERSION_SUB
Ë

	)

79 
	#__CORTEX_M
 (0x00Ë

	)

82 #i‡ 
deföed
 ( 
__CC_ARM
 )

83 
	#__ASM
 
__asm


	)

84 
	#__INLINE
 
__ölöe


	)

86 #ñi‡
deföed
 ( 
__ICCARM__
 )

87 
	#__ASM
 
__asm


	)

88 
	#__INLINE
 
ölöe


	)

90 #ñi‡
deföed
 ( 
__GNUC__
 )

91 
	#__ASM
 
__asm


	)

92 
	#__INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TASKING__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__INLINE
 
ölöe


	)

101 
	#__FPU_USED
 0

	)

103 #i‡
deföed
 ( 
__CC_ARM
 )

104 #i‡
deföed
 
__TARGET_FPU_VFP


107 #ñi‡
deföed
 ( 
__ICCARM__
 )

108 #i‡
deföed
 
__ARMVFP__


112 #ñi‡
deföed
 ( 
__GNUC__
 )

113 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

117 #ñi‡
deföed
 ( 
__TASKING__
 )

121 
	~<°döt.h
>

122 
	~"c‹e_cmIn°r.h
"

123 
	~"c‹e_cmFunc.h
"

127 #i‚de‡
__CMSIS_GENERIC


129 #i‚de‡
__CORE_CM0_H_DEPENDANT


130 
	#__CORE_CM0_H_DEPENDANT


	)

133 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


134 #i‚de‡
__CM0_REV


135 
	#__CM0_REV
 0x0000

	)

139 #i‚de‡
__NVIC_PRIO_BITS


140 
	#__NVIC_PRIO_BITS
 2

	)

144 #i‚de‡
__Víd‹_SysTickC⁄fig


145 
	#__Víd‹_SysTickC⁄fig
 0

	)

151 #ifde‡
__˝lu•lus


152 
	#__I
 vﬁ©ûê

	)

154 
	#__I
 vﬁ©ûêc⁄°

	)

156 
	#__O
 vﬁ©ûê

	)

157 
	#__IO
 vﬁ©ûê

	)

186 #i‡(
__CORTEX_M
 != 0x04)

187 
uöt32_t
 
_ª£rved0
:27;

189 
uöt32_t
 
_ª£rved0
:16;

190 
uöt32_t
 
GE
:4;

191 
uöt32_t
 
_ª£rved1
:7;

193 
uöt32_t
 
Q
:1;

194 
uöt32_t
 
V
:1;

195 
uöt32_t
 
C
:1;

196 
uöt32_t
 
Z
:1;

197 
uöt32_t
 
N
:1;

198 } 
b
;

199 
uöt32_t
 
w
;

200 } 
	tAPSR_Ty≥
;

209 
uöt32_t
 
	mISR
:9;

210 
uöt32_t
 
	m_ª£rved0
:23;

211 } 
	mb
;

212 
uöt32_t
 
	mw
;

213 } 
	tIPSR_Ty≥
;

222 
uöt32_t
 
	mISR
:9;

223 #i‡(
__CORTEX_M
 != 0x04)

224 
uöt32_t
 
	m_ª£rved0
:15;

226 
uöt32_t
 
	m_ª£rved0
:7;

227 
uöt32_t
 
	mGE
:4;

228 
uöt32_t
 
	m_ª£rved1
:4;

230 
uöt32_t
 
	mT
:1;

231 
uöt32_t
 
	mIT
:2;

232 
uöt32_t
 
	mQ
:1;

233 
uöt32_t
 
	mV
:1;

234 
uöt32_t
 
	mC
:1;

235 
uöt32_t
 
	mZ
:1;

236 
uöt32_t
 
	mN
:1;

237 } 
	mb
;

238 
uöt32_t
 
	mw
;

239 } 
	txPSR_Ty≥
;

248 
uöt32_t
 
	mnPRIV
:1;

249 
uöt32_t
 
	mSPSEL
:1;

250 
uöt32_t
 
	mFPCA
:1;

251 
uöt32_t
 
	m_ª£rved0
:29;

252 } 
	mb
;

253 
uöt32_t
 
	mw
;

254 } 
	tCONTROL_Ty≥
;

269 
__IO
 
uöt32_t
 
	mISER
[1];

270 
uöt32_t
 
	mRESERVED0
[31];

271 
__IO
 
uöt32_t
 
	mICER
[1];

272 
uöt32_t
 
	mRSERVED1
[31];

273 
__IO
 
uöt32_t
 
	mISPR
[1];

274 
uöt32_t
 
	mRESERVED2
[31];

275 
__IO
 
uöt32_t
 
	mICPR
[1];

276 
uöt32_t
 
	mRESERVED3
[31];

277 
uöt32_t
 
	mRESERVED4
[64];

278 
__IO
 
uöt32_t
 
	mIP
[8];

279 } 
	tNVIC_Ty≥
;

294 
__I
 
uöt32_t
 
	mCPUID
;

295 
__IO
 
uöt32_t
 
	mICSR
;

296 
uöt32_t
 
	mRESERVED0
;

297 
__IO
 
uöt32_t
 
	mAIRCR
;

298 
__IO
 
uöt32_t
 
	mSCR
;

299 
__IO
 
uöt32_t
 
	mCCR
;

300 
uöt32_t
 
	mRESERVED1
;

301 
__IO
 
uöt32_t
 
	mSHP
[2];

302 
__IO
 
uöt32_t
 
	mSHCSR
;

303 } 
	tSCB_Ty≥
;

306 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

307 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

309 
	#SCB_CPUID_VARIANT_Pos
 20

	)

310 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

312 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

313 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

315 
	#SCB_CPUID_PARTNO_Pos
 4

	)

316 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

318 
	#SCB_CPUID_REVISION_Pos
 0

	)

319 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

322 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

323 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

325 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

326 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

328 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

329 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

331 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

332 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

334 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

335 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

337 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

338 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

340 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

341 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

343 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

344 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

346 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

347 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

350 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

351 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

353 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

354 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

356 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

357 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

359 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

360 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

362 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

363 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

366 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

367 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

369 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

370 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

372 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

373 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

376 
	#SCB_CCR_STKALIGN_Pos
 9

	)

377 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

379 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

380 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

383 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

384 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

399 
__IO
 
uöt32_t
 
	mCTRL
;

400 
__IO
 
uöt32_t
 
	mLOAD
;

401 
__IO
 
uöt32_t
 
	mVAL
;

402 
__I
 
uöt32_t
 
	mCALIB
;

403 } 
	tSysTick_Ty≥
;

406 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

407 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

409 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

410 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

412 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

413 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

415 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

416 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

419 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

420 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

423 
	#SysTick_VAL_CURRENT_Pos
 0

	)

424 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

427 
	#SysTick_CALIB_NOREF_Pos
 31

	)

428 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

430 
	#SysTick_CALIB_SKEW_Pos
 30

	)

431 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

433 
	#SysTick_CALIB_TENMS_Pos
 0

	)

434 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

453 
	#SCS_BASE
 (0xE000E000ULË

	)

454 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

455 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

456 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

457 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

459 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

460 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

461 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

488 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

489 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

490 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

500 
__INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

502 
NVIC
->
ISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

503 
	}
}

513 
__INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

515 
NVIC
->
ICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

516 
	}
}

528 
__INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

530 ((
uöt32_t
Ë((
NVIC
->
ISPR
[0] & (1 << ((uöt32_t)(
IRQn
) & 0x1F)))?1:0));

531 
	}
}

541 
__INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

543 
NVIC
->
ISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

544 
	}
}

554 
__INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

556 
NVIC
->
ICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

557 
	}
}

571 
__INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

573 if(
IRQn
 < 0) {

574 
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

575 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

577 
NVIC
->
IP
[
	`_IP_IDX
(
IRQn
)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

578 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

579 
	}
}

594 
__INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

597 if(
IRQn
 < 0) {

598 ((
uöt32_t
)((
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË>> (8 - 
__NVIC_PRIO_BITS
))); }

600 ((
uöt32_t
)((
NVIC
->
IP
[ 
	`_IP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË>> (8 - 
__NVIC_PRIO_BITS
))); }

601 
	}
}

608 
__INLINE
 
	$NVIC_Sy°emRe£t
()

610 
	`__DSB
();

612 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

613 
SCB_AIRCR_SYSRESETREQ_Msk
);

614 
	`__DSB
();

616 
	}
}

628 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

639 
__INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

641 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

643 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

644 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

645 
SysTick
->
VAL
 = 0;

646 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

647 
SysTick_CTRL_TICKINT_Msk
 |

648 
SysTick_CTRL_ENABLE_Msk
;

650 
	}
}

663 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cm3.c

24 
	~<°döt.h
>

27 #i‡
deföed
 ( 
__CC_ARM
 )

28 
	#__ASM
 
__asm


	)

29 
	#__INLINE
 
__ölöe


	)

31 #ñi‡
deföed
 ( 
__ICCARM__
 )

32 
	#__ASM
 
__asm


	)

33 
	#__INLINE
 
ölöe


	)

35 #ñi‡
deföed
 ( 
__GNUC__
 )

36 
	#__ASM
 
__asm


	)

37 
	#__INLINE
 
ölöe


	)

39 #ñi‡
deföed
 ( 
__TASKING__
 )

40 
	#__ASM
 
__asm


	)

41 
	#__INLINE
 
ölöe


	)

48 #i‡
deföed
 ( 
__CC_ARM
 )

58 
__ASM
 
uöt32_t
 
	$__gë_PSP
()

60 
mrs
 
r0
, 
p•


61 
bx
 
Ã


62 
	}
}

72 
__ASM
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

74 
m§
 
p•
, 
r0


75 
bx
 
Ã


76 
	}
}

86 
__ASM
 
uöt32_t
 
	$__gë_MSP
()

88 
mrs
 
r0
, 
m•


89 
bx
 
Ã


90 
	}
}

100 
__ASM
 
	$__£t_MSP
(
uöt32_t
 
maöSèckPoöãr
)

102 
m§
 
m•
, 
r0


103 
bx
 
Ã


104 
	}
}

114 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__ASM
 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡(
__ARMCC_VERSION
 < 400000)

142 
__ASM
 
	$__CLREX
()

144 
˛ªx


145 
	}
}

154 
__ASM
 
uöt32_t
 
	$__gë_BASEPRI
()

156 
mrs
 
r0
, 
ba£¥i


157 
bx
 
Ã


158 
	}
}

167 
__ASM
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

169 
m§
 
ba£¥i
, 
r0


170 
bx
 
Ã


171 
	}
}

180 
__ASM
 
uöt32_t
 
	$__gë_PRIMASK
()

182 
mrs
 
r0
, 
¥imask


183 
bx
 
Ã


184 
	}
}

193 
__ASM
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

195 
m§
 
¥imask
, 
r0


196 
bx
 
Ã


197 
	}
}

206 
__ASM
 
uöt32_t
 
	$__gë_FAULTMASK
()

208 
mrs
 
r0
, 
Áu…mask


209 
bx
 
Ã


210 
	}
}

219 
__ASM
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

221 
m§
 
Áu…mask
, 
r0


222 
bx
 
Ã


223 
	}
}

232 
__ASM
 
uöt32_t
 
	$__gë_CONTROL
()

234 
mrs
 
r0
, 
c⁄åﬁ


235 
bx
 
Ã


236 
	}
}

245 
__ASM
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

247 
m§
 
c⁄åﬁ
, 
r0


248 
bx
 
Ã


249 
	}
}

255 #ñi‡(
deföed
 (
__ICCARM__
))

257 #¥agm®
düg_suµªss
=
Pe940


266 
uöt32_t
 
	$__gë_PSP
()

268 
	`__ASM
("mrsÑ0,Ösp");

269 
	`__ASM
("bxÜr");

270 
	}
}

280 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

282 
	`__ASM
("msrÖsp,Ñ0");

283 
	`__ASM
("bxÜr");

284 
	}
}

294 
uöt32_t
 
	$__gë_MSP
()

296 
	`__ASM
("mrsÑ0, msp");

297 
	`__ASM
("bxÜr");

298 
	}
}

308 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

310 
	`__ASM
("msr msp,Ñ0");

311 
	`__ASM
("bxÜr");

312 
	}
}

322 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

324 
	`__ASM
("rev16Ñ0,Ñ0");

325 
	`__ASM
("bxÜr");

326 
	}
}

336 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

338 
	`__ASM
("rbitÑ0,Ñ0");

339 
	`__ASM
("bxÜr");

340 
	}
}

350 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

352 
	`__ASM
("ldrexbÑ0, [r0]");

353 
	`__ASM
("bxÜr");

354 
	}
}

364 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

366 
	`__ASM
("ldrexhÑ0, [r0]");

367 
	`__ASM
("bxÜr");

368 
	}
}

378 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

380 
	`__ASM
("ldrexÑ0, [r0]");

381 
	`__ASM
("bxÜr");

382 
	}
}

393 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

395 
	`__ASM
("strexbÑ0,Ñ0, [r1]");

396 
	`__ASM
("bxÜr");

397 
	}
}

408 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

410 
	`__ASM
("strexhÑ0,Ñ0, [r1]");

411 
	`__ASM
("bxÜr");

412 
	}
}

423 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

425 
	`__ASM
("strexÑ0,Ñ0, [r1]");

426 
	`__ASM
("bxÜr");

427 
	}
}

429 #¥agm®
düg_deÁu…
=
Pe940


432 #ñi‡(
deföed
 (
__GNUC__
))

442 
uöt32_t
 
	$__gë_PSP
(Ë
	`__©åibuã__
––
«ked
 ) );

443 
uöt32_t
 
	$__gë_PSP
()

445 
uöt32_t
 
ªsu…
=0;

447 
__ASM
 volatile ("MRS %0,Ösp\n\t"

449 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

450 (
ªsu…
);

451 
	}
}

461 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
Ë
	`__©åibuã__
––
«ked
 ) );

462 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

464 
__ASM
 volatile ("MSRÖsp, %0\n\t"

465 "BXÜ∏ \n\t" : : "r" (
t›OfProcSèck
) );

466 
	}
}

476 
uöt32_t
 
	$__gë_MSP
(Ë
	`__©åibuã__
––
«ked
 ) );

477 
uöt32_t
 
	$__gë_MSP
()

479 
uöt32_t
 
ªsu…
=0;

481 
__ASM
 volatile ("MRS %0, msp\n\t"

483 "BXÜ∏ \n\t" : "Ù" (
ªsu…
) );

484 (
ªsu…
);

485 
	}
}

495 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
Ë
	`__©åibuã__
––
«ked
 ) );

496 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

498 
__ASM
 volatile ("MSR msp, %0\n\t"

499 "BXÜ∏ \n\t" : : "r" (
t›OfMaöSèck
) );

500 
	}
}

509 
uöt32_t
 
	$__gë_BASEPRI
()

511 
uöt32_t
 
ªsu…
=0;

513 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

514 (
ªsu…
);

515 
	}
}

524 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

526 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

527 
	}
}

536 
uöt32_t
 
	$__gë_PRIMASK
()

538 
uöt32_t
 
ªsu…
=0;

540 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

541 (
ªsu…
);

542 
	}
}

551 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

553 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

554 
	}
}

563 
uöt32_t
 
	$__gë_FAULTMASK
()

565 
uöt32_t
 
ªsu…
=0;

567 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

568 (
ªsu…
);

569 
	}
}

578 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

580 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

581 
	}
}

590 
uöt32_t
 
	$__gë_CONTROL
()

592 
uöt32_t
 
ªsu…
=0;

594 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

595 (
ªsu…
);

596 
	}
}

605 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

607 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

608 
	}
}

619 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

621 
uöt32_t
 
ªsu…
=0;

623 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

624 (
ªsu…
);

625 
	}
}

635 
uöt32_t
 
	$__REV16
(
uöt16_t
 
vÆue
)

637 
uöt32_t
 
ªsu…
=0;

639 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

640 (
ªsu…
);

641 
	}
}

651 
öt32_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

653 
uöt32_t
 
ªsu…
=0;

655 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

656 (
ªsu…
);

657 
	}
}

667 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

669 
uöt32_t
 
ªsu…
=0;

671 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

672 (
ªsu…
);

673 
	}
}

683 
uöt8_t
 
	$__LDREXB
(
uöt8_t
 *
addr
)

685 
uöt8_t
 
ªsu…
=0;

687 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

688 (
ªsu…
);

689 
	}
}

699 
uöt16_t
 
	$__LDREXH
(
uöt16_t
 *
addr
)

701 
uöt16_t
 
ªsu…
=0;

703 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

704 (
ªsu…
);

705 
	}
}

715 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 *
addr
)

717 
uöt32_t
 
ªsu…
=0;

719 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

720 (
ªsu…
);

721 
	}
}

732 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, uöt8_à*
addr
)

734 
uöt32_t
 
ªsu…
=0;

736 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

737 (
ªsu…
);

738 
	}
}

749 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, uöt16_à*
addr
)

751 
uöt32_t
 
ªsu…
=0;

753 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

754 (
ªsu…
);

755 
	}
}

766 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_à*
addr
)

768 
uöt32_t
 
ªsu…
=0;

770 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

771 (
ªsu…
);

772 
	}
}

775 #ñi‡(
deföed
 (
__TASKING__
))

	@libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cm3.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM3_H_GENERIC


32 
	#__CORE_CM3_H_GENERIC


	)

75 
	#__CM3_CMSIS_VERSION_MAIN
 (0x02Ë

	)

76 
	#__CM3_CMSIS_VERSION_SUB
 (0x10Ë

	)

77 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM3_CMSIS_VERSION_SUB
Ë

	)

79 
	#__CORTEX_M
 (0x03Ë

	)

82 #i‡ 
deföed
 ( 
__CC_ARM
 )

83 
	#__ASM
 
__asm


	)

84 
	#__INLINE
 
__ölöe


	)

86 #ñi‡
deföed
 ( 
__ICCARM__
 )

87 
	#__ASM
 
__asm


	)

88 
	#__INLINE
 
ölöe


	)

90 #ñi‡
deföed
 ( 
__GNUC__
 )

91 
	#__ASM
 
__asm


	)

92 
	#__INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TASKING__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__INLINE
 
ölöe


	)

101 
	#__FPU_USED
 0

	)

103 #i‡
deföed
 ( 
__CC_ARM
 )

104 #i‡
deföed
 
__TARGET_FPU_VFP


107 #ñi‡
deföed
 ( 
__ICCARM__
 )

108 #i‡
deföed
 
__ARMVFP__


112 #ñi‡
deföed
 ( 
__GNUC__
 )

113 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

117 #ñi‡
deföed
 ( 
__TASKING__
 )

121 
	~<°döt.h
>

122 
	~"c‹e_cmIn°r.h
"

123 
	~"c‹e_cmFunc.h
"

127 #i‚de‡
__CMSIS_GENERIC


129 #i‚de‡
__CORE_CM3_H_DEPENDANT


130 
	#__CORE_CM3_H_DEPENDANT


	)

133 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


134 #i‚de‡
__CM3_REV


135 
	#__CM3_REV
 0x0200

	)

139 #i‚de‡
__MPU_PRESENT


140 
	#__MPU_PRESENT
 0

	)

144 #i‚de‡
__NVIC_PRIO_BITS


145 
	#__NVIC_PRIO_BITS
 4

	)

149 #i‚de‡
__Víd‹_SysTickC⁄fig


150 
	#__Víd‹_SysTickC⁄fig
 0

	)

156 #ifde‡
__˝lu•lus


157 
	#__I
 vﬁ©ûê

	)

159 
	#__I
 vﬁ©ûêc⁄°

	)

161 
	#__O
 vﬁ©ûê

	)

162 
	#__IO
 vﬁ©ûê

	)

193 #i‡(
__CORTEX_M
 != 0x04)

194 
uöt32_t
 
_ª£rved0
:27;

196 
uöt32_t
 
_ª£rved0
:16;

197 
uöt32_t
 
GE
:4;

198 
uöt32_t
 
_ª£rved1
:7;

200 
uöt32_t
 
Q
:1;

201 
uöt32_t
 
V
:1;

202 
uöt32_t
 
C
:1;

203 
uöt32_t
 
Z
:1;

204 
uöt32_t
 
N
:1;

205 } 
b
;

206 
uöt32_t
 
w
;

207 } 
	tAPSR_Ty≥
;

216 
uöt32_t
 
	mISR
:9;

217 
uöt32_t
 
	m_ª£rved0
:23;

218 } 
	mb
;

219 
uöt32_t
 
	mw
;

220 } 
	tIPSR_Ty≥
;

229 
uöt32_t
 
	mISR
:9;

230 #i‡(
__CORTEX_M
 != 0x04)

231 
uöt32_t
 
	m_ª£rved0
:15;

233 
uöt32_t
 
	m_ª£rved0
:7;

234 
uöt32_t
 
	mGE
:4;

235 
uöt32_t
 
	m_ª£rved1
:4;

237 
uöt32_t
 
	mT
:1;

238 
uöt32_t
 
	mIT
:2;

239 
uöt32_t
 
	mQ
:1;

240 
uöt32_t
 
	mV
:1;

241 
uöt32_t
 
	mC
:1;

242 
uöt32_t
 
	mZ
:1;

243 
uöt32_t
 
	mN
:1;

244 } 
	mb
;

245 
uöt32_t
 
	mw
;

246 } 
	txPSR_Ty≥
;

255 
uöt32_t
 
	mnPRIV
:1;

256 
uöt32_t
 
	mSPSEL
:1;

257 
uöt32_t
 
	mFPCA
:1;

258 
uöt32_t
 
	m_ª£rved0
:29;

259 } 
	mb
;

260 
uöt32_t
 
	mw
;

261 } 
	tCONTROL_Ty≥
;

276 
__IO
 
uöt32_t
 
	mISER
[8];

277 
uöt32_t
 
	mRESERVED0
[24];

278 
__IO
 
uöt32_t
 
	mICER
[8];

279 
uöt32_t
 
	mRSERVED1
[24];

280 
__IO
 
uöt32_t
 
	mISPR
[8];

281 
uöt32_t
 
	mRESERVED2
[24];

282 
__IO
 
uöt32_t
 
	mICPR
[8];

283 
uöt32_t
 
	mRESERVED3
[24];

284 
__IO
 
uöt32_t
 
	mIABR
[8];

285 
uöt32_t
 
	mRESERVED4
[56];

286 
__IO
 
uöt8_t
 
	mIP
[240];

287 
uöt32_t
 
	mRESERVED5
[644];

288 
__O
 
uöt32_t
 
	mSTIR
;

289 } 
	tNVIC_Ty≥
;

292 
	#NVIC_STIR_INTID_Pos
 0

	)

293 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

308 
__I
 
uöt32_t
 
	mCPUID
;

309 
__IO
 
uöt32_t
 
	mICSR
;

310 
__IO
 
uöt32_t
 
	mVTOR
;

311 
__IO
 
uöt32_t
 
	mAIRCR
;

312 
__IO
 
uöt32_t
 
	mSCR
;

313 
__IO
 
uöt32_t
 
	mCCR
;

314 
__IO
 
uöt8_t
 
	mSHP
[12];

315 
__IO
 
uöt32_t
 
	mSHCSR
;

316 
__IO
 
uöt32_t
 
	mCFSR
;

317 
__IO
 
uöt32_t
 
	mHFSR
;

318 
__IO
 
uöt32_t
 
	mDFSR
;

319 
__IO
 
uöt32_t
 
	mMMFAR
;

320 
__IO
 
uöt32_t
 
	mBFAR
;

321 
__IO
 
uöt32_t
 
	mAFSR
;

322 
__I
 
uöt32_t
 
	mPFR
[2];

323 
__I
 
uöt32_t
 
	mDFR
;

324 
__I
 
uöt32_t
 
	mADR
;

325 
__I
 
uöt32_t
 
	mMMFR
[4];

326 
__I
 
uöt32_t
 
	mISAR
[5];

327 
uöt32_t
 
	mRESERVED0
[5];

328 
__IO
 
uöt32_t
 
	mCPACR
;

329 } 
	tSCB_Ty≥
;

332 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

333 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

335 
	#SCB_CPUID_VARIANT_Pos
 20

	)

336 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

338 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

339 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

341 
	#SCB_CPUID_PARTNO_Pos
 4

	)

342 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

344 
	#SCB_CPUID_REVISION_Pos
 0

	)

345 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

348 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

349 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

351 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

352 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

354 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

355 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

357 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

358 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

360 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

361 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

363 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

364 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

366 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

367 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

369 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

370 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

372 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

373 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

375 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

376 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

379 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

380 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

383 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

384 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

386 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

387 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

389 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

390 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

392 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

393 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

395 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

396 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

398 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

399 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

401 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

402 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

405 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

406 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

408 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

409 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

411 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

412 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

415 
	#SCB_CCR_STKALIGN_Pos
 9

	)

416 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

418 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

419 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

421 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

422 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

424 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

425 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

427 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

428 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

430 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

431 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

434 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

435 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

437 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

438 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

440 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

441 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

443 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

444 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

446 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

447 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

449 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

450 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

452 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

453 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

455 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

456 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

458 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

459 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

461 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

462 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

464 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

465 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

467 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

468 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

470 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

471 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

473 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

474 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

477 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

478 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

480 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

481 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

483 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

484 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

487 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

488 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

490 
	#SCB_HFSR_FORCED_Pos
 30

	)

491 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

493 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

494 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

497 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

498 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

500 
	#SCB_DFSR_VCATCH_Pos
 3

	)

501 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

503 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

504 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

506 
	#SCB_DFSR_BKPT_Pos
 1

	)

507 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

509 
	#SCB_DFSR_HALTED_Pos
 0

	)

510 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

525 
uöt32_t
 
	mRESERVED0
[1];

526 
__I
 
uöt32_t
 
	mICTR
;

527 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

528 
__IO
 
uöt32_t
 
	mACTLR
;

530 
uöt32_t
 
	mRESERVED1
[1];

532 } 
	tSCnSCB_Ty≥
;

535 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

536 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

540 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

541 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

543 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

544 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

546 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

547 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

562 
__IO
 
uöt32_t
 
	mCTRL
;

563 
__IO
 
uöt32_t
 
	mLOAD
;

564 
__IO
 
uöt32_t
 
	mVAL
;

565 
__I
 
uöt32_t
 
	mCALIB
;

566 } 
	tSysTick_Ty≥
;

569 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

570 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

572 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

573 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

575 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

576 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

578 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

579 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

582 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

583 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

586 
	#SysTick_VAL_CURRENT_Pos
 0

	)

587 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

590 
	#SysTick_CALIB_NOREF_Pos
 31

	)

591 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

593 
	#SysTick_CALIB_SKEW_Pos
 30

	)

594 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

596 
	#SysTick_CALIB_TENMS_Pos
 0

	)

597 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

612 
__O
 union

614 
__O
 
uöt8_t
 
	mu8
;

615 
__O
 
uöt16_t
 
	mu16
;

616 
__O
 
uöt32_t
 
	mu32
;

617 } 
	mPORT
 [32];

618 
uöt32_t
 
	mRESERVED0
[864];

619 
__IO
 
uöt32_t
 
	mTER
;

620 
uöt32_t
 
	mRESERVED1
[15];

621 
__IO
 
uöt32_t
 
	mTPR
;

622 
uöt32_t
 
	mRESERVED2
[15];

623 
__IO
 
uöt32_t
 
	mTCR
;

624 } 
	tITM_Ty≥
;

627 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

628 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

631 
	#ITM_TCR_BUSY_Pos
 23

	)

632 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

634 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

635 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

637 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

638 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

640 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

641 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

643 
	#ITM_TCR_SWOENA_Pos
 4

	)

644 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

646 
	#ITM_TCR_TXENA_Pos
 3

	)

647 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

649 
	#ITM_TCR_SYNCENA_Pos
 2

	)

650 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

652 
	#ITM_TCR_TSENA_Pos
 1

	)

653 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

655 
	#ITM_TCR_ITMENA_Pos
 0

	)

656 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

661 #i‡(
__MPU_PRESENT
 == 1)

672 
__I
 
uöt32_t
 
	mTYPE
;

673 
__IO
 
uöt32_t
 
	mCTRL
;

674 
__IO
 
uöt32_t
 
	mRNR
;

675 
__IO
 
uöt32_t
 
	mRBAR
;

676 
__IO
 
uöt32_t
 
	mRASR
;

677 
__IO
 
uöt32_t
 
	mRBAR_A1
;

678 
__IO
 
uöt32_t
 
	mRASR_A1
;

679 
__IO
 
uöt32_t
 
	mRBAR_A2
;

680 
__IO
 
uöt32_t
 
	mRASR_A2
;

681 
__IO
 
uöt32_t
 
	mRBAR_A3
;

682 
__IO
 
uöt32_t
 
	mRASR_A3
;

683 } 
	tMPU_Ty≥
;

686 
	#MPU_TYPE_IREGION_Pos
 16

	)

687 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

689 
	#MPU_TYPE_DREGION_Pos
 8

	)

690 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

692 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

693 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

696 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

697 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

699 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

700 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

702 
	#MPU_CTRL_ENABLE_Pos
 0

	)

703 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

706 
	#MPU_RNR_REGION_Pos
 0

	)

707 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

710 
	#MPU_RBAR_ADDR_Pos
 5

	)

711 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

713 
	#MPU_RBAR_VALID_Pos
 4

	)

714 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

716 
	#MPU_RBAR_REGION_Pos
 0

	)

717 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

720 
	#MPU_RASR_ATTRS_Pos
 16

	)

721 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

723 
	#MPU_RASR_SRD_Pos
 8

	)

724 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

726 
	#MPU_RASR_SIZE_Pos
 1

	)

727 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

729 
	#MPU_RASR_ENABLE_Pos
 0

	)

730 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

746 
__IO
 
uöt32_t
 
	mDHCSR
;

747 
__O
 
uöt32_t
 
	mDCRSR
;

748 
__IO
 
uöt32_t
 
	mDCRDR
;

749 
__IO
 
uöt32_t
 
	mDEMCR
;

750 } 
	tC‹eDebug_Ty≥
;

753 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

754 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

756 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

757 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

759 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

760 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

762 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

763 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

765 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

766 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

768 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

769 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

771 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

772 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

774 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

775 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

777 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

778 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

780 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

781 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

783 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

784 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

786 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

787 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

790 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

791 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

793 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

794 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

797 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

798 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

800 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

801 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

803 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

804 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

806 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

807 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

809 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

810 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

812 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

813 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

815 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

816 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

818 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

819 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

821 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

822 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

824 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

825 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

827 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

828 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

830 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

831 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

833 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

834 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

844 
	#SCS_BASE
 (0xE000E000ULË

	)

845 
	#ITM_BASE
 (0xE0000000ULË

	)

846 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

847 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

848 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

849 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

851 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

852 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

853 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

854 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

855 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

856 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

858 #i‡(
__MPU_PRESENT
 == 1)

859 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

860 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

896 
__INLINE
 
	$NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

898 
uöt32_t
 
ªg_vÆue
;

899 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

901 
ªg_vÆue
 = 
SCB
->
AIRCR
;

902 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

903 
ªg_vÆue
 = (reg_value |

904 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

905 (
Pri‹ôyGroupTmp
 << 8));

906 
SCB
->
AIRCR
 = 
ªg_vÆue
;

907 
	}
}

917 
__INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôyGroupög
()

919  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

920 
	}
}

930 
__INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

932 
NVIC
->
ISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

933 
	}
}

943 
__INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

945 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

946 
	}
}

958 
__INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

960 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

961 
	}
}

971 
__INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

973 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

974 
	}
}

984 
__INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

986 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

987 
	}
}

997 
__INLINE
 
uöt32_t
 
	$NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

999 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1000 
	}
}

1014 
__INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1016 if(
IRQn
 < 0) {

1017 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1019 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1020 
	}
}

1035 
__INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1038 if(
IRQn
 < 0) {

1039 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1041 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1042 
	}
}

1059 
__INLINE
 
uöt32_t
 
	$NVIC_EncodePri‹ôy
 (
uöt32_t
 
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1061 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1062 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1063 
uöt32_t
 
SubPri‹ôyBôs
;

1065 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1066 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1069 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1070 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1072 
	}
}

1089 
__INLINE
 
	$NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1091 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1092 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1093 
uöt32_t
 
SubPri‹ôyBôs
;

1095 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1096 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1098 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1099 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1100 
	}
}

1107 
__INLINE
 
	$NVIC_Sy°emRe£t
()

1109 
	`__DSB
();

1111 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1112 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1113 
SCB_AIRCR_SYSRESETREQ_Msk
);

1114 
	`__DSB
();

1116 
	}
}

1128 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1139 
__INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

1141 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1143 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1144 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1145 
SysTick
->
VAL
 = 0;

1146 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1147 
SysTick_CTRL_TICKINT_Msk
 |

1148 
SysTick_CTRL_ENABLE_Msk
;

1150 
	}
}

1164 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1165 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1177 
__INLINE
 
uöt32_t
 
	$ITM_SídCh¨
 (
uöt32_t
 
ch
)

1179 i‡((
C‹eDebug
->
DEMCR
 & 
C‹eDebug_DEMCR_TRCENA_Msk
) &&

1180 (
ITM
->
TCR
 & 
ITM_TCR_ITMENA_Msk
) &&

1181 (
ITM
->
TER
 & (1UL << 0) ) )

1183 
ITM
->
PORT
[0].
u32
 == 0);

1184 
ITM
->
PORT
[0].
u8
 = (
uöt8_t
Ë
ch
;

1186  (
ch
);

1187 
	}
}

1199 
__INLINE
 
öt32_t
 
	$ITM_Re˚iveCh¨
 () {

1200 
öt32_t
 
ch
 = -1;

1202 i‡(
ITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1203 
ch
 = 
ITM_RxBuf„r
;

1204 
ITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1207  (
ch
);

1208 
	}
}

1219 
__INLINE
 
öt32_t
 
	$ITM_CheckCh¨
 () {

1221 i‡(
ITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1226 
	}
}

1234 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cm4.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM4_H_GENERIC


32 
	#__CORE_CM4_H_GENERIC


	)

76 
	#__CM4_CMSIS_VERSION_MAIN
 (0x02Ë

	)

77 
	#__CM4_CMSIS_VERSION_SUB
 (0x10Ë

	)

78 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM4_CMSIS_VERSION_SUB
Ë

	)

80 
	#__CORTEX_M
 (0x04Ë

	)

83 #i‡ 
deföed
 ( 
__CC_ARM
 )

84 
	#__ASM
 
__asm


	)

85 
	#__INLINE
 
__ölöe


	)

87 #ñi‡
deföed
 ( 
__ICCARM__
 )

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
ölöe


	)

91 #ñi‡
deföed
 ( 
__GNUC__
 )

92 
	#__ASM
 
__asm


	)

93 
	#__INLINE
 
ölöe


	)

95 #ñi‡
deföed
 ( 
__TASKING__
 )

96 
	#__ASM
 
__asm


	)

97 
	#__INLINE
 
ölöe


	)

102 #i‡
deföed
 ( 
__CC_ARM
 )

103 #i‡
deföed
 
__TARGET_FPU_VFP


104 #i‡(
__FPU_PRESENT
 == 1)

105 
	#__FPU_USED
 1

	)

108 
	#__FPU_USED
 0

	)

111 
	#__FPU_USED
 0

	)

114 #ñi‡
deföed
 ( 
__ICCARM__
 )

115 #i‡
deföed
 
__ARMVFP__


116 #i‡(
__FPU_PRESENT
 == 1)

117 
	#__FPU_USED
 1

	)

120 
	#__FPU_USED
 0

	)

123 
	#__FPU_USED
 0

	)

126 #ñi‡
deföed
 ( 
__GNUC__
 )

127 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

128 #i‡(
__FPU_PRESENT
 == 1)

129 
	#__FPU_USED
 1

	)

132 
	#__FPU_USED
 0

	)

135 
	#__FPU_USED
 0

	)

138 #ñi‡
deföed
 ( 
__TASKING__
 )

140 
	#__FPU_USED
 0

	)

143 
	~<°döt.h
>

144 
	~<c‹e_cmIn°r.h
>

145 
	~<c‹e_cmFunc.h
>

146 
	~<c‹e_cm4_simd.h
>

150 #i‚de‡
__CMSIS_GENERIC


152 #i‚de‡
__CORE_CM4_H_DEPENDANT


153 
	#__CORE_CM4_H_DEPENDANT


	)

156 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


157 #i‚de‡
__CM4_REV


158 
	#__CM4_REV
 0x0000

	)

162 #i‚de‡
__FPU_PRESENT


163 
	#__FPU_PRESENT
 0

	)

167 #i‚de‡
__MPU_PRESENT


168 
	#__MPU_PRESENT
 0

	)

172 #i‚de‡
__NVIC_PRIO_BITS


173 
	#__NVIC_PRIO_BITS
 4

	)

177 #i‚de‡
__Víd‹_SysTickC⁄fig


178 
	#__Víd‹_SysTickC⁄fig
 0

	)

184 #ifde‡
__˝lu•lus


185 
	#__I
 vﬁ©ûê

	)

187 
	#__I
 vﬁ©ûêc⁄°

	)

189 
	#__O
 vﬁ©ûê

	)

190 
	#__IO
 vﬁ©ûê

	)

222 #i‡(
__CORTEX_M
 != 0x04)

223 
uöt32_t
 
_ª£rved0
:27;

225 
uöt32_t
 
_ª£rved0
:16;

226 
uöt32_t
 
GE
:4;

227 
uöt32_t
 
_ª£rved1
:7;

229 
uöt32_t
 
Q
:1;

230 
uöt32_t
 
V
:1;

231 
uöt32_t
 
C
:1;

232 
uöt32_t
 
Z
:1;

233 
uöt32_t
 
N
:1;

234 } 
b
;

235 
uöt32_t
 
w
;

236 } 
	tAPSR_Ty≥
;

245 
uöt32_t
 
ISR
:9;

246 
uöt32_t
 
_ª£rved0
:23;

247 } 
b
;

248 
uöt32_t
 
w
;

249 } 
	tIPSR_Ty≥
;

258 
uöt32_t
 
ISR
:9;

259 #i‡(
__CORTEX_M
 != 0x04)

260 
uöt32_t
 
_ª£rved0
:15;

262 
uöt32_t
 
_ª£rved0
:7;

263 
uöt32_t
 
GE
:4;

264 
uöt32_t
 
_ª£rved1
:4;

266 
uöt32_t
 
T
:1;

267 
uöt32_t
 
IT
:2;

268 
uöt32_t
 
Q
:1;

269 
uöt32_t
 
V
:1;

270 
uöt32_t
 
C
:1;

271 
uöt32_t
 
Z
:1;

272 
uöt32_t
 
N
:1;

273 } 
b
;

274 
uöt32_t
 
w
;

275 } 
	txPSR_Ty≥
;

284 
uöt32_t
 
nPRIV
:1;

285 
uöt32_t
 
SPSEL
:1;

286 
uöt32_t
 
FPCA
:1;

287 
uöt32_t
 
_ª£rved0
:29;

288 } 
b
;

289 
uöt32_t
 
w
;

290 } 
	tCONTROL_Ty≥
;

305 
__IO
 
uöt32_t
 
ISER
[8];

306 
uöt32_t
 
RESERVED0
[24];

307 
__IO
 
uöt32_t
 
ICER
[8];

308 
uöt32_t
 
RSERVED1
[24];

309 
__IO
 
uöt32_t
 
ISPR
[8];

310 
uöt32_t
 
RESERVED2
[24];

311 
__IO
 
uöt32_t
 
ICPR
[8];

312 
uöt32_t
 
RESERVED3
[24];

313 
__IO
 
uöt32_t
 
IABR
[8];

314 
uöt32_t
 
RESERVED4
[56];

315 
__IO
 
uöt8_t
 
IP
[240];

316 
uöt32_t
 
RESERVED5
[644];

317 
__O
 
uöt32_t
 
STIR
;

318 } 
	tNVIC_Ty≥
;

321 
	#NVIC_STIR_INTID_Pos
 0

	)

322 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

337 
__I
 
uöt32_t
 
CPUID
;

338 
__IO
 
uöt32_t
 
ICSR
;

339 
__IO
 
uöt32_t
 
VTOR
;

340 
__IO
 
uöt32_t
 
AIRCR
;

341 
__IO
 
uöt32_t
 
SCR
;

342 
__IO
 
uöt32_t
 
CCR
;

343 
__IO
 
uöt8_t
 
SHP
[12];

344 
__IO
 
uöt32_t
 
SHCSR
;

345 
__IO
 
uöt32_t
 
CFSR
;

346 
__IO
 
uöt32_t
 
HFSR
;

347 
__IO
 
uöt32_t
 
DFSR
;

348 
__IO
 
uöt32_t
 
MMFAR
;

349 
__IO
 
uöt32_t
 
BFAR
;

350 
__IO
 
uöt32_t
 
AFSR
;

351 
__I
 
uöt32_t
 
PFR
[2];

352 
__I
 
uöt32_t
 
DFR
;

353 
__I
 
uöt32_t
 
ADR
;

354 
__I
 
uöt32_t
 
MMFR
[4];

355 
__I
 
uöt32_t
 
ISAR
[5];

356 
uöt32_t
 
RESERVED0
[5];

357 
__IO
 
uöt32_t
 
CPACR
;

358 } 
	tSCB_Ty≥
;

361 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

362 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

364 
	#SCB_CPUID_VARIANT_Pos
 20

	)

365 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

367 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

368 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

370 
	#SCB_CPUID_PARTNO_Pos
 4

	)

371 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

373 
	#SCB_CPUID_REVISION_Pos
 0

	)

374 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

377 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

378 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

380 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

381 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

383 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

384 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

386 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

387 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

389 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

390 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

392 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

393 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

395 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

396 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

398 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

399 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

401 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

402 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

404 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

405 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

408 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

409 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

412 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

413 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

415 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

416 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

418 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

419 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

421 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

422 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

424 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

425 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

427 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

428 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

430 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

431 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

434 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

435 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

437 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

438 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

440 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

441 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

444 
	#SCB_CCR_STKALIGN_Pos
 9

	)

445 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

447 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

448 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

450 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

451 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

453 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

454 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

456 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

457 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

459 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

460 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

463 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

464 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

466 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

467 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

469 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

470 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

472 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

473 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

475 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

476 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

478 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

479 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

481 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

482 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

484 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

485 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

487 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

488 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

490 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

491 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

493 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

494 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

496 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

497 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

499 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

500 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

502 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

503 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

506 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

507 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

509 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

510 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

512 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

513 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

516 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

517 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

519 
	#SCB_HFSR_FORCED_Pos
 30

	)

520 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

522 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

523 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

526 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

527 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

529 
	#SCB_DFSR_VCATCH_Pos
 3

	)

530 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

532 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

533 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

535 
	#SCB_DFSR_BKPT_Pos
 1

	)

536 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

538 
	#SCB_DFSR_HALTED_Pos
 0

	)

539 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

554 
uöt32_t
 
RESERVED0
[1];

555 
__I
 
uöt32_t
 
ICTR
;

556 
__IO
 
uöt32_t
 
ACTLR
;

557 } 
	tSCnSCB_Ty≥
;

560 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

561 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

564 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

565 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

567 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

568 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

570 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

571 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

573 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

574 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

576 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

577 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

592 
__IO
 
uöt32_t
 
CTRL
;

593 
__IO
 
uöt32_t
 
LOAD
;

594 
__IO
 
uöt32_t
 
VAL
;

595 
__I
 
uöt32_t
 
CALIB
;

596 } 
	tSysTick_Ty≥
;

599 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

600 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

602 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

603 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

605 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

606 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

608 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

609 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

612 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

613 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

616 
	#SysTick_VAL_CURRENT_Pos
 0

	)

617 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

620 
	#SysTick_CALIB_NOREF_Pos
 31

	)

621 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

623 
	#SysTick_CALIB_SKEW_Pos
 30

	)

624 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

626 
	#SysTick_CALIB_TENMS_Pos
 0

	)

627 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

642 
__O
 union

644 
__O
 
uöt8_t
 
u8
;

645 
__O
 
uöt16_t
 
u16
;

646 
__O
 
uöt32_t
 
u32
;

647 } 
PORT
 [32];

648 
uöt32_t
 
RESERVED0
[864];

649 
__IO
 
uöt32_t
 
TER
;

650 
uöt32_t
 
RESERVED1
[15];

651 
__IO
 
uöt32_t
 
TPR
;

652 
uöt32_t
 
RESERVED2
[15];

653 
__IO
 
uöt32_t
 
TCR
;

654 } 
	tITM_Ty≥
;

657 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

658 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

661 
	#ITM_TCR_BUSY_Pos
 23

	)

662 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

664 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

665 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

667 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

668 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

670 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

671 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

673 
	#ITM_TCR_SWOENA_Pos
 4

	)

674 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

676 
	#ITM_TCR_TXENA_Pos
 3

	)

677 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

679 
	#ITM_TCR_SYNCENA_Pos
 2

	)

680 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

682 
	#ITM_TCR_TSENA_Pos
 1

	)

683 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

685 
	#ITM_TCR_ITMENA_Pos
 0

	)

686 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

691 #i‡(
__MPU_PRESENT
 == 1)

702 
__I
 
uöt32_t
 
TYPE
;

703 
__IO
 
uöt32_t
 
CTRL
;

704 
__IO
 
uöt32_t
 
RNR
;

705 
__IO
 
uöt32_t
 
RBAR
;

706 
__IO
 
uöt32_t
 
RASR
;

707 
__IO
 
uöt32_t
 
RBAR_A1
;

708 
__IO
 
uöt32_t
 
RASR_A1
;

709 
__IO
 
uöt32_t
 
RBAR_A2
;

710 
__IO
 
uöt32_t
 
RASR_A2
;

711 
__IO
 
uöt32_t
 
RBAR_A3
;

712 
__IO
 
uöt32_t
 
RASR_A3
;

713 } 
	tMPU_Ty≥
;

716 
	#MPU_TYPE_IREGION_Pos
 16

	)

717 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

719 
	#MPU_TYPE_DREGION_Pos
 8

	)

720 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

722 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

723 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

726 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

727 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

729 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

730 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

732 
	#MPU_CTRL_ENABLE_Pos
 0

	)

733 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

736 
	#MPU_RNR_REGION_Pos
 0

	)

737 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

740 
	#MPU_RBAR_ADDR_Pos
 5

	)

741 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

743 
	#MPU_RBAR_VALID_Pos
 4

	)

744 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

746 
	#MPU_RBAR_REGION_Pos
 0

	)

747 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

750 
	#MPU_RASR_ATTRS_Pos
 16

	)

751 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

753 
	#MPU_RASR_SRD_Pos
 8

	)

754 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

756 
	#MPU_RASR_SIZE_Pos
 1

	)

757 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

759 
	#MPU_RASR_ENABLE_Pos
 0

	)

760 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

766 #i‡(
__FPU_PRESENT
 == 1)

777 
uöt32_t
 
RESERVED0
[1];

778 
__IO
 
uöt32_t
 
FPCCR
;

779 
__IO
 
uöt32_t
 
FPCAR
;

780 
__IO
 
uöt32_t
 
FPDSCR
;

781 
__I
 
uöt32_t
 
MVFR0
;

782 
__I
 
uöt32_t
 
MVFR1
;

783 } 
	tFPU_Ty≥
;

786 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

787 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

789 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

790 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

792 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

793 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

795 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

796 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

798 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

799 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

801 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

802 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

804 
	#FPU_FPCCR_THREAD_Pos
 3

	)

805 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

807 
	#FPU_FPCCR_USER_Pos
 1

	)

808 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

810 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

811 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

814 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

815 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

818 
	#FPU_FPDSCR_AHP_Pos
 26

	)

819 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

821 
	#FPU_FPDSCR_DN_Pos
 25

	)

822 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

824 
	#FPU_FPDSCR_FZ_Pos
 24

	)

825 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

827 
	#FPU_FPDSCR_RMode_Pos
 22

	)

828 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

831 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

832 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

834 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

835 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

837 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

838 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

840 
	#FPU_MVFR0_Divide_Pos
 16

	)

841 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

843 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

844 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

846 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

847 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

849 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

850 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

852 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

853 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

856 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

857 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

859 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

860 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

862 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

863 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

865 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

866 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

882 
__IO
 
uöt32_t
 
DHCSR
;

883 
__O
 
uöt32_t
 
DCRSR
;

884 
__IO
 
uöt32_t
 
DCRDR
;

885 
__IO
 
uöt32_t
 
DEMCR
;

886 } 
	tC‹eDebug_Ty≥
;

889 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

890 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

892 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

893 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

895 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

896 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

898 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

899 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

901 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

902 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

904 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

905 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

907 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

908 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

910 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

911 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

913 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

914 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

916 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

917 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

919 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

920 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

922 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

923 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

926 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

927 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

929 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

930 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

933 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

934 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

936 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

937 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

939 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

940 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

942 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

943 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

945 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

946 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

948 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

949 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

951 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

952 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

954 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

955 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

957 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

958 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

960 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

961 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

963 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

964 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

966 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

967 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

969 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

970 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

980 
	#SCS_BASE
 (0xE000E000ULË

	)

981 
	#ITM_BASE
 (0xE0000000ULË

	)

982 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

983 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

984 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

985 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

987 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

988 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

989 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

990 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

991 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

992 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

994 #i‡(
__MPU_PRESENT
 == 1)

995 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

996 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

999 #i‡(
__FPU_PRESENT
 == 1)

1000 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1001 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1037 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1039 
uöt32_t
 
ªg_vÆue
;

1040 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1042 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1043 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1044 
ªg_vÆue
 = (reg_value |

1045 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1046 (
Pri‹ôyGroupTmp
 << 8));

1047 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1058 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1060  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1071 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1074 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1085 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1087 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1100 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1102 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1113 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1115 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1126 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1128 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1139 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1141 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1156 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1158 if(
IRQn
 < 0) {

1159 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1161 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1177 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1180 if(
IRQn
 < 0) {

1181 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1183 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1201 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1203 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1204 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1205 
uöt32_t
 
SubPri‹ôyBôs
;

1207 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1208 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1211 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1212 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1231 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1233 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1234 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1235 
uöt32_t
 
SubPri‹ôyBôs
;

1237 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1238 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1240 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1241 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1249 
__INLINE
 
NVIC_Sy°emRe£t
()

1251 
__DSB
();

1253 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1254 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1255 
SCB_AIRCR_SYSRESETREQ_Msk
);

1256 
__DSB
();

1270 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1281 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1283 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1285 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1286 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1287 
SysTick
->
VAL
 = 0;

1288 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1289 
SysTick_CTRL_TICKINT_Msk
 |

1290 
SysTick_CTRL_ENABLE_Msk
;

1306 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1307 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1319 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1321 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1322 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1323 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1325 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1326 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1328  (
	gch
);

1341 
__INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1342 
öt32_t
 
	gch
 = -1;

1344 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1345 
ch
 = 
ITM_RxBuf„r
;

1346 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1349  (
	gch
);

1361 
__INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1363 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1376 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cm4_simd.h

24 #ifde‡
__˝lu•lus


28 #i‚de‡
__CORE_CM4_SIMD_H


29 
	#__CORE_CM4_SIMD_H


	)

43 #i‡ 
deföed
 ( 
__CC_ARM
 )

47 
	#__SADD8
 
__ßdd8


	)

48 
	#__QADD8
 
__qadd8


	)

49 
	#__SHADD8
 
__shadd8


	)

50 
	#__UADD8
 
__uadd8


	)

51 
	#__UQADD8
 
__uqadd8


	)

52 
	#__UHADD8
 
__uhadd8


	)

53 
	#__SSUB8
 
__ssub8


	)

54 
	#__QSUB8
 
__qsub8


	)

55 
	#__SHSUB8
 
__shsub8


	)

56 
	#__USUB8
 
__usub8


	)

57 
	#__UQSUB8
 
__uqsub8


	)

58 
	#__UHSUB8
 
__uhsub8


	)

59 
	#__SADD16
 
__ßdd16


	)

60 
	#__QADD16
 
__qadd16


	)

61 
	#__SHADD16
 
__shadd16


	)

62 
	#__UADD16
 
__uadd16


	)

63 
	#__UQADD16
 
__uqadd16


	)

64 
	#__UHADD16
 
__uhadd16


	)

65 
	#__SSUB16
 
__ssub16


	)

66 
	#__QSUB16
 
__qsub16


	)

67 
	#__SHSUB16
 
__shsub16


	)

68 
	#__USUB16
 
__usub16


	)

69 
	#__UQSUB16
 
__uqsub16


	)

70 
	#__UHSUB16
 
__uhsub16


	)

71 
	#__SASX
 
__ßsx


	)

72 
	#__QASX
 
__qasx


	)

73 
	#__SHASX
 
__shasx


	)

74 
	#__UASX
 
__uasx


	)

75 
	#__UQASX
 
__uqasx


	)

76 
	#__UHASX
 
__uhasx


	)

77 
	#__SSAX
 
__sßx


	)

78 
	#__QSAX
 
__qßx


	)

79 
	#__SHSAX
 
__shßx


	)

80 
	#__USAX
 
__ußx


	)

81 
	#__UQSAX
 
__uqßx


	)

82 
	#__UHSAX
 
__uhßx


	)

83 
	#__USAD8
 
__ußd8


	)

84 
	#__USADA8
 
__ußda8


	)

85 
	#__SSAT16
 
__sßt16


	)

86 
	#__USAT16
 
__ußt16


	)

87 
	#__UXTB16
 
__uxtb16


	)

88 
	#__UXTAB16
 
__uxèb16


	)

89 
	#__SXTB16
 
__sxtb16


	)

90 
	#__SXTAB16
 
__sxèb16


	)

91 
	#__SMUAD
 
__smuad


	)

92 
	#__SMUADX
 
__smuadx


	)

93 
	#__SMLAD
 
__smœd


	)

94 
	#__SMLADX
 
__smœdx


	)

95 
	#__SMLALD
 
__smœld


	)

96 
	#__SMLALDX
 
__smœldx


	)

97 
	#__SMUSD
 
__smusd


	)

98 
	#__SMUSDX
 
__smusdx


	)

99 
	#__SMLSD
 
__smlsd


	)

100 
	#__SMLSDX
 
__smlsdx


	)

101 
	#__SMLSLD
 
__sml¶d


	)

102 
	#__SMLSLDX
 
__sml¶dx


	)

103 
	#__SEL
 
__£l


	)

104 
	#__QADD
 
__qadd


	)

105 
	#__QSUB
 
__qsub


	)

107 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

108 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

110 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

111 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

118 #ñi‡
deföed
 ( 
__ICCARM__
 )

121 
	~<cmsis_ür.h
>

190 #ñi‡
deföed
 ( 
__GNUC__
 )

194 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

196 
uöt32_t
 
ªsu…
;

198 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

199 (
ªsu…
);

200 
	}
}

202 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

204 
uöt32_t
 
ªsu…
;

206 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

207 (
ªsu…
);

208 
	}
}

210 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

212 
uöt32_t
 
ªsu…
;

214 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

215 (
ªsu…
);

216 
	}
}

218 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

220 
uöt32_t
 
ªsu…
;

222 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

223 (
ªsu…
);

224 
	}
}

226 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

228 
uöt32_t
 
ªsu…
;

230 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

231 (
ªsu…
);

232 
	}
}

234 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

236 
uöt32_t
 
ªsu…
;

238 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

239 (
ªsu…
);

240 
	}
}

243 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

245 
uöt32_t
 
ªsu…
;

247 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

248 (
ªsu…
);

249 
	}
}

251 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

253 
uöt32_t
 
ªsu…
;

255 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

256 (
ªsu…
);

257 
	}
}

259 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

261 
uöt32_t
 
ªsu…
;

263 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

264 (
ªsu…
);

265 
	}
}

267 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

269 
uöt32_t
 
ªsu…
;

271 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

272 (
ªsu…
);

273 
	}
}

275 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

277 
uöt32_t
 
ªsu…
;

279 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

280 (
ªsu…
);

281 
	}
}

283 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

285 
uöt32_t
 
ªsu…
;

287 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

288 (
ªsu…
);

289 
	}
}

292 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

294 
uöt32_t
 
ªsu…
;

296 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

297 (
ªsu…
);

298 
	}
}

300 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

302 
uöt32_t
 
ªsu…
;

304 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

305 (
ªsu…
);

306 
	}
}

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

310 
uöt32_t
 
ªsu…
;

312 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

313 (
ªsu…
);

314 
	}
}

316 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

318 
uöt32_t
 
ªsu…
;

320 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

321 (
ªsu…
);

322 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

326 
uöt32_t
 
ªsu…
;

328 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

329 (
ªsu…
);

330 
	}
}

332 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

334 
uöt32_t
 
ªsu…
;

336 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

337 (
ªsu…
);

338 
	}
}

340 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

342 
uöt32_t
 
ªsu…
;

344 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

345 (
ªsu…
);

346 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

353 (
ªsu…
);

354 
	}
}

356 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

358 
uöt32_t
 
ªsu…
;

360 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

361 (
ªsu…
);

362 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

369 (
ªsu…
);

370 
	}
}

372 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

374 
uöt32_t
 
ªsu…
;

376 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

377 (
ªsu…
);

378 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

385 (
ªsu…
);

386 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

393 (
ªsu…
);

394 
	}
}

396 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

398 
uöt32_t
 
ªsu…
;

400 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

401 (
ªsu…
);

402 
	}
}

404 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

406 
uöt32_t
 
ªsu…
;

408 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

409 (
ªsu…
);

410 
	}
}

412 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

414 
uöt32_t
 
ªsu…
;

416 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

417 (
ªsu…
);

418 
	}
}

420 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

422 
uöt32_t
 
ªsu…
;

424 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

425 (
ªsu…
);

426 
	}
}

428 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

430 
uöt32_t
 
ªsu…
;

432 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

433 (
ªsu…
);

434 
	}
}

436 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

438 
uöt32_t
 
ªsu…
;

440 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

441 (
ªsu…
);

442 
	}
}

444 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

446 
uöt32_t
 
ªsu…
;

448 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

449 (
ªsu…
);

450 
	}
}

452 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

454 
uöt32_t
 
ªsu…
;

456 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

457 (
ªsu…
);

458 
	}
}

460 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

462 
uöt32_t
 
ªsu…
;

464 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

465 (
ªsu…
);

466 
	}
}

468 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

470 
uöt32_t
 
ªsu…
;

472 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

473 (
ªsu…
);

474 
	}
}

476 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

478 
uöt32_t
 
ªsu…
;

480 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

481 (
ªsu…
);

482 
	}
}

484 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

486 
uöt32_t
 
ªsu…
;

488 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

489 (
ªsu…
);

490 
	}
}

492 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

494 
uöt32_t
 
ªsu…
;

496 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

497 (
ªsu…
);

498 
	}
}

500 
	#__SSAT16
(
ARG1
,
ARG2
) \

502 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

503 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

504 
__RES
; \

505 })

	)

507 
	#__USAT16
(
ARG1
,
ARG2
) \

509 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

510 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

511 
__RES
; \

512 })

	)

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

516 
uöt32_t
 
ªsu…
;

518 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

519 (
ªsu…
);

520 
	}
}

522 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

524 
uöt32_t
 
ªsu…
;

526 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

527 (
ªsu…
);

528 
	}
}

530 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

532 
uöt32_t
 
ªsu…
;

534 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

535 (
ªsu…
);

536 
	}
}

538 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

540 
uöt32_t
 
ªsu…
;

542 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

543 (
ªsu…
);

544 
	}
}

546 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

548 
uöt32_t
 
ªsu…
;

550 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

551 (
ªsu…
);

552 
	}
}

554 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

556 
uöt32_t
 
ªsu…
;

558 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

559 (
ªsu…
);

560 
	}
}

562 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

564 
uöt32_t
 
ªsu…
;

566 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

567 (
ªsu…
);

568 
	}
}

570 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

572 
uöt32_t
 
ªsu…
;

574 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

575 (
ªsu…
);

576 
	}
}

578 
	#__SMLALD
(
ARG1
,
ARG2
,
ARG3
) \

580 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

581 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

582 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

583 })

	)

585 
	#__SMLALDX
(
ARG1
,
ARG2
,
ARG3
) \

587 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

588 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

589 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

590 })

	)

592 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

594 
uöt32_t
 
ªsu…
;

596 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

597 (
ªsu…
);

598 
	}
}

600 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

602 
uöt32_t
 
ªsu…
;

604 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

605 (
ªsu…
);

606 
	}
}

608 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

610 
uöt32_t
 
ªsu…
;

612 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

613 (
ªsu…
);

614 
	}
}

616 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

618 
uöt32_t
 
ªsu…
;

620 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

621 (
ªsu…
);

622 
	}
}

624 
	#__SMLSLD
(
ARG1
,
ARG2
,
ARG3
) \

626 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

627 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

628 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

629 })

	)

631 
	#__SMLSLDX
(
ARG1
,
ARG2
,
ARG3
) \

633 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

634 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

635 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

636 })

	)

638 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

640 
uöt32_t
 
ªsu…
;

642 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

643 (
ªsu…
);

644 
	}
}

646 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

648 
uöt32_t
 
ªsu…
;

650 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

651 (
ªsu…
);

652 
	}
}

654 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

656 
uöt32_t
 
ªsu…
;

658 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

659 (
ªsu…
);

660 
	}
}

662 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

664 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

665 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

666 
__RES
; \

667 })

	)

669 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

671 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

672 i‡(
ARG3
 == 0) \

673 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

675 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

676 
__RES
; \

677 })

	)

683 #ñi‡
deföed
 ( 
__TASKING__
 )

699 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cmFunc.h

24 #i‚de‡
__CORE_CMFUNC_H


25 
	#__CORE_CMFUNC_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

50 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

52 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

53 (
__ªgC⁄åﬁ
);

54 
	}
}

63 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

65 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

66 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

67 
	}
}

76 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

78 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

79 (
__ªgIPSR
);

80 
	}
}

89 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

91 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

92 (
__ªgAPSR
);

93 
	}
}

102 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

104 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

105 (
__ªgXPSR
);

106 
	}
}

115 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

117 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

118 (
__ªgPro˚ssSèckPoöãr
);

119 
	}
}

128 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

130 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

131 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

132 
	}
}

141 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

143 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

144 (
__ªgMaöSèckPoöãr
);

145 
	}
}

154 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

156 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

157 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

158 
	}
}

167 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

169 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

170 (
__ªgPriMask
);

171 
	}
}

180 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

182 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

183 
__ªgPriMask
 = (
¥iMask
);

184 
	}
}

187 #i‡ (
__CORTEX_M
 >= 0x03)

194 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

202 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

211 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

213 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

214 (
__ªgBa£Pri
);

215 
	}
}

224 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

226 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

227 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

228 
	}
}

237 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

239 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

240 (
__ªgFau…Mask
);

241 
	}
}

250 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

252 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

253 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

254 
	}
}

259 #i‡ (
__CORTEX_M
 == 0x04)

267 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

269 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

270 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

271 (
__ªgÂs¸
);

275 
	}
}

284 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

286 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

287 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

288 
__ªgÂs¸
 = (
Âs¸
);

290 
	}
}

295 #ñi‡
deföed
 ( 
__ICCARM__
 )

298 
	~<cmsis_ür.h
>

300 #ñi‡
deföed
 ( 
__GNUC__
 )

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_úq
()

310 
__ASM
 volatile ("cpsie i");

311 
	}
}

319 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_úq
()

321 
__ASM
 volatile ("cpsid i");

322 
	}
}

331 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

333 
uöt32_t
 
ªsu…
;

335 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

336 (
ªsu…
);

337 
	}
}

346 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

348 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

349 
	}
}

358 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

360 
uöt32_t
 
ªsu…
;

362 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

363 (
ªsu…
);

364 
	}
}

373 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

375 
uöt32_t
 
ªsu…
;

377 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

378 (
ªsu…
);

379 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

393 (
ªsu…
);

394 
	}
}

403 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

405 
uöt32_t
 
ªsu…
;

407 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

408 (
ªsu…
);

409 
	}
}

418 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

420 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) );

421 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

432 
uöt32_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

435 (
ªsu…
);

436 
	}
}

445 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

447 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) );

448 
	}
}

457 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

459 
uöt32_t
 
ªsu…
;

461 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

462 (
ªsu…
);

463 
	}
}

472 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

474 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

475 
	}
}

478 #i‡ (
__CORTEX_M
 >= 0x03)

485 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_Áu…_úq
()

487 
__ASM
 volatile ("cpsie f");

488 
	}
}

496 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_Áu…_úq
()

498 
__ASM
 volatile ("cpsid f");

499 
	}
}

508 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

510 
uöt32_t
 
ªsu…
;

512 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

513 (
ªsu…
);

514 
	}
}

523 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

525 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

526 
	}
}

535 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

537 
uöt32_t
 
ªsu…
;

539 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

540 (
ªsu…
);

541 
	}
}

550 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

552 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

553 
	}
}

558 #i‡ (
__CORTEX_M
 == 0x04)

566 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

568 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

569 
uöt32_t
 
ªsu…
;

571 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

572 (
ªsu…
);

576 
	}
}

585 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

587 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

588 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) );

590 
	}
}

595 #ñi‡
deföed
 ( 
__TASKING__
 )

	@libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cmInstr.h

24 #i‚de‡
__CORE_CMINSTR_H


25 
	#__CORE_CMINSTR_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

46 
	#__NOP
 
__n›


	)

54 
	#__WFI
 
__wfi


	)

62 
	#__WFE
 
__w„


	)

69 
	#__SEV
 
__£v


	)

78 
	#__ISB
(Ë
	`__isb
(0xF)

	)

86 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

94 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

104 
	#__REV
 
__ªv


	)

114 
__INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡ (
__CORTEX_M
 >= 0x03)

144 
	#__RBIT
 
__rbô


	)

154 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

164 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

174 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

186 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

198 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

210 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

218 
	#__CLREX
 
__˛ªx


	)

229 
	#__SSAT
 
__sßt


	)

240 
	#__USAT
 
__ußt


	)

250 
	#__CLZ
 
__˛z


	)

256 #ñi‡
deföed
 ( 
__ICCARM__
 )

259 
	~<cmsis_ür.h
>

262 #ñi‡
deföed
 ( 
__GNUC__
 )

269 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__NOP
()

271 
__ASM
 volatile ("nop");

272 
	}
}

280 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFI
()

282 
__ASM
 volatile ("wfi");

283 
	}
}

291 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFE
()

293 
__ASM
 volatile ("wfe");

294 
	}
}

301 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__SEV
()

303 
__ASM
 volatile ("sev");

304 
	}
}

313 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__ISB
()

315 
__ASM
 volatile ("isb");

316 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DSB
()

326 
__ASM
 volatile ("dsb");

327 
	}
}

335 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DMB
()

337 
__ASM
 volatile ("dmb");

338 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

353 (
ªsu…
);

354 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

369 (
ªsu…
);

370 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

385 (
ªsu…
);

386 
	}
}

389 #i‡ (
__CORTEX_M
 >= 0x03)

398 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

400 
uöt32_t
 
ªsu…
;

402 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

403 (
ªsu…
);

404 
	}
}

414 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

416 
uöt8_t
 
ªsu…
;

418 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

419 (
ªsu…
);

420 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

432 
uöt16_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

435 (
ªsu…
);

436 
	}
}

446 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

448 
uöt32_t
 
ªsu…
;

450 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

451 (
ªsu…
);

452 
	}
}

464 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

466 
uöt32_t
 
ªsu…
;

468 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

469 (
ªsu…
);

470 
	}
}

482 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

484 
uöt32_t
 
ªsu…
;

486 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

487 (
ªsu…
);

488 
	}
}

500 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

502 
uöt32_t
 
ªsu…
;

504 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

505 (
ªsu…
);

506 
	}
}

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__CLREX
()

516 
__ASM
 volatile ("clrex");

517 
	}
}

528 
	#__SSAT
(
ARG1
,
ARG2
) \

530 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

531 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

532 
__RES
; \

533 })

	)

544 
	#__USAT
(
ARG1
,
ARG2
) \

546 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

547 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

548 
__RES
; \

549 })

	)

559 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

561 
uöt8_t
 
ªsu…
;

563 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

564 (
ªsu…
);

565 
	}
}

572 #ñi‡
deföed
 ( 
__TASKING__
 )

	@libstm/STM32F4xx_StdPeriph_Driver/inc/device_support/stm32f4xx.h

47 #i‚de‡
__STM32F4xx_H


48 
	#__STM32F4xx_H


	)

50 #ifde‡
__˝lu•lus


54 #ifde‡ 
USE_FULL_ASSERT


64 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

66 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

68 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

80 #i‡!
deföed
 (
STM32F4XX
)

81 
	#STM32F4XX


	)

88 #i‡!
deföed
 (
STM32F4XX
)

92 #i‡!
deföed
 (
USE_STDPERIPH_DRIVER
)

109 #i‡!
deföed
 (
HSE_VALUE
)

110 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

117 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

118 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

121 #i‡!
deföed
 (
HSI_VALUE
)

122 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

128 
	#__STM32F4XX_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

129 
	#__STM32F4XX_STDPERIPH_VERSION_SUB1
 (0x00Ë

	)

130 
	#__STM32F4XX_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

131 
	#__STM32F4XX_STDPERIPH_VERSION_RC
 (0x00Ë

	)

132 
	#__STM32F4XX_STDPERIPH_VERSION
 ((
__STM32F4XX_STDPERIPH_VERSION_MAIN
 << 24)\

133 |(
__STM32F4XX_STDPERIPH_VERSION_SUB1
 << 16)\

134 |(
__STM32F4XX_STDPERIPH_VERSION_SUB2
 << 8)\

135 |(
__STM32F4XX_STDPERIPH_VERSION_RC
))

	)

148 
	#__CM4_REV
 0x0001

	)

149 
	#__MPU_PRESENT
 1

	)

150 
	#__NVIC_PRIO_BITS
 4

	)

151 
	#__Víd‹_SysTickC⁄fig
 0

	)

152 
	#__FPU_PRESENT
 1

	)

158 
	eIRQn


161 
	gN⁄MaskabÀI¡_IRQn
 = -14,

162 
	gMem‹yM™agemít_IRQn
 = -12,

163 
	gBusFau…_IRQn
 = -11,

164 
	gUßgeFau…_IRQn
 = -10,

165 
	gSVCÆl_IRQn
 = -5,

166 
	gDebugM⁄ô‹_IRQn
 = -4,

167 
	gPídSV_IRQn
 = -2,

168 
	gSysTick_IRQn
 = -1,

170 
	gWWDG_IRQn
 = 0,

171 
	gPVD_IRQn
 = 1,

172 
	gTAMP_STAMP_IRQn
 = 2,

173 
	gRTC_WKUP_IRQn
 = 3,

174 
	gFLASH_IRQn
 = 4,

175 
	gRCC_IRQn
 = 5,

176 
	gEXTI0_IRQn
 = 6,

177 
	gEXTI1_IRQn
 = 7,

178 
	gEXTI2_IRQn
 = 8,

179 
	gEXTI3_IRQn
 = 9,

180 
	gEXTI4_IRQn
 = 10,

181 
	gDMA1_Såóm0_IRQn
 = 11,

182 
	gDMA1_Såóm1_IRQn
 = 12,

183 
	gDMA1_Såóm2_IRQn
 = 13,

184 
	gDMA1_Såóm3_IRQn
 = 14,

185 
	gDMA1_Såóm4_IRQn
 = 15,

186 
	gDMA1_Såóm5_IRQn
 = 16,

187 
	gDMA1_Såóm6_IRQn
 = 17,

188 
	gADC_IRQn
 = 18,

189 
	gCAN1_TX_IRQn
 = 19,

190 
	gCAN1_RX0_IRQn
 = 20,

191 
	gCAN1_RX1_IRQn
 = 21,

192 
	gCAN1_SCE_IRQn
 = 22,

193 
	gEXTI9_5_IRQn
 = 23,

194 
	gTIM1_BRK_TIM9_IRQn
 = 24,

195 
	gTIM1_UP_TIM10_IRQn
 = 25,

196 
	gTIM1_TRG_COM_TIM11_IRQn
 = 26,

197 
	gTIM1_CC_IRQn
 = 27,

198 
	gTIM2_IRQn
 = 28,

199 
	gTIM3_IRQn
 = 29,

200 
	gTIM4_IRQn
 = 30,

201 
	gI2C1_EV_IRQn
 = 31,

202 
	gI2C1_ER_IRQn
 = 32,

203 
	gI2C2_EV_IRQn
 = 33,

204 
	gI2C2_ER_IRQn
 = 34,

205 
	gSPI1_IRQn
 = 35,

206 
	gSPI2_IRQn
 = 36,

207 
	gUSART1_IRQn
 = 37,

208 
	gUSART2_IRQn
 = 38,

209 
	gUSART3_IRQn
 = 39,

210 
	gEXTI15_10_IRQn
 = 40,

211 
	gRTC_Aœrm_IRQn
 = 41,

212 
	gOTG_FS_WKUP_IRQn
 = 42,

213 
	gTIM8_BRK_TIM12_IRQn
 = 43,

214 
	gTIM8_UP_TIM13_IRQn
 = 44,

215 
	gTIM8_TRG_COM_TIM14_IRQn
 = 45,

216 
	gTIM8_CC_IRQn
 = 46,

217 
	gDMA1_Såóm7_IRQn
 = 47,

218 
	gFSMC_IRQn
 = 48,

219 
	gSDIO_IRQn
 = 49,

220 
	gTIM5_IRQn
 = 50,

221 
	gSPI3_IRQn
 = 51,

222 
	gUART4_IRQn
 = 52,

223 
	gUART5_IRQn
 = 53,

224 
	gTIM6_DAC_IRQn
 = 54,

225 
	gTIM7_IRQn
 = 55,

226 
	gDMA2_Såóm0_IRQn
 = 56,

227 
	gDMA2_Såóm1_IRQn
 = 57,

228 
	gDMA2_Såóm2_IRQn
 = 58,

229 
	gDMA2_Såóm3_IRQn
 = 59,

230 
	gDMA2_Såóm4_IRQn
 = 60,

231 
	gETH_IRQn
 = 61,

232 
	gETH_WKUP_IRQn
 = 62,

233 
	gCAN2_TX_IRQn
 = 63,

234 
	gCAN2_RX0_IRQn
 = 64,

235 
	gCAN2_RX1_IRQn
 = 65,

236 
	gCAN2_SCE_IRQn
 = 66,

237 
	gOTG_FS_IRQn
 = 67,

238 
	gDMA2_Såóm5_IRQn
 = 68,

239 
	gDMA2_Såóm6_IRQn
 = 69,

240 
	gDMA2_Såóm7_IRQn
 = 70,

241 
	gUSART6_IRQn
 = 71,

242 
	gI2C3_EV_IRQn
 = 72,

243 
	gI2C3_ER_IRQn
 = 73,

244 
	gOTG_HS_EP1_OUT_IRQn
 = 74,

245 
	gOTG_HS_EP1_IN_IRQn
 = 75,

246 
	gOTG_HS_WKUP_IRQn
 = 76,

247 
	gOTG_HS_IRQn
 = 77,

248 
	gDCMI_IRQn
 = 78,

249 
	gCRYP_IRQn
 = 79,

250 
	gHASH_RNG_IRQn
 = 80,

251 
	gFPU_IRQn
 = 81

252 } 
	tIRQn_Ty≥
;

258 
	~"c‹e_cm4.h
"

259 
	~"sy°em_°m32f4xx.h
"

260 
	~<°döt.h
>

266 
öt32_t
 
	ts32
;

267 
öt16_t
 
	ts16
;

268 
öt8_t
 
	ts8
;

270 c⁄° 
	töt32_t
 
	tsc32
;

271 c⁄° 
	töt16_t
 
	tsc16
;

272 c⁄° 
	töt8_t
 
	tsc8
;

274 
__IO
 
	töt32_t
 
	tvs32
;

275 
__IO
 
	töt16_t
 
	tvs16
;

276 
__IO
 
	töt8_t
 
	tvs8
;

278 
__I
 
	töt32_t
 
	tvsc32
;

279 
__I
 
	töt16_t
 
	tvsc16
;

280 
__I
 
	töt8_t
 
	tvsc8
;

282 
uöt32_t
 
	tu32
;

283 
uöt16_t
 
	tu16
;

284 
uöt8_t
 
	tu8
;

286 c⁄° 
	tuöt32_t
 
	tuc32
;

287 c⁄° 
	tuöt16_t
 
	tuc16
;

288 c⁄° 
	tuöt8_t
 
	tuc8
;

290 
__IO
 
	tuöt32_t
 
	tvu32
;

291 
__IO
 
	tuöt16_t
 
	tvu16
;

292 
__IO
 
	tuöt8_t
 
	tvu8
;

294 
__I
 
	tuöt32_t
 
	tvuc32
;

295 
__I
 
	tuöt16_t
 
	tvuc16
;

296 
__I
 
	tuöt8_t
 
	tvuc8
;

298 íum {
	gRESET
 = 0, 
	gSET
 = !
RESET
} 
	tFœgSètus
, 
	tITSètus
;

300 íum {
	gDISABLE
 = 0, 
	gENABLE
 = !
DISABLE
} 
	tFun˘i⁄ÆSèã
;

301 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

303 íum {
	gERROR
 = 0, 
	gSUCCESS
 = !
ERROR
} 
	tEº‹Sètus
;

319 
__IO
 
uöt32_t
 
	gSR
;

320 
__IO
 
uöt32_t
 
	gCR1
;

321 
__IO
 
uöt32_t
 
	gCR2
;

322 
__IO
 
uöt32_t
 
	gSMPR1
;

323 
__IO
 
uöt32_t
 
	gSMPR2
;

324 
__IO
 
uöt32_t
 
	gJOFR1
;

325 
__IO
 
uöt32_t
 
	gJOFR2
;

326 
__IO
 
uöt32_t
 
	gJOFR3
;

327 
__IO
 
uöt32_t
 
	gJOFR4
;

328 
__IO
 
uöt32_t
 
	gHTR
;

329 
__IO
 
uöt32_t
 
	gLTR
;

330 
__IO
 
uöt32_t
 
	gSQR1
;

331 
__IO
 
uöt32_t
 
	gSQR2
;

332 
__IO
 
uöt32_t
 
	gSQR3
;

333 
__IO
 
uöt32_t
 
	gJSQR
;

334 
__IO
 
uöt32_t
 
	gJDR1
;

335 
__IO
 
uöt32_t
 
	gJDR2
;

336 
__IO
 
uöt32_t
 
	gJDR3
;

337 
__IO
 
uöt32_t
 
	gJDR4
;

338 
__IO
 
uöt32_t
 
	gDR
;

339 } 
	tADC_Ty≥Def
;

343 
__IO
 
uöt32_t
 
	gCSR
;

344 
__IO
 
uöt32_t
 
	gCCR
;

345 
__IO
 
uöt32_t
 
	gCDR
;

347 } 
	tADC_Comm⁄_Ty≥Def
;

356 
__IO
 
uöt32_t
 
	gTIR
;

357 
__IO
 
uöt32_t
 
	gTDTR
;

358 
__IO
 
uöt32_t
 
	gTDLR
;

359 
__IO
 
uöt32_t
 
	gTDHR
;

360 } 
	tCAN_TxMaûBox_Ty≥Def
;

368 
__IO
 
uöt32_t
 
	gRIR
;

369 
__IO
 
uöt32_t
 
	gRDTR
;

370 
__IO
 
uöt32_t
 
	gRDLR
;

371 
__IO
 
uöt32_t
 
	gRDHR
;

372 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

380 
__IO
 
uöt32_t
 
	gFR1
;

381 
__IO
 
uöt32_t
 
	gFR2
;

382 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

390 
__IO
 
uöt32_t
 
	gMCR
;

391 
__IO
 
uöt32_t
 
	gMSR
;

392 
__IO
 
uöt32_t
 
	gTSR
;

393 
__IO
 
uöt32_t
 
	gRF0R
;

394 
__IO
 
uöt32_t
 
	gRF1R
;

395 
__IO
 
uöt32_t
 
	gIER
;

396 
__IO
 
uöt32_t
 
	gESR
;

397 
__IO
 
uöt32_t
 
	gBTR
;

398 
uöt32_t
 
	gRESERVED0
[88];

399 
CAN_TxMaûBox_Ty≥Def
 
	gsTxMaûBox
[3];

400 
CAN_FIFOMaûBox_Ty≥Def
 
	gsFIFOMaûBox
[2];

401 
uöt32_t
 
	gRESERVED1
[12];

402 
__IO
 
uöt32_t
 
	gFMR
;

403 
__IO
 
uöt32_t
 
	gFM1R
;

404 
uöt32_t
 
	gRESERVED2
;

405 
__IO
 
uöt32_t
 
	gFS1R
;

406 
uöt32_t
 
	gRESERVED3
;

407 
__IO
 
uöt32_t
 
	gFFA1R
;

408 
uöt32_t
 
	gRESERVED4
;

409 
__IO
 
uöt32_t
 
	gFA1R
;

410 
uöt32_t
 
	gRESERVED5
[8];

411 
CAN_FûãrRegi°î_Ty≥Def
 
	gsFûãrRegi°î
[28];

412 } 
	tCAN_Ty≥Def
;

420 
__IO
 
uöt32_t
 
	gDR
;

421 
__IO
 
uöt8_t
 
	gIDR
;

422 
uöt8_t
 
	gRESERVED0
;

423 
uöt16_t
 
	gRESERVED1
;

424 
__IO
 
uöt32_t
 
	gCR
;

425 } 
	tCRC_Ty≥Def
;

433 
__IO
 
uöt32_t
 
	gCR
;

434 
__IO
 
uöt32_t
 
	gSWTRIGR
;

435 
__IO
 
uöt32_t
 
	gDHR12R1
;

436 
__IO
 
uöt32_t
 
	gDHR12L1
;

437 
__IO
 
uöt32_t
 
	gDHR8R1
;

438 
__IO
 
uöt32_t
 
	gDHR12R2
;

439 
__IO
 
uöt32_t
 
	gDHR12L2
;

440 
__IO
 
uöt32_t
 
	gDHR8R2
;

441 
__IO
 
uöt32_t
 
	gDHR12RD
;

442 
__IO
 
uöt32_t
 
	gDHR12LD
;

443 
__IO
 
uöt32_t
 
	gDHR8RD
;

444 
__IO
 
uöt32_t
 
	gDOR1
;

445 
__IO
 
uöt32_t
 
	gDOR2
;

446 
__IO
 
uöt32_t
 
	gSR
;

447 } 
	tDAC_Ty≥Def
;

455 
__IO
 
uöt32_t
 
	gIDCODE
;

456 
__IO
 
uöt32_t
 
	gCR
;

457 
__IO
 
uöt32_t
 
	gAPB1FZ
;

458 
__IO
 
uöt32_t
 
	gAPB2FZ
;

459 }
	tDBGMCU_Ty≥Def
;

467 
__IO
 
uöt32_t
 
	gCR
;

468 
__IO
 
uöt32_t
 
	gSR
;

469 
__IO
 
uöt32_t
 
	gRISR
;

470 
__IO
 
uöt32_t
 
	gIER
;

471 
__IO
 
uöt32_t
 
	gMISR
;

472 
__IO
 
uöt32_t
 
	gICR
;

473 
__IO
 
uöt32_t
 
	gESCR
;

474 
__IO
 
uöt32_t
 
	gESUR
;

475 
__IO
 
uöt32_t
 
	gCWSTRTR
;

476 
__IO
 
uöt32_t
 
	gCWSIZER
;

477 
__IO
 
uöt32_t
 
	gDR
;

478 } 
	tDCMI_Ty≥Def
;

486 
__IO
 
uöt32_t
 
	gCR
;

487 
__IO
 
uöt32_t
 
	gNDTR
;

488 
__IO
 
uöt32_t
 
	gPAR
;

489 
__IO
 
uöt32_t
 
	gM0AR
;

490 
__IO
 
uöt32_t
 
	gM1AR
;

491 
__IO
 
uöt32_t
 
	gFCR
;

492 } 
	tDMA_Såóm_Ty≥Def
;

496 
__IO
 
uöt32_t
 
	gLISR
;

497 
__IO
 
uöt32_t
 
	gHISR
;

498 
__IO
 
uöt32_t
 
	gLIFCR
;

499 
__IO
 
uöt32_t
 
	gHIFCR
;

500 } 
	tDMA_Ty≥Def
;

508 
__IO
 
uöt32_t
 
	gMACCR
;

509 
__IO
 
uöt32_t
 
	gMACFFR
;

510 
__IO
 
uöt32_t
 
	gMACHTHR
;

511 
__IO
 
uöt32_t
 
	gMACHTLR
;

512 
__IO
 
uöt32_t
 
	gMACMIIAR
;

513 
__IO
 
uöt32_t
 
	gMACMIIDR
;

514 
__IO
 
uöt32_t
 
	gMACFCR
;

515 
__IO
 
uöt32_t
 
	gMACVLANTR
;

516 
uöt32_t
 
	gRESERVED0
[2];

517 
__IO
 
uöt32_t
 
	gMACRWUFFR
;

518 
__IO
 
uöt32_t
 
	gMACPMTCSR
;

519 
uöt32_t
 
	gRESERVED1
[2];

520 
__IO
 
uöt32_t
 
	gMACSR
;

521 
__IO
 
uöt32_t
 
	gMACIMR
;

522 
__IO
 
uöt32_t
 
	gMACA0HR
;

523 
__IO
 
uöt32_t
 
	gMACA0LR
;

524 
__IO
 
uöt32_t
 
	gMACA1HR
;

525 
__IO
 
uöt32_t
 
	gMACA1LR
;

526 
__IO
 
uöt32_t
 
	gMACA2HR
;

527 
__IO
 
uöt32_t
 
	gMACA2LR
;

528 
__IO
 
uöt32_t
 
	gMACA3HR
;

529 
__IO
 
uöt32_t
 
	gMACA3LR
;

530 
uöt32_t
 
	gRESERVED2
[40];

531 
__IO
 
uöt32_t
 
	gMMCCR
;

532 
__IO
 
uöt32_t
 
	gMMCRIR
;

533 
__IO
 
uöt32_t
 
	gMMCTIR
;

534 
__IO
 
uöt32_t
 
	gMMCRIMR
;

535 
__IO
 
uöt32_t
 
	gMMCTIMR
;

536 
uöt32_t
 
	gRESERVED3
[14];

537 
__IO
 
uöt32_t
 
	gMMCTGFSCCR
;

538 
__IO
 
uöt32_t
 
	gMMCTGFMSCCR
;

539 
uöt32_t
 
	gRESERVED4
[5];

540 
__IO
 
uöt32_t
 
	gMMCTGFCR
;

541 
uöt32_t
 
	gRESERVED5
[10];

542 
__IO
 
uöt32_t
 
	gMMCRFCECR
;

543 
__IO
 
uöt32_t
 
	gMMCRFAECR
;

544 
uöt32_t
 
	gRESERVED6
[10];

545 
__IO
 
uöt32_t
 
	gMMCRGUFCR
;

546 
uöt32_t
 
	gRESERVED7
[334];

547 
__IO
 
uöt32_t
 
	gPTPTSCR
;

548 
__IO
 
uöt32_t
 
	gPTPSSIR
;

549 
__IO
 
uöt32_t
 
	gPTPTSHR
;

550 
__IO
 
uöt32_t
 
	gPTPTSLR
;

551 
__IO
 
uöt32_t
 
	gPTPTSHUR
;

552 
__IO
 
uöt32_t
 
	gPTPTSLUR
;

553 
__IO
 
uöt32_t
 
	gPTPTSAR
;

554 
__IO
 
uöt32_t
 
	gPTPTTHR
;

555 
__IO
 
uöt32_t
 
	gPTPTTLR
;

556 
__IO
 
uöt32_t
 
	gRESERVED8
;

557 
__IO
 
uöt32_t
 
	gPTPTSSR
;

558 
uöt32_t
 
	gRESERVED9
[565];

559 
__IO
 
uöt32_t
 
	gDMABMR
;

560 
__IO
 
uöt32_t
 
	gDMATPDR
;

561 
__IO
 
uöt32_t
 
	gDMARPDR
;

562 
__IO
 
uöt32_t
 
	gDMARDLAR
;

563 
__IO
 
uöt32_t
 
	gDMATDLAR
;

564 
__IO
 
uöt32_t
 
	gDMASR
;

565 
__IO
 
uöt32_t
 
	gDMAOMR
;

566 
__IO
 
uöt32_t
 
	gDMAIER
;

567 
__IO
 
uöt32_t
 
	gDMAMFBOCR
;

568 
__IO
 
uöt32_t
 
	gDMARSWTR
;

569 
uöt32_t
 
	gRESERVED10
[8];

570 
__IO
 
uöt32_t
 
	gDMACHTDR
;

571 
__IO
 
uöt32_t
 
	gDMACHRDR
;

572 
__IO
 
uöt32_t
 
	gDMACHTBAR
;

573 
__IO
 
uöt32_t
 
	gDMACHRBAR
;

574 } 
	tETH_Ty≥Def
;

582 
__IO
 
uöt32_t
 
	gIMR
;

583 
__IO
 
uöt32_t
 
	gEMR
;

584 
__IO
 
uöt32_t
 
	gRTSR
;

585 
__IO
 
uöt32_t
 
	gFTSR
;

586 
__IO
 
uöt32_t
 
	gSWIER
;

587 
__IO
 
uöt32_t
 
	gPR
;

588 } 
	tEXTI_Ty≥Def
;

596 
__IO
 
uöt32_t
 
	gACR
;

597 
__IO
 
uöt32_t
 
	gKEYR
;

598 
__IO
 
uöt32_t
 
	gOPTKEYR
;

599 
__IO
 
uöt32_t
 
	gSR
;

600 
__IO
 
uöt32_t
 
	gCR
;

601 
__IO
 
uöt32_t
 
	gOPTCR
;

602 } 
	tFLASH_Ty≥Def
;

610 
__IO
 
uöt32_t
 
	gBTCR
[8];

611 } 
	tFSMC_B™k1_Ty≥Def
;

619 
__IO
 
uöt32_t
 
	gBWTR
[7];

620 } 
	tFSMC_B™k1E_Ty≥Def
;

628 
__IO
 
uöt32_t
 
	gPCR2
;

629 
__IO
 
uöt32_t
 
	gSR2
;

630 
__IO
 
uöt32_t
 
	gPMEM2
;

631 
__IO
 
uöt32_t
 
	gPATT2
;

632 
uöt32_t
 
	gRESERVED0
;

633 
__IO
 
uöt32_t
 
	gECCR2
;

634 } 
	tFSMC_B™k2_Ty≥Def
;

642 
__IO
 
uöt32_t
 
	gPCR3
;

643 
__IO
 
uöt32_t
 
	gSR3
;

644 
__IO
 
uöt32_t
 
	gPMEM3
;

645 
__IO
 
uöt32_t
 
	gPATT3
;

646 
uöt32_t
 
	gRESERVED0
;

647 
__IO
 
uöt32_t
 
	gECCR3
;

648 } 
	tFSMC_B™k3_Ty≥Def
;

656 
__IO
 
uöt32_t
 
	gPCR4
;

657 
__IO
 
uöt32_t
 
	gSR4
;

658 
__IO
 
uöt32_t
 
	gPMEM4
;

659 
__IO
 
uöt32_t
 
	gPATT4
;

660 
__IO
 
uöt32_t
 
	gPIO4
;

661 } 
	tFSMC_B™k4_Ty≥Def
;

669 
__IO
 
uöt32_t
 
	gMODER
;

670 
__IO
 
uöt32_t
 
	gOTYPER
;

671 
__IO
 
uöt32_t
 
	gOSPEEDR
;

672 
__IO
 
uöt32_t
 
	gPUPDR
;

673 
__IO
 
uöt32_t
 
	gIDR
;

674 
__IO
 
uöt32_t
 
	gODR
;

675 
__IO
 
uöt16_t
 
	gBSRRL
;

676 
__IO
 
uöt16_t
 
	gBSRRH
;

677 
__IO
 
uöt32_t
 
	gLCKR
;

678 
__IO
 
uöt32_t
 
	gAFR
[2];

679 } 
	tGPIO_Ty≥Def
;

687 
__IO
 
uöt32_t
 
	gMEMRMP
;

688 
__IO
 
uöt32_t
 
	gPMC
;

689 
__IO
 
uöt32_t
 
	gEXTICR
[4];

690 
uöt32_t
 
	gRESERVED
[2];

691 
__IO
 
uöt32_t
 
	gCMPCR
;

692 } 
	tSYSCFG_Ty≥Def
;

700 
__IO
 
uöt16_t
 
	gCR1
;

701 
uöt16_t
 
	gRESERVED0
;

702 
__IO
 
uöt16_t
 
	gCR2
;

703 
uöt16_t
 
	gRESERVED1
;

704 
__IO
 
uöt16_t
 
	gOAR1
;

705 
uöt16_t
 
	gRESERVED2
;

706 
__IO
 
uöt16_t
 
	gOAR2
;

707 
uöt16_t
 
	gRESERVED3
;

708 
__IO
 
uöt16_t
 
	gDR
;

709 
uöt16_t
 
	gRESERVED4
;

710 
__IO
 
uöt16_t
 
	gSR1
;

711 
uöt16_t
 
	gRESERVED5
;

712 
__IO
 
uöt16_t
 
	gSR2
;

713 
uöt16_t
 
	gRESERVED6
;

714 
__IO
 
uöt16_t
 
	gCCR
;

715 
uöt16_t
 
	gRESERVED7
;

716 
__IO
 
uöt16_t
 
	gTRISE
;

717 
uöt16_t
 
	gRESERVED8
;

718 } 
	tI2C_Ty≥Def
;

726 
__IO
 
uöt32_t
 
	gKR
;

727 
__IO
 
uöt32_t
 
	gPR
;

728 
__IO
 
uöt32_t
 
	gRLR
;

729 
__IO
 
uöt32_t
 
	gSR
;

730 } 
	tIWDG_Ty≥Def
;

738 
__IO
 
uöt32_t
 
	gCR
;

739 
__IO
 
uöt32_t
 
	gCSR
;

740 } 
	tPWR_Ty≥Def
;

748 
__IO
 
uöt32_t
 
	gCR
;

749 
__IO
 
uöt32_t
 
	gPLLCFGR
;

750 
__IO
 
uöt32_t
 
	gCFGR
;

751 
__IO
 
uöt32_t
 
	gCIR
;

752 
__IO
 
uöt32_t
 
	gAHB1RSTR
;

753 
__IO
 
uöt32_t
 
	gAHB2RSTR
;

754 
__IO
 
uöt32_t
 
	gAHB3RSTR
;

755 
uöt32_t
 
	gRESERVED0
;

756 
__IO
 
uöt32_t
 
	gAPB1RSTR
;

757 
__IO
 
uöt32_t
 
	gAPB2RSTR
;

758 
uöt32_t
 
	gRESERVED1
[2];

759 
__IO
 
uöt32_t
 
	gAHB1ENR
;

760 
__IO
 
uöt32_t
 
	gAHB2ENR
;

761 
__IO
 
uöt32_t
 
	gAHB3ENR
;

762 
uöt32_t
 
	gRESERVED2
;

763 
__IO
 
uöt32_t
 
	gAPB1ENR
;

764 
__IO
 
uöt32_t
 
	gAPB2ENR
;

765 
uöt32_t
 
	gRESERVED3
[2];

766 
__IO
 
uöt32_t
 
	gAHB1LPENR
;

767 
__IO
 
uöt32_t
 
	gAHB2LPENR
;

768 
__IO
 
uöt32_t
 
	gAHB3LPENR
;

769 
uöt32_t
 
	gRESERVED4
;

770 
__IO
 
uöt32_t
 
	gAPB1LPENR
;

771 
__IO
 
uöt32_t
 
	gAPB2LPENR
;

772 
uöt32_t
 
	gRESERVED5
[2];

773 
__IO
 
uöt32_t
 
	gBDCR
;

774 
__IO
 
uöt32_t
 
	gCSR
;

775 
uöt32_t
 
	gRESERVED6
[2];

776 
__IO
 
uöt32_t
 
	gSSCGR
;

777 
__IO
 
uöt32_t
 
	gPLLI2SCFGR
;

778 } 
	tRCC_Ty≥Def
;

786 
__IO
 
uöt32_t
 
	gTR
;

787 
__IO
 
uöt32_t
 
	gDR
;

788 
__IO
 
uöt32_t
 
	gCR
;

789 
__IO
 
uöt32_t
 
	gISR
;

790 
__IO
 
uöt32_t
 
	gPRER
;

791 
__IO
 
uöt32_t
 
	gWUTR
;

792 
__IO
 
uöt32_t
 
	gCALIBR
;

793 
__IO
 
uöt32_t
 
	gALRMAR
;

794 
__IO
 
uöt32_t
 
	gALRMBR
;

795 
__IO
 
uöt32_t
 
	gWPR
;

796 
__IO
 
uöt32_t
 
	gSSR
;

797 
__IO
 
uöt32_t
 
	gSHIFTR
;

798 
__IO
 
uöt32_t
 
	gTSTR
;

799 
__IO
 
uöt32_t
 
	gTSDR
;

800 
__IO
 
uöt32_t
 
	gTSSSR
;

801 
__IO
 
uöt32_t
 
	gCALR
;

802 
__IO
 
uöt32_t
 
	gTAFCR
;

803 
__IO
 
uöt32_t
 
	gALRMASSR
;

804 
__IO
 
uöt32_t
 
	gALRMBSSR
;

805 
uöt32_t
 
	gRESERVED7
;

806 
__IO
 
uöt32_t
 
	gBKP0R
;

807 
__IO
 
uöt32_t
 
	gBKP1R
;

808 
__IO
 
uöt32_t
 
	gBKP2R
;

809 
__IO
 
uöt32_t
 
	gBKP3R
;

810 
__IO
 
uöt32_t
 
	gBKP4R
;

811 
__IO
 
uöt32_t
 
	gBKP5R
;

812 
__IO
 
uöt32_t
 
	gBKP6R
;

813 
__IO
 
uöt32_t
 
	gBKP7R
;

814 
__IO
 
uöt32_t
 
	gBKP8R
;

815 
__IO
 
uöt32_t
 
	gBKP9R
;

816 
__IO
 
uöt32_t
 
	gBKP10R
;

817 
__IO
 
uöt32_t
 
	gBKP11R
;

818 
__IO
 
uöt32_t
 
	gBKP12R
;

819 
__IO
 
uöt32_t
 
	gBKP13R
;

820 
__IO
 
uöt32_t
 
	gBKP14R
;

821 
__IO
 
uöt32_t
 
	gBKP15R
;

822 
__IO
 
uöt32_t
 
	gBKP16R
;

823 
__IO
 
uöt32_t
 
	gBKP17R
;

824 
__IO
 
uöt32_t
 
	gBKP18R
;

825 
__IO
 
uöt32_t
 
	gBKP19R
;

826 } 
	tRTC_Ty≥Def
;

834 
__IO
 
uöt32_t
 
	gPOWER
;

835 
__IO
 
uöt32_t
 
	gCLKCR
;

836 
__IO
 
uöt32_t
 
	gARG
;

837 
__IO
 
uöt32_t
 
	gCMD
;

838 
__I
 
uöt32_t
 
	gRESPCMD
;

839 
__I
 
uöt32_t
 
	gRESP1
;

840 
__I
 
uöt32_t
 
	gRESP2
;

841 
__I
 
uöt32_t
 
	gRESP3
;

842 
__I
 
uöt32_t
 
	gRESP4
;

843 
__IO
 
uöt32_t
 
	gDTIMER
;

844 
__IO
 
uöt32_t
 
	gDLEN
;

845 
__IO
 
uöt32_t
 
	gDCTRL
;

846 
__I
 
uöt32_t
 
	gDCOUNT
;

847 
__I
 
uöt32_t
 
	gSTA
;

848 
__IO
 
uöt32_t
 
	gICR
;

849 
__IO
 
uöt32_t
 
	gMASK
;

850 
uöt32_t
 
	gRESERVED0
[2];

851 
__I
 
uöt32_t
 
	gFIFOCNT
;

852 
uöt32_t
 
	gRESERVED1
[13];

853 
__IO
 
uöt32_t
 
	gFIFO
;

854 } 
	tSDIO_Ty≥Def
;

862 
__IO
 
uöt16_t
 
	gCR1
;

863 
uöt16_t
 
	gRESERVED0
;

864 
__IO
 
uöt16_t
 
	gCR2
;

865 
uöt16_t
 
	gRESERVED1
;

866 
__IO
 
uöt16_t
 
	gSR
;

867 
uöt16_t
 
	gRESERVED2
;

868 
__IO
 
uöt16_t
 
	gDR
;

869 
uöt16_t
 
	gRESERVED3
;

870 
__IO
 
uöt16_t
 
	gCRCPR
;

871 
uöt16_t
 
	gRESERVED4
;

872 
__IO
 
uöt16_t
 
	gRXCRCR
;

873 
uöt16_t
 
	gRESERVED5
;

874 
__IO
 
uöt16_t
 
	gTXCRCR
;

875 
uöt16_t
 
	gRESERVED6
;

876 
__IO
 
uöt16_t
 
	gI2SCFGR
;

877 
uöt16_t
 
	gRESERVED7
;

878 
__IO
 
uöt16_t
 
	gI2SPR
;

879 
uöt16_t
 
	gRESERVED8
;

880 } 
	tSPI_Ty≥Def
;

888 
__IO
 
uöt16_t
 
	gCR1
;

889 
uöt16_t
 
	gRESERVED0
;

890 
__IO
 
uöt16_t
 
	gCR2
;

891 
uöt16_t
 
	gRESERVED1
;

892 
__IO
 
uöt16_t
 
	gSMCR
;

893 
uöt16_t
 
	gRESERVED2
;

894 
__IO
 
uöt16_t
 
	gDIER
;

895 
uöt16_t
 
	gRESERVED3
;

896 
__IO
 
uöt16_t
 
	gSR
;

897 
uöt16_t
 
	gRESERVED4
;

898 
__IO
 
uöt16_t
 
	gEGR
;

899 
uöt16_t
 
	gRESERVED5
;

900 
__IO
 
uöt16_t
 
	gCCMR1
;

901 
uöt16_t
 
	gRESERVED6
;

902 
__IO
 
uöt16_t
 
	gCCMR2
;

903 
uöt16_t
 
	gRESERVED7
;

904 
__IO
 
uöt16_t
 
	gCCER
;

905 
uöt16_t
 
	gRESERVED8
;

906 
__IO
 
uöt32_t
 
	gCNT
;

907 
__IO
 
uöt16_t
 
	gPSC
;

908 
uöt16_t
 
	gRESERVED9
;

909 
__IO
 
uöt32_t
 
	gARR
;

910 
__IO
 
uöt16_t
 
	gRCR
;

911 
uöt16_t
 
	gRESERVED10
;

912 
__IO
 
uöt32_t
 
	gCCR1
;

913 
__IO
 
uöt32_t
 
	gCCR2
;

914 
__IO
 
uöt32_t
 
	gCCR3
;

915 
__IO
 
uöt32_t
 
	gCCR4
;

916 
__IO
 
uöt16_t
 
	gBDTR
;

917 
uöt16_t
 
	gRESERVED11
;

918 
__IO
 
uöt16_t
 
	gDCR
;

919 
uöt16_t
 
	gRESERVED12
;

920 
__IO
 
uöt16_t
 
	gDMAR
;

921 
uöt16_t
 
	gRESERVED13
;

922 
__IO
 
uöt16_t
 
	gOR
;

923 
uöt16_t
 
	gRESERVED14
;

924 } 
	tTIM_Ty≥Def
;

932 
__IO
 
uöt16_t
 
	gSR
;

933 
uöt16_t
 
	gRESERVED0
;

934 
__IO
 
uöt16_t
 
	gDR
;

935 
uöt16_t
 
	gRESERVED1
;

936 
__IO
 
uöt16_t
 
	gBRR
;

937 
uöt16_t
 
	gRESERVED2
;

938 
__IO
 
uöt16_t
 
	gCR1
;

939 
uöt16_t
 
	gRESERVED3
;

940 
__IO
 
uöt16_t
 
	gCR2
;

941 
uöt16_t
 
	gRESERVED4
;

942 
__IO
 
uöt16_t
 
	gCR3
;

943 
uöt16_t
 
	gRESERVED5
;

944 
__IO
 
uöt16_t
 
	gGTPR
;

945 
uöt16_t
 
	gRESERVED6
;

946 } 
	tUSART_Ty≥Def
;

954 
__IO
 
uöt32_t
 
	gCR
;

955 
__IO
 
uöt32_t
 
	gCFR
;

956 
__IO
 
uöt32_t
 
	gSR
;

957 } 
	tWWDG_Ty≥Def
;

965 
__IO
 
uöt32_t
 
	gCR
;

966 
__IO
 
uöt32_t
 
	gSR
;

967 
__IO
 
uöt32_t
 
	gDR
;

968 
__IO
 
uöt32_t
 
	gDOUT
;

969 
__IO
 
uöt32_t
 
	gDMACR
;

970 
__IO
 
uöt32_t
 
	gIMSCR
;

971 
__IO
 
uöt32_t
 
	gRISR
;

972 
__IO
 
uöt32_t
 
	gMISR
;

973 
__IO
 
uöt32_t
 
	gK0LR
;

974 
__IO
 
uöt32_t
 
	gK0RR
;

975 
__IO
 
uöt32_t
 
	gK1LR
;

976 
__IO
 
uöt32_t
 
	gK1RR
;

977 
__IO
 
uöt32_t
 
	gK2LR
;

978 
__IO
 
uöt32_t
 
	gK2RR
;

979 
__IO
 
uöt32_t
 
	gK3LR
;

980 
__IO
 
uöt32_t
 
	gK3RR
;

981 
__IO
 
uöt32_t
 
	gIV0LR
;

982 
__IO
 
uöt32_t
 
	gIV0RR
;

983 
__IO
 
uöt32_t
 
	gIV1LR
;

984 
__IO
 
uöt32_t
 
	gIV1RR
;

985 } 
	tCRYP_Ty≥Def
;

993 
__IO
 
uöt32_t
 
	gCR
;

994 
__IO
 
uöt32_t
 
	gDIN
;

995 
__IO
 
uöt32_t
 
	gSTR
;

996 
__IO
 
uöt32_t
 
	gHR
[5];

997 
__IO
 
uöt32_t
 
	gIMR
;

998 
__IO
 
uöt32_t
 
	gSR
;

999 
uöt32_t
 
	gRESERVED
[52];

1000 
__IO
 
uöt32_t
 
	gCSR
[51];

1001 } 
	tHASH_Ty≥Def
;

1009 
__IO
 
uöt32_t
 
	gCR
;

1010 
__IO
 
uöt32_t
 
	gSR
;

1011 
__IO
 
uöt32_t
 
	gDR
;

1012 } 
	tRNG_Ty≥Def
;

1021 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1022 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

1023 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1024 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

1025 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1026 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

1027 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1029 
	#CCMDATARAM_BB_BASE
 ((
uöt32_t
)0x12000000Ë

	)

1030 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1031 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x2201C000Ë

	)

1032 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1033 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42024000Ë

	)

1036 
	#SRAM_BASE
 
SRAM1_BASE


	)

1037 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

1041 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1042 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

1043 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

1044 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

1047 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1048 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1049 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1050 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1051 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1052 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1053 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1054 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1055 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1056 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1057 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1058 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1059 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

1060 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1061 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1062 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

1063 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1064 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1065 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1066 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1067 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1068 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1069 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

1070 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1071 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1072 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1073 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1076 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1077 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1078 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1079 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1080 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1081 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2100)

	)

1082 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x2200)

	)

1083 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

1084 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1085 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1086 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1087 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1088 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1089 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1090 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1093 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

1094 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

1095 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

1096 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

1097 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

1098 
	#GPIOF_BASE
 (
AHB1PERIPH_BASE
 + 0x1400)

	)

1099 
	#GPIOG_BASE
 (
AHB1PERIPH_BASE
 + 0x1800)

	)

1100 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

1101 
	#GPIOI_BASE
 (
AHB1PERIPH_BASE
 + 0x2000)

	)

1102 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

1103 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

1104 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

1105 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

1106 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

1107 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

1108 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

1109 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

1110 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

1111 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

1112 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

1113 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

1114 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

1115 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

1116 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

1117 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

1118 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

1119 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

1120 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

1121 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

1122 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

1123 
	#ETH_BASE
 (
AHB1PERIPH_BASE
 + 0x8000)

	)

1124 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1125 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1126 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1127 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1130 
	#DCMI_BASE
 (
AHB2PERIPH_BASE
 + 0x50000)

	)

1131 
	#CRYP_BASE
 (
AHB2PERIPH_BASE
 + 0x60000)

	)

1132 
	#HASH_BASE
 (
AHB2PERIPH_BASE
 + 0x60400)

	)

1133 
	#RNG_BASE
 (
AHB2PERIPH_BASE
 + 0x60800)

	)

1136 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000)

	)

1137 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104)

	)

1138 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060)

	)

1139 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080)

	)

1140 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0)

	)

1143 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

1152 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1153 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1154 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1155 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1156 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1157 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1158 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1159 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1160 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1161 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1162 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1163 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1164 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

1165 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1166 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1167 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

1168 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1169 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1170 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1171 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1172 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1173 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1174 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

1175 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1176 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1177 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1178 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1179 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1180 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1181 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1182 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

1183 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

1184 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1185 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1186 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1187 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1188 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1189 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

1190 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1191 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1192 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

1193 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

1194 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

1195 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

1196 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1197 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1198 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1199 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1200 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

1201 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

1202 
	#GPIOI
 ((
GPIO_Ty≥Def
 *Ë
GPIOI_BASE
)

	)

1203 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

1204 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

1205 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

1206 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

1207 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

1208 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

1209 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

1210 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

1211 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

1212 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

1213 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

1214 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

1215 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

1216 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

1217 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

1218 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

1219 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

1220 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

1221 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

1222 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

1223 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

1224 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

1225 
	#DCMI
 ((
DCMI_Ty≥Def
 *Ë
DCMI_BASE
)

	)

1226 
	#CRYP
 ((
CRYP_Ty≥Def
 *Ë
CRYP_BASE
)

	)

1227 
	#HASH
 ((
HASH_Ty≥Def
 *Ë
HASH_BASE
)

	)

1228 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

1229 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

1230 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

1231 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

1232 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

1233 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

1234 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

1258 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

1259 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

1260 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

1261 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

1262 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

1263 
	#ADC_SR_OVR
 ((
uöt8_t
)0x20Ë

	)

1266 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

1267 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

1268 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

1269 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

1270 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

1271 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

1272 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

1273 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

1274 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

1275 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

1276 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

1277 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

1278 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

1279 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

1280 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

1281 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

1282 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

1283 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

1284 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

1285 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

1286 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

1287 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

1288 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

1289 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

1292 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

1293 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

1294 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

1295 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

1296 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

1297 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

1298 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

1299 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

1300 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

1301 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

1302 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

1303 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

1304 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

1305 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

1306 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

1307 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

1308 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

1309 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

1310 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

1311 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

1312 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

1313 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

1314 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

1315 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

1318 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

1319 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

1320 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

1321 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

1322 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

1323 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

1324 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

1325 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

1326 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

1327 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

1328 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

1329 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

1330 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

1331 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

1332 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

1333 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

1334 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

1335 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

1336 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

1337 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

1338 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

1339 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

1340 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

1341 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

1342 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

1343 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

1344 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

1345 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

1346 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

1347 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

1348 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

1349 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

1350 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

1351 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

1352 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

1353 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

1356 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

1357 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

1358 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

1359 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

1360 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

1361 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

1362 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

1363 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

1364 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

1365 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

1366 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

1367 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

1368 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

1369 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

1370 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

1371 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

1372 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

1373 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

1374 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

1375 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

1376 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

1377 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

1378 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

1379 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

1380 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

1381 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

1382 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

1383 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

1384 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

1385 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

1386 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

1387 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

1388 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

1389 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

1390 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

1391 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

1392 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

1393 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

1394 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

1395 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

1398 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

1401 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

1404 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

1407 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

1410 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

1413 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

1416 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

1417 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

1418 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

1419 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

1420 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

1421 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

1422 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

1423 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

1424 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

1425 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

1426 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

1427 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

1428 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

1429 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

1430 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

1431 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

1432 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

1433 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

1434 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

1435 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

1436 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

1437 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

1438 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

1439 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

1440 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

1441 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

1442 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

1443 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

1444 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

1447 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

1448 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

1449 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

1450 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

1451 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

1452 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

1453 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

1454 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

1455 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

1456 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

1457 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

1458 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

1459 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

1460 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

1461 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

1462 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

1463 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

1464 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

1465 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

1466 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

1467 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

1468 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

1469 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

1470 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

1471 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

1472 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

1473 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

1474 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

1475 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

1476 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

1477 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

1478 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

1479 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

1480 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

1481 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

1482 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

1485 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

1486 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1487 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1488 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1489 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1490 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1491 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1492 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1493 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1494 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1495 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1496 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1497 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1498 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1499 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1500 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1501 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1502 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1503 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1504 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1505 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1506 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1507 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1508 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1509 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

1510 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

1511 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

1512 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

1513 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

1514 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

1515 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

1516 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

1517 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

1518 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

1519 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

1520 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

1523 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

1524 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1525 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1526 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1527 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1528 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1529 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1530 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1531 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1532 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1533 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1534 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1535 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1536 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1537 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1538 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1539 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1540 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1541 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1542 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1543 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1544 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1545 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1546 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1547 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

1548 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

1549 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

1552 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

1555 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

1558 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

1561 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

1564 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

1565 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

1568 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

1569 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

1570 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

1571 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

1572 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

1573 
	#ADC_CSR_DOVR1
 ((
uöt32_t
)0x00000020Ë

	)

1574 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

1575 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

1576 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

1577 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

1578 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

1579 
	#ADC_CSR_DOVR2
 ((
uöt32_t
)0x00002000Ë

	)

1580 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

1581 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

1582 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

1583 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

1584 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

1585 
	#ADC_CSR_DOVR3
 ((
uöt32_t
)0x00200000Ë

	)

1588 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

1589 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

1590 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

1591 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

1592 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

1593 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

1594 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

1595 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

1596 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

1597 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

1598 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

1599 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

1600 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

1601 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

1602 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

1603 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

1604 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

1605 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

1606 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

1607 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

1610 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

1611 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

1620 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

1621 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

1622 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

1623 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

1624 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

1625 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

1626 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

1627 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

1628 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

1631 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

1632 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

1633 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

1634 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

1635 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

1636 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

1637 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

1638 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

1639 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

1642 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

1643 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

1644 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

1645 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

1646 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

1647 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

1648 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

1649 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

1650 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

1651 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

1652 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

1653 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

1654 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

1655 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

1656 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

1657 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

1659 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

1660 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

1661 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

1662 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

1664 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

1665 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

1666 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

1667 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

1670 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

1671 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

1672 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

1673 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

1676 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

1677 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

1678 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

1679 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

1682 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

1683 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

1684 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

1685 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

1686 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

1687 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

1688 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

1689 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

1690 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

1691 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

1692 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

1693 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

1694 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

1695 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

1698 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

1699 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

1700 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

1702 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

1703 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

1704 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

1705 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

1707 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

1708 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

1711 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

1712 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

1713 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

1714 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

1715 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

1716 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

1720 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

1721 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

1722 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

1723 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

1724 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

1727 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

1728 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

1729 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

1732 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

1733 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

1734 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

1735 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

1738 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

1739 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

1740 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

1741 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

1744 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

1745 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

1746 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

1747 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

1748 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

1751 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

1752 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

1753 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

1756 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

1757 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

1758 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

1759 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

1762 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

1763 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

1764 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

1765 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

1768 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

1769 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

1770 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

1771 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

1772 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

1775 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

1776 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

1777 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

1780 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

1781 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

1782 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

1783 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

1786 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

1787 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

1788 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

1789 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

1792 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

1793 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

1794 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

1795 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

1798 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

1799 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

1800 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

1803 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

1804 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

1805 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

1806 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

1809 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

1810 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

1811 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

1812 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

1815 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

1816 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

1817 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

1818 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

1821 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

1822 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

1823 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

1826 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

1827 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

1828 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

1829 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

1832 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

1833 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

1834 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

1835 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

1839 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

1842 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

1843 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

1844 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

1845 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

1846 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

1847 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

1848 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

1849 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

1850 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

1851 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

1852 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

1853 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

1854 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

1855 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

1856 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

1859 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

1860 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

1861 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

1862 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

1863 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

1864 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

1865 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

1866 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

1867 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

1868 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

1869 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

1870 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

1871 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

1872 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

1873 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

1876 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

1877 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

1878 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

1879 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

1880 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

1881 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

1882 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

1883 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

1884 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

1885 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

1886 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

1887 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

1888 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

1889 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

1890 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

1893 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

1894 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

1895 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

1896 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

1897 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

1898 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

1899 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

1900 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

1901 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

1902 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

1903 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

1904 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

1905 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

1906 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

1907 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

1910 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

1911 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

1912 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

1913 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

1914 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

1915 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

1916 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

1917 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

1918 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

1919 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

1920 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

1921 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

1922 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

1923 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

1924 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

1925 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

1926 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

1927 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

1928 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

1929 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

1930 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

1931 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

1932 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

1933 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

1934 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

1935 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

1936 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

1937 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

1938 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

1939 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

1940 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

1941 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

1944 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

1945 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

1946 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

1947 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

1948 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

1949 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

1950 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

1951 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

1952 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

1953 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

1954 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

1955 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

1956 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

1957 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

1958 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

1959 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

1960 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

1961 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

1962 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

1963 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

1964 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

1965 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

1966 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

1967 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

1968 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

1969 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

1970 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

1971 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

1972 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

1973 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

1974 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

1975 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

1978 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

1979 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

1980 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

1981 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

1982 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

1983 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

1984 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

1985 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

1986 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

1987 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

1988 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

1989 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

1990 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

1991 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

1992 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

1993 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

1994 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

1995 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

1996 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

1997 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

1998 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

1999 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2000 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2001 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2002 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2003 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2004 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2005 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2006 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2007 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2008 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2009 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2012 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2013 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2014 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2015 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2016 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2017 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2018 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2019 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2020 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2021 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2022 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2023 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2024 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2025 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2026 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2027 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2028 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2029 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2030 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2031 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2032 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2033 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2034 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2035 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2036 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2037 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2038 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2039 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2040 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2041 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2042 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2043 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2046 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2047 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2048 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2049 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2050 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2051 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2052 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2053 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2054 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2055 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2056 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2057 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2058 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2059 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2060 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2061 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2062 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2063 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2064 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2065 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2066 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2067 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2068 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2069 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2070 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2071 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2072 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2073 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2074 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2075 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2076 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2077 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2080 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2081 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2082 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2083 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2084 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2085 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2086 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2087 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2088 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2089 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2090 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2091 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2092 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2093 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2094 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2095 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2096 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2097 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2098 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2099 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2100 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2101 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2102 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2103 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2104 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2105 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2106 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2107 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2108 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2109 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2110 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2111 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2114 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2115 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2116 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2117 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2118 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2119 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2120 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2121 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2122 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2123 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2124 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2125 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2126 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2127 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2128 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2129 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2130 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2131 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2132 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2133 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2134 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2135 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2136 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2137 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2138 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2139 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2140 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2141 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2142 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2143 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2144 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2145 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2148 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2149 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2150 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2151 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2152 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2153 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2154 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2155 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2156 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2157 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2158 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2159 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2160 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2161 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2162 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2163 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2164 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2165 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2166 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2167 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2168 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2169 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2170 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2171 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2172 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2173 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2174 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2175 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2176 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2177 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2178 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2179 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2182 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2183 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2184 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2185 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2186 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2187 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2188 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2189 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2190 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2191 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2192 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2193 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2194 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2195 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2196 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2197 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2198 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2199 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2200 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2201 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2202 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2203 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2204 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2205 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2206 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2207 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2208 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2209 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2210 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2211 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2212 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2213 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2216 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2217 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2218 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2219 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2220 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2221 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2222 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2223 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2224 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2225 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2226 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2227 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2228 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2229 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2230 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2231 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2232 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2233 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2234 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2235 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2236 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2237 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2238 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2239 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2240 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2241 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2242 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2243 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2244 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2245 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2246 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2247 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2250 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2251 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2252 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2253 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2254 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2255 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2256 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2257 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2258 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2259 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2260 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2261 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2262 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2263 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2264 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2265 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2266 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2267 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2268 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2269 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2270 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2271 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2272 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2273 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2274 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2275 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2276 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2277 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2278 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2279 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2280 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2281 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2284 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2285 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2286 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2287 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2288 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2289 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2290 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2291 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2292 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2293 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2294 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2295 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2296 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2297 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2298 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2299 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2300 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2301 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2302 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2303 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2304 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2305 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2306 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2307 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2308 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2309 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2310 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2311 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2312 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2313 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2314 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2315 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2318 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2319 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2320 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2321 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2322 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2323 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2324 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2325 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2326 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2327 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2328 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2329 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2330 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2331 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2332 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2333 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2334 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2335 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2336 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2337 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2338 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2339 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2340 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2341 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2342 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2343 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2344 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2345 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2346 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2347 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2348 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2349 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2352 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2353 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2354 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2355 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2356 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2357 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2358 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2359 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2360 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2361 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2362 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2363 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2364 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2365 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2366 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2367 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2368 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2369 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2370 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2371 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2372 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2373 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2374 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2375 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2376 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2377 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2378 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2379 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2380 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2381 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2382 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2383 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2386 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2387 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2388 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2389 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2390 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2391 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2392 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2393 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2394 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2395 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2396 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2397 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2398 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2399 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2400 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2401 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2402 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2403 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2404 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2405 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2406 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2407 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2408 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2409 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2410 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2411 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2412 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2413 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2414 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2415 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2416 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2417 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2420 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2421 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2422 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2423 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2424 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2425 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2426 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2427 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2428 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2429 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2430 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2431 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2432 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2433 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2434 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2435 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2436 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2437 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2438 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2439 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2440 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2441 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2442 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2443 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2444 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2445 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2446 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2447 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2448 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2449 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2450 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2451 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2454 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2455 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2456 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2457 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2458 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2459 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2460 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2461 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2462 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2463 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2464 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2465 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2466 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2467 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2468 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2469 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2470 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2471 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2472 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2473 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2474 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2475 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2476 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2477 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2478 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2479 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2480 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2481 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2482 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2483 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2484 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2485 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2488 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2489 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2490 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2491 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2492 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2493 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2494 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2495 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2496 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2497 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2498 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2499 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2500 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2501 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2502 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2503 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2504 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2505 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2506 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2507 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2508 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2509 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2510 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2511 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2512 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2513 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2514 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2515 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2516 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2517 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2518 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2519 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2522 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2523 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2524 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2525 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2526 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2527 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2528 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2529 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2530 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2531 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2532 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2533 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2534 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2535 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2536 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2537 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2538 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2539 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2540 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2541 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2542 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2543 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2544 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2545 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2546 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2547 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2548 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2549 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2550 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2551 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2552 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2553 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2556 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2557 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2558 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2559 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2560 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2561 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2562 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2563 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2564 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2565 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2566 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2567 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2568 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2569 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2570 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2571 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2572 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2573 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2574 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2575 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2576 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2577 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2578 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2579 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2580 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2581 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2582 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2583 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2584 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2585 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2586 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2587 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2590 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2591 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2592 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2593 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2594 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2595 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2596 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2597 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2598 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2599 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2600 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2601 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2602 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2603 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2604 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2605 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2606 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2607 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2608 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2609 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2610 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2611 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2612 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2613 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2614 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2615 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2616 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2617 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2618 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2619 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2620 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2621 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2624 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2625 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2626 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2627 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2628 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2629 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2630 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2631 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2632 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2633 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2634 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2635 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2636 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2637 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2638 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2639 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2640 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2641 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2642 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2643 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2644 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2645 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2646 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2647 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2648 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2649 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2650 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2651 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2652 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2653 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2654 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2655 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2658 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2659 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2660 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2661 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2662 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2663 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2664 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2665 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2666 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2667 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2668 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2669 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2670 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2671 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2672 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2673 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2674 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2675 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2676 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2677 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2678 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2679 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2680 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2681 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2682 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2683 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2684 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2685 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2686 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2687 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2688 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2689 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2692 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2693 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2694 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2695 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2696 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2697 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2698 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2699 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2700 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2701 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2702 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2703 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2704 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2705 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2706 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2707 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2708 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2709 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2710 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2711 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2712 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2713 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2714 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2715 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2716 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2717 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2718 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2719 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2720 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2721 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2722 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2723 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2726 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2727 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2728 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2729 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2730 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2731 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2732 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2733 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2734 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2735 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2736 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2737 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2738 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2739 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2740 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2741 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2742 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2743 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2744 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2745 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2746 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2747 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2748 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2749 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2750 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2751 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2752 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2753 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2754 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2755 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2756 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2757 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2760 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2761 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2762 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2763 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2764 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2765 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2766 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2767 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2768 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2769 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2770 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2771 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2772 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2773 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2774 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2775 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2776 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2777 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2778 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2779 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2780 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2781 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2782 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2783 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2784 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2785 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2786 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2787 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2788 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2789 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2790 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2791 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2794 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2795 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2796 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2797 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2798 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2799 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2800 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2801 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2802 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2803 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2804 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2805 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2806 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2807 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2808 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2809 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2810 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2811 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2812 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2813 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2814 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2815 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2816 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2817 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2818 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2819 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2820 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2821 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2822 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2823 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2824 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2825 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2828 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2829 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2830 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2831 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2832 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2833 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2834 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2835 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2836 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2837 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2838 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2839 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2840 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2841 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2842 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2843 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2844 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2845 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2846 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2847 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2848 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2849 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2850 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2851 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2852 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2853 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2854 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2855 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2856 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2857 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2858 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2859 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2867 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

2871 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

2875 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

2883 
	#CRYP_CR_ALGODIR
 ((
uöt32_t
)0x00000004)

	)

2885 
	#CRYP_CR_ALGOMODE
 ((
uöt32_t
)0x00000038)

	)

2886 
	#CRYP_CR_ALGOMODE_0
 ((
uöt32_t
)0x00000008)

	)

2887 
	#CRYP_CR_ALGOMODE_1
 ((
uöt32_t
)0x00000010)

	)

2888 
	#CRYP_CR_ALGOMODE_2
 ((
uöt32_t
)0x00000020)

	)

2889 
	#CRYP_CR_ALGOMODE_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

2890 
	#CRYP_CR_ALGOMODE_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

2891 
	#CRYP_CR_ALGOMODE_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

2892 
	#CRYP_CR_ALGOMODE_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

2893 
	#CRYP_CR_ALGOMODE_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

2894 
	#CRYP_CR_ALGOMODE_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

2895 
	#CRYP_CR_ALGOMODE_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

2896 
	#CRYP_CR_ALGOMODE_AES_KEY
 ((
uöt32_t
)0x00000038)

	)

2898 
	#CRYP_CR_DATATYPE
 ((
uöt32_t
)0x000000C0)

	)

2899 
	#CRYP_CR_DATATYPE_0
 ((
uöt32_t
)0x00000040)

	)

2900 
	#CRYP_CR_DATATYPE_1
 ((
uöt32_t
)0x00000080)

	)

2901 
	#CRYP_CR_KEYSIZE
 ((
uöt32_t
)0x00000300)

	)

2902 
	#CRYP_CR_KEYSIZE_0
 ((
uöt32_t
)0x00000100)

	)

2903 
	#CRYP_CR_KEYSIZE_1
 ((
uöt32_t
)0x00000200)

	)

2904 
	#CRYP_CR_FFLUSH
 ((
uöt32_t
)0x00004000)

	)

2905 
	#CRYP_CR_CRYPEN
 ((
uöt32_t
)0x00008000)

	)

2907 
	#CRYP_SR_IFEM
 ((
uöt32_t
)0x00000001)

	)

2908 
	#CRYP_SR_IFNF
 ((
uöt32_t
)0x00000002)

	)

2909 
	#CRYP_SR_OFNE
 ((
uöt32_t
)0x00000004)

	)

2910 
	#CRYP_SR_OFFU
 ((
uöt32_t
)0x00000008)

	)

2911 
	#CRYP_SR_BUSY
 ((
uöt32_t
)0x00000010)

	)

2913 
	#CRYP_DMACR_DIEN
 ((
uöt32_t
)0x00000001)

	)

2914 
	#CRYP_DMACR_DOEN
 ((
uöt32_t
)0x00000002)

	)

2916 
	#CRYP_IMSCR_INIM
 ((
uöt32_t
)0x00000001)

	)

2917 
	#CRYP_IMSCR_OUTIM
 ((
uöt32_t
)0x00000002)

	)

2919 
	#CRYP_RISR_OUTRIS
 ((
uöt32_t
)0x00000001)

	)

2920 
	#CRYP_RISR_INRIS
 ((
uöt32_t
)0x00000002)

	)

2922 
	#CRYP_MISR_INMIS
 ((
uöt32_t
)0x00000001)

	)

2923 
	#CRYP_MISR_OUTMIS
 ((
uöt32_t
)0x00000002)

	)

2931 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

2932 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

2933 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

2935 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

2936 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

2937 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

2938 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

2940 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

2941 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

2942 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

2944 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

2945 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

2946 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

2947 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

2948 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

2950 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

2951 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

2952 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

2953 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

2955 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

2956 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

2957 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

2958 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

2960 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

2961 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

2962 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

2964 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

2965 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

2966 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

2967 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

2968 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

2970 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

2973 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

2974 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

2977 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

2980 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

2983 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

2986 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

2989 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

2992 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

2995 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

2996 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

2999 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3000 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3003 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3004 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3007 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3010 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3013 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

3014 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

3028 
	#DCMI_CR_CAPTURE
 ((
uöt32_t
)0x00000001)

	)

3029 
	#DCMI_CR_CM
 ((
uöt32_t
)0x00000002)

	)

3030 
	#DCMI_CR_CROP
 ((
uöt32_t
)0x00000004)

	)

3031 
	#DCMI_CR_JPEG
 ((
uöt32_t
)0x00000008)

	)

3032 
	#DCMI_CR_ESS
 ((
uöt32_t
)0x00000010)

	)

3033 
	#DCMI_CR_PCKPOL
 ((
uöt32_t
)0x00000020)

	)

3034 
	#DCMI_CR_HSPOL
 ((
uöt32_t
)0x00000040)

	)

3035 
	#DCMI_CR_VSPOL
 ((
uöt32_t
)0x00000080)

	)

3036 
	#DCMI_CR_FCRC_0
 ((
uöt32_t
)0x00000100)

	)

3037 
	#DCMI_CR_FCRC_1
 ((
uöt32_t
)0x00000200)

	)

3038 
	#DCMI_CR_EDM_0
 ((
uöt32_t
)0x00000400)

	)

3039 
	#DCMI_CR_EDM_1
 ((
uöt32_t
)0x00000800)

	)

3040 
	#DCMI_CR_CRE
 ((
uöt32_t
)0x00001000)

	)

3041 
	#DCMI_CR_ENABLE
 ((
uöt32_t
)0x00004000)

	)

3044 
	#DCMI_SR_HSYNC
 ((
uöt32_t
)0x00000001)

	)

3045 
	#DCMI_SR_VSYNC
 ((
uöt32_t
)0x00000002)

	)

3046 
	#DCMI_SR_FNE
 ((
uöt32_t
)0x00000004)

	)

3049 
	#DCMI_RISR_FRAME_RIS
 ((
uöt32_t
)0x00000001)

	)

3050 
	#DCMI_RISR_OVF_RIS
 ((
uöt32_t
)0x00000002)

	)

3051 
	#DCMI_RISR_ERR_RIS
 ((
uöt32_t
)0x00000004)

	)

3052 
	#DCMI_RISR_VSYNC_RIS
 ((
uöt32_t
)0x00000008)

	)

3053 
	#DCMI_RISR_LINE_RIS
 ((
uöt32_t
)0x00000010)

	)

3056 
	#DCMI_IER_FRAME_IE
 ((
uöt32_t
)0x00000001)

	)

3057 
	#DCMI_IER_OVF_IE
 ((
uöt32_t
)0x00000002)

	)

3058 
	#DCMI_IER_ERR_IE
 ((
uöt32_t
)0x00000004)

	)

3059 
	#DCMI_IER_VSYNC_IE
 ((
uöt32_t
)0x00000008)

	)

3060 
	#DCMI_IER_LINE_IE
 ((
uöt32_t
)0x00000010)

	)

3063 
	#DCMI_MISR_FRAME_MIS
 ((
uöt32_t
)0x00000001)

	)

3064 
	#DCMI_MISR_OVF_MIS
 ((
uöt32_t
)0x00000002)

	)

3065 
	#DCMI_MISR_ERR_MIS
 ((
uöt32_t
)0x00000004)

	)

3066 
	#DCMI_MISR_VSYNC_MIS
 ((
uöt32_t
)0x00000008)

	)

3067 
	#DCMI_MISR_LINE_MIS
 ((
uöt32_t
)0x00000010)

	)

3070 
	#DCMI_ICR_FRAME_ISC
 ((
uöt32_t
)0x00000001)

	)

3071 
	#DCMI_ICR_OVF_ISC
 ((
uöt32_t
)0x00000002)

	)

3072 
	#DCMI_ICR_ERR_ISC
 ((
uöt32_t
)0x00000004)

	)

3073 
	#DCMI_ICR_VSYNC_ISC
 ((
uöt32_t
)0x00000008)

	)

3074 
	#DCMI_ICR_LINE_ISC
 ((
uöt32_t
)0x00000010)

	)

3082 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

3083 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

3084 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

3085 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

3086 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

3087 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

3088 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

3089 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

3090 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

3091 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

3092 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

3093 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

3094 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

3095 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

3096 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

3097 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

3098 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

3099 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

3100 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

3101 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

3102 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

3103 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

3104 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

3105 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

3106 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

3107 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

3108 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

3109 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

3110 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

3111 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

3112 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

3113 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

3114 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

3115 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

3116 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

3119 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

3120 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

3121 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

3122 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

3123 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

3124 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

3125 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

3126 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

3127 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

3128 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

3129 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

3130 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

3131 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

3132 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

3133 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

3134 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

3135 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

3138 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

3139 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

3140 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

3141 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

3142 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

3143 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

3144 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

3145 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

3146 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

3149 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

3150 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

3151 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

3152 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

3153 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

3154 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

3155 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

3156 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

3157 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

3158 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

3159 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

3160 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

3161 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

3162 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

3163 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

3164 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

3165 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

3166 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

3167 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

3168 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

3171 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

3172 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

3173 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

3174 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

3175 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

3176 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

3177 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

3178 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

3179 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

3180 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

3181 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

3182 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

3183 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

3184 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

3185 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

3186 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

3187 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

3188 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

3189 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

3190 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

3193 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

3194 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

3195 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

3196 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

3197 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

3198 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

3199 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

3200 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

3201 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

3202 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

3203 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

3204 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

3205 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

3206 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

3207 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

3208 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

3209 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

3210 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

3211 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

3212 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

3215 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

3216 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

3217 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

3218 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

3219 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

3220 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

3221 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

3222 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

3223 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

3224 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

3225 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

3226 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

3227 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

3228 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

3229 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

3230 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

3231 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

3232 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

3233 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

3234 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

3242 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3243 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3244 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3245 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3246 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3247 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3248 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3249 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3250 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3251 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3252 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3253 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3254 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3255 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3256 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3257 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3258 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3259 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3260 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3261 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3264 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3265 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3266 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3267 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3268 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3269 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3270 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3271 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3272 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3273 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3274 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3275 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3276 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3277 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3278 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3279 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3280 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3281 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3282 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3283 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3286 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3287 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3288 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3289 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3290 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3291 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3292 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3293 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3294 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3295 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3296 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3297 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3298 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3299 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3300 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3301 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3302 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3303 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3304 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3305 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3308 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3309 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3310 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3311 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3312 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3313 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3314 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3315 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3316 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3317 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3318 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3319 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3320 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3321 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3322 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3323 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3324 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3325 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3326 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3327 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3330 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3331 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3332 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3333 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3334 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3335 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3336 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3337 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3338 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3339 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3340 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3341 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3342 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3343 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3344 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3345 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3346 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3347 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3348 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3349 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3352 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3353 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3354 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3355 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3356 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3357 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3358 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3359 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3360 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

3361 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

3362 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

3363 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

3364 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

3365 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

3366 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

3367 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

3368 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

3369 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

3370 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

3371 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

3379 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x00000007)

	)

3380 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

3381 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

3382 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

3383 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

3384 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

3385 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

3386 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

3387 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

3389 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

3390 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

3391 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

3392 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

3393 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

3394 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

3395 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

3398 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

3399 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

3400 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

3401 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

3402 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

3403 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

3404 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

3407 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

3408 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

3409 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

3410 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

3411 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

3412 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

3413 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

3414 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

3415 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

3416 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

3417 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

3418 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

3421 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

3422 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

3423 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

3424 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

3425 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

3426 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

3427 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

3428 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

3429 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

3430 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

3431 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

3432 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

3433 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

3434 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

3435 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

3436 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

3437 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

3438 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

3439 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

3440 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

3441 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

3442 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

3443 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

3444 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

3445 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

3446 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

3447 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

3448 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

3456 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3457 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3459 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3460 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3461 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3463 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3464 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3465 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3467 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3468 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3469 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3470 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3471 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3472 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3473 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3474 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3475 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

3476 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3479 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3480 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3482 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3483 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3484 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3486 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3487 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3488 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3490 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3491 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3492 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3493 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3494 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3495 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3496 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3497 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3498 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

3499 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3502 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3503 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3505 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3506 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3507 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3509 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3510 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3511 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3513 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3514 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3515 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3516 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3517 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3518 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3519 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3520 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3521 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

3522 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3525 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

3526 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

3528 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

3529 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

3530 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

3532 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

3533 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3534 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3536 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

3537 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

3538 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

3539 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

3540 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

3541 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

3542 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

3543 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

3544 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

3545 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

3548 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3549 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3550 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3551 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3552 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3554 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3555 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3556 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3557 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3558 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3560 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3561 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3562 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3563 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3564 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3566 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3567 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3568 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3569 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3570 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3572 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3573 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3574 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3575 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3576 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3578 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3579 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3580 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3581 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3582 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3584 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3585 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3586 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3589 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3590 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3591 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3592 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3593 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3595 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3596 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3597 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3598 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3599 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3601 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3602 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3603 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3604 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3605 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3607 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3608 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3609 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3610 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3611 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3613 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3614 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3615 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3616 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3617 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3619 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3620 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3621 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3622 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3623 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3625 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3626 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3627 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3630 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3631 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3632 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3633 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3634 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3636 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3637 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3638 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3639 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3640 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3642 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3643 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3644 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3645 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3646 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3648 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3649 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3650 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3651 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3652 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3654 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3655 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3656 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3657 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3658 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3660 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3661 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3662 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3663 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3664 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3666 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3667 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3668 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3671 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3672 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3673 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3674 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3675 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3677 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3678 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3679 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3680 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3681 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3683 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3684 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3685 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3686 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3687 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3689 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

3690 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

3691 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

3692 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

3693 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

3695 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3696 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3697 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3698 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3699 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3701 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3702 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3703 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3704 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3705 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3707 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3708 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3709 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3712 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3713 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3714 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3715 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3716 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3718 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3719 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3720 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3721 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3722 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3724 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3725 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3726 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3727 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3728 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3730 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3731 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3732 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3733 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3734 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3736 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3737 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3738 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3739 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3740 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3742 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3743 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3744 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3747 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3748 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3749 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3750 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3751 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3753 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3754 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3755 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3756 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3757 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3759 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3760 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3761 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3762 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3763 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3765 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3766 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3767 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3768 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3769 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3771 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3772 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3773 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3774 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3775 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3777 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3778 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3779 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3782 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3783 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3784 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3785 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3786 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3788 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3789 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3790 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3791 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3792 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3794 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3795 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3796 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3797 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3798 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3800 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3801 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3802 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3803 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3804 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3806 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3807 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3808 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3809 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3810 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3812 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3813 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3814 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3817 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

3818 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

3819 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

3820 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

3821 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

3823 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

3824 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

3825 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

3826 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

3827 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

3829 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

3830 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

3831 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

3832 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

3833 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

3835 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

3836 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

3837 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

3838 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

3839 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

3841 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

3842 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

3843 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

3844 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

3845 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

3847 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

3848 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

3849 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

3852 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

3853 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

3854 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

3856 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

3857 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3858 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3860 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

3862 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

3863 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

3864 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

3865 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

3866 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

3868 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

3869 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

3870 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

3871 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

3872 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

3874 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

3875 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

3876 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

3877 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

3880 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

3881 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

3882 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

3884 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

3885 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3886 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3888 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

3890 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

3891 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

3892 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

3893 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

3894 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

3896 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

3897 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

3898 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

3899 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

3900 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

3902 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

3903 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

3904 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

3905 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

3908 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

3909 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

3910 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

3912 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

3913 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

3914 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

3916 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

3918 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

3919 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

3920 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

3921 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

3922 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

3924 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

3925 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

3926 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

3927 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

3928 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

3930 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

3931 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

3932 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

3933 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

3936 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

3937 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

3938 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

3939 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

3940 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

3941 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

3942 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

3945 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

3946 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

3947 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

3948 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

3949 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

3950 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

3951 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

3954 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

3955 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

3956 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

3957 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

3958 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

3959 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

3960 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

3963 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

3964 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

3965 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

3966 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

3967 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

3968 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

3969 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

3970 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

3971 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

3973 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

3974 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

3975 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

3976 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

3977 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

3978 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

3979 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

3980 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

3981 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

3983 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

3984 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

3985 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

3986 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

3987 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

3988 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

3989 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

3990 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

3991 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

3993 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

3994 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

3995 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

3996 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

3997 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

3998 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

3999 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4000 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4001 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4004 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4005 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4006 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4007 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4008 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4009 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4010 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4011 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4012 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4014 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4015 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4016 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4017 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4018 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4019 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4020 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4021 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4022 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4024 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4025 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4026 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4027 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4028 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4029 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4030 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4031 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4032 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4034 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4035 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4036 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4037 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4038 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4039 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4040 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4041 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4042 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4045 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4046 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4047 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4048 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4049 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4050 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4051 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4052 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4053 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4055 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4056 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4057 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4058 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4059 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4060 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4061 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4062 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4063 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4065 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4066 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4067 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4068 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4069 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4070 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4071 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4072 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4073 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4075 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4076 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4077 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4078 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4079 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4080 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4081 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4082 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4083 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4086 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4087 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4088 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4089 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4090 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4091 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4092 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4093 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4094 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4096 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4097 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4098 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4099 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4100 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4101 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4102 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4103 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4104 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4106 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4107 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4108 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4109 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4110 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4111 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4112 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4113 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4114 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4116 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4117 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4118 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4119 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4120 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4121 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4122 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4123 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4124 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4127 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4128 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4129 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4130 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4131 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4132 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4133 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4134 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4135 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4137 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4138 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4139 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4140 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4141 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4142 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4143 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4144 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4145 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4147 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4148 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4149 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4150 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4151 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4152 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4153 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4154 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4155 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4157 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4158 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4159 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4160 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4161 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4162 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4163 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4164 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4165 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4168 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

4169 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4170 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4171 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4172 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4173 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4174 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4175 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4176 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4178 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4179 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4180 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4181 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4182 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4183 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4184 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4185 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4186 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4188 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4189 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4190 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4191 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4192 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4193 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4194 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4195 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4196 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4198 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4199 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4200 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4201 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4202 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4203 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4204 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4205 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4206 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4209 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

4210 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4211 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4212 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4213 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4214 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4215 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4216 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4217 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4219 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4220 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4221 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4222 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4223 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4224 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4225 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4226 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4227 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4229 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4230 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4231 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4232 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4233 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4234 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4235 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4236 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4237 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4239 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4240 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4241 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4242 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4243 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4244 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4245 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4246 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4247 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4250 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

4253 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

4261 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

4262 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

4263 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

4265 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

4266 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

4267 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

4269 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

4270 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

4271 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

4273 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

4274 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

4275 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

4277 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

4278 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

4279 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

4281 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

4282 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

4283 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

4285 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

4286 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

4287 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

4289 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

4290 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

4291 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

4293 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

4294 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

4295 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

4297 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

4298 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

4299 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

4301 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

4302 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

4303 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

4305 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

4306 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

4307 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

4309 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

4310 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

4311 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

4313 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

4314 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

4315 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

4317 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

4318 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

4319 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

4321 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

4322 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

4323 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

4326 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

4327 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

4328 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

4329 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

4330 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

4331 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

4332 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

4333 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

4334 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

4335 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

4336 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

4337 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

4338 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

4339 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

4340 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

4341 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

4344 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

4345 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

4346 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

4348 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

4349 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

4350 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

4352 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

4353 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

4354 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

4356 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

4357 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

4358 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

4360 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

4361 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

4362 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

4364 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

4365 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

4366 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

4368 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

4369 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

4370 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

4372 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

4373 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

4374 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

4376 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

4377 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

4378 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

4380 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

4381 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

4382 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

4384 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

4385 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

4386 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

4388 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

4389 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

4390 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

4392 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

4393 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

4394 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

4396 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

4397 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

4398 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

4400 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

4401 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

4402 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

4404 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

4405 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

4406 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

4409 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

4410 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

4411 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

4413 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

4414 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

4415 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

4417 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

4418 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

4419 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

4421 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

4422 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

4423 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

4425 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

4426 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

4427 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

4429 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

4430 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

4431 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

4433 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

4434 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

4435 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

4437 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

4438 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

4439 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

4441 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

4442 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

4443 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

4445 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

4446 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

4447 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

4449 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

4450 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

4451 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

4453 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

4454 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

4455 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

4457 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

4458 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

4459 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

4461 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

4462 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

4463 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

4465 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

4466 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

4467 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

4469 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

4470 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

4471 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

4474 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

4475 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

4476 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

4477 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

4478 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

4479 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

4480 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

4481 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

4482 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

4483 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

4484 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

4485 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

4486 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

4487 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

4488 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

4489 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

4491 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

4492 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

4493 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

4494 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

4495 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

4496 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

4497 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

4498 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

4499 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

4500 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

4501 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

4502 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

4503 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

4504 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

4505 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

4506 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

4509 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

4510 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

4511 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

4512 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

4513 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

4514 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

4515 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

4516 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

4517 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

4518 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

4519 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

4520 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

4521 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

4522 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

4523 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

4524 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

4526 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

4527 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

4528 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

4529 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

4530 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

4531 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

4532 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

4533 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

4534 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

4535 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

4536 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

4537 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

4538 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

4539 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

4540 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

4541 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

4544 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

4545 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

4546 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

4547 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

4548 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

4549 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

4550 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

4551 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

4552 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

4553 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

4554 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

4555 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

4556 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

4557 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

4558 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

4559 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

4560 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

4561 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

4562 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

4563 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

4564 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

4565 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

4566 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

4567 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

4568 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

4569 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

4570 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

4571 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

4572 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

4573 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

4574 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

4575 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

4583 
	#HASH_CR_INIT
 ((
uöt32_t
)0x00000004)

	)

4584 
	#HASH_CR_DMAE
 ((
uöt32_t
)0x00000008)

	)

4585 
	#HASH_CR_DATATYPE
 ((
uöt32_t
)0x00000030)

	)

4586 
	#HASH_CR_DATATYPE_0
 ((
uöt32_t
)0x00000010)

	)

4587 
	#HASH_CR_DATATYPE_1
 ((
uöt32_t
)0x00000020)

	)

4588 
	#HASH_CR_MODE
 ((
uöt32_t
)0x00000040)

	)

4589 
	#HASH_CR_ALGO
 ((
uöt32_t
)0x00000080)

	)

4590 
	#HASH_CR_NBW
 ((
uöt32_t
)0x00000F00)

	)

4591 
	#HASH_CR_NBW_0
 ((
uöt32_t
)0x00000100)

	)

4592 
	#HASH_CR_NBW_1
 ((
uöt32_t
)0x00000200)

	)

4593 
	#HASH_CR_NBW_2
 ((
uöt32_t
)0x00000400)

	)

4594 
	#HASH_CR_NBW_3
 ((
uöt32_t
)0x00000800)

	)

4595 
	#HASH_CR_DINNE
 ((
uöt32_t
)0x00001000)

	)

4596 
	#HASH_CR_LKEY
 ((
uöt32_t
)0x00010000)

	)

4599 
	#HASH_STR_NBW
 ((
uöt32_t
)0x0000001F)

	)

4600 
	#HASH_STR_NBW_0
 ((
uöt32_t
)0x00000001)

	)

4601 
	#HASH_STR_NBW_1
 ((
uöt32_t
)0x00000002)

	)

4602 
	#HASH_STR_NBW_2
 ((
uöt32_t
)0x00000004)

	)

4603 
	#HASH_STR_NBW_3
 ((
uöt32_t
)0x00000008)

	)

4604 
	#HASH_STR_NBW_4
 ((
uöt32_t
)0x00000010)

	)

4605 
	#HASH_STR_DCAL
 ((
uöt32_t
)0x00000100)

	)

4608 
	#HASH_IMR_DINIM
 ((
uöt32_t
)0x00000001)

	)

4609 
	#HASH_IMR_DCIM
 ((
uöt32_t
)0x00000002)

	)

4612 
	#HASH_SR_DINIS
 ((
uöt32_t
)0x00000001)

	)

4613 
	#HASH_SR_DCIS
 ((
uöt32_t
)0x00000002)

	)

4614 
	#HASH_SR_DMAS
 ((
uöt32_t
)0x00000004)

	)

4615 
	#HASH_SR_BUSY
 ((
uöt32_t
)0x00000008)

	)

4623 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

4624 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

4625 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

4626 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

4627 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

4628 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

4629 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

4630 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

4631 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

4632 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

4633 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

4634 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

4635 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

4636 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

4639 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

4640 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

4641 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

4642 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

4643 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

4644 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

4645 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

4647 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

4648 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

4649 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

4650 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

4651 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

4654 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

4655 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

4657 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

4658 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

4659 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

4660 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

4661 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

4662 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

4663 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

4664 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

4665 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

4666 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

4668 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

4671 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

4672 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

4675 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

4678 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

4679 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

4680 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

4681 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

4682 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

4683 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

4684 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

4685 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

4686 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

4687 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

4688 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

4689 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

4690 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

4691 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

4694 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

4695 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

4696 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

4697 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

4698 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

4699 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

4700 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

4701 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

4704 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

4705 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

4706 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

4709 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

4717 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

4720 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

4721 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

4722 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

4723 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

4726 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

4729 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

4730 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

4738 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

4739 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

4740 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

4741 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

4742 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

4744 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

4745 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

4746 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

4747 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

4751 
	#PWR_CR_PLS_LEV0
 ((
uöt16_t
)0x0000Ë

	)

4752 
	#PWR_CR_PLS_LEV1
 ((
uöt16_t
)0x0020Ë

	)

4753 
	#PWR_CR_PLS_LEV2
 ((
uöt16_t
)0x0040Ë

	)

4754 
	#PWR_CR_PLS_LEV3
 ((
uöt16_t
)0x0060Ë

	)

4755 
	#PWR_CR_PLS_LEV4
 ((
uöt16_t
)0x0080Ë

	)

4756 
	#PWR_CR_PLS_LEV5
 ((
uöt16_t
)0x00A0Ë

	)

4757 
	#PWR_CR_PLS_LEV6
 ((
uöt16_t
)0x00C0Ë

	)

4758 
	#PWR_CR_PLS_LEV7
 ((
uöt16_t
)0x00E0Ë

	)

4760 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

4761 
	#PWR_CR_FPDS
 ((
uöt16_t
)0x0200Ë

	)

4762 
	#PWR_CR_VOS
 ((
uöt16_t
)0x4000Ë

	)

4764 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

4767 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

4768 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

4769 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

4770 
	#PWR_CSR_BRR
 ((
uöt16_t
)0x0008Ë

	)

4771 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

4772 
	#PWR_CSR_BRE
 ((
uöt16_t
)0x0200Ë

	)

4773 
	#PWR_CSR_VOSRDY
 ((
uöt16_t
)0x4000Ë

	)

4775 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

4783 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

4784 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

4786 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

4787 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

4788 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

4789 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

4790 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

4791 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

4793 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

4794 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

4795 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

4796 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

4797 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

4798 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

4799 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

4800 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

4801 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

4803 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

4804 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

4805 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

4806 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

4807 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

4808 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

4809 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

4810 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

4813 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

4814 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

4815 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

4816 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

4817 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

4818 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

4819 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

4821 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

4822 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

4823 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

4824 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

4825 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

4826 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

4827 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

4828 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

4829 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

4830 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

4832 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

4833 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

4834 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

4836 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

4837 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

4838 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

4840 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

4841 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

4842 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

4843 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

4844 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

4848 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

4849 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

4850 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

4852 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

4853 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

4854 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

4857 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

4858 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

4859 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

4861 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

4862 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

4863 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

4866 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

4867 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

4868 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

4869 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

4870 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

4872 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

4873 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

4874 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

4875 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

4876 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

4877 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

4878 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

4879 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

4880 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

4883 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

4884 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

4885 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

4886 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

4888 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

4889 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

4890 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

4891 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

4892 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

4895 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

4896 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

4897 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

4898 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

4900 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

4901 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

4902 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

4903 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

4904 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

4907 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

4908 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

4909 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

4910 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

4911 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

4912 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

4915 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

4916 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

4917 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

4919 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

4921 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

4922 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

4923 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

4924 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

4926 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

4927 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

4928 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

4929 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

4931 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

4932 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

4933 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

4936 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

4937 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

4938 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

4939 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

4940 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

4941 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

4942 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

4943 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

4944 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

4945 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

4946 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

4947 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

4948 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

4949 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

4950 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

4951 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

4952 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

4953 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

4954 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

4955 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

4958 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

4959 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

4960 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

4961 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

4962 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

4963 
	#RCC_AHB1RSTR_GPIOFRST
 ((
uöt32_t
)0x00000020)

	)

4964 
	#RCC_AHB1RSTR_GPIOGRST
 ((
uöt32_t
)0x00000040)

	)

4965 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

4966 
	#RCC_AHB1RSTR_GPIOIRST
 ((
uöt32_t
)0x00000100)

	)

4967 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

4968 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

4969 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

4970 
	#RCC_AHB1RSTR_ETHMACRST
 ((
uöt32_t
)0x02000000)

	)

4971 
	#RCC_AHB1RSTR_OTGHRST
 ((
uöt32_t
)0x10000000)

	)

4974 
	#RCC_AHB2RSTR_DCMIRST
 ((
uöt32_t
)0x00000001)

	)

4975 
	#RCC_AHB2RSTR_CRYPRST
 ((
uöt32_t
)0x00000010)

	)

4976 
	#RCC_AHB2RSTR_HSAHRST
 ((
uöt32_t
)0x00000020)

	)

4977 
	#RCC_AHB2RSTR_RNGRST
 ((
uöt32_t
)0x00000040)

	)

4978 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

4981 
	#RCC_AHB3RSTR_FSMCRST
 ((
uöt32_t
)0x00000001)

	)

4984 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

4985 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

4986 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

4987 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

4988 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010)

	)

4989 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020)

	)

4990 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040)

	)

4991 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080)

	)

4992 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100)

	)

4993 
	#RCC_APB1RSTR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

4994 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00008000)

	)

4995 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00010000)

	)

4996 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

4997 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000)

	)

4998 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000)

	)

4999 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000)

	)

5000 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

5001 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

5002 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

5003 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000)

	)

5004 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000)

	)

5005 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

5006 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000)

	)

5009 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

5010 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000002)

	)

5011 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

5012 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

5013 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

5014 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

5015 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

5016 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

5017 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

5018 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

5019 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

5021 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

5024 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

5025 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

5026 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

5027 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

5028 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

5029 
	#RCC_AHB1ENR_GPIOFEN
 ((
uöt32_t
)0x00000020)

	)

5030 
	#RCC_AHB1ENR_GPIOGEN
 ((
uöt32_t
)0x00000040)

	)

5031 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

5032 
	#RCC_AHB1ENR_GPIOIEN
 ((
uöt32_t
)0x00000100)

	)

5033 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

5034 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

5035 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

5036 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

5037 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

5038 
	#RCC_AHB1ENR_ETHMACEN
 ((
uöt32_t
)0x02000000)

	)

5039 
	#RCC_AHB1ENR_ETHMACTXEN
 ((
uöt32_t
)0x04000000)

	)

5040 
	#RCC_AHB1ENR_ETHMACRXEN
 ((
uöt32_t
)0x08000000)

	)

5041 
	#RCC_AHB1ENR_ETHMACPTPEN
 ((
uöt32_t
)0x10000000)

	)

5042 
	#RCC_AHB1ENR_OTGHSEN
 ((
uöt32_t
)0x20000000)

	)

5043 
	#RCC_AHB1ENR_OTGHSULPIEN
 ((
uöt32_t
)0x40000000)

	)

5046 
	#RCC_AHB2ENR_DCMIEN
 ((
uöt32_t
)0x00000001)

	)

5047 
	#RCC_AHB2ENR_CRYPEN
 ((
uöt32_t
)0x00000010)

	)

5048 
	#RCC_AHB2ENR_HASHEN
 ((
uöt32_t
)0x00000020)

	)

5049 
	#RCC_AHB2ENR_RNGEN
 ((
uöt32_t
)0x00000040)

	)

5050 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

5053 
	#RCC_AHB3ENR_FSMCEN
 ((
uöt32_t
)0x00000001)

	)

5056 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

5057 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

5058 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

5059 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

5060 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010)

	)

5061 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020)

	)

5062 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040)

	)

5063 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080)

	)

5064 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100)

	)

5065 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

5066 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

5067 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

5068 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

5069 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000)

	)

5070 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000)

	)

5071 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000)

	)

5072 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

5073 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

5074 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

5075 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000)

	)

5076 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000)

	)

5077 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

5078 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000)

	)

5081 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

5082 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00000002)

	)

5083 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

5084 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

5085 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

5086 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000200)

	)

5087 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00000400)

	)

5088 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

5089 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

5090 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

5091 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

5092 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

5093 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

5096 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

5097 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

5098 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

5099 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

5100 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

5101 
	#RCC_AHB1LPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000020)

	)

5102 
	#RCC_AHB1LPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000040)

	)

5103 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

5104 
	#RCC_AHB1LPENR_GPIOILPEN
 ((
uöt32_t
)0x00000100)

	)

5105 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

5106 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

5107 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

5108 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

5109 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

5110 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

5111 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

5112 
	#RCC_AHB1LPENR_ETHMACLPEN
 ((
uöt32_t
)0x02000000)

	)

5113 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 ((
uöt32_t
)0x04000000)

	)

5114 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 ((
uöt32_t
)0x08000000)

	)

5115 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 ((
uöt32_t
)0x10000000)

	)

5116 
	#RCC_AHB1LPENR_OTGHSLPEN
 ((
uöt32_t
)0x20000000)

	)

5117 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 ((
uöt32_t
)0x40000000)

	)

5120 
	#RCC_AHB2LPENR_DCMILPEN
 ((
uöt32_t
)0x00000001)

	)

5121 
	#RCC_AHB2LPENR_CRYPLPEN
 ((
uöt32_t
)0x00000010)

	)

5122 
	#RCC_AHB2LPENR_HASHLPEN
 ((
uöt32_t
)0x00000020)

	)

5123 
	#RCC_AHB2LPENR_RNGLPEN
 ((
uöt32_t
)0x00000040)

	)

5124 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

5127 
	#RCC_AHB3LPENR_FSMCLPEN
 ((
uöt32_t
)0x00000001)

	)

5130 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

5131 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

5132 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

5133 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

5134 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010)

	)

5135 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020)

	)

5136 
	#RCC_APB1LPENR_TIM12LPEN
 ((
uöt32_t
)0x00000040)

	)

5137 
	#RCC_APB1LPENR_TIM13LPEN
 ((
uöt32_t
)0x00000080)

	)

5138 
	#RCC_APB1LPENR_TIM14LPEN
 ((
uöt32_t
)0x00000100)

	)

5139 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

5140 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

5141 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

5142 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

5143 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000)

	)

5144 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000)

	)

5145 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000)

	)

5146 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

5147 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

5148 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

5149 
	#RCC_APB1LPENR_CAN1LPEN
 ((
uöt32_t
)0x02000000)

	)

5150 
	#RCC_APB1LPENR_CAN2LPEN
 ((
uöt32_t
)0x04000000)

	)

5151 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

5152 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

5155 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

5156 
	#RCC_APB2LPENR_TIM8LPEN
 ((
uöt32_t
)0x00000002)

	)

5157 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

5158 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

5159 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

5160 
	#RCC_APB2LPENR_ADC2PEN
 ((
uöt32_t
)0x00000200)

	)

5161 
	#RCC_APB2LPENR_ADC3LPEN
 ((
uöt32_t
)0x00000400)

	)

5162 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

5163 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

5164 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

5165 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

5166 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

5167 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

5170 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

5171 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

5172 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

5174 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

5175 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

5176 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

5178 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

5179 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

5182 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

5183 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

5184 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

5185 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

5186 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

5187 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

5188 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

5189 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

5190 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

5191 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

5194 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

5195 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

5196 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

5197 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

5200 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

5201 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

5209 
	#RNG_CR_RNGEN
 ((
uöt32_t
)0x00000004)

	)

5210 
	#RNG_CR_IE
 ((
uöt32_t
)0x00000008)

	)

5213 
	#RNG_SR_DRDY
 ((
uöt32_t
)0x00000001)

	)

5214 
	#RNG_SR_CECS
 ((
uöt32_t
)0x00000002)

	)

5215 
	#RNG_SR_SECS
 ((
uöt32_t
)0x00000004)

	)

5216 
	#RNG_SR_CEIS
 ((
uöt32_t
)0x00000020)

	)

5217 
	#RNG_SR_SEIS
 ((
uöt32_t
)0x00000040)

	)

5225 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

5226 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

5227 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

5228 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

5229 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

5230 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

5231 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

5232 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

5233 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

5234 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

5235 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

5236 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

5237 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

5238 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

5239 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

5240 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

5241 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

5242 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

5243 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

5244 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

5245 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

5246 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

5247 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

5248 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

5249 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

5250 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

5251 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

5254 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

5255 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

5256 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

5257 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

5258 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

5259 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

5260 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

5261 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

5262 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

5263 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

5264 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

5265 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

5266 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

5267 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

5268 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

5269 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

5270 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

5271 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

5272 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

5273 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

5274 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

5275 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

5276 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

5277 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

5278 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

5279 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

5280 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

5281 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

5284 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

5285 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

5286 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

5287 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

5288 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

5289 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

5290 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

5291 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

5292 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

5293 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

5294 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

5295 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

5296 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

5297 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

5298 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

5299 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

5300 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

5301 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

5302 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

5303 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

5304 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

5305 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

5306 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

5307 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

5308 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

5309 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

5312 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

5313 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

5314 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

5315 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

5316 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

5317 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

5318 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

5319 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

5320 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

5321 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

5322 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

5323 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

5324 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

5325 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

5326 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

5329 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

5330 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00001FFF)

	)

5333 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

5336 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

5337 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

5340 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

5341 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

5342 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

5343 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

5344 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

5345 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

5346 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

5347 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

5348 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

5349 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

5350 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

5351 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

5352 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

5353 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

5354 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

5355 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

5356 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

5357 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

5358 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

5359 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

5360 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

5361 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

5362 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

5363 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

5364 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

5365 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

5366 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

5367 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

5368 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

5369 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

5370 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

5371 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

5372 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

5373 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

5374 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

5375 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

5376 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

5377 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

5378 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

5379 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

5382 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

5383 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

5384 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

5385 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

5386 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

5387 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

5388 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

5389 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

5390 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

5391 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

5392 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

5393 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

5394 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

5395 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

5396 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

5397 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

5398 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

5399 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

5400 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

5401 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

5402 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

5403 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

5404 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

5405 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

5406 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

5407 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

5408 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

5409 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

5410 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

5411 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

5412 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

5413 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

5414 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

5415 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

5416 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

5417 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

5418 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

5419 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

5420 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

5421 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

5424 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

5427 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

5430 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

5431 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

5434 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

5435 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

5436 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

5437 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

5438 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

5439 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

5440 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

5441 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

5442 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

5443 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

5444 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

5445 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

5446 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

5447 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

5448 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

5449 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

5450 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

5451 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

5452 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

5453 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

5454 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

5455 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

5456 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

5457 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

5458 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

5459 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

5460 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

5463 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

5464 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

5465 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

5466 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

5467 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

5468 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

5469 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

5470 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

5471 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

5472 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

5473 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

5474 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

5475 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

5476 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

5477 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

5478 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

5479 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

5480 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

5483 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

5486 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

5487 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

5488 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

5489 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

5490 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

5491 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

5492 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

5493 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

5494 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

5495 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

5496 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

5497 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

5498 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

5501 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

5502 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

5503 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

5504 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

5505 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

5506 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

5507 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

5508 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

5509 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

5510 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

5511 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

5512 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

5513 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

5514 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

5515 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

5516 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

5517 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

5518 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

5521 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

5522 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

5523 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

5524 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

5525 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

5526 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

5529 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

5530 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

5531 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

5532 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

5533 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

5534 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

5537 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5540 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5543 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5546 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5549 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5552 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5555 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5558 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5561 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5564 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5567 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5570 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5573 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5576 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5579 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5582 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5585 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5588 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5591 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5594 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5602 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

5603 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

5604 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

5607 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

5608 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

5609 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

5610 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

5612 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

5613 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

5614 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

5616 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

5617 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

5620 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

5623 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

5625 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

5626 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

5627 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

5629 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

5630 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

5631 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

5632 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

5633 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

5634 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

5635 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

5638 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

5641 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

5644 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

5647 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5650 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5653 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

5656 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

5659 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

5662 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

5663 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

5664 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

5665 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

5667 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

5668 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

5669 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

5670 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

5671 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

5673 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

5674 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

5675 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

5676 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

5679 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

5682 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

5683 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

5684 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

5685 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

5686 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

5687 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

5688 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

5689 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

5690 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

5691 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

5692 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

5693 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

5694 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

5695 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

5696 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

5697 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

5698 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

5699 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

5700 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

5701 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

5702 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

5703 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

5704 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

5705 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

5708 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

5709 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

5710 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

5711 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

5712 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

5713 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

5714 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

5715 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

5716 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

5717 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

5718 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

5719 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

5720 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

5723 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

5724 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

5725 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

5726 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

5727 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

5728 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

5729 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

5730 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

5731 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

5732 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

5733 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

5734 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

5735 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

5736 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

5737 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

5738 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

5739 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

5740 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

5741 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

5742 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

5743 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

5744 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

5745 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

5746 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

5749 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

5752 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

5760 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

5761 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

5762 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

5764 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

5765 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

5766 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

5767 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

5769 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

5770 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

5771 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

5772 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

5773 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

5774 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

5775 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

5776 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

5777 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

5778 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

5781 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

5782 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

5783 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

5784 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

5785 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

5786 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

5789 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

5790 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

5791 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

5792 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

5793 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

5794 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

5795 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

5796 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

5799 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

5802 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

5805 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

5808 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

5811 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

5813 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

5814 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

5815 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

5817 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

5819 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

5820 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

5821 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

5823 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

5825 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

5826 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

5827 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

5829 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

5830 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

5833 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

5834 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

5835 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

5843 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000003Ë

	)

5844 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001)

	)

5845 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002)

	)

5848 
	#SYSCFG_PMC_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

5850 
	#SYSCFG_PMC_MII_RMII
 
SYSCFG_PMC_MII_RMII_SEL


	)

5853 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

5854 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

5855 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

5856 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

5860 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

5861 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

5862 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

5863 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

5864 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

5865 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

5866 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

5867 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt16_t
)0x0007Ë

	)

5868 
	#SYSCFG_EXTICR1_EXTI0_PI
 ((
uöt16_t
)0x0008Ë

	)

5872 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

5873 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

5874 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

5875 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

5876 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

5877 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

5878 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

5879 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt16_t
)0x0070Ë

	)

5880 
	#SYSCFG_EXTICR1_EXTI1_PI
 ((
uöt16_t
)0x0080Ë

	)

5884 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

5885 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

5886 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

5887 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

5888 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

5889 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

5890 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

5891 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt16_t
)0x0700Ë

	)

5892 
	#SYSCFG_EXTICR1_EXTI2_PI
 ((
uöt16_t
)0x0800Ë

	)

5896 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

5897 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

5898 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

5899 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

5900 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

5901 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

5902 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

5903 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt16_t
)0x7000Ë

	)

5904 
	#SYSCFG_EXTICR1_EXTI3_PI
 ((
uöt16_t
)0x8000Ë

	)

5907 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

5908 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

5909 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

5910 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

5914 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

5915 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

5916 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

5917 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

5918 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

5919 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

5920 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

5921 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt16_t
)0x0007Ë

	)

5922 
	#SYSCFG_EXTICR2_EXTI4_PI
 ((
uöt16_t
)0x0008Ë

	)

5926 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

5927 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

5928 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

5929 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

5930 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

5931 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

5932 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

5933 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt16_t
)0x0070Ë

	)

5934 
	#SYSCFG_EXTICR2_EXTI5_PI
 ((
uöt16_t
)0x0080Ë

	)

5938 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

5939 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

5940 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

5941 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

5942 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

5943 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

5944 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

5945 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt16_t
)0x0700Ë

	)

5946 
	#SYSCFG_EXTICR2_EXTI6_PI
 ((
uöt16_t
)0x0800Ë

	)

5950 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

5951 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

5952 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

5953 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

5954 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

5955 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

5956 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

5957 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt16_t
)0x7000Ë

	)

5958 
	#SYSCFG_EXTICR2_EXTI7_PI
 ((
uöt16_t
)0x8000Ë

	)

5961 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

5962 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

5963 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

5964 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

5969 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

5970 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

5971 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

5972 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

5973 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

5974 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

5975 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

5976 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt16_t
)0x0007Ë

	)

5977 
	#SYSCFG_EXTICR3_EXTI8_PI
 ((
uöt16_t
)0x0008Ë

	)

5981 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

5982 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

5983 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

5984 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

5985 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

5986 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

5987 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

5988 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt16_t
)0x0070Ë

	)

5989 
	#SYSCFG_EXTICR3_EXTI9_PI
 ((
uöt16_t
)0x0080Ë

	)

5993 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

5994 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

5995 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

5996 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

5997 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

5998 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

5999 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

6000 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt16_t
)0x0700Ë

	)

6001 
	#SYSCFG_EXTICR3_EXTI10_PI
 ((
uöt16_t
)0x0800Ë

	)

6005 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

6006 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

6007 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

6008 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

6009 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

6010 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

6011 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

6012 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt16_t
)0x7000Ë

	)

6013 
	#SYSCFG_EXTICR3_EXTI11_PI
 ((
uöt16_t
)0x8000Ë

	)

6016 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

6017 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

6018 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

6019 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

6023 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

6024 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

6025 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

6026 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

6027 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

6028 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

6029 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

6030 
	#SYSCFG_EXTICR3_EXTI12_PH
 ((
uöt16_t
)0x0007Ë

	)

6034 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

6035 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

6036 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

6037 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

6038 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

6039 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

6040 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

6041 
	#SYSCFG_EXTICR3_EXTI13_PH
 ((
uöt16_t
)0x0070Ë

	)

6045 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

6046 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

6047 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

6048 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

6049 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

6050 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

6051 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

6052 
	#SYSCFG_EXTICR3_EXTI14_PH
 ((
uöt16_t
)0x0700Ë

	)

6056 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

6057 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

6058 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

6059 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

6060 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

6061 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

6062 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

6063 
	#SYSCFG_EXTICR3_EXTI15_PH
 ((
uöt16_t
)0x7000Ë

	)

6066 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

6067 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

6075 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

6076 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

6077 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

6078 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

6079 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

6081 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

6082 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

6083 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

6085 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

6087 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

6088 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

6089 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

6092 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

6093 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

6094 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

6096 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

6097 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

6098 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

6099 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

6101 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

6102 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

6103 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

6104 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

6105 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

6106 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

6107 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

6108 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

6111 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

6112 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

6113 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

6114 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

6116 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

6117 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

6118 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

6119 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

6121 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

6123 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

6124 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

6125 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

6126 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

6127 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

6129 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

6130 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

6131 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

6133 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

6134 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

6137 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

6138 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

6139 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

6140 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

6141 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

6142 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

6143 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

6144 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

6145 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

6146 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

6147 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

6148 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

6149 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

6150 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

6151 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

6154 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

6155 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

6156 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

6157 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

6158 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

6159 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

6160 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

6161 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

6162 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

6163 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

6164 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

6165 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

6168 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

6169 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

6170 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

6171 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

6172 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

6173 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

6174 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

6175 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

6178 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

6179 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

6180 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

6182 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

6183 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

6185 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

6186 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

6187 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

6188 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

6190 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

6192 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

6193 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

6194 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

6196 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

6197 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

6199 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

6200 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

6201 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

6202 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

6204 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

6208 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

6209 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

6210 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

6212 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

6213 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

6214 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

6215 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

6216 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

6218 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

6219 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

6220 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

6222 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

6223 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

6224 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

6225 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

6226 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

6229 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

6230 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

6231 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

6233 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

6234 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

6236 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

6237 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

6238 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

6239 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

6241 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

6243 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

6244 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

6245 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

6247 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

6248 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

6250 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

6251 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

6252 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

6253 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

6255 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

6259 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

6260 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

6261 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

6263 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

6264 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

6265 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

6266 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

6267 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

6269 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

6270 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

6271 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

6273 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

6274 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

6275 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

6276 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

6277 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

6280 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

6281 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

6282 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

6283 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

6284 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

6285 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

6286 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

6287 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

6288 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

6289 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

6290 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

6291 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

6292 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

6293 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

6294 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

6297 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

6300 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

6303 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

6306 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

6309 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

6312 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

6315 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

6318 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

6321 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

6322 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

6323 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

6324 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

6325 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

6326 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

6327 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

6328 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

6329 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

6331 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

6332 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

6333 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

6335 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

6336 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

6337 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

6338 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

6339 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

6340 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

6343 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

6344 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

6345 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

6346 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

6347 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

6348 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

6350 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

6351 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

6352 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

6353 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

6354 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

6355 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

6358 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

6361 
	#TIM_OR_TI4_RMP
 ((
uöt16_t
)0x00C0Ë

	)

6362 
	#TIM_OR_TI4_RMP_0
 ((
uöt16_t
)0x0040Ë

	)

6363 
	#TIM_OR_TI4_RMP_1
 ((
uöt16_t
)0x0080Ë

	)

6364 
	#TIM_OR_ITR1_RMP
 ((
uöt16_t
)0x0C00Ë

	)

6365 
	#TIM_OR_ITR1_RMP_0
 ((
uöt16_t
)0x0400Ë

	)

6366 
	#TIM_OR_ITR1_RMP_1
 ((
uöt16_t
)0x0800Ë

	)

6375 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

6376 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

6377 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

6378 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

6379 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

6380 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

6381 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

6382 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

6383 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

6384 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

6387 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

6390 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

6391 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

6394 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

6395 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

6396 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

6397 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

6398 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

6399 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

6400 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

6401 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

6402 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

6403 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

6404 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

6405 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

6406 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

6407 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

6408 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

6411 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

6412 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

6413 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

6414 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

6415 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

6416 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

6417 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

6419 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

6420 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

6421 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

6423 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

6426 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

6427 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

6428 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

6429 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

6430 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

6431 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

6432 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

6433 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

6434 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

6435 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

6436 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

6437 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

6440 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

6441 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

6442 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

6443 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

6444 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

6445 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

6446 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

6447 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

6448 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

6450 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

6458 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

6459 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

6460 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

6461 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

6462 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

6463 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

6464 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

6465 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

6467 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

6470 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

6471 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

6472 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

6473 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

6474 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

6475 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

6476 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

6477 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

6479 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

6480 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

6481 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

6483 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

6486 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

6495 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

6496 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

6499 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

6500 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

6501 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

6502 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

6504 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

6505 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

6506 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

6509 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

6510 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

6511 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

6512 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

6513 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

6514 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

6515 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

6516 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

6517 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

6518 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

6519 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

6520 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

6521 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

6522 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

6523 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

6524 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

6525 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

6527 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

6530 
	#DBGMCU_APB1_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

6531 
	#DBGMCU_APB1_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

6532 
	#DBGMCU_APB1_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

6533 
	#DBGMCU_APB1_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

6534 
	#DBGMCU_APB1_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

6542 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

6543 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

6544 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

6545 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

6546 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

6547 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

6548 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

6549 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

6550 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

6551 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

6552 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

6553 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

6554 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

6555 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

6556 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

6557 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

6558 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

6559 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

6560 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

6561 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

6563 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

6564 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

6565 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

6566 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

6567 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

6568 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

6569 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

6572 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

6573 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

6574 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

6575 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

6576 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

6577 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

6578 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

6579 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

6580 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

6581 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

6582 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

6583 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

6584 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

6585 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

6588 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

6591 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

6594 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

6595 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

6596 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

6597 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

6598 
	#ETH_MACMIIAR_CR_Div62
 ((
uöt32_t
)0x00000004Ë

	)

6599 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

6600 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

6601 
	#ETH_MACMIIAR_CR_Div102
 ((
uöt32_t
)0x00000010Ë

	)

6602 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

6603 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

6606 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

6609 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

6610 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

6611 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

6612 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

6613 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

6614 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

6615 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

6616 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

6617 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

6618 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

6619 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

6622 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

6623 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

6626 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

6640 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

6641 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

6642 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

6643 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

6644 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

6645 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

6646 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

6649 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

6650 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

6651 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

6652 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

6653 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

6656 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

6657 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

6660 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

6663 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

6666 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

6667 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

6668 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

6669 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

6670 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

6671 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

6672 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

6673 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

6674 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

6675 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

6678 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

6681 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

6682 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

6683 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

6684 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

6685 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

6686 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

6687 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

6688 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

6689 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

6690 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

6693 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

6696 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

6697 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

6698 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

6699 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

6700 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

6701 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

6702 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

6703 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

6704 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

6705 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

6708 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

6715 
	#ETH_MMCCR_MCFHP
 ((
uöt32_t
)0x00000020Ë

	)

6716 
	#ETH_MMCCR_MCP
 ((
uöt32_t
)0x00000010Ë

	)

6717 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

6718 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

6719 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

6720 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

6723 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

6724 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

6725 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

6728 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

6729 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

6730 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

6733 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

6734 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

6735 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

6738 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

6739 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

6740 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

6743 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

6746 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

6749 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

6752 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

6755 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

6758 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

6765 
	#ETH_PTPTSCR_TSCNT
 ((
uöt32_t
)0x00030000Ë

	)

6766 
	#ETH_PTPTSSR_TSSMRME
 ((
uöt32_t
)0x00008000Ë

	)

6767 
	#ETH_PTPTSSR_TSSEME
 ((
uöt32_t
)0x00004000Ë

	)

6768 
	#ETH_PTPTSSR_TSSIPV4FE
 ((
uöt32_t
)0x00002000Ë

	)

6769 
	#ETH_PTPTSSR_TSSIPV6FE
 ((
uöt32_t
)0x00001000Ë

	)

6770 
	#ETH_PTPTSSR_TSSPTPOEFE
 ((
uöt32_t
)0x00000800Ë

	)

6771 
	#ETH_PTPTSSR_TSPTPPSV2E
 ((
uöt32_t
)0x00000400Ë

	)

6772 
	#ETH_PTPTSSR_TSSSR
 ((
uöt32_t
)0x00000200Ë

	)

6773 
	#ETH_PTPTSSR_TSSARFE
 ((
uöt32_t
)0x00000100Ë

	)

6775 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

6776 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

6777 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

6778 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

6779 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

6780 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

6783 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

6786 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

6789 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

6790 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

6793 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

6796 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

6797 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

6800 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

6803 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

6806 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

6809 
	#ETH_PTPTSSR_TSTTR
 ((
uöt32_t
)0x00000020Ë

	)

6810 
	#ETH_PTPTSSR_TSSO
 ((
uöt32_t
)0x00000010Ë

	)

6817 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

6818 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

6819 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

6820 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

6821 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

6822 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

6823 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

6824 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

6825 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

6826 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

6827 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

6828 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

6829 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

6830 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

6831 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

6832 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

6833 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

6834 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

6835 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

6836 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

6837 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

6838 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

6839 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

6840 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

6841 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

6842 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

6843 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

6844 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

6845 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

6846 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

6847 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

6848 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

6849 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

6850 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

6851 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

6852 
	#ETH_DMABMR_EDE
 ((
uöt32_t
)0x00000080Ë

	)

6853 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

6854 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

6855 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

6858 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

6861 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

6864 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

6867 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

6870 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

6871 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

6872 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

6873 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

6875 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

6876 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

6877 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

6878 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

6879 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

6880 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

6881 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

6882 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

6883 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

6884 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

6885 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

6886 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

6887 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

6888 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

6889 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

6890 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

6891 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

6892 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

6893 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

6894 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

6895 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

6896 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

6897 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

6898 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

6899 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

6900 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

6901 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

6902 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

6903 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

6904 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

6905 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

6906 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

6909 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

6910 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

6911 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

6912 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

6913 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

6914 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

6915 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

6916 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

6917 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

6918 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

6919 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

6920 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

6921 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

6922 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

6923 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

6924 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

6925 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

6926 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

6927 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

6928 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

6929 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

6930 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

6931 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

6932 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

6935 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

6936 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

6937 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

6938 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

6939 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

6940 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

6941 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

6942 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

6943 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

6944 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

6945 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

6946 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

6947 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

6948 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

6949 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

6952 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

6953 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

6954 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

6955 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

6958 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

6961 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

6964 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

6967 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

6977 #ifde‡
USE_STDPERIPH_DRIVER


6978 
	~"°m32f4xx_c⁄f.h
"

6985 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

6987 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

6989 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

6991 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

6993 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

6995 
	#READ_REG
(
REG
Ë((REG))

	)

6997 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

7003 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/device_support/system_stm32f4xx.h

34 #i‚de‡
__SYSTEM_STM32F4XX_H


35 
	#__SYSTEM_STM32F4XX_H


	)

37 #ifde‡
__˝lu•lus


54 
uöt32_t
 
Sy°emC‹eClock
;

81 
Sy°emInô
();

82 
Sy°emC‹eClockUpd©e
();

87 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/misc.h

24 #i‚de‡
__MISC_H


25 
	#__MISC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt8_t
 
NVIC_IRQCh™√l
;

55 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

60 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

65 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

68 } 
	tNVIC_InôTy≥Def
;

80 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

81 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

82 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
) || \

83 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

	)

92 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

93 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

94 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

95 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
) || \

96 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

97 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

	)

106 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

108 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

110 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

112 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

114 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

117 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
) || \

118 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

119 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

120 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

121 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

	)

123 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

125 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

127 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

137 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

138 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

139 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
) || \

140 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

	)

152 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

153 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

154 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

155 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

156 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

158 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h

24 #i‚de‡
__STM32F4xx_ADC_H


25 
	#__STM32F4xx_ADC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

49 
uöt32_t
 
ADC_Resﬁuti⁄
;

51 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

55 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

58 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄vEdge
;

62 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

66 
uöt32_t
 
ADC_D©aAlign
;

69 
uöt8_t
 
ADC_NbrOfC⁄vîsi⁄
;

73 }
	tADC_InôTy≥Def
;

80 
uöt32_t
 
ADC_Mode
;

83 
uöt32_t
 
ADC_PªsˇÀr
;

86 
uöt32_t
 
ADC_DMAAc˚ssMode
;

90 
uöt32_t
 
ADC_TwoSam∂ögDñay
;

94 }
	tADC_Comm⁄InôTy≥Def
;

102 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

103 ((
PERIPH
Ë=
ADC2
) || \

104 ((
PERIPH
Ë=
ADC3
))

	)

109 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

110 
	#ADC_DuÆMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000001)

	)

111 
	#ADC_DuÆMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000002)

	)

112 
	#ADC_DuÆMode_InjecSimu…
 ((
uöt32_t
)0x00000005)

	)

113 
	#ADC_DuÆMode_RegSimu…
 ((
uöt32_t
)0x00000006)

	)

114 
	#ADC_DuÆMode_I¡îl
 ((
uöt32_t
)0x00000007)

	)

115 
	#ADC_DuÆMode_A…îTrig
 ((
uöt32_t
)0x00000009)

	)

116 
	#ADC_TrùÀMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000011)

	)

117 
	#ADC_TrùÀMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000012)

	)

118 
	#ADC_TrùÀMode_InjecSimu…
 ((
uöt32_t
)0x00000015)

	)

119 
	#ADC_TrùÀMode_RegSimu…
 ((
uöt32_t
)0x00000016)

	)

120 
	#ADC_TrùÀMode_I¡îl
 ((
uöt32_t
)0x00000017)

	)

121 
	#ADC_TrùÀMode_A…îTrig
 ((
uöt32_t
)0x00000019)

	)

122 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
) || \

123 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_InjecSimu…
) || \

124 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_A…îTrig
) || \

125 ((
MODE
Ë=
ADC_DuÆMode_InjecSimu…
) || \

126 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…
) || \

127 ((
MODE
Ë=
ADC_DuÆMode_I¡îl
) || \

128 ((
MODE
Ë=
ADC_DuÆMode_A…îTrig
) || \

129 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_InjecSimu…
) || \

130 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_A…îTrig
) || \

131 ((
MODE
Ë=
ADC_TrùÀMode_InjecSimu…
) || \

132 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…
) || \

133 ((
MODE
Ë=
ADC_TrùÀMode_I¡îl
) || \

134 ((
MODE
Ë=
ADC_TrùÀMode_A…îTrig
))

	)

143 
	#ADC_PªsˇÀr_Div2
 ((
uöt32_t
)0x00000000)

	)

144 
	#ADC_PªsˇÀr_Div4
 ((
uöt32_t
)0x00010000)

	)

145 
	#ADC_PªsˇÀr_Div6
 ((
uöt32_t
)0x00020000)

	)

146 
	#ADC_PªsˇÀr_Div8
 ((
uöt32_t
)0x00030000)

	)

147 
	#IS_ADC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
ADC_PªsˇÀr_Div2
) || \

148 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div4
) || \

149 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div6
) || \

150 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div8
))

	)

159 
	#ADC_DMAAc˚ssMode_DißbÀd
 ((
uöt32_t
)0x00000000Ë

	)

160 
	#ADC_DMAAc˚ssMode_1
 ((
uöt32_t
)0x00004000Ë

	)

161 
	#ADC_DMAAc˚ssMode_2
 ((
uöt32_t
)0x00008000Ë

	)

162 
	#ADC_DMAAc˚ssMode_3
 ((
uöt32_t
)0x0000C000Ë

	)

163 
	#IS_ADC_DMA_ACCESS_MODE
(
MODE
Ë(((MODEË=
ADC_DMAAc˚ssMode_DißbÀd
) || \

164 ((
MODE
Ë=
ADC_DMAAc˚ssMode_1
) || \

165 ((
MODE
Ë=
ADC_DMAAc˚ssMode_2
) || \

166 ((
MODE
Ë=
ADC_DMAAc˚ssMode_3
))

	)

176 
	#ADC_TwoSam∂ögDñay_5Cy˛es
 ((
uöt32_t
)0x00000000)

	)

177 
	#ADC_TwoSam∂ögDñay_6Cy˛es
 ((
uöt32_t
)0x00000100)

	)

178 
	#ADC_TwoSam∂ögDñay_7Cy˛es
 ((
uöt32_t
)0x00000200)

	)

179 
	#ADC_TwoSam∂ögDñay_8Cy˛es
 ((
uöt32_t
)0x00000300)

	)

180 
	#ADC_TwoSam∂ögDñay_9Cy˛es
 ((
uöt32_t
)0x00000400)

	)

181 
	#ADC_TwoSam∂ögDñay_10Cy˛es
 ((
uöt32_t
)0x00000500)

	)

182 
	#ADC_TwoSam∂ögDñay_11Cy˛es
 ((
uöt32_t
)0x00000600)

	)

183 
	#ADC_TwoSam∂ögDñay_12Cy˛es
 ((
uöt32_t
)0x00000700)

	)

184 
	#ADC_TwoSam∂ögDñay_13Cy˛es
 ((
uöt32_t
)0x00000800)

	)

185 
	#ADC_TwoSam∂ögDñay_14Cy˛es
 ((
uöt32_t
)0x00000900)

	)

186 
	#ADC_TwoSam∂ögDñay_15Cy˛es
 ((
uöt32_t
)0x00000A00)

	)

187 
	#ADC_TwoSam∂ögDñay_16Cy˛es
 ((
uöt32_t
)0x00000B00)

	)

188 
	#ADC_TwoSam∂ögDñay_17Cy˛es
 ((
uöt32_t
)0x00000C00)

	)

189 
	#ADC_TwoSam∂ögDñay_18Cy˛es
 ((
uöt32_t
)0x00000D00)

	)

190 
	#ADC_TwoSam∂ögDñay_19Cy˛es
 ((
uöt32_t
)0x00000E00)

	)

191 
	#ADC_TwoSam∂ögDñay_20Cy˛es
 ((
uöt32_t
)0x00000F00)

	)

192 
	#IS_ADC_SAMPLING_DELAY
(
DELAY
Ë(((DELAYË=
ADC_TwoSam∂ögDñay_5Cy˛es
) || \

193 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_6Cy˛es
) || \

194 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_7Cy˛es
) || \

195 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_8Cy˛es
) || \

196 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_9Cy˛es
) || \

197 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_10Cy˛es
) || \

198 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_11Cy˛es
) || \

199 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_12Cy˛es
) || \

200 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_13Cy˛es
) || \

201 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_14Cy˛es
) || \

202 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_15Cy˛es
) || \

203 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_16Cy˛es
) || \

204 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_17Cy˛es
) || \

205 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_18Cy˛es
) || \

206 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_19Cy˛es
) || \

207 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_20Cy˛es
))

	)

217 
	#ADC_Resﬁuti⁄_12b
 ((
uöt32_t
)0x00000000)

	)

218 
	#ADC_Resﬁuti⁄_10b
 ((
uöt32_t
)0x01000000)

	)

219 
	#ADC_Resﬁuti⁄_8b
 ((
uöt32_t
)0x02000000)

	)

220 
	#ADC_Resﬁuti⁄_6b
 ((
uöt32_t
)0x03000000)

	)

221 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_Resﬁuti⁄_12b
) || \

222 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_10b
) || \

223 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_8b
) || \

224 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_6b
))

	)

234 
	#ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

235 
	#ADC_Exã∫ÆTrigC⁄vEdge_Risög
 ((
uöt32_t
)0x10000000)

	)

236 
	#ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
 ((
uöt32_t
)0x20000000)

	)

237 
	#ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x30000000)

	)

238 
	#IS_ADC_EXT_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
) || \

239 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_Risög
) || \

240 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
) || \

241 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
))

	)

250 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

251 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x01000000)

	)

252 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x02000000)

	)

253 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x03000000)

	)

254 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x04000000)

	)

255 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC4
 ((
uöt32_t
)0x05000000)

	)

256 
	#ADC_Exã∫ÆTrigC⁄v_T2_TRGO
 ((
uöt32_t
)0x06000000)

	)

257 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x07000000)

	)

258 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x08000000)

	)

259 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x09000000)

	)

260 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x0A000000)

	)

261 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC2
 ((
uöt32_t
)0x0B000000)

	)

262 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x0C000000)

	)

263 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x0D000000)

	)

264 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x0E000000)

	)

265 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11
 ((
uöt32_t
)0x0F000000)

	)

266 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
) || \

267 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

268 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

269 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

270 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

271 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC4
) || \

272 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_TRGO
) || \

273 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

274 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

275 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

276 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

277 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC2
) || \

278 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
) || \

279 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

280 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

281 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11
))

	)

290 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

291 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

292 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
) || \

293 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

	)

302 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

303 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

304 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

305 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

306 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

307 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

308 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

309 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

310 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

311 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

312 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

313 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

314 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

315 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

316 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

317 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

318 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

319 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

320 
	#ADC_Ch™√l_18
 ((
uöt8_t
)0x12)

	)

322 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

323 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

324 
	#ADC_Ch™√l_Vb©
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

326 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
) || \

327 ((
CHANNEL
Ë=
ADC_Ch™√l_1
) || \

328 ((
CHANNEL
Ë=
ADC_Ch™√l_2
) || \

329 ((
CHANNEL
Ë=
ADC_Ch™√l_3
) || \

330 ((
CHANNEL
Ë=
ADC_Ch™√l_4
) || \

331 ((
CHANNEL
Ë=
ADC_Ch™√l_5
) || \

332 ((
CHANNEL
Ë=
ADC_Ch™√l_6
) || \

333 ((
CHANNEL
Ë=
ADC_Ch™√l_7
) || \

334 ((
CHANNEL
Ë=
ADC_Ch™√l_8
) || \

335 ((
CHANNEL
Ë=
ADC_Ch™√l_9
) || \

336 ((
CHANNEL
Ë=
ADC_Ch™√l_10
) || \

337 ((
CHANNEL
Ë=
ADC_Ch™√l_11
) || \

338 ((
CHANNEL
Ë=
ADC_Ch™√l_12
) || \

339 ((
CHANNEL
Ë=
ADC_Ch™√l_13
) || \

340 ((
CHANNEL
Ë=
ADC_Ch™√l_14
) || \

341 ((
CHANNEL
Ë=
ADC_Ch™√l_15
) || \

342 ((
CHANNEL
Ë=
ADC_Ch™√l_16
) || \

343 ((
CHANNEL
Ë=
ADC_Ch™√l_17
) || \

344 ((
CHANNEL
Ë=
ADC_Ch™√l_18
))

	)

353 
	#ADC_Sam∂eTime_3Cy˛es
 ((
uöt8_t
)0x00)

	)

354 
	#ADC_Sam∂eTime_15Cy˛es
 ((
uöt8_t
)0x01)

	)

355 
	#ADC_Sam∂eTime_28Cy˛es
 ((
uöt8_t
)0x02)

	)

356 
	#ADC_Sam∂eTime_56Cy˛es
 ((
uöt8_t
)0x03)

	)

357 
	#ADC_Sam∂eTime_84Cy˛es
 ((
uöt8_t
)0x04)

	)

358 
	#ADC_Sam∂eTime_112Cy˛es
 ((
uöt8_t
)0x05)

	)

359 
	#ADC_Sam∂eTime_144Cy˛es
 ((
uöt8_t
)0x06)

	)

360 
	#ADC_Sam∂eTime_480Cy˛es
 ((
uöt8_t
)0x07)

	)

361 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_3Cy˛es
) || \

362 ((
TIME
Ë=
ADC_Sam∂eTime_15Cy˛es
) || \

363 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es
) || \

364 ((
TIME
Ë=
ADC_Sam∂eTime_56Cy˛es
) || \

365 ((
TIME
Ë=
ADC_Sam∂eTime_84Cy˛es
) || \

366 ((
TIME
Ë=
ADC_Sam∂eTime_112Cy˛es
) || \

367 ((
TIME
Ë=
ADC_Sam∂eTime_144Cy˛es
) || \

368 ((
TIME
Ë=
ADC_Sam∂eTime_480Cy˛es
))

	)

377 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

378 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
 ((
uöt32_t
)0x00100000)

	)

379 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
 ((
uöt32_t
)0x00200000)

	)

380 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x00300000)

	)

381 
	#IS_ADC_EXT_INJEC_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
) || \

382 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
) || \

383 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
) || \

384 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
))

	)

394 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00000000)

	)

395 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00010000)

	)

396 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00020000)

	)

397 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00030000)

	)

398 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
 ((
uöt32_t
)0x00040000)

	)

399 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00050000)

	)

400 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
 ((
uöt32_t
)0x00060000)

	)

401 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
 ((
uöt32_t
)0x00070000)

	)

402 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00080000)

	)

403 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00090000)

	)

404 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x000A0000)

	)

405 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x000B0000)

	)

406 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x000C0000)

	)

407 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
 ((
uöt32_t
)0x000D0000)

	)

408 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x000E0000)

	)

409 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
 ((
uöt32_t
)0x000F0000)

	)

410 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

411 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

412 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

413 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

414 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
) || \

415 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

416 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
) || \

417 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
) || \

418 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

419 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

420 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
) || \

421 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

422 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

423 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
) || \

424 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

425 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
))

	)

434 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

435 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

436 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

437 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

438 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
) || \

439 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

440 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

441 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

	)

450 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

451 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

452 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

453 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

454 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

455 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

456 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

457 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
) || \

458 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

459 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

460 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

461 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

462 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

463 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

	)

472 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0205)

	)

473 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0106)

	)

474 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0407)

	)

475 
	#ADC_IT_OVR
 ((
uöt16_t
)0x201A)

	)

476 
	#IS_ADC_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
) || \

477 ((
IT
Ë=
ADC_IT_JEOC
)|| ((ITË=
ADC_IT_OVR
))

	)

486 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

487 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

488 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

489 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

490 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

491 
	#ADC_FLAG_OVR
 ((
uöt8_t
)0x20)

	)

493 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xC0Ë=0x00Ë&& ((FLAGË!0x00))

	)

494 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
) || \

495 ((
FLAG
Ë=
ADC_FLAG_EOC
) || \

496 ((
FLAG
Ë=
ADC_FLAG_JEOC
) || \

497 ((
FLAG
)=
ADC_FLAG_JSTRT
) || \

498 ((
FLAG
Ë=
ADC_FLAG_STRT
) || \

499 ((
FLAG
)=
ADC_FLAG_OVR
))

	)

508 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

517 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

526 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

535 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

544 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

553 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

562 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

576 
ADC_DeInô
();

579 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

580 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

581 
ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

582 
ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

583 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

586 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

587 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,uöt16_à
LowThªshﬁd
);

588 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

591 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

592 
ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

595 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

596 
ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

597 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

598 
ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

600 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

601 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

602 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

603 
uöt32_t
 
ADC_GëMu…iModeC⁄vîsi⁄VÆue
();

606 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

607 
ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

608 
ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

611 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

612 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

613 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

614 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

615 
ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
);

616 
ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

617 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

618 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

619 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

620 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

623 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

624 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

625 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

626 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

627 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

629 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_can.h

24 #i‚de‡
__STM32F4xx_CAN_H


25 
	#__STM32F4xx_CAN_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

44 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
) || \

45 ((
PERIPH
Ë=
CAN2
))

	)

52 
uöt16_t
 
CAN_PªsˇÀr
;

55 
uöt8_t
 
CAN_Mode
;

58 
uöt8_t
 
CAN_SJW
;

63 
uöt8_t
 
CAN_BS1
;

67 
uöt8_t
 
CAN_BS2
;

70 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

73 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

76 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

79 
Fun˘i⁄ÆSèã
 
CAN_NART
;

82 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

85 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

87 } 
	tCAN_InôTy≥Def
;

94 
uöt16_t
 
CAN_FûãrIdHigh
;

98 
uöt16_t
 
CAN_FûãrIdLow
;

102 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

107 
uöt16_t
 
CAN_FûãrMaskIdLow
;

112 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

115 
uöt8_t
 
CAN_FûãrNumbî
;

117 
uöt8_t
 
CAN_FûãrMode
;

120 
uöt8_t
 
CAN_FûãrSˇÀ
;

123 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

125 } 
	tCAN_FûãrInôTy≥Def
;

132 
uöt32_t
 
StdId
;

135 
uöt32_t
 
ExtId
;

138 
uöt8_t
 
IDE
;

142 
uöt8_t
 
RTR
;

146 
uöt8_t
 
DLC
;

150 
uöt8_t
 
D©a
[8];

152 } 
	tC™TxMsg
;

159 
uöt32_t
 
StdId
;

162 
uöt32_t
 
ExtId
;

165 
uöt8_t
 
IDE
;

169 
uöt8_t
 
RTR
;

173 
uöt8_t
 
DLC
;

176 
uöt8_t
 
D©a
[8];

179 
uöt8_t
 
FMI
;

182 } 
	tC™RxMsg
;

194 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

195 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

199 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

200 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

209 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

210 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

211 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

212 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

214 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
) || \

215 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

216 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

217 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

	)

227 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

228 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

229 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

232 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
) ||\

233 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

234 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

	)

244 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

245 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

253 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

254 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

255 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

256 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

258 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

259 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

	)

267 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

268 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

269 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

270 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

271 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

272 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

273 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

274 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

275 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

276 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

277 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

278 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

279 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

280 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

281 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

282 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

284 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

292 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

293 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

294 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

295 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

296 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

297 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

298 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

299 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

301 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

309 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

317 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

325 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

326 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

328 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
) || \

329 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

	)

337 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

338 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

340 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
) || \

341 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

	)

349 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

350 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

351 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
) || \

352 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

	)

355 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

356 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

364 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

372 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

373 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

374 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

375 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

383 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

384 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

385 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
) || \

386 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

	)

389 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

390 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

398 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

399 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

400 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

403 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

404 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

412 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

413 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

414 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

415 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

418 
	#CANTXFAILED
 
CAN_TxSètus_Faûed


	)

419 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

420 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

421 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

429 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

430 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

432 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

440 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

441 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

444 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

445 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

453 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

454 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

457 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

458 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

467 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

468 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

469 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

470 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

471 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

472 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

473 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

474 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

488 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

489 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

490 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

493 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

494 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

495 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

496 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

497 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

498 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

501 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

502 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

507 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

508 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

509 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

510 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

512 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
) || \

513 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

514 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

515 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

516 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

517 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

518 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

519 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

	)

521 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

522 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

523 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

524 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

525 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

	)

534 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

537 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

538 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

539 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

540 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

541 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

542 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

545 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

546 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

549 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

550 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

551 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

552 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

553 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

556 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

557 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

558 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

561 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
) ||\

562 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

563 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

564 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

565 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

566 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

567 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

569 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
) ||\

570 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

571 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

572 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

573 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

574 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

587 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

590 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

591 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

592 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

593 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

594 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

595 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

598 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

599 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

600 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

603 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

604 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

605 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

608 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

609 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

610 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

613 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

614 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

615 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

618 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

619 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

620 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

621 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

622 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

624 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_crc.h

24 #i‚de‡
__STM32F4xx_CRC_H


25 
	#__STM32F4xx_CRC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

56 
CRC_Re£tDR
();

57 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

58 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

59 
uöt32_t
 
CRC_GëCRC
();

60 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

61 
uöt8_t
 
CRC_GëIDRegi°î
();

63 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_cryp.h

24 #i‚de‡
__STM32F4xx_CRYP_H


25 
	#__STM32F4xx_CRYP_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

49 
uöt16_t
 
CRYP_AlgoDú
;

51 
uöt16_t
 
CRYP_AlgoMode
;

54 
uöt16_t
 
CRYP_D©aTy≥
;

56 
uöt16_t
 
CRYP_KeySize
;

59 }
	tCRYP_InôTy≥Def
;

66 
uöt32_t
 
CRYP_Key0Le·
;

67 
uöt32_t
 
CRYP_Key0Right
;

68 
uöt32_t
 
CRYP_Key1Le·
;

69 
uöt32_t
 
CRYP_Key1Right
;

70 
uöt32_t
 
CRYP_Key2Le·
;

71 
uöt32_t
 
CRYP_Key2Right
;

72 
uöt32_t
 
CRYP_Key3Le·
;

73 
uöt32_t
 
CRYP_Key3Right
;

74 }
	tCRYP_KeyInôTy≥Def
;

80 
uöt32_t
 
CRYP_IV0Le·
;

81 
uöt32_t
 
CRYP_IV0Right
;

82 
uöt32_t
 
CRYP_IV1Le·
;

83 
uöt32_t
 
CRYP_IV1Right
;

84 }
	tCRYP_IVInôTy≥Def
;

92 
uöt32_t
 
CR_bôs9to2
;

94 
uöt32_t
 
CRYP_IV0LR
;

95 
uöt32_t
 
CRYP_IV0RR
;

96 
uöt32_t
 
CRYP_IV1LR
;

97 
uöt32_t
 
CRYP_IV1RR
;

99 
uöt32_t
 
CRYP_K0LR
;

100 
uöt32_t
 
CRYP_K0RR
;

101 
uöt32_t
 
CRYP_K1LR
;

102 
uöt32_t
 
CRYP_K1RR
;

103 
uöt32_t
 
CRYP_K2LR
;

104 
uöt32_t
 
CRYP_K2RR
;

105 
uöt32_t
 
CRYP_K3LR
;

106 
uöt32_t
 
CRYP_K3RR
;

107 }
	tCRYP_C⁄ãxt
;

119 
	#CRYP_AlgoDú_En¸y±
 ((
uöt16_t
)0x0000)

	)

120 
	#CRYP_AlgoDú_De¸y±
 ((
uöt16_t
)0x0004)

	)

121 
	#IS_CRYP_ALGODIR
(
ALGODIR
Ë(((ALGODIRË=
CRYP_AlgoDú_En¸y±
) || \

122 ((
ALGODIR
Ë=
CRYP_AlgoDú_De¸y±
))

	)

133 
	#CRYP_AlgoMode_TDES_ECB
 ((
uöt16_t
)0x0000)

	)

134 
	#CRYP_AlgoMode_TDES_CBC
 ((
uöt16_t
)0x0008)

	)

137 
	#CRYP_AlgoMode_DES_ECB
 ((
uöt16_t
)0x0010)

	)

138 
	#CRYP_AlgoMode_DES_CBC
 ((
uöt16_t
)0x0018)

	)

141 
	#CRYP_AlgoMode_AES_ECB
 ((
uöt16_t
)0x0020)

	)

142 
	#CRYP_AlgoMode_AES_CBC
 ((
uöt16_t
)0x0028)

	)

143 
	#CRYP_AlgoMode_AES_CTR
 ((
uöt16_t
)0x0030)

	)

144 
	#CRYP_AlgoMode_AES_Key
 ((
uöt16_t
)0x0038)

	)

146 
	#IS_CRYP_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
CRYP_AlgoMode_TDES_ECB
) || \

147 ((
ALGOMODE
Ë=
CRYP_AlgoMode_TDES_CBC
)|| \

148 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_ECB
)|| \

149 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_CBC
) || \

150 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_ECB
) || \

151 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CBC
) || \

152 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CTR
) || \

153 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_Key
))

	)

161 
	#CRYP_D©aTy≥_32b
 ((
uöt16_t
)0x0000)

	)

162 
	#CRYP_D©aTy≥_16b
 ((
uöt16_t
)0x0040)

	)

163 
	#CRYP_D©aTy≥_8b
 ((
uöt16_t
)0x0080)

	)

164 
	#CRYP_D©aTy≥_1b
 ((
uöt16_t
)0x00C0)

	)

165 
	#IS_CRYP_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
CRYP_D©aTy≥_32b
) || \

166 ((
DATATYPE
Ë=
CRYP_D©aTy≥_16b
)|| \

167 ((
DATATYPE
Ë=
CRYP_D©aTy≥_8b
)|| \

168 ((
DATATYPE
Ë=
CRYP_D©aTy≥_1b
))

	)

176 
	#CRYP_KeySize_128b
 ((
uöt16_t
)0x0000)

	)

177 
	#CRYP_KeySize_192b
 ((
uöt16_t
)0x0100)

	)

178 
	#CRYP_KeySize_256b
 ((
uöt16_t
)0x0200)

	)

179 
	#IS_CRYP_KEYSIZE
(
KEYSIZE
Ë(((KEYSIZEË=
CRYP_KeySize_128b
)|| \

180 ((
KEYSIZE
Ë=
CRYP_KeySize_192b
)|| \

181 ((
KEYSIZE
Ë=
CRYP_KeySize_256b
))

	)

189 
	#CRYP_FLAG_BUSY
 ((
uöt8_t
)0x10Ë

	)

193 
	#CRYP_FLAG_IFEM
 ((
uöt8_t
)0x01Ë

	)

194 
	#CRYP_FLAG_IFNF
 ((
uöt8_t
)0x02Ë

	)

195 
	#CRYP_FLAG_INRIS
 ((
uöt8_t
)0x22Ë

	)

196 
	#CRYP_FLAG_OFNE
 ((
uöt8_t
)0x04Ë

	)

198 
	#CRYP_FLAG_OFFU
 ((
uöt8_t
)0x08Ë

	)

199 
	#CRYP_FLAG_OUTRIS
 ((
uöt8_t
)0x21Ë

	)

202 
	#IS_CRYP_GET_FLAG
(
FLAG
Ë(((FLAGË=
CRYP_FLAG_IFEM
) || \

203 ((
FLAG
Ë=
CRYP_FLAG_IFNF
) || \

204 ((
FLAG
Ë=
CRYP_FLAG_OFNE
) || \

205 ((
FLAG
Ë=
CRYP_FLAG_OFFU
) || \

206 ((
FLAG
Ë=
CRYP_FLAG_BUSY
) || \

207 ((
FLAG
Ë=
CRYP_FLAG_OUTRIS
)|| \

208 ((
FLAG
Ë=
CRYP_FLAG_INRIS
))

	)

216 
	#CRYP_IT_INI
 ((
uöt8_t
)0x01Ë

	)

217 
	#CRYP_IT_OUTI
 ((
uöt8_t
)0x02Ë

	)

218 
	#IS_CRYP_CONFIG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xFCË=0x00Ë&& ((ITË!0x00))

	)

219 
	#IS_CRYP_GET_IT
(
IT
Ë(((ITË=
CRYP_IT_INI
Ë|| ((ITË=
CRYP_IT_OUTI
))

	)

228 
	#MODE_ENCRYPT
 ((
uöt8_t
)0x01)

	)

229 
	#MODE_DECRYPT
 ((
uöt8_t
)0x00)

	)

238 
	#CRYP_DMAReq_D©aIN
 ((
uöt8_t
)0x01)

	)

239 
	#CRYP_DMAReq_D©aOUT
 ((
uöt8_t
)0x02)

	)

240 
	#IS_CRYP_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt8_t
)0xFCË=0x00Ë&& ((DMAREQË!0x00))

	)

253 
CRYP_DeInô
();

256 
CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

257 
CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

258 
CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

259 
CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

260 
CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

261 
CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

262 
CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

265 
CRYP_D©aIn
(
uöt32_t
 
D©a
);

266 
uöt32_t
 
CRYP_D©aOut
();

267 
CRYP_FIFOFlush
();

270 
Eº‹Sètus
 
CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

271 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

272 
CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
);

275 
CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

278 
CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

279 
ITSètus
 
CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
);

280 
FœgSètus
 
CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
);

283 
Eº‹Sètus
 
CRYP_AES_ECB
(
uöt8_t
 
Mode
,

284 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

285 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

286 
uöt8_t
 *
Ouçut
);

288 
Eº‹Sètus
 
CRYP_AES_CBC
(
uöt8_t
 
Mode
,

289 
uöt8_t
 
InôVe˘‹s
[16],

290 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

291 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

292 
uöt8_t
 *
Ouçut
);

294 
Eº‹Sètus
 
CRYP_AES_CTR
(
uöt8_t
 
Mode
,

295 
uöt8_t
 
InôVe˘‹s
[16],

296 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

297 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

298 
uöt8_t
 *
Ouçut
);

301 
Eº‹Sètus
 
CRYP_TDES_ECB
(
uöt8_t
 
Mode
,

302 
uöt8_t
 
Key
[24],

303 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

304 
uöt8_t
 *
Ouçut
);

306 
Eº‹Sètus
 
CRYP_TDES_CBC
(
uöt8_t
 
Mode
,

307 
uöt8_t
 
Key
[24],

308 
uöt8_t
 
InôVe˘‹s
[8],

309 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

310 
uöt8_t
 *
Ouçut
);

313 
Eº‹Sètus
 
CRYP_DES_ECB
(
uöt8_t
 
Mode
,

314 
uöt8_t
 
Key
[8],

315 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

316 
uöt8_t
 *
Ouçut
);

318 
Eº‹Sètus
 
CRYP_DES_CBC
(
uöt8_t
 
Mode
,

319 
uöt8_t
 
Key
[8],

320 
uöt8_t
 
InôVe˘‹s
[8],

321 
uöt8_t
 *
I≈ut
,
uöt32_t
 
IÀngth
,

322 
uöt8_t
 *
Ouçut
);

324 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dac.h

24 #i‚de‡
__STM32F4xx_DAC_H


25 
	#__STM32F4xx_DAC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt32_t
 
DAC_Triggî
;

53 
uöt32_t
 
DAC_WaveGíî©i⁄
;

57 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

61 
uöt32_t
 
DAC_OuçutBuf„r
;

63 }
	tDAC_InôTy≥Def
;

75 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

77 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

78 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

79 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

80 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

81 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

82 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

84 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

85 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

87 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
) || \

88 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

89 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

90 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

91 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

92 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

93 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

94 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

95 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

	)

105 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

106 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

107 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

108 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
) || \

109 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

110 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

	)

119 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

120 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

121 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

122 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

123 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

124 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

125 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

126 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

127 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

128 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

129 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

130 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

131 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

132 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

133 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

134 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

135 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

136 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

137 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

144 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
) || \

145 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

146 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

147 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

148 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

149 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

150 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

151 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

156 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

157 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

158 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

159 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

160 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

161 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

162 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

	)

176 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

177 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

178 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
) || \

179 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

	)

188 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

189 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

190 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
) || \

191 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

	)

200 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

201 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

202 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

203 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
) || \

204 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

205 ((
ALIGN
Ë=
DAC_Align_8b_R
))

	)

214 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

215 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

216 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
) || \

217 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

	)

226 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

234 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

235 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

245 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

246 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

260 
DAC_DeInô
();

263 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

264 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

265 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

266 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

267 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

268 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

269 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

270 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

271 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

272 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

275 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

278 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

279 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

280 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

281 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

282 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

284 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dbgmcu.h

23 #i‚de‡
__STM32F4xx_DBGMCU_H


24 
	#__STM32F4xx_DBGMCU_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f4xx.h
"

47 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

48 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

49 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

50 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFF8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

52 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

53 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

54 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

55 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

56 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

57 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

58 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

59 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

60 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

61 
	#DBGMCU_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

62 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

63 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

64 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

65 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

66 
	#DBGMCU_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

67 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

68 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

69 
	#IS_DBGMCU_APB1PERIPH
(
PERIPH
Ë((((PERIPHË& 0xF91FE200Ë=0x00Ë&& ((PERIPHË!0x00))

	)

71 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

72 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

73 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

74 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

75 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

76 
	#IS_DBGMCU_APB2PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF8FFFCË=0x00Ë&& ((PERIPHË!0x00))

	)

83 
uöt32_t
 
DBGMCU_GëREVID
();

84 
uöt32_t
 
DBGMCU_GëDEVID
();

85 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

86 
DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

87 
DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

89 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dcmi.h

23 #i‚de‡
__STM32F4xx_DCMI_H


24 
	#__STM32F4xx_DCMI_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f4xx.h
"

47 
uöt16_t
 
DCMI_C≠tuªMode
;

50 
uöt16_t
 
DCMI_SynchroMode
;

53 
uöt16_t
 
DCMI_PCKPﬁ¨ôy
;

56 
uöt16_t
 
DCMI_VSPﬁ¨ôy
;

59 
uöt16_t
 
DCMI_HSPﬁ¨ôy
;

62 
uöt16_t
 
DCMI_C≠tuªR©e
;

65 
uöt16_t
 
DCMI_ExãndedD©aMode
;

67 } 
	tDCMI_InôTy≥Def
;

74 
uöt16_t
 
DCMI_VîtiˇlSèπLöe
;

77 
uöt16_t
 
DCMI_H‹iz⁄èlOff£tCou¡
;

80 
uöt16_t
 
DCMI_VîtiˇlLöeCou¡
;

83 
uöt16_t
 
DCMI_C≠tuªCou¡
;

86 } 
	tDCMI_CROPInôTy≥Def
;

93 
uöt8_t
 
DCMI_FømeSèπCode
;

94 
uöt8_t
 
DCMI_LöeSèπCode
;

95 
uöt8_t
 
DCMI_LöeEndCode
;

96 
uöt8_t
 
DCMI_FømeEndCode
;

97 } 
	tDCMI_CodesInôTy≥Def
;

108 
	#DCMI_C≠tuªMode_C⁄töuous
 ((
uöt16_t
)0x0000Ë

	)

110 
	#DCMI_C≠tuªMode_S«pShŸ
 ((
uöt16_t
)0x0002Ë

	)

112 
	#IS_DCMI_CAPTURE_MODE
(
MODE
)(((MODEË=
DCMI_C≠tuªMode_C⁄töuous
) || \

113 ((
MODE
Ë=
DCMI_C≠tuªMode_S«pShŸ
))

	)

122 
	#DCMI_SynchroMode_H¨dw¨e
 ((
uöt16_t
)0x0000Ë

	)

124 
	#DCMI_SynchroMode_Embedded
 ((
uöt16_t
)0x0010Ë

	)

126 
	#IS_DCMI_SYNCHRO
(
MODE
)(((MODEË=
DCMI_SynchroMode_H¨dw¨e
) || \

127 ((
MODE
Ë=
DCMI_SynchroMode_Embedded
))

	)

136 
	#DCMI_PCKPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0000Ë

	)

137 
	#DCMI_PCKPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0020Ë

	)

138 
	#IS_DCMI_PCKPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_PCKPﬁ¨ôy_FÆlög
) || \

139 ((
POLARITY
Ë=
DCMI_PCKPﬁ¨ôy_Risög
))

	)

148 
	#DCMI_VSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

149 
	#DCMI_VSPﬁ¨ôy_High
 ((
uöt16_t
)0x0080Ë

	)

150 
	#IS_DCMI_VSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_VSPﬁ¨ôy_Low
) || \

151 ((
POLARITY
Ë=
DCMI_VSPﬁ¨ôy_High
))

	)

160 
	#DCMI_HSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

161 
	#DCMI_HSPﬁ¨ôy_High
 ((
uöt16_t
)0x0040Ë

	)

162 
	#IS_DCMI_HSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_HSPﬁ¨ôy_Low
) || \

163 ((
POLARITY
Ë=
DCMI_HSPﬁ¨ôy_High
))

	)

172 
	#DCMI_C≠tuªR©e_AŒ_Føme
 ((
uöt16_t
)0x0000Ë

	)

173 
	#DCMI_C≠tuªR©e_1of2_Føme
 ((
uöt16_t
)0x0100Ë

	)

174 
	#DCMI_C≠tuªR©e_1of4_Føme
 ((
uöt16_t
)0x0200Ë

	)

175 
	#IS_DCMI_CAPTURE_RATE
(
RATE
Ë(((RATEË=
DCMI_C≠tuªR©e_AŒ_Føme
) || \

176 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of2_Føme
) ||\

177 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of4_Føme
))

	)

186 
	#DCMI_ExãndedD©aMode_8b
 ((
uöt16_t
)0x0000Ë

	)

187 
	#DCMI_ExãndedD©aMode_10b
 ((
uöt16_t
)0x0400Ë

	)

188 
	#DCMI_ExãndedD©aMode_12b
 ((
uöt16_t
)0x0800Ë

	)

189 
	#DCMI_ExãndedD©aMode_14b
 ((
uöt16_t
)0x0C00Ë

	)

190 
	#IS_DCMI_EXTENDED_DATA
(
DATA
)(((DATAË=
DCMI_ExãndedD©aMode_8b
) || \

191 ((
DATA
Ë=
DCMI_ExãndedD©aMode_10b
) ||\

192 ((
DATA
Ë=
DCMI_ExãndedD©aMode_12b
) ||\

193 ((
DATA
Ë=
DCMI_ExãndedD©aMode_14b
))

	)

202 
	#DCMI_IT_FRAME
 ((
uöt16_t
)0x0001)

	)

203 
	#DCMI_IT_OVF
 ((
uöt16_t
)0x0002)

	)

204 
	#DCMI_IT_ERR
 ((
uöt16_t
)0x0004)

	)

205 
	#DCMI_IT_VSYNC
 ((
uöt16_t
)0x0008)

	)

206 
	#DCMI_IT_LINE
 ((
uöt16_t
)0x0010)

	)

207 
	#IS_DCMI_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((ITË!0x0000))

	)

208 
	#IS_DCMI_GET_IT
(
IT
Ë(((ITË=
DCMI_IT_FRAME
) || \

209 ((
IT
Ë=
DCMI_IT_OVF
) || \

210 ((
IT
Ë=
DCMI_IT_ERR
) || \

211 ((
IT
Ë=
DCMI_IT_VSYNC
) || \

212 ((
IT
Ë=
DCMI_IT_LINE
))

	)

224 
	#DCMI_FLAG_HSYNC
 ((
uöt16_t
)0x2001)

	)

225 
	#DCMI_FLAG_VSYNC
 ((
uöt16_t
)0x2002)

	)

226 
	#DCMI_FLAG_FNE
 ((
uöt16_t
)0x2004)

	)

230 
	#DCMI_FLAG_FRAMERI
 ((
uöt16_t
)0x0001)

	)

231 
	#DCMI_FLAG_OVFRI
 ((
uöt16_t
)0x0002)

	)

232 
	#DCMI_FLAG_ERRRI
 ((
uöt16_t
)0x0004)

	)

233 
	#DCMI_FLAG_VSYNCRI
 ((
uöt16_t
)0x0008)

	)

234 
	#DCMI_FLAG_LINERI
 ((
uöt16_t
)0x0010)

	)

238 
	#DCMI_FLAG_FRAMEMI
 ((
uöt16_t
)0x1001)

	)

239 
	#DCMI_FLAG_OVFMI
 ((
uöt16_t
)0x1002)

	)

240 
	#DCMI_FLAG_ERRMI
 ((
uöt16_t
)0x1004)

	)

241 
	#DCMI_FLAG_VSYNCMI
 ((
uöt16_t
)0x1008)

	)

242 
	#DCMI_FLAG_LINEMI
 ((
uöt16_t
)0x1010)

	)

243 
	#IS_DCMI_GET_FLAG
(
FLAG
Ë(((FLAGË=
DCMI_FLAG_HSYNC
) || \

244 ((
FLAG
Ë=
DCMI_FLAG_VSYNC
) || \

245 ((
FLAG
Ë=
DCMI_FLAG_FNE
) || \

246 ((
FLAG
Ë=
DCMI_FLAG_FRAMERI
) || \

247 ((
FLAG
Ë=
DCMI_FLAG_OVFRI
) || \

248 ((
FLAG
Ë=
DCMI_FLAG_ERRRI
) || \

249 ((
FLAG
Ë=
DCMI_FLAG_VSYNCRI
) || \

250 ((
FLAG
Ë=
DCMI_FLAG_LINERI
) || \

251 ((
FLAG
Ë=
DCMI_FLAG_FRAMEMI
) || \

252 ((
FLAG
Ë=
DCMI_FLAG_OVFMI
) || \

253 ((
FLAG
Ë=
DCMI_FLAG_ERRMI
) || \

254 ((
FLAG
Ë=
DCMI_FLAG_VSYNCMI
) || \

255 ((
FLAG
Ë=
DCMI_FLAG_LINEMI
))

	)

257 
	#IS_DCMI_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((FLAGË!0x0000))

	)

270 
DCMI_DeInô
();

273 
DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

274 
DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

275 
DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
);

276 
DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

277 
DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
);

278 
DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

281 
DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

282 
DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

283 
uöt32_t
 
DCMI_RódD©a
();

286 
DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
FœgSètus
 
DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
);

288 
DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
);

289 
ITSètus
 
DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
);

290 
DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
);

292 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma.h

24 #i‚de‡
__STM32F4xx_DMA_H


25 
	#__STM32F4xx_DMA_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt32_t
 
DMA_Ch™√l
;

53 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

55 
uöt32_t
 
DMA_Mem‹y0Ba£Addr
;

59 
uöt32_t
 
DMA_DIR
;

63 
uöt32_t
 
DMA_Buf„rSize
;

67 
uöt32_t
 
DMA_PîùhîÆInc
;

70 
uöt32_t
 
DMA_Mem‹yInc
;

73 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

76 
uöt32_t
 
DMA_Mem‹yD©aSize
;

79 
uöt32_t
 
DMA_Mode
;

84 
uöt32_t
 
DMA_Pri‹ôy
;

87 
uöt32_t
 
DMA_FIFOMode
;

92 
uöt32_t
 
DMA_FIFOThªshﬁd
;

95 
uöt32_t
 
DMA_Mem‹yBur°
;

100 
uöt32_t
 
DMA_PîùhîÆBur°
;

104 }
	tDMA_InôTy≥Def
;

112 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Såóm0
) || \

113 ((
PERIPH
Ë=
DMA1_Såóm1
) || \

114 ((
PERIPH
Ë=
DMA1_Såóm2
) || \

115 ((
PERIPH
Ë=
DMA1_Såóm3
) || \

116 ((
PERIPH
Ë=
DMA1_Såóm4
) || \

117 ((
PERIPH
Ë=
DMA1_Såóm5
) || \

118 ((
PERIPH
Ë=
DMA1_Såóm6
) || \

119 ((
PERIPH
Ë=
DMA1_Såóm7
) || \

120 ((
PERIPH
Ë=
DMA2_Såóm0
) || \

121 ((
PERIPH
Ë=
DMA2_Såóm1
) || \

122 ((
PERIPH
Ë=
DMA2_Såóm2
) || \

123 ((
PERIPH
Ë=
DMA2_Såóm3
) || \

124 ((
PERIPH
Ë=
DMA2_Såóm4
) || \

125 ((
PERIPH
Ë=
DMA2_Såóm5
) || \

126 ((
PERIPH
Ë=
DMA2_Såóm6
) || \

127 ((
PERIPH
Ë=
DMA2_Såóm7
))

	)

129 
	#IS_DMA_ALL_CONTROLLER
(
CONTROLLER
Ë(((CONTROLLERË=
DMA1
) || \

130 ((
CONTROLLER
Ë=
DMA2
))

	)

135 
	#DMA_Ch™√l_0
 ((
uöt32_t
)0x00000000)

	)

136 
	#DMA_Ch™√l_1
 ((
uöt32_t
)0x02000000)

	)

137 
	#DMA_Ch™√l_2
 ((
uöt32_t
)0x04000000)

	)

138 
	#DMA_Ch™√l_3
 ((
uöt32_t
)0x06000000)

	)

139 
	#DMA_Ch™√l_4
 ((
uöt32_t
)0x08000000)

	)

140 
	#DMA_Ch™√l_5
 ((
uöt32_t
)0x0A000000)

	)

141 
	#DMA_Ch™√l_6
 ((
uöt32_t
)0x0C000000)

	)

142 
	#DMA_Ch™√l_7
 ((
uöt32_t
)0x0E000000)

	)

144 
	#IS_DMA_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DMA_Ch™√l_0
) || \

145 ((
CHANNEL
Ë=
DMA_Ch™√l_1
) || \

146 ((
CHANNEL
Ë=
DMA_Ch™√l_2
) || \

147 ((
CHANNEL
Ë=
DMA_Ch™√l_3
) || \

148 ((
CHANNEL
Ë=
DMA_Ch™√l_4
) || \

149 ((
CHANNEL
Ë=
DMA_Ch™√l_5
) || \

150 ((
CHANNEL
Ë=
DMA_Ch™√l_6
) || \

151 ((
CHANNEL
Ë=
DMA_Ch™√l_7
))

	)

160 
	#DMA_DIR_PîùhîÆToMem‹y
 ((
uöt32_t
)0x00000000)

	)

161 
	#DMA_DIR_Mem‹yToPîùhîÆ
 ((
uöt32_t
)0x00000040)

	)

162 
	#DMA_DIR_Mem‹yToMem‹y
 ((
uöt32_t
)0x00000080)

	)

164 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_DIR_PîùhîÆToMem‹y
 ) || \

165 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToPîùhîÆ
) || \

166 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToMem‹y
))

	)

175 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

184 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

185 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

187 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
) || \

188 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

	)

197 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

198 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

200 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
) || \

201 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

	)

210 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

211 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000800)

	)

212 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00001000)

	)

214 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
) || \

215 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

216 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

	)

225 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

226 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00002000)

	)

227 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00004000)

	)

229 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
) || \

230 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

231 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
 ))

	)

240 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

241 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000100)

	)

243 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_N‹mÆ
 ) || \

244 ((
MODE
Ë=
DMA_Mode_Cúcuœr
))

	)

253 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

254 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00010000)

	)

255 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00020000)

	)

256 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00030000)

	)

258 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_Low
 ) || \

259 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

260 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

261 ((
PRIORITY
Ë=
DMA_Pri‹ôy_VîyHigh
))

	)

270 
	#DMA_FIFOMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

271 
	#DMA_FIFOMode_E«bÀ
 ((
uöt32_t
)0x00000004)

	)

273 
	#IS_DMA_FIFO_MODE_STATE
(
STATE
Ë(((STATEË=
DMA_FIFOMode_DißbÀ
 ) || \

274 ((
STATE
Ë=
DMA_FIFOMode_E«bÀ
))

	)

283 
	#DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000)

	)

284 
	#DMA_FIFOThªshﬁd_HÆfFuŒ
 ((
uöt32_t
)0x00000001)

	)

285 
	#DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000002)

	)

286 
	#DMA_FIFOThªshﬁd_FuŒ
 ((
uöt32_t
)0x00000003)

	)

288 
	#IS_DMA_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ) || \

289 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_HÆfFuŒ
) || \

290 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
) || \

291 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_FuŒ
))

	)

300 
	#DMA_Mem‹yBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

301 
	#DMA_Mem‹yBur°_INC4
 ((
uöt32_t
)0x00800000)

	)

302 
	#DMA_Mem‹yBur°_INC8
 ((
uöt32_t
)0x01000000)

	)

303 
	#DMA_Mem‹yBur°_INC16
 ((
uöt32_t
)0x01800000)

	)

305 
	#IS_DMA_MEMORY_BURST
(
BURST
Ë(((BURSTË=
DMA_Mem‹yBur°_SögÀ
) || \

306 ((
BURST
Ë=
DMA_Mem‹yBur°_INC4
) || \

307 ((
BURST
Ë=
DMA_Mem‹yBur°_INC8
) || \

308 ((
BURST
Ë=
DMA_Mem‹yBur°_INC16
))

	)

317 
	#DMA_PîùhîÆBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

318 
	#DMA_PîùhîÆBur°_INC4
 ((
uöt32_t
)0x00200000)

	)

319 
	#DMA_PîùhîÆBur°_INC8
 ((
uöt32_t
)0x00400000)

	)

320 
	#DMA_PîùhîÆBur°_INC16
 ((
uöt32_t
)0x00600000)

	)

322 
	#IS_DMA_PERIPHERAL_BURST
(
BURST
Ë(((BURSTË=
DMA_PîùhîÆBur°_SögÀ
) || \

323 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC4
) || \

324 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC8
) || \

325 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC16
))

	)

334 
	#DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000 << 3)

	)

335 
	#DMA_FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000001 << 3)

	)

336 
	#DMA_FIFOSètus_HÆfFuŒ
 ((
uöt32_t
)0x00000002 << 3)

	)

337 
	#DMA_FIFOSètus_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000003 << 3)

	)

338 
	#DMA_FIFOSètus_Em±y
 ((
uöt32_t
)0x00000004 << 3)

	)

339 
	#DMA_FIFOSètus_FuŒ
 ((
uöt32_t
)0x00000005 << 3)

	)

341 
	#IS_DMA_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ) || \

342 ((
STATUS
Ë=
DMA_FIFOSètus_HÆfFuŒ
) || \

343 ((
STATUS
Ë=
DMA_FIFOSètus_1Qu¨ãrFuŒ
) || \

344 ((
STATUS
Ë=
DMA_FIFOSètus_3Qu¨ãrsFuŒ
) || \

345 ((
STATUS
Ë=
DMA_FIFOSètus_FuŒ
) || \

346 ((
STATUS
Ë=
DMA_FIFOSètus_Em±y
))

	)

354 
	#DMA_FLAG_FEIF0
 ((
uöt32_t
)0x10800001)

	)

355 
	#DMA_FLAG_DMEIF0
 ((
uöt32_t
)0x10800004)

	)

356 
	#DMA_FLAG_TEIF0
 ((
uöt32_t
)0x10000008)

	)

357 
	#DMA_FLAG_HTIF0
 ((
uöt32_t
)0x10000010)

	)

358 
	#DMA_FLAG_TCIF0
 ((
uöt32_t
)0x10000020)

	)

359 
	#DMA_FLAG_FEIF1
 ((
uöt32_t
)0x10000040)

	)

360 
	#DMA_FLAG_DMEIF1
 ((
uöt32_t
)0x10000100)

	)

361 
	#DMA_FLAG_TEIF1
 ((
uöt32_t
)0x10000200)

	)

362 
	#DMA_FLAG_HTIF1
 ((
uöt32_t
)0x10000400)

	)

363 
	#DMA_FLAG_TCIF1
 ((
uöt32_t
)0x10000800)

	)

364 
	#DMA_FLAG_FEIF2
 ((
uöt32_t
)0x10010000)

	)

365 
	#DMA_FLAG_DMEIF2
 ((
uöt32_t
)0x10040000)

	)

366 
	#DMA_FLAG_TEIF2
 ((
uöt32_t
)0x10080000)

	)

367 
	#DMA_FLAG_HTIF2
 ((
uöt32_t
)0x10100000)

	)

368 
	#DMA_FLAG_TCIF2
 ((
uöt32_t
)0x10200000)

	)

369 
	#DMA_FLAG_FEIF3
 ((
uöt32_t
)0x10400000)

	)

370 
	#DMA_FLAG_DMEIF3
 ((
uöt32_t
)0x11000000)

	)

371 
	#DMA_FLAG_TEIF3
 ((
uöt32_t
)0x12000000)

	)

372 
	#DMA_FLAG_HTIF3
 ((
uöt32_t
)0x14000000)

	)

373 
	#DMA_FLAG_TCIF3
 ((
uöt32_t
)0x18000000)

	)

374 
	#DMA_FLAG_FEIF4
 ((
uöt32_t
)0x20000001)

	)

375 
	#DMA_FLAG_DMEIF4
 ((
uöt32_t
)0x20000004)

	)

376 
	#DMA_FLAG_TEIF4
 ((
uöt32_t
)0x20000008)

	)

377 
	#DMA_FLAG_HTIF4
 ((
uöt32_t
)0x20000010)

	)

378 
	#DMA_FLAG_TCIF4
 ((
uöt32_t
)0x20000020)

	)

379 
	#DMA_FLAG_FEIF5
 ((
uöt32_t
)0x20000040)

	)

380 
	#DMA_FLAG_DMEIF5
 ((
uöt32_t
)0x20000100)

	)

381 
	#DMA_FLAG_TEIF5
 ((
uöt32_t
)0x20000200)

	)

382 
	#DMA_FLAG_HTIF5
 ((
uöt32_t
)0x20000400)

	)

383 
	#DMA_FLAG_TCIF5
 ((
uöt32_t
)0x20000800)

	)

384 
	#DMA_FLAG_FEIF6
 ((
uöt32_t
)0x20010000)

	)

385 
	#DMA_FLAG_DMEIF6
 ((
uöt32_t
)0x20040000)

	)

386 
	#DMA_FLAG_TEIF6
 ((
uöt32_t
)0x20080000)

	)

387 
	#DMA_FLAG_HTIF6
 ((
uöt32_t
)0x20100000)

	)

388 
	#DMA_FLAG_TCIF6
 ((
uöt32_t
)0x20200000)

	)

389 
	#DMA_FLAG_FEIF7
 ((
uöt32_t
)0x20400000)

	)

390 
	#DMA_FLAG_DMEIF7
 ((
uöt32_t
)0x21000000)

	)

391 
	#DMA_FLAG_TEIF7
 ((
uöt32_t
)0x22000000)

	)

392 
	#DMA_FLAG_HTIF7
 ((
uöt32_t
)0x24000000)

	)

393 
	#DMA_FLAG_TCIF7
 ((
uöt32_t
)0x28000000)

	)

395 
	#IS_DMA_CLEAR_FLAG
(
FLAG
) ((((FLAG) & 0x30000000) != 0x30000000) && (((FLAG) & 0x30000000) != 0) && \

396 (((
FLAG
Ë& 0xC082F082Ë=0x00Ë&& ((FLAGË!0x00))

	)

398 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA_FLAG_TCIF0
Ë|| ((FLAGË=
DMA_FLAG_HTIF0
) || \

399 ((
FLAG
Ë=
DMA_FLAG_TEIF0
Ë|| ((FLAGË=
DMA_FLAG_DMEIF0
) || \

400 ((
FLAG
Ë=
DMA_FLAG_FEIF0
Ë|| ((FLAGË=
DMA_FLAG_TCIF1
) || \

401 ((
FLAG
Ë=
DMA_FLAG_HTIF1
Ë|| ((FLAGË=
DMA_FLAG_TEIF1
) || \

402 ((
FLAG
Ë=
DMA_FLAG_DMEIF1
Ë|| ((FLAGË=
DMA_FLAG_FEIF1
) || \

403 ((
FLAG
Ë=
DMA_FLAG_TCIF2
Ë|| ((FLAGË=
DMA_FLAG_HTIF2
) || \

404 ((
FLAG
Ë=
DMA_FLAG_TEIF2
Ë|| ((FLAGË=
DMA_FLAG_DMEIF2
) || \

405 ((
FLAG
Ë=
DMA_FLAG_FEIF2
Ë|| ((FLAGË=
DMA_FLAG_TCIF3
) || \

406 ((
FLAG
Ë=
DMA_FLAG_HTIF3
Ë|| ((FLAGË=
DMA_FLAG_TEIF3
) || \

407 ((
FLAG
Ë=
DMA_FLAG_DMEIF3
Ë|| ((FLAGË=
DMA_FLAG_FEIF3
) || \

408 ((
FLAG
Ë=
DMA_FLAG_TCIF4
Ë|| ((FLAGË=
DMA_FLAG_HTIF4
) || \

409 ((
FLAG
Ë=
DMA_FLAG_TEIF4
Ë|| ((FLAGË=
DMA_FLAG_DMEIF4
) || \

410 ((
FLAG
Ë=
DMA_FLAG_FEIF4
Ë|| ((FLAGË=
DMA_FLAG_TCIF5
) || \

411 ((
FLAG
Ë=
DMA_FLAG_HTIF5
Ë|| ((FLAGË=
DMA_FLAG_TEIF5
) || \

412 ((
FLAG
Ë=
DMA_FLAG_DMEIF5
Ë|| ((FLAGË=
DMA_FLAG_FEIF5
) || \

413 ((
FLAG
Ë=
DMA_FLAG_TCIF6
Ë|| ((FLAGË=
DMA_FLAG_HTIF6
) || \

414 ((
FLAG
Ë=
DMA_FLAG_TEIF6
Ë|| ((FLAGË=
DMA_FLAG_DMEIF6
) || \

415 ((
FLAG
Ë=
DMA_FLAG_FEIF6
Ë|| ((FLAGË=
DMA_FLAG_TCIF7
) || \

416 ((
FLAG
Ë=
DMA_FLAG_HTIF7
Ë|| ((FLAGË=
DMA_FLAG_TEIF7
) || \

417 ((
FLAG
Ë=
DMA_FLAG_DMEIF7
Ë|| ((FLAGË=
DMA_FLAG_FEIF7
))

	)

426 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000010)

	)

427 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000008)

	)

428 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000004)

	)

429 
	#DMA_IT_DME
 ((
uöt32_t
)0x00000002)

	)

430 
	#DMA_IT_FE
 ((
uöt32_t
)0x00000080)

	)

432 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFF61Ë=0x00Ë&& ((ITË!0x00))

	)

441 
	#DMA_IT_FEIF0
 ((
uöt32_t
)0x90000001)

	)

442 
	#DMA_IT_DMEIF0
 ((
uöt32_t
)0x10001004)

	)

443 
	#DMA_IT_TEIF0
 ((
uöt32_t
)0x10002008)

	)

444 
	#DMA_IT_HTIF0
 ((
uöt32_t
)0x10004010)

	)

445 
	#DMA_IT_TCIF0
 ((
uöt32_t
)0x10008020)

	)

446 
	#DMA_IT_FEIF1
 ((
uöt32_t
)0x90000040)

	)

447 
	#DMA_IT_DMEIF1
 ((
uöt32_t
)0x10001100)

	)

448 
	#DMA_IT_TEIF1
 ((
uöt32_t
)0x10002200)

	)

449 
	#DMA_IT_HTIF1
 ((
uöt32_t
)0x10004400)

	)

450 
	#DMA_IT_TCIF1
 ((
uöt32_t
)0x10008800)

	)

451 
	#DMA_IT_FEIF2
 ((
uöt32_t
)0x90010000)

	)

452 
	#DMA_IT_DMEIF2
 ((
uöt32_t
)0x10041000)

	)

453 
	#DMA_IT_TEIF2
 ((
uöt32_t
)0x10082000)

	)

454 
	#DMA_IT_HTIF2
 ((
uöt32_t
)0x10104000)

	)

455 
	#DMA_IT_TCIF2
 ((
uöt32_t
)0x10208000)

	)

456 
	#DMA_IT_FEIF3
 ((
uöt32_t
)0x90400000)

	)

457 
	#DMA_IT_DMEIF3
 ((
uöt32_t
)0x11001000)

	)

458 
	#DMA_IT_TEIF3
 ((
uöt32_t
)0x12002000)

	)

459 
	#DMA_IT_HTIF3
 ((
uöt32_t
)0x14004000)

	)

460 
	#DMA_IT_TCIF3
 ((
uöt32_t
)0x18008000)

	)

461 
	#DMA_IT_FEIF4
 ((
uöt32_t
)0xA0000001)

	)

462 
	#DMA_IT_DMEIF4
 ((
uöt32_t
)0x20001004)

	)

463 
	#DMA_IT_TEIF4
 ((
uöt32_t
)0x20002008)

	)

464 
	#DMA_IT_HTIF4
 ((
uöt32_t
)0x20004010)

	)

465 
	#DMA_IT_TCIF4
 ((
uöt32_t
)0x20008020)

	)

466 
	#DMA_IT_FEIF5
 ((
uöt32_t
)0xA0000040)

	)

467 
	#DMA_IT_DMEIF5
 ((
uöt32_t
)0x20001100)

	)

468 
	#DMA_IT_TEIF5
 ((
uöt32_t
)0x20002200)

	)

469 
	#DMA_IT_HTIF5
 ((
uöt32_t
)0x20004400)

	)

470 
	#DMA_IT_TCIF5
 ((
uöt32_t
)0x20008800)

	)

471 
	#DMA_IT_FEIF6
 ((
uöt32_t
)0xA0010000)

	)

472 
	#DMA_IT_DMEIF6
 ((
uöt32_t
)0x20041000)

	)

473 
	#DMA_IT_TEIF6
 ((
uöt32_t
)0x20082000)

	)

474 
	#DMA_IT_HTIF6
 ((
uöt32_t
)0x20104000)

	)

475 
	#DMA_IT_TCIF6
 ((
uöt32_t
)0x20208000)

	)

476 
	#DMA_IT_FEIF7
 ((
uöt32_t
)0xA0400000)

	)

477 
	#DMA_IT_DMEIF7
 ((
uöt32_t
)0x21001000)

	)

478 
	#DMA_IT_TEIF7
 ((
uöt32_t
)0x22002000)

	)

479 
	#DMA_IT_HTIF7
 ((
uöt32_t
)0x24004000)

	)

480 
	#DMA_IT_TCIF7
 ((
uöt32_t
)0x28008000)

	)

482 
	#IS_DMA_CLEAR_IT
(
IT
) ((((IT) & 0x30000000) != 0x30000000) && \

483 (((
IT
) & 0x30000000) != 0) && ((IT) != 0x00) && \

484 (((
IT
Ë& 0x40820082Ë=0x00))

	)

486 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA_IT_TCIF0
Ë|| ((ITË=
DMA_IT_HTIF0
) || \

487 ((
IT
Ë=
DMA_IT_TEIF0
Ë|| ((ITË=
DMA_IT_DMEIF0
) || \

488 ((
IT
Ë=
DMA_IT_FEIF0
Ë|| ((ITË=
DMA_IT_TCIF1
) || \

489 ((
IT
Ë=
DMA_IT_HTIF1
Ë|| ((ITË=
DMA_IT_TEIF1
) || \

490 ((
IT
Ë=
DMA_IT_DMEIF1
)|| ((ITË=
DMA_IT_FEIF1
) || \

491 ((
IT
Ë=
DMA_IT_TCIF2
Ë|| ((ITË=
DMA_IT_HTIF2
) || \

492 ((
IT
Ë=
DMA_IT_TEIF2
Ë|| ((ITË=
DMA_IT_DMEIF2
) || \

493 ((
IT
Ë=
DMA_IT_FEIF2
Ë|| ((ITË=
DMA_IT_TCIF3
) || \

494 ((
IT
Ë=
DMA_IT_HTIF3
Ë|| ((ITË=
DMA_IT_TEIF3
) || \

495 ((
IT
Ë=
DMA_IT_DMEIF3
)|| ((ITË=
DMA_IT_FEIF3
) || \

496 ((
IT
Ë=
DMA_IT_TCIF4
Ë|| ((ITË=
DMA_IT_HTIF4
) || \

497 ((
IT
Ë=
DMA_IT_TEIF4
Ë|| ((ITË=
DMA_IT_DMEIF4
) || \

498 ((
IT
Ë=
DMA_IT_FEIF4
Ë|| ((ITË=
DMA_IT_TCIF5
) || \

499 ((
IT
Ë=
DMA_IT_HTIF5
Ë|| ((ITË=
DMA_IT_TEIF5
) || \

500 ((
IT
Ë=
DMA_IT_DMEIF5
)|| ((ITË=
DMA_IT_FEIF5
) || \

501 ((
IT
Ë=
DMA_IT_TCIF6
Ë|| ((ITË=
DMA_IT_HTIF6
) || \

502 ((
IT
Ë=
DMA_IT_TEIF6
Ë|| ((ITË=
DMA_IT_DMEIF6
) || \

503 ((
IT
Ë=
DMA_IT_FEIF6
Ë|| ((ITË=
DMA_IT_TCIF7
) || \

504 ((
IT
Ë=
DMA_IT_HTIF7
Ë|| ((ITË=
DMA_IT_TEIF7
) || \

505 ((
IT
Ë=
DMA_IT_DMEIF7
)|| ((ITË=
DMA_IT_FEIF7
))

	)

514 
	#DMA_PINCOS_Psize
 ((
uöt32_t
)0x00000000)

	)

515 
	#DMA_PINCOS_W‹dAlig√d
 ((
uöt32_t
)0x00008000)

	)

517 
	#IS_DMA_PINCOS_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PINCOS_Psize
) || \

518 ((
SIZE
Ë=
DMA_PINCOS_W‹dAlig√d
))

	)

527 
	#DMA_FlowCål_Mem‹y
 ((
uöt32_t
)0x00000000)

	)

528 
	#DMA_FlowCål_PîùhîÆ
 ((
uöt32_t
)0x00000020)

	)

530 
	#IS_DMA_FLOW_CTRL
(
CTRL
Ë(((CTRLË=
DMA_FlowCål_Mem‹y
) || \

531 ((
CTRL
Ë=
DMA_FlowCål_PîùhîÆ
))

	)

540 
	#DMA_Mem‹y_0
 ((
uöt32_t
)0x00000000)

	)

541 
	#DMA_Mem‹y_1
 ((
uöt32_t
)0x00080000)

	)

543 
	#IS_DMA_CURRENT_MEM
(
MEM
Ë(((MEMË=
DMA_Mem‹y_0
Ë|| ((MEMË=
DMA_Mem‹y_1
))

	)

556 
DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

559 
DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

560 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

561 
DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

564 
DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
);

565 
DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
);

568 
DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
);

569 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

572 
DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

573 
uöt32_t
 
DMA_CuºítMem‹y
);

574 
DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

575 
DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

576 
uöt32_t
 
DMA_Mem‹yT¨gë
);

577 
uöt32_t
 
DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

580 
Fun˘i⁄ÆSèã
 
DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

581 
uöt32_t
 
DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

582 
FœgSètus
 
DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

583 
DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

584 
DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

585 
ITSètus
 
DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

586 
DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

588 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_exti.h

24 #i‚de‡
__STM32F4xx_EXTI_H


25 
	#__STM32F4xx_EXTI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
EXTI_Mode_I¡îru±
 = 0x00,

51 
EXTI_Mode_Evít
 = 0x04

52 }
	tEXTIMode_Ty≥Def
;

54 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

62 
EXTI_Triggî_Risög
 = 0x08,

63 
EXTI_Triggî_FÆlög
 = 0x0C,

64 
EXTI_Triggî_Risög_FÆlög
 = 0x10

65 }
	tEXTITriggî_Ty≥Def
;

67 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
) || \

68 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

69 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

	)

76 
uöt32_t
 
EXTI_Löe
;

79 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

82 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

85 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

87 }
	tEXTI_InôTy≥Def
;

99 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

100 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

101 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

102 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

103 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

104 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

105 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

106 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

107 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

108 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

109 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

110 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

111 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

112 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

113 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

114 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

115 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

116 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

117 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

118 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

119 
	#EXTI_Löe20
 ((
uöt32_t
)0x00100000Ë

	)

120 
	#EXTI_Löe21
 ((
uöt32_t
)0x00200000Ë

	)

121 
	#EXTI_Löe22
 ((
uöt32_t
)0x00400000Ë

	)

123 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFF800000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

125 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
) || \

126 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

127 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

128 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

129 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

130 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

131 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

132 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

133 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

134 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
) || \

135 ((
LINE
Ë=
EXTI_Löe20
Ë|| ((LINEË=
EXTI_Löe21
) ||\

136 ((
LINE
Ë=
EXTI_Löe22
))

	)

150 
EXTI_DeInô
();

153 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

154 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

155 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

158 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

159 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

160 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

161 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

163 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_flash.h

24 #i‚de‡
__STM32F4xx_FLASH_H


25 
	#__STM32F4xx_FLASH_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

48 
FLASH_BUSY
 = 1,

49 
FLASH_ERROR_PGS
,

50 
FLASH_ERROR_PGP
,

51 
FLASH_ERROR_PGA
,

52 
FLASH_ERROR_WRP
,

53 
FLASH_ERROR_PROGRAM
,

54 
FLASH_ERROR_OPERATION
,

55 
FLASH_COMPLETE


56 }
	tFLASH_Sètus
;

67 
	#FLASH_L©ícy_0
 ((
uöt8_t
)0x0000Ë

	)

68 
	#FLASH_L©ícy_1
 ((
uöt8_t
)0x0001Ë

	)

69 
	#FLASH_L©ícy_2
 ((
uöt8_t
)0x0002Ë

	)

70 
	#FLASH_L©ícy_3
 ((
uöt8_t
)0x0003Ë

	)

71 
	#FLASH_L©ícy_4
 ((
uöt8_t
)0x0004Ë

	)

72 
	#FLASH_L©ícy_5
 ((
uöt8_t
)0x0005Ë

	)

73 
	#FLASH_L©ícy_6
 ((
uöt8_t
)0x0006Ë

	)

74 
	#FLASH_L©ícy_7
 ((
uöt8_t
)0x0007Ë

	)

76 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
) || \

77 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

78 ((
LATENCY
Ë=
FLASH_L©ícy_2
) || \

79 ((
LATENCY
Ë=
FLASH_L©ícy_3
) || \

80 ((
LATENCY
Ë=
FLASH_L©ícy_4
) || \

81 ((
LATENCY
Ë=
FLASH_L©ícy_5
) || \

82 ((
LATENCY
Ë=
FLASH_L©ícy_6
) || \

83 ((
LATENCY
Ë=
FLASH_L©ícy_7
))

	)

91 
	#VﬁègeR™ge_1
 ((
uöt8_t
)0x00Ë

	)

92 
	#VﬁègeR™ge_2
 ((
uöt8_t
)0x01Ë

	)

93 
	#VﬁègeR™ge_3
 ((
uöt8_t
)0x02Ë

	)

94 
	#VﬁègeR™ge_4
 ((
uöt8_t
)0x03Ë

	)

96 
	#IS_VOLTAGERANGE
(
RANGE
)(((RANGEË=
VﬁègeR™ge_1
) || \

97 ((
RANGE
Ë=
VﬁègeR™ge_2
) || \

98 ((
RANGE
Ë=
VﬁègeR™ge_3
) || \

99 ((
RANGE
Ë=
VﬁègeR™ge_4
))

	)

107 
	#FLASH_Se˘‹_0
 ((
uöt16_t
)0x0000Ë

	)

108 
	#FLASH_Se˘‹_1
 ((
uöt16_t
)0x0008Ë

	)

109 
	#FLASH_Se˘‹_2
 ((
uöt16_t
)0x0010Ë

	)

110 
	#FLASH_Se˘‹_3
 ((
uöt16_t
)0x0018Ë

	)

111 
	#FLASH_Se˘‹_4
 ((
uöt16_t
)0x0020Ë

	)

112 
	#FLASH_Se˘‹_5
 ((
uöt16_t
)0x0028Ë

	)

113 
	#FLASH_Se˘‹_6
 ((
uöt16_t
)0x0030Ë

	)

114 
	#FLASH_Se˘‹_7
 ((
uöt16_t
)0x0038Ë

	)

115 
	#FLASH_Se˘‹_8
 ((
uöt16_t
)0x0040Ë

	)

116 
	#FLASH_Se˘‹_9
 ((
uöt16_t
)0x0048Ë

	)

117 
	#FLASH_Se˘‹_10
 ((
uöt16_t
)0x0050Ë

	)

118 
	#FLASH_Se˘‹_11
 ((
uöt16_t
)0x0058Ë

	)

119 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_Se˘‹_0
Ë|| ((SECTORË=
FLASH_Se˘‹_1
) ||\

120 ((
SECTOR
Ë=
FLASH_Se˘‹_2
Ë|| ((SECTORË=
FLASH_Se˘‹_3
) ||\

121 ((
SECTOR
Ë=
FLASH_Se˘‹_4
Ë|| ((SECTORË=
FLASH_Se˘‹_5
) ||\

122 ((
SECTOR
Ë=
FLASH_Se˘‹_6
Ë|| ((SECTORË=
FLASH_Se˘‹_7
) ||\

123 ((
SECTOR
Ë=
FLASH_Se˘‹_8
Ë|| ((SECTORË=
FLASH_Se˘‹_9
) ||\

124 ((
SECTOR
Ë=
FLASH_Se˘‹_10
Ë|| ((SECTORË=
FLASH_Se˘‹_11
))

	)

125 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) < 0x080FFFFF)) ||\

126 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË< 0x1FFF7A0F)))

	)

134 
	#OB_WRP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

135 
	#OB_WRP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

136 
	#OB_WRP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

137 
	#OB_WRP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

138 
	#OB_WRP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

139 
	#OB_WRP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

140 
	#OB_WRP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

141 
	#OB_WRP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

142 
	#OB_WRP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

143 
	#OB_WRP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

144 
	#OB_WRP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

145 
	#OB_WRP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

146 
	#OB_WRP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

148 
	#IS_OB_WRP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

156 
	#OB_RDP_Levñ_0
 ((
uöt8_t
)0xAA)

	)

157 
	#OB_RDP_Levñ_1
 ((
uöt8_t
)0x55)

	)

160 
	#IS_OB_RDP
(
LEVEL
Ë(((LEVELË=
OB_RDP_Levñ_0
)||\

161 ((
LEVEL
Ë=
OB_RDP_Levñ_1
))

	)

170 
	#OB_IWDG_SW
 ((
uöt8_t
)0x20Ë

	)

171 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00Ë

	)

172 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

180 
	#OB_STOP_NoRST
 ((
uöt8_t
)0x40Ë

	)

181 
	#OB_STOP_RST
 ((
uöt8_t
)0x00Ë

	)

182 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

191 
	#OB_STDBY_NoRST
 ((
uöt8_t
)0x80Ë

	)

192 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00Ë

	)

193 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

201 
	#OB_BOR_LEVEL3
 ((
uöt8_t
)0x00Ë

	)

202 
	#OB_BOR_LEVEL2
 ((
uöt8_t
)0x04Ë

	)

203 
	#OB_BOR_LEVEL1
 ((
uöt8_t
)0x08Ë

	)

204 
	#OB_BOR_OFF
 ((
uöt8_t
)0x0CË

	)

205 
	#IS_OB_BOR
(
LEVEL
Ë(((LEVELË=
OB_BOR_LEVEL1
Ë|| ((LEVELË=
OB_BOR_LEVEL2
) ||\

206 ((
LEVEL
Ë=
OB_BOR_LEVEL3
Ë|| ((LEVELË=
OB_BOR_OFF
))

	)

214 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x01000000Ë

	)

215 
	#FLASH_IT_ERR
 ((
uöt32_t
)0x02000000Ë

	)

216 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFCFFFFFFË=0x00000000Ë&& ((ITË!0x00000000))

	)

224 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000001Ë

	)

225 
	#FLASH_FLAG_OPERR
 ((
uöt32_t
)0x00000002Ë

	)

226 
	#FLASH_FLAG_WRPERR
 ((
uöt32_t
)0x00000010Ë

	)

227 
	#FLASH_FLAG_PGAERR
 ((
uöt32_t
)0x00000020Ë

	)

228 
	#FLASH_FLAG_PGPERR
 ((
uöt32_t
)0x00000040Ë

	)

229 
	#FLASH_FLAG_PGSERR
 ((
uöt32_t
)0x00000080Ë

	)

230 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00010000Ë

	)

231 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFF0CË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

232 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_EOP
Ë|| ((FLAGË=
FLASH_FLAG_OPERR
) || \

233 ((
FLAG
Ë=
FLASH_FLAG_WRPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGAERR
) || \

234 ((
FLAG
Ë=
FLASH_FLAG_PGPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGSERR
) || \

235 ((
FLAG
Ë=
FLASH_FLAG_BSY
))

	)

243 
	#FLASH_PSIZE_BYTE
 ((
uöt32_t
)0x00000000)

	)

244 
	#FLASH_PSIZE_HALF_WORD
 ((
uöt32_t
)0x00000100)

	)

245 
	#FLASH_PSIZE_WORD
 ((
uöt32_t
)0x00000200)

	)

246 
	#FLASH_PSIZE_DOUBLE_WORD
 ((
uöt32_t
)0x00000300)

	)

247 
	#CR_PSIZE_MASK
 ((
uöt32_t
)0xFFFFFCFF)

	)

255 
	#RDP_KEY
 ((
uöt16_t
)0x00A5)

	)

256 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

257 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

258 
	#FLASH_OPT_KEY1
 ((
uöt32_t
)0x08192A3B)

	)

259 
	#FLASH_OPT_KEY2
 ((
uöt32_t
)0x4C5D6E7F)

	)

267 
	#ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

271 
	#OPTCR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C14)

	)

272 
	#OPTCR_BYTE1_ADDRESS
 ((
uöt32_t
)0x40023C15)

	)

273 
	#OPTCR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C16)

	)

283 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

284 
FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
FLASH_In°ru˘i⁄CacheRe£t
();

288 
FLASH_D©aCacheRe£t
();

291 
FLASH_U∆ock
();

292 
FLASH_Lock
();

293 
FLASH_Sètus
 
FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
);

294 
FLASH_Sètus
 
FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

295 
FLASH_Sètus
 
FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
);

296 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

297 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

298 
FLASH_Sètus
 
FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

301 
FLASH_OB_U∆ock
();

302 
FLASH_OB_Lock
();

303 
FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

304 
FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
);

305 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
);

306 
FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
);

307 
FLASH_Sètus
 
FLASH_OB_Launch
();

308 
uöt8_t
 
FLASH_OB_GëU£r
();

309 
uöt16_t
 
FLASH_OB_GëWRP
();

310 
FœgSètus
 
FLASH_OB_GëRDP
();

311 
uöt8_t
 
FLASH_OB_GëBOR
();

314 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

315 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

316 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

317 
FLASH_Sètus
 
FLASH_GëSètus
();

318 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
();

320 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fsmc.h

24 #i‚de‡
__STM32F4xx_FSMC_H


25 
	#__STM32F4xx_FSMC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

49 
uöt32_t
 
FSMC_AddªssSëupTime
;

54 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

59 
uöt32_t
 
FSMC_D©aSëupTime
;

64 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

69 
uöt32_t
 
FSMC_CLKDivisi⁄
;

73 
uöt32_t
 
FSMC_D©aL©ícy
;

81 
uöt32_t
 
FSMC_Ac˚ssMode
;

83 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

90 
uöt32_t
 
FSMC_B™k
;

93 
uöt32_t
 
FSMC_D©aAddªssMux
;

97 
uöt32_t
 
FSMC_Mem‹yTy≥
;

101 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

104 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

108 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

112 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

116 
uöt32_t
 
FSMC_WøpMode
;

120 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

125 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

128 
uöt32_t
 
FSMC_WaôSig«l
;

132 
uöt32_t
 
FSMC_ExãndedMode
;

135 
uöt32_t
 
FSMC_WrôeBur°
;

138 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

140 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

141 }
	tFSMC_NORSRAMInôTy≥Def
;

148 
uöt32_t
 
FSMC_SëupTime
;

154 
uöt32_t
 
FSMC_WaôSëupTime
;

160 
uöt32_t
 
FSMC_HﬁdSëupTime
;

167 
uöt32_t
 
FSMC_HiZSëupTime
;

172 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

179 
uöt32_t
 
FSMC_B™k
;

182 
uöt32_t
 
FSMC_Waô„©uª
;

185 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

188 
uöt32_t
 
FSMC_ECC
;

191 
uöt32_t
 
FSMC_ECCPageSize
;

194 
uöt32_t
 
FSMC_TCLRSëupTime
;

198 
uöt32_t
 
FSMC_TARSëupTime
;

202 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

204 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

205 }
	tFSMC_NANDInôTy≥Def
;

213 
uöt32_t
 
FSMC_Waô„©uª
;

216 
uöt32_t
 
FSMC_TCLRSëupTime
;

220 
uöt32_t
 
FSMC_TARSëupTime
;

225 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

227 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

229 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

230 }
	tFSMC_PCCARDInôTy≥Def
;

241 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

242 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

243 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

244 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

252 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

253 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

261 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

266 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
) || \

267 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

268 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

269 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

	)

271 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

272 ((
BANK
Ë=
FSMC_B™k3_NAND
))

	)

274 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

275 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

276 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

278 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

279 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

280 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

290 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

291 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

292 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
) || \

293 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

	)

302 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

303 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

304 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

305 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
) || \

306 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

307 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

	)

316 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

317 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

318 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
) || \

319 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

	)

328 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

329 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

330 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
) || \

331 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

	)

339 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

340 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

341 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
) || \

342 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

	)

350 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

351 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

352 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
) || \

353 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

	)

361 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

362 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

363 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
) || \

364 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

	)

372 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

373 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

374 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
) || \

375 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

	)

383 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

384 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

385 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
) || \

386 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

	)

394 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

395 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

396 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
) || \

397 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

	)

405 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

406 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

408 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
) || \

409 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

	)

418 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

419 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

420 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
) || \

421 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

	)

429 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

437 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

445 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

453 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

461 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

469 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

477 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

478 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

479 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

480 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

481 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
) || \

482 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

483 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

484 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

	)

500 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

501 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

502 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
) || \

503 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

	)

512 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

513 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

514 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
) || \

515 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

	)

523 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

524 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

525 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

526 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

527 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

528 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

529 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
) || \

530 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

531 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

532 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

533 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

534 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

	)

542 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

550 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

558 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

566 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

574 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

582 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

590 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

591 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

592 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

593 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

594 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
) || \

595 ((
IT
Ë=
FSMC_IT_Levñ
) || \

596 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

	)

604 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

605 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

606 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

607 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

608 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
) || \

609 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

610 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

611 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

	)

613 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

630 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

631 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

632 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

633 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

636 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

637 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

638 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

639 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

640 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

641 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

644 
FSMC_PCCARDDeInô
();

645 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

646 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

647 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

650 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

651 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

652 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

653 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

654 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

656 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h

24 #i‚de‡
__STM32F4xx_GPIO_H


25 
	#__STM32F4xx_GPIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

44 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
) || \

45 ((
PERIPH
Ë=
GPIOB
) || \

46 ((
PERIPH
Ë=
GPIOC
) || \

47 ((
PERIPH
Ë=
GPIOD
) || \

48 ((
PERIPH
Ë=
GPIOE
) || \

49 ((
PERIPH
Ë=
GPIOF
) || \

50 ((
PERIPH
Ë=
GPIOG
) || \

51 ((
PERIPH
Ë=
GPIOH
) || \

52 ((
PERIPH
Ë=
GPIOI
))

	)

59 
GPIO_Mode_IN
 = 0x00,

60 
GPIO_Mode_OUT
 = 0x01,

61 
GPIO_Mode_AF
 = 0x02,

62 
GPIO_Mode_AN
 = 0x03

63 }
	tGPIOMode_Ty≥Def
;

64 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_IN
Ë|| ((MODEË=
GPIO_Mode_OUT
) || \

65 ((
MODE
Ë=
GPIO_Mode_AF
)|| ((MODEË=
GPIO_Mode_AN
))

	)

72 
GPIO_OTy≥_PP
 = 0x00,

73 
GPIO_OTy≥_OD
 = 0x01

74 }
	tGPIOOTy≥_Ty≥Def
;

75 
	#IS_GPIO_OTYPE
(
OTYPE
Ë(((OTYPEË=
GPIO_OTy≥_PP
Ë|| ((OTYPEË=
GPIO_OTy≥_OD
))

	)

83 
GPIO_S≥ed_2MHz
 = 0x00,

84 
GPIO_S≥ed_25MHz
 = 0x01,

85 
GPIO_S≥ed_50MHz
 = 0x02,

86 
GPIO_S≥ed_100MHz
 = 0x03

87 }
	tGPIOS≥ed_Ty≥Def
;

88 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_25MHz
) || \

89 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
)|| ((SPEEDË=
GPIO_S≥ed_100MHz
))

	)

96 
GPIO_PuPd_NOPULL
 = 0x00,

97 
GPIO_PuPd_UP
 = 0x01,

98 
GPIO_PuPd_DOWN
 = 0x02

99 }
	tGPIOPuPd_Ty≥Def
;

100 
	#IS_GPIO_PUPD
(
PUPD
Ë(((PUPDË=
GPIO_PuPd_NOPULL
Ë|| ((PUPDË=
GPIO_PuPd_UP
) || \

101 ((
PUPD
Ë=
GPIO_PuPd_DOWN
))

	)

108 
Bô_RESET
 = 0,

109 
Bô_SET


110 }
	tBôA˘i⁄
;

111 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

119 
uöt32_t
 
GPIO_Pö
;

122 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

125 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

128 
GPIOOTy≥_Ty≥Def
 
GPIO_OTy≥
;

131 
GPIOPuPd_Ty≥Def
 
GPIO_PuPd
;

133 }
	tGPIO_InôTy≥Def
;

144 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

145 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

146 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

147 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

148 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

149 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

150 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

151 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

152 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

153 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

154 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

155 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

156 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

157 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

158 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

159 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

160 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

162 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

163 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
) || \

164 ((
PIN
Ë=
GPIO_Pö_1
) || \

165 ((
PIN
Ë=
GPIO_Pö_2
) || \

166 ((
PIN
Ë=
GPIO_Pö_3
) || \

167 ((
PIN
Ë=
GPIO_Pö_4
) || \

168 ((
PIN
Ë=
GPIO_Pö_5
) || \

169 ((
PIN
Ë=
GPIO_Pö_6
) || \

170 ((
PIN
Ë=
GPIO_Pö_7
) || \

171 ((
PIN
Ë=
GPIO_Pö_8
) || \

172 ((
PIN
Ë=
GPIO_Pö_9
) || \

173 ((
PIN
Ë=
GPIO_Pö_10
) || \

174 ((
PIN
Ë=
GPIO_Pö_11
) || \

175 ((
PIN
Ë=
GPIO_Pö_12
) || \

176 ((
PIN
Ë=
GPIO_Pö_13
) || \

177 ((
PIN
Ë=
GPIO_Pö_14
) || \

178 ((
PIN
Ë=
GPIO_Pö_15
))

	)

187 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

188 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

189 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

190 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

191 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

192 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

193 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

194 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

195 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

196 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

197 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

198 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

199 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

200 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

201 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

202 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

204 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
) || \

205 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

206 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

207 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

208 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

209 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

210 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

211 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

212 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

213 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

214 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

215 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

216 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

217 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

218 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

219 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

	)

230 
	#GPIO_AF_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

231 
	#GPIO_AF_MCO
 ((
uöt8_t
)0x00Ë

	)

232 
	#GPIO_AF_TAMPER
 ((
uöt8_t
)0x00Ë

	)

233 
	#GPIO_AF_SWJ
 ((
uöt8_t
)0x00Ë

	)

234 
	#GPIO_AF_TRACE
 ((
uöt8_t
)0x00Ë

	)

239 
	#GPIO_AF_TIM1
 ((
uöt8_t
)0x01Ë

	)

240 
	#GPIO_AF_TIM2
 ((
uöt8_t
)0x01Ë

	)

245 
	#GPIO_AF_TIM3
 ((
uöt8_t
)0x02Ë

	)

246 
	#GPIO_AF_TIM4
 ((
uöt8_t
)0x02Ë

	)

247 
	#GPIO_AF_TIM5
 ((
uöt8_t
)0x02Ë

	)

252 
	#GPIO_AF_TIM8
 ((
uöt8_t
)0x03Ë

	)

253 
	#GPIO_AF_TIM9
 ((
uöt8_t
)0x03Ë

	)

254 
	#GPIO_AF_TIM10
 ((
uöt8_t
)0x03Ë

	)

255 
	#GPIO_AF_TIM11
 ((
uöt8_t
)0x03Ë

	)

260 
	#GPIO_AF_I2C1
 ((
uöt8_t
)0x04Ë

	)

261 
	#GPIO_AF_I2C2
 ((
uöt8_t
)0x04Ë

	)

262 
	#GPIO_AF_I2C3
 ((
uöt8_t
)0x04Ë

	)

267 
	#GPIO_AF_SPI1
 ((
uöt8_t
)0x05Ë

	)

268 
	#GPIO_AF_SPI2
 ((
uöt8_t
)0x05Ë

	)

273 
	#GPIO_AF_SPI3
 ((
uöt8_t
)0x06Ë

	)

278 
	#GPIO_AF_USART1
 ((
uöt8_t
)0x07Ë

	)

279 
	#GPIO_AF_USART2
 ((
uöt8_t
)0x07Ë

	)

280 
	#GPIO_AF_USART3
 ((
uöt8_t
)0x07Ë

	)

281 
	#GPIO_AF_I2S3ext
 ((
uöt8_t
)0x07Ë

	)

286 
	#GPIO_AF_UART4
 ((
uöt8_t
)0x08Ë

	)

287 
	#GPIO_AF_UART5
 ((
uöt8_t
)0x08Ë

	)

288 
	#GPIO_AF_USART6
 ((
uöt8_t
)0x08Ë

	)

293 
	#GPIO_AF_CAN1
 ((
uöt8_t
)0x09Ë

	)

294 
	#GPIO_AF_CAN2
 ((
uöt8_t
)0x09Ë

	)

295 
	#GPIO_AF_TIM12
 ((
uöt8_t
)0x09Ë

	)

296 
	#GPIO_AF_TIM13
 ((
uöt8_t
)0x09Ë

	)

297 
	#GPIO_AF_TIM14
 ((
uöt8_t
)0x09Ë

	)

302 
	#GPIO_AF_OTG_FS
 ((
uöt8_t
)0xAË

	)

303 
	#GPIO_AF_OTG_HS
 ((
uöt8_t
)0xAË

	)

308 
	#GPIO_AF_ETH
 ((
uöt8_t
)0x0BË

	)

313 
	#GPIO_AF_FSMC
 ((
uöt8_t
)0xCË

	)

314 
	#GPIO_AF_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

315 
	#GPIO_AF_SDIO
 ((
uöt8_t
)0xCË

	)

320 
	#GPIO_AF_DCMI
 ((
uöt8_t
)0x0DË

	)

325 
	#GPIO_AF_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

327 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

328 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

329 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

330 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

331 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

332 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

333 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

334 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

335 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

336 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

337 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

338 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

339 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

340 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

341 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

342 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_FSMC
) || \

343 ((
AF
Ë=
GPIO_AF_OTG_HS_FS
Ë|| ((AFË=
GPIO_AF_SDIO
) || \

344 ((
AF
Ë=
GPIO_AF_DCMI
Ë|| ((AFË=
GPIO_AF_EVENTOUT
))

	)

353 
	#GPIO_Mode_AIN
 
GPIO_Mode_AN


	)

355 
	#GPIO_AF_OTG1_FS
 
GPIO_AF_OTG_FS


	)

356 
	#GPIO_AF_OTG2_HS
 
GPIO_AF_OTG_HS


	)

357 
	#GPIO_AF_OTG2_FS
 
GPIO_AF_OTG_HS_FS


	)

371 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

374 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

375 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

376 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

379 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

380 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

381 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

382 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

383 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

384 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

385 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

386 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

387 
GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

390 
GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
);

392 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_hash.h

24 #i‚de‡
__STM32F4xx_HASH_H


25 
	#__STM32F4xx_HASH_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

49 
uöt32_t
 
HASH_AlgoSñe˘i⁄
;

51 
uöt32_t
 
HASH_AlgoMode
;

53 
uöt32_t
 
HASH_D©aTy≥
;

56 
uöt32_t
 
HASH_HMACKeyTy≥
;

58 }
	tHASH_InôTy≥Def
;

65 
uöt32_t
 
D©a
[5];

67 } 
	tHASH_MsgDige°
;

74 
uöt32_t
 
HASH_IMR
;

75 
uöt32_t
 
HASH_STR
;

76 
uöt32_t
 
HASH_CR
;

77 
uöt32_t
 
HASH_CSR
[51];

78 }
	tHASH_C⁄ãxt
;

89 
	#HASH_AlgoSñe˘i⁄_SHA1
 ((
uöt16_t
)0x0000Ë

	)

90 
	#HASH_AlgoSñe˘i⁄_MD5
 ((
uöt16_t
)0x0080Ë

	)

92 
	#IS_HASH_ALGOSELECTION
(
ALGOSELECTION
Ë(((ALGOSELECTIONË=
HASH_AlgoSñe˘i⁄_SHA1
) || \

93 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_MD5
))

	)

101 
	#HASH_AlgoMode_HASH
 ((
uöt16_t
)0x0000Ë

	)

102 
	#HASH_AlgoMode_HMAC
 ((
uöt16_t
)0x0040Ë

	)

104 
	#IS_HASH_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
HASH_AlgoMode_HASH
) || \

105 ((
ALGOMODE
Ë=
HASH_AlgoMode_HMAC
))

	)

113 
	#HASH_D©aTy≥_32b
 ((
uöt16_t
)0x0000)

	)

114 
	#HASH_D©aTy≥_16b
 ((
uöt16_t
)0x0010)

	)

115 
	#HASH_D©aTy≥_8b
 ((
uöt16_t
)0x0020)

	)

116 
	#HASH_D©aTy≥_1b
 ((
uöt16_t
)0x0030)

	)

118 
	#IS_HASH_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
HASH_D©aTy≥_32b
)|| \

119 ((
DATATYPE
Ë=
HASH_D©aTy≥_16b
)|| \

120 ((
DATATYPE
Ë=
HASH_D©aTy≥_8b
)|| \

121 ((
DATATYPE
Ë=
HASH_D©aTy≥_1b
))

	)

129 
	#HASH_HMACKeyTy≥_Sh‹tKey
 ((
uöt32_t
)0x00000000Ë

	)

130 
	#HASH_HMACKeyTy≥_L⁄gKey
 ((
uöt32_t
)0x00010000Ë

	)

132 
	#IS_HASH_HMAC_KEYTYPE
(
KEYTYPE
Ë(((KEYTYPEË=
HASH_HMACKeyTy≥_Sh‹tKey
) || \

133 ((
KEYTYPE
Ë=
HASH_HMACKeyTy≥_L⁄gKey
))

	)

141 
	#IS_HASH_VALIDBITSNUMBER
(
VALIDBITS
Ë((VALIDBITSË<0x1F)

	)

150 
	#HASH_IT_DINI
 ((
uöt8_t
)0x01Ë

	)

151 
	#HASH_IT_DCI
 ((
uöt8_t
)0x02Ë

	)

153 
	#IS_HASH_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xFCË=0x00Ë&& ((ITË!0x00))

	)

154 
	#IS_HASH_GET_IT
(
IT
Ë(((ITË=
HASH_IT_DINI
Ë|| ((ITË=
HASH_IT_DCI
))

	)

163 
	#HASH_FLAG_DINIS
 ((
uöt16_t
)0x0001Ë

	)

164 
	#HASH_FLAG_DCIS
 ((
uöt16_t
)0x0002Ë

	)

165 
	#HASH_FLAG_DMAS
 ((
uöt16_t
)0x0004Ë

	)

166 
	#HASH_FLAG_BUSY
 ((
uöt16_t
)0x0008Ë

	)

167 
	#HASH_FLAG_DINNE
 ((
uöt16_t
)0x1000Ë

	)

169 
	#IS_HASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
HASH_FLAG_DINIS
) || \

170 ((
FLAG
Ë=
HASH_FLAG_DCIS
) || \

171 ((
FLAG
Ë=
HASH_FLAG_DMAS
) || \

172 ((
FLAG
Ë=
HASH_FLAG_BUSY
) || \

173 ((
FLAG
Ë=
HASH_FLAG_DINNE
))

	)

175 
	#IS_HASH_CLEAR_FLAG
(
FLAG
)(((FLAGË=
HASH_FLAG_DINIS
) || \

176 ((
FLAG
Ë=
HASH_FLAG_DCIS
))

	)

190 
HASH_DeInô
();

193 
HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

194 
HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

195 
HASH_Re£t
();

198 
HASH_D©aIn
(
uöt32_t
 
D©a
);

199 
uöt8_t
 
HASH_GëInFIFOW‹dsNbr
();

200 
HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
);

201 
HASH_SèπDige°
();

202 
HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
);

205 
HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
);

206 
HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
);

209 
HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

212 
HASH_ITC⁄fig
(
uöt8_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

213 
FœgSètus
 
HASH_GëFœgSètus
(
uöt16_t
 
HASH_FLAG
);

214 
HASH_CÀ¨Fœg
(
uöt16_t
 
HASH_FLAG
);

215 
ITSètus
 
HASH_GëITSètus
(
uöt8_t
 
HASH_IT
);

216 
HASH_CÀ¨ITPídögBô
(
uöt8_t
 
HASH_IT
);

219 
Eº‹Sètus
 
HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20]);

220 
Eº‹Sètus
 
HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

221 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

222 
uöt8_t
 
Ouçut
[20]);

225 
Eº‹Sètus
 
HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16]);

226 
Eº‹Sètus
 
HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

227 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

228 
uöt8_t
 
Ouçut
[16]);

230 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_i2c.h

24 #i‚de‡
__STM32F4xx_I2C_H


25 
	#__STM32F4xx_I2C_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt32_t
 
I2C_ClockS≥ed
;

53 
uöt16_t
 
I2C_Mode
;

56 
uöt16_t
 
I2C_DutyCy˛e
;

59 
uöt16_t
 
I2C_OwnAddªss1
;

62 
uöt16_t
 
I2C_Ack
;

65 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

67 }
	tI2C_InôTy≥Def
;

76 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
) || \

77 ((
PERIPH
Ë=
I2C2
) || \

78 ((
PERIPH
Ë=
I2C3
))

	)

83 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

84 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

85 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

86 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
) || \

87 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

88 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

	)

97 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

98 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

99 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
) || \

100 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

	)

109 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

110 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

111 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
) || \

112 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

	)

121 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

122 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

123 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
) || \

124 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

	)

133 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

134 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

135 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
) || \

136 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

	)

145 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

146 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

147 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

148 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

149 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

150 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

151 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

152 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

153 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

154 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
) || \

155 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

156 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

157 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

158 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

	)

171 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

172 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

173 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
) || \

174 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

	)

183 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

184 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

185 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
) || \

186 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

	)

195 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

196 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

197 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
) || \

198 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

	)

207 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

208 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

209 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

210 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

219 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

220 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

221 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

222 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

223 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

224 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

225 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

226 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

227 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

228 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

229 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

230 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

231 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

232 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

234 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

236 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
) || \

237 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

238 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

239 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

240 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

241 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

242 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

	)

255 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

256 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

257 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

258 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

259 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

260 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

261 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

267 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

268 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

269 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

270 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

271 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

272 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

273 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

274 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

275 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

276 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

277 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

278 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

279 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

280 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

282 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

284 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
) || \

285 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

286 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

287 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

288 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

289 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

290 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

291 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

292 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

293 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

294 ((
FLAG
Ë=
I2C_FLAG_SB
))

	)

318 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

346 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

347 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

349 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

382 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

386 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

388 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

425 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

426 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

429 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

430 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

433 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

464 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

466 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

470 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

471 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

473 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

481 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
) || \

482 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

483 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

484 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

485 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

486 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

487 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

488 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

489 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

490 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

491 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

492 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

493 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

494 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

495 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

496 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

497 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

498 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

499 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

500 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

	)

509 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

518 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

531 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

534 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

535 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

536 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

537 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

538 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

539 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

540 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

542 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

544 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

546 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

547 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

548 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

549 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

552 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

553 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

556 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

558 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

559 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

562 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

563 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

566 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

567 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

659 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

665 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

671 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

674 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

675 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

676 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

678 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_iwdg.h

24 #i‚de‡
__STM32F4xx_IWDG_H


25 
	#__STM32F4xx_IWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

52 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

53 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

54 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
) || \

55 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

	)

63 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

64 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

65 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

66 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

67 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

68 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

69 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

70 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
) || \

71 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

72 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

73 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

74 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

75 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

76 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

	)

84 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

85 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

86 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

87 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

100 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

101 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

102 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

103 
IWDG_RñﬂdCou¡î
();

106 
IWDG_E«bÀ
();

109 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

111 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_pwr.h

24 #i‚de‡
__STM32F4xx_PWR_H


25 
	#__STM32F4xx_PWR_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

53 
	#PWR_PVDLevñ_0
 
PWR_CR_PLS_LEV0


	)

54 
	#PWR_PVDLevñ_1
 
PWR_CR_PLS_LEV1


	)

55 
	#PWR_PVDLevñ_2
 
PWR_CR_PLS_LEV2


	)

56 
	#PWR_PVDLevñ_3
 
PWR_CR_PLS_LEV3


	)

57 
	#PWR_PVDLevñ_4
 
PWR_CR_PLS_LEV4


	)

58 
	#PWR_PVDLevñ_5
 
PWR_CR_PLS_LEV5


	)

59 
	#PWR_PVDLevñ_6
 
PWR_CR_PLS_LEV6


	)

60 
	#PWR_PVDLevñ_7
 
PWR_CR_PLS_LEV7


	)

62 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_0
Ë|| ((LEVELË=
PWR_PVDLevñ_1
)|| \

63 ((
LEVEL
Ë=
PWR_PVDLevñ_2
Ë|| ((LEVELË=
PWR_PVDLevñ_3
)|| \

64 ((
LEVEL
Ë=
PWR_PVDLevñ_4
Ë|| ((LEVELË=
PWR_PVDLevñ_5
)|| \

65 ((
LEVEL
Ë=
PWR_PVDLevñ_6
Ë|| ((LEVELË=
PWR_PVDLevñ_7
))

	)

75 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

76 
	#PWR_Reguœt‹_LowPowî
 
PWR_CR_LPDS


	)

77 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
) || \

78 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

	)

87 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

88 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

89 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

99 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

100 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

101 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

102 
	#PWR_FLAG_BRR
 
PWR_CSR_BRR


	)

103 
	#PWR_FLAG_REGRDY
 
PWR_CSR_REGRDY


	)

105 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

106 ((
FLAG
Ë=
PWR_FLAG_PVDO
Ë|| ((FLAGË=
PWR_FLAG_BRR
) || \

107 ((
FLAG
Ë=
PWR_FLAG_REGRDY
))

	)

109 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

122 
PWR_DeInô
();

125 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

128 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

129 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

132 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

135 
PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

138 
PWR_HighPîf‹m™˚ModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

139 
PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

142 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

143 
PWR_E¡îSTANDBYMode
();

146 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

147 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

149 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h

23 #i‚de‡
__STM32F4xx_RCC_H


24 
	#__STM32F4xx_RCC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f4xx.h
"

44 
uöt32_t
 
SYSCLK_Fªquícy
;

45 
uöt32_t
 
HCLK_Fªquícy
;

46 
uöt32_t
 
PCLK1_Fªquícy
;

47 
uöt32_t
 
PCLK2_Fªquícy
;

48 }
	tRCC_ClocksTy≥Def
;

59 
	#RCC_HSE_OFF
 ((
uöt8_t
)0x00)

	)

60 
	#RCC_HSE_ON
 ((
uöt8_t
)0x01)

	)

61 
	#RCC_HSE_By∑ss
 ((
uöt8_t
)0x05)

	)

62 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

63 ((
HSE
Ë=
RCC_HSE_By∑ss
))

	)

71 
	#RCC_PLLSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

72 
	#RCC_PLLSour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

73 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI
) || \

74 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE
))

	)

75 
	#IS_RCC_PLLM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

76 
	#IS_RCC_PLLN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

77 
	#IS_RCC_PLLP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

78 
	#IS_RCC_PLLQ_VALUE
(
VALUE
Ë((4 <(VALUE)Ë&& ((VALUEË<15))

	)

80 
	#IS_RCC_PLLI2SN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

81 
	#IS_RCC_PLLI2SR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

89 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

90 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

91 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

92 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
) || \

93 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

94 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

	)

102 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

103 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

104 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

105 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

106 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

107 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

108 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

109 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

110 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

111 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
) || \

112 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

113 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

114 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

115 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

	)

123 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

124 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00001000)

	)

125 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00001400)

	)

126 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00001800)

	)

127 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00001C00)

	)

128 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
) || \

129 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

130 ((
PCLK
Ë=
RCC_HCLK_Div16
))

	)

138 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

139 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

140 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

141 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

142 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

143 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)0x20)

	)

144 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

145 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xC0Ë=0x00Ë&& ((ITË!0x00))

	)

146 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

147 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

148 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

149 ((
IT
Ë=
RCC_IT_PLLI2SRDY
))

	)

150 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x40Ë=0x00Ë&& ((ITË!0x00))

	)

158 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

159 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

160 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

161 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

162 ((
LSE
Ë=
RCC_LSE_By∑ss
))

	)

170 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

171 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

172 
	#RCC_RTCCLKSour˚_HSE_Div2
 ((
uöt32_t
)0x00020300)

	)

173 
	#RCC_RTCCLKSour˚_HSE_Div3
 ((
uöt32_t
)0x00030300)

	)

174 
	#RCC_RTCCLKSour˚_HSE_Div4
 ((
uöt32_t
)0x00040300)

	)

175 
	#RCC_RTCCLKSour˚_HSE_Div5
 ((
uöt32_t
)0x00050300)

	)

176 
	#RCC_RTCCLKSour˚_HSE_Div6
 ((
uöt32_t
)0x00060300)

	)

177 
	#RCC_RTCCLKSour˚_HSE_Div7
 ((
uöt32_t
)0x00070300)

	)

178 
	#RCC_RTCCLKSour˚_HSE_Div8
 ((
uöt32_t
)0x00080300)

	)

179 
	#RCC_RTCCLKSour˚_HSE_Div9
 ((
uöt32_t
)0x00090300)

	)

180 
	#RCC_RTCCLKSour˚_HSE_Div10
 ((
uöt32_t
)0x000A0300)

	)

181 
	#RCC_RTCCLKSour˚_HSE_Div11
 ((
uöt32_t
)0x000B0300)

	)

182 
	#RCC_RTCCLKSour˚_HSE_Div12
 ((
uöt32_t
)0x000C0300)

	)

183 
	#RCC_RTCCLKSour˚_HSE_Div13
 ((
uöt32_t
)0x000D0300)

	)

184 
	#RCC_RTCCLKSour˚_HSE_Div14
 ((
uöt32_t
)0x000E0300)

	)

185 
	#RCC_RTCCLKSour˚_HSE_Div15
 ((
uöt32_t
)0x000F0300)

	)

186 
	#RCC_RTCCLKSour˚_HSE_Div16
 ((
uöt32_t
)0x00100300)

	)

187 
	#RCC_RTCCLKSour˚_HSE_Div17
 ((
uöt32_t
)0x00110300)

	)

188 
	#RCC_RTCCLKSour˚_HSE_Div18
 ((
uöt32_t
)0x00120300)

	)

189 
	#RCC_RTCCLKSour˚_HSE_Div19
 ((
uöt32_t
)0x00130300)

	)

190 
	#RCC_RTCCLKSour˚_HSE_Div20
 ((
uöt32_t
)0x00140300)

	)

191 
	#RCC_RTCCLKSour˚_HSE_Div21
 ((
uöt32_t
)0x00150300)

	)

192 
	#RCC_RTCCLKSour˚_HSE_Div22
 ((
uöt32_t
)0x00160300)

	)

193 
	#RCC_RTCCLKSour˚_HSE_Div23
 ((
uöt32_t
)0x00170300)

	)

194 
	#RCC_RTCCLKSour˚_HSE_Div24
 ((
uöt32_t
)0x00180300)

	)

195 
	#RCC_RTCCLKSour˚_HSE_Div25
 ((
uöt32_t
)0x00190300)

	)

196 
	#RCC_RTCCLKSour˚_HSE_Div26
 ((
uöt32_t
)0x001A0300)

	)

197 
	#RCC_RTCCLKSour˚_HSE_Div27
 ((
uöt32_t
)0x001B0300)

	)

198 
	#RCC_RTCCLKSour˚_HSE_Div28
 ((
uöt32_t
)0x001C0300)

	)

199 
	#RCC_RTCCLKSour˚_HSE_Div29
 ((
uöt32_t
)0x001D0300)

	)

200 
	#RCC_RTCCLKSour˚_HSE_Div30
 ((
uöt32_t
)0x001E0300)

	)

201 
	#RCC_RTCCLKSour˚_HSE_Div31
 ((
uöt32_t
)0x001F0300)

	)

202 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
) || \

203 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

204 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div2
) || \

205 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div3
) || \

206 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div4
) || \

207 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div5
) || \

208 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div6
) || \

209 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div7
) || \

210 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div8
) || \

211 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div9
) || \

212 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div10
) || \

213 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div11
) || \

214 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div12
) || \

215 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div13
) || \

216 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div14
) || \

217 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div15
) || \

218 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div16
) || \

219 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div17
) || \

220 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div18
) || \

221 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div19
) || \

222 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div20
) || \

223 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div21
) || \

224 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div22
) || \

225 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div23
) || \

226 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div24
) || \

227 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div25
) || \

228 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div26
) || \

229 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div27
) || \

230 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div28
) || \

231 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div29
) || \

232 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div30
) || \

233 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div31
))

	)

241 
	#RCC_I2S2CLKSour˚_PLLI2S
 ((
uöt8_t
)0x00)

	)

242 
	#RCC_I2S2CLKSour˚_Ext
 ((
uöt8_t
)0x01)

	)

244 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_PLLI2S
Ë|| ((SOURCEË=
RCC_I2S2CLKSour˚_Ext
))

	)

252 
	#RCC_AHB1Pîùh_GPIOA
 ((
uöt32_t
)0x00000001)

	)

253 
	#RCC_AHB1Pîùh_GPIOB
 ((
uöt32_t
)0x00000002)

	)

254 
	#RCC_AHB1Pîùh_GPIOC
 ((
uöt32_t
)0x00000004)

	)

255 
	#RCC_AHB1Pîùh_GPIOD
 ((
uöt32_t
)0x00000008)

	)

256 
	#RCC_AHB1Pîùh_GPIOE
 ((
uöt32_t
)0x00000010)

	)

257 
	#RCC_AHB1Pîùh_GPIOF
 ((
uöt32_t
)0x00000020)

	)

258 
	#RCC_AHB1Pîùh_GPIOG
 ((
uöt32_t
)0x00000040)

	)

259 
	#RCC_AHB1Pîùh_GPIOH
 ((
uöt32_t
)0x00000080)

	)

260 
	#RCC_AHB1Pîùh_GPIOI
 ((
uöt32_t
)0x00000100)

	)

261 
	#RCC_AHB1Pîùh_CRC
 ((
uöt32_t
)0x00001000)

	)

262 
	#RCC_AHB1Pîùh_FLITF
 ((
uöt32_t
)0x00008000)

	)

263 
	#RCC_AHB1Pîùh_SRAM1
 ((
uöt32_t
)0x00010000)

	)

264 
	#RCC_AHB1Pîùh_SRAM2
 ((
uöt32_t
)0x00020000)

	)

265 
	#RCC_AHB1Pîùh_BKPSRAM
 ((
uöt32_t
)0x00040000)

	)

266 
	#RCC_AHB1Pîùh_DMA1
 ((
uöt32_t
)0x00200000)

	)

267 
	#RCC_AHB1Pîùh_DMA2
 ((
uöt32_t
)0x00400000)

	)

268 
	#RCC_AHB1Pîùh_ETH_MAC
 ((
uöt32_t
)0x02000000)

	)

269 
	#RCC_AHB1Pîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x04000000)

	)

270 
	#RCC_AHB1Pîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x08000000)

	)

271 
	#RCC_AHB1Pîùh_ETH_MAC_PTP
 ((
uöt32_t
)0x10000000)

	)

272 
	#RCC_AHB1Pîùh_OTG_HS
 ((
uöt32_t
)0x20000000)

	)

273 
	#RCC_AHB1Pîùh_OTG_HS_ULPI
 ((
uöt32_t
)0x40000000)

	)

274 
	#IS_RCC_AHB1_CLOCK_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x819BEE00Ë=0x00Ë&& ((PERIPHË!0x00))

	)

275 
	#IS_RCC_AHB1_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xDD9FEE00Ë=0x00Ë&& ((PERIPHË!0x00))

	)

276 
	#IS_RCC_AHB1_LPMODE_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81986E00Ë=0x00Ë&& ((PERIPHË!0x00))

	)

284 
	#RCC_AHB2Pîùh_DCMI
 ((
uöt32_t
)0x00000001)

	)

285 
	#RCC_AHB2Pîùh_CRYP
 ((
uöt32_t
)0x00000010)

	)

286 
	#RCC_AHB2Pîùh_HASH
 ((
uöt32_t
)0x00000020)

	)

287 
	#RCC_AHB2Pîùh_RNG
 ((
uöt32_t
)0x00000040)

	)

288 
	#RCC_AHB2Pîùh_OTG_FS
 ((
uöt32_t
)0x00000080)

	)

289 
	#IS_RCC_AHB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFF0EË=0x00Ë&& ((PERIPHË!0x00))

	)

297 
	#RCC_AHB3Pîùh_FSMC
 ((
uöt32_t
)0x00000001)

	)

298 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFEË=0x00Ë&& ((PERIPHË!0x00))

	)

306 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

307 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

308 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

309 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

310 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

311 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

312 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

313 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

314 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

315 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

316 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

317 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

318 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

319 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

320 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

321 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

322 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

323 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

324 
	#RCC_APB1Pîùh_I2C3
 ((
uöt32_t
)0x00800000)

	)

325 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

326 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

327 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

328 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

329 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xC9013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

337 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000001)

	)

338 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00000002)

	)

339 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00000010)

	)

340 
	#RCC_APB2Pîùh_USART6
 ((
uöt32_t
)0x00000020)

	)

341 
	#RCC_APB2Pîùh_ADC
 ((
uöt32_t
)0x00000100)

	)

342 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000100)

	)

343 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000200)

	)

344 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00000400)

	)

345 
	#RCC_APB2Pîùh_SDIO
 ((
uöt32_t
)0x00000800)

	)

346 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

347 
	#RCC_APB2Pîùh_SYSCFG
 ((
uöt32_t
)0x00004000)

	)

348 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00010000)

	)

349 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00020000)

	)

350 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00040000)

	)

351 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF8A0CCË=0x00Ë&& ((PERIPHË!0x00))

	)

352 
	#IS_RCC_APB2_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF8A6CCË=0x00Ë&& ((PERIPHË!0x00))

	)

360 
	#RCC_MCO1Sour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

361 
	#RCC_MCO1Sour˚_LSE
 ((
uöt32_t
)0x00200000)

	)

362 
	#RCC_MCO1Sour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

363 
	#RCC_MCO1Sour˚_PLLCLK
 ((
uöt32_t
)0x00600000)

	)

364 
	#RCC_MCO1Div_1
 ((
uöt32_t
)0x00000000)

	)

365 
	#RCC_MCO1Div_2
 ((
uöt32_t
)0x04000000)

	)

366 
	#RCC_MCO1Div_3
 ((
uöt32_t
)0x05000000)

	)

367 
	#RCC_MCO1Div_4
 ((
uöt32_t
)0x06000000)

	)

368 
	#RCC_MCO1Div_5
 ((
uöt32_t
)0x07000000)

	)

369 
	#IS_RCC_MCO1SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO1Sour˚_HSI
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_LSE
) || \

370 ((
SOURCE
Ë=
RCC_MCO1Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_PLLCLK
))

	)

372 
	#IS_RCC_MCO1DIV
(
DIV
Ë(((DIVË=
RCC_MCO1Div_1
Ë|| ((DIVË=
RCC_MCO1Div_2
) || \

373 ((
DIV
Ë=
RCC_MCO1Div_3
Ë|| ((DIVË=
RCC_MCO1Div_4
) || \

374 ((
DIV
Ë=
RCC_MCO1Div_5
))

	)

382 
	#RCC_MCO2Sour˚_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

383 
	#RCC_MCO2Sour˚_PLLI2SCLK
 ((
uöt32_t
)0x40000000)

	)

384 
	#RCC_MCO2Sour˚_HSE
 ((
uöt32_t
)0x80000000)

	)

385 
	#RCC_MCO2Sour˚_PLLCLK
 ((
uöt32_t
)0xC0000000)

	)

386 
	#RCC_MCO2Div_1
 ((
uöt32_t
)0x00000000)

	)

387 
	#RCC_MCO2Div_2
 ((
uöt32_t
)0x20000000)

	)

388 
	#RCC_MCO2Div_3
 ((
uöt32_t
)0x28000000)

	)

389 
	#RCC_MCO2Div_4
 ((
uöt32_t
)0x30000000)

	)

390 
	#RCC_MCO2Div_5
 ((
uöt32_t
)0x38000000)

	)

391 
	#IS_RCC_MCO2SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO2Sour˚_SYSCLK
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLI2SCLK
)|| \

392 ((
SOURCE
Ë=
RCC_MCO2Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLCLK
))

	)

394 
	#IS_RCC_MCO2DIV
(
DIV
Ë(((DIVË=
RCC_MCO2Div_1
Ë|| ((DIVË=
RCC_MCO2Div_2
) || \

395 ((
DIV
Ë=
RCC_MCO2Div_3
Ë|| ((DIVË=
RCC_MCO2Div_4
) || \

396 ((
DIV
Ë=
RCC_MCO2Div_5
))

	)

404 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

405 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

406 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

407 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)0x3B)

	)

408 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

409 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

410 
	#RCC_FLAG_BORRST
 ((
uöt8_t
)0x79)

	)

411 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

412 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

413 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

414 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

415 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

416 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

417 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

418 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

419 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_BORRST
) || \

420 ((
FLAG
Ë=
RCC_FLAG_PINRST
Ë|| ((FLAGË=
RCC_FLAG_PORRST
) || \

421 ((
FLAG
Ë=
RCC_FLAG_SFTRST
Ë|| ((FLAGË=
RCC_FLAG_IWDGRST
)|| \

422 ((
FLAG
Ë=
RCC_FLAG_WWDGRST
)|| ((FLAGË=
RCC_FLAG_LPWRRST
)|| \

423 ((
FLAG
Ë=
RCC_FLAG_PLLI2SRDY
))

	)

424 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

437 
RCC_DeInô
();

440 
RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
);

441 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

442 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

443 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

445 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

447 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
);

448 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

449 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
);

450 
RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

452 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
);

454 
RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
);

457 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

458 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

459 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

460 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

461 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

462 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

465 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

466 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

467 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

468 
RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
);

470 
RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

471 
RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

472 
RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

473 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

474 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

476 
RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

477 
RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

478 
RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

479 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

480 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

482 
RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

483 
RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

484 
RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

485 
RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

486 
RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

489 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

491 
RCC_CÀ¨Fœg
();

492 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

493 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

495 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rng.h

24 #i‚de‡
__STM32F4xx_RNG_H


25 
	#__STM32F4xx_RNG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

52 
	#RNG_FLAG_DRDY
 ((
uöt8_t
)0x0001Ë

	)

53 
	#RNG_FLAG_CECS
 ((
uöt8_t
)0x0002Ë

	)

54 
	#RNG_FLAG_SECS
 ((
uöt8_t
)0x0004Ë

	)

56 
	#IS_RNG_GET_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_DRDY
) || \

57 ((
RNG_FLAG
Ë=
RNG_FLAG_CECS
) || \

58 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

	)

59 
	#IS_RNG_CLEAR_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_CECS
) || \

60 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

	)

68 
	#RNG_IT_CEI
 ((
uöt8_t
)0x20Ë

	)

69 
	#RNG_IT_SEI
 ((
uöt8_t
)0x40Ë

	)

71 
	#IS_RNG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x9FË=0x00Ë&& ((ITË!0x00))

	)

72 
	#IS_RNG_GET_IT
(
RNG_IT
Ë(((RNG_ITË=
RNG_IT_CEI
Ë|| ((RNG_ITË=
RNG_IT_SEI
))

	)

85 
RNG_DeInô
();

88 
RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

91 
uöt32_t
 
RNG_GëR™domNumbî
();

94 
RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

95 
FœgSètus
 
RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
);

96 
RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
);

97 
ITSètus
 
RNG_GëITSètus
(
uöt8_t
 
RNG_IT
);

98 
RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
);

100 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h

24 #i‚de‡
__STM32F4xx_RTC_H


25 
	#__STM32F4xx_RTC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

49 
uöt32_t
 
RTC_HourF‹m©
;

52 
uöt32_t
 
RTC_AsynchPªdiv
;

55 
uöt32_t
 
RTC_SynchPªdiv
;

57 }
	tRTC_InôTy≥Def
;

64 
uöt8_t
 
RTC_Hours
;

69 
uöt8_t
 
RTC_Möuãs
;

72 
uöt8_t
 
RTC_Sec⁄ds
;

75 
uöt8_t
 
RTC_H12
;

77 }
	tRTC_TimeTy≥Def
;

84 
uöt8_t
 
RTC_WìkDay
;

87 
uöt8_t
 
RTC_M⁄th
;

90 
uöt8_t
 
RTC_D©e
;

93 
uöt8_t
 
RTC_Yór
;

95 }
	tRTC_D©eTy≥Def
;

102 
RTC_TimeTy≥Def
 
RTC_AœrmTime
;

104 
uöt32_t
 
RTC_AœrmMask
;

107 
uöt32_t
 
RTC_AœrmD©eWìkDaySñ
;

110 
uöt8_t
 
RTC_AœrmD©eWìkDay
;

115 }
	tRTC_AœrmTy≥Def
;

127 
	#RTC_HourF‹m©_24
 ((
uöt32_t
)0x00000000)

	)

128 
	#RTC_HourF‹m©_12
 ((
uöt32_t
)0x00000040)

	)

129 
	#IS_RTC_HOUR_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_HourF‹m©_12
) || \

130 ((
FORMAT
Ë=
RTC_HourF‹m©_24
))

	)

138 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7F)

	)

148 
	#IS_RTC_SYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7FFF)

	)

157 
	#IS_RTC_HOUR12
(
HOUR
Ë(((HOURË> 0Ë&& ((HOURË<12))

	)

158 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<23)

	)

159 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<59)

	)

160 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<59)

	)

169 
	#RTC_H12_AM
 ((
uöt8_t
)0x00)

	)

170 
	#RTC_H12_PM
 ((
uöt8_t
)0x40)

	)

171 
	#IS_RTC_H12
(
PM
Ë(((PMË=
RTC_H12_AM
Ë|| ((PMË=
RTC_H12_PM
))

	)

180 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<99)

	)

191 
	#RTC_M⁄th_J™u¨y
 ((
uöt8_t
)0x01)

	)

192 
	#RTC_M⁄th_Febru¨y
 ((
uöt8_t
)0x02)

	)

193 
	#RTC_M⁄th_M¨ch
 ((
uöt8_t
)0x03)

	)

194 
	#RTC_M⁄th_A¥û
 ((
uöt8_t
)0x04)

	)

195 
	#RTC_M⁄th_May
 ((
uöt8_t
)0x05)

	)

196 
	#RTC_M⁄th_Ju√
 ((
uöt8_t
)0x06)

	)

197 
	#RTC_M⁄th_July
 ((
uöt8_t
)0x07)

	)

198 
	#RTC_M⁄th_Augu°
 ((
uöt8_t
)0x08)

	)

199 
	#RTC_M⁄th_Sïãmbî
 ((
uöt8_t
)0x09)

	)

200 
	#RTC_M⁄th_O˘obî
 ((
uöt8_t
)0x10)

	)

201 
	#RTC_M⁄th_Novembî
 ((
uöt8_t
)0x11)

	)

202 
	#RTC_M⁄th_De˚mbî
 ((
uöt8_t
)0x12)

	)

203 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>1Ë&& ((MONTHË<12))

	)

204 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>1Ë&& ((DATEË<31))

	)

214 
	#RTC_Wìkday_M⁄day
 ((
uöt8_t
)0x01)

	)

215 
	#RTC_Wìkday_Tuesday
 ((
uöt8_t
)0x02)

	)

216 
	#RTC_Wìkday_Wed√sday
 ((
uöt8_t
)0x03)

	)

217 
	#RTC_Wìkday_Thursday
 ((
uöt8_t
)0x04)

	)

218 
	#RTC_Wìkday_Friday
 ((
uöt8_t
)0x05)

	)

219 
	#RTC_Wìkday_S©urday
 ((
uöt8_t
)0x06)

	)

220 
	#RTC_Wìkday_Sunday
 ((
uöt8_t
)0x07)

	)

221 
	#IS_RTC_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

222 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

223 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

224 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

225 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

226 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

227 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

236 
	#IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
DATE
Ë(((DATEË> 0Ë&& ((DATEË<31))

	)

237 
	#IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

238 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

239 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

240 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

241 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

242 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

243 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

253 
	#RTC_AœrmD©eWìkDaySñ_D©e
 ((
uöt32_t
)0x00000000)

	)

254 
	#RTC_AœrmD©eWìkDaySñ_WìkDay
 ((
uöt32_t
)0x40000000)

	)

256 
	#IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
SEL
Ë(((SELË=
RTC_AœrmD©eWìkDaySñ_D©e
) || \

257 ((
SEL
Ë=
RTC_AœrmD©eWìkDaySñ_WìkDay
))

	)

267 
	#RTC_AœrmMask_N⁄e
 ((
uöt32_t
)0x00000000)

	)

268 
	#RTC_AœrmMask_D©eWìkDay
 ((
uöt32_t
)0x80000000)

	)

269 
	#RTC_AœrmMask_Hours
 ((
uöt32_t
)0x00800000)

	)

270 
	#RTC_AœrmMask_Möuãs
 ((
uöt32_t
)0x00008000)

	)

271 
	#RTC_AœrmMask_Sec⁄ds
 ((
uöt32_t
)0x00000080)

	)

272 
	#RTC_AœrmMask_AŒ
 ((
uöt32_t
)0x80808080)

	)

273 
	#IS_ALARM_MASK
(
MASK
Ë(((MASKË& 0x7F7F7F7FË=(
uöt32_t
)
RESET
)

	)

282 
	#RTC_Aœrm_A
 ((
uöt32_t
)0x00000100)

	)

283 
	#RTC_Aœrm_B
 ((
uöt32_t
)0x00000200)

	)

284 
	#IS_RTC_ALARM
(
ALARM
Ë(((ALARMË=
RTC_Aœrm_A
Ë|| ((ALARMË=
RTC_Aœrm_B
))

	)

285 
	#IS_RTC_CMD_ALARM
(
ALARM
Ë(((ALARMË& (
RTC_Aœrm_A
 | 
RTC_Aœrm_B
)Ë!(
uöt32_t
)
RESET
)

	)

294 
	#RTC_AœrmSubSec⁄dMask_AŒ
 ((
uöt32_t
)0x00000000Ë

	)

297 
	#RTC_AœrmSubSec⁄dMask_SS14_1
 ((
uöt32_t
)0x01000000Ë

	)

299 
	#RTC_AœrmSubSec⁄dMask_SS14_2
 ((
uöt32_t
)0x02000000Ë

	)

301 
	#RTC_AœrmSubSec⁄dMask_SS14_3
 ((
uöt32_t
)0x03000000Ë

	)

303 
	#RTC_AœrmSubSec⁄dMask_SS14_4
 ((
uöt32_t
)0x04000000Ë

	)

305 
	#RTC_AœrmSubSec⁄dMask_SS14_5
 ((
uöt32_t
)0x05000000Ë

	)

307 
	#RTC_AœrmSubSec⁄dMask_SS14_6
 ((
uöt32_t
)0x06000000Ë

	)

309 
	#RTC_AœrmSubSec⁄dMask_SS14_7
 ((
uöt32_t
)0x07000000Ë

	)

311 
	#RTC_AœrmSubSec⁄dMask_SS14_8
 ((
uöt32_t
)0x08000000Ë

	)

313 
	#RTC_AœrmSubSec⁄dMask_SS14_9
 ((
uöt32_t
)0x09000000Ë

	)

315 
	#RTC_AœrmSubSec⁄dMask_SS14_10
 ((
uöt32_t
)0x0A000000Ë

	)

317 
	#RTC_AœrmSubSec⁄dMask_SS14_11
 ((
uöt32_t
)0x0B000000Ë

	)

319 
	#RTC_AœrmSubSec⁄dMask_SS14_12
 ((
uöt32_t
)0x0C000000Ë

	)

321 
	#RTC_AœrmSubSec⁄dMask_SS14_13
 ((
uöt32_t
)0x0D000000Ë

	)

323 
	#RTC_AœrmSubSec⁄dMask_SS14
 ((
uöt32_t
)0x0E000000Ë

	)

325 
	#RTC_AœrmSubSec⁄dMask_N⁄e
 ((
uöt32_t
)0x0F000000Ë

	)

327 
	#IS_RTC_ALARM_SUB_SECOND_MASK
(
MASK
Ë(((MASKË=
RTC_AœrmSubSec⁄dMask_AŒ
) || \

328 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_1
) || \

329 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_2
) || \

330 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_3
) || \

331 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_4
) || \

332 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_5
) || \

333 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_6
) || \

334 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_7
) || \

335 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_8
) || \

336 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_9
) || \

337 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_10
) || \

338 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_11
) || \

339 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_12
) || \

340 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_13
) || \

341 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14
) || \

342 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_N⁄e
))

	)

351 
	#IS_RTC_ALARM_SUB_SECOND_VALUE
(
VALUE
Ë((VALUEË<0x00007FFF)

	)

360 
	#RTC_WakeUpClock_RTCCLK_Div16
 ((
uöt32_t
)0x00000000)

	)

361 
	#RTC_WakeUpClock_RTCCLK_Div8
 ((
uöt32_t
)0x00000001)

	)

362 
	#RTC_WakeUpClock_RTCCLK_Div4
 ((
uöt32_t
)0x00000002)

	)

363 
	#RTC_WakeUpClock_RTCCLK_Div2
 ((
uöt32_t
)0x00000003)

	)

364 
	#RTC_WakeUpClock_CK_SPRE_16bôs
 ((
uöt32_t
)0x00000004)

	)

365 
	#RTC_WakeUpClock_CK_SPRE_17bôs
 ((
uöt32_t
)0x00000006)

	)

366 
	#IS_RTC_WAKEUP_CLOCK
(
CLOCK
Ë(((CLOCKË=
RTC_WakeUpClock_RTCCLK_Div16
) || \

367 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div8
) || \

368 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div4
) || \

369 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div2
) || \

370 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_16bôs
) || \

371 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_17bôs
))

	)

372 
	#IS_RTC_WAKEUP_COUNTER
(
COUNTER
Ë((COUNTERË<0xFFFF)

	)

380 
	#RTC_TimeSèmpEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

381 
	#RTC_TimeSèmpEdge_FÆlög
 ((
uöt32_t
)0x00000008)

	)

382 
	#IS_RTC_TIMESTAMP_EDGE
(
EDGE
Ë(((EDGEË=
RTC_TimeSèmpEdge_Risög
) || \

383 ((
EDGE
Ë=
RTC_TimeSèmpEdge_FÆlög
))

	)

391 
	#RTC_Ouçut_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

392 
	#RTC_Ouçut_AœrmA
 ((
uöt32_t
)0x00200000)

	)

393 
	#RTC_Ouçut_AœrmB
 ((
uöt32_t
)0x00400000)

	)

394 
	#RTC_Ouçut_WakeUp
 ((
uöt32_t
)0x00600000)

	)

396 
	#IS_RTC_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_Ouçut_DißbÀ
) || \

397 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmA
) || \

398 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmB
) || \

399 ((
OUTPUT
Ë=
RTC_Ouçut_WakeUp
))

	)

408 
	#RTC_OuçutPﬁ¨ôy_High
 ((
uöt32_t
)0x00000000)

	)

409 
	#RTC_OuçutPﬁ¨ôy_Low
 ((
uöt32_t
)0x00100000)

	)

410 
	#IS_RTC_OUTPUT_POL
(
POL
Ë(((POLË=
RTC_OuçutPﬁ¨ôy_High
) || \

411 ((
POL
Ë=
RTC_OuçutPﬁ¨ôy_Low
))

	)

420 
	#RTC_CÆibSign_Posôive
 ((
uöt32_t
)0x00000000)

	)

421 
	#RTC_CÆibSign_Neg©ive
 ((
uöt32_t
)0x00000080)

	)

422 
	#IS_RTC_CALIB_SIGN
(
SIGN
Ë(((SIGNË=
RTC_CÆibSign_Posôive
) || \

423 ((
SIGN
Ë=
RTC_CÆibSign_Neg©ive
))

	)

424 
	#IS_RTC_CALIB_VALUE
(
VALUE
Ë((VALUEË< 0x20)

	)

433 
	#RTC_CÆibOuçut_512Hz
 ((
uöt32_t
)0x00000000)

	)

434 
	#RTC_CÆibOuçut_1Hz
 ((
uöt32_t
)0x00080000)

	)

435 
	#IS_RTC_CALIB_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_CÆibOuçut_512Hz
) || \

436 ((
OUTPUT
Ë=
RTC_CÆibOuçut_1Hz
))

	)

444 
	#RTC_SmoŸhCÆibPîiod_32£c
 ((
uöt32_t
)0x00000000Ë

	)

446 
	#RTC_SmoŸhCÆibPîiod_16£c
 ((
uöt32_t
)0x00002000Ë

	)

448 
	#RTC_SmoŸhCÆibPîiod_8£c
 ((
uöt32_t
)0x00004000Ë

	)

450 
	#IS_RTC_SMOOTH_CALIB_PERIOD
(
PERIOD
Ë(((PERIODË=
RTC_SmoŸhCÆibPîiod_32£c
) || \

451 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_16£c
) || \

452 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_8£c
))

	)

461 
	#RTC_SmoŸhCÆibPlusPul£s_Së
 ((
uöt32_t
)0x00008000Ë

	)

464 
	#RTC_SmoŸhCÆibPlusPul£s_Re£t
 ((
uöt32_t
)0x00000000Ë

	)

466 
	#IS_RTC_SMOOTH_CALIB_PLUS
(
PLUS
Ë(((PLUSË=
RTC_SmoŸhCÆibPlusPul£s_Së
) || \

467 ((
PLUS
Ë=
RTC_SmoŸhCÆibPlusPul£s_Re£t
))

	)

476 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
VALUE
Ë((VALUEË<0x000001FF)

	)

485 
	#RTC_DayLightSavög_SUB1H
 ((
uöt32_t
)0x00020000)

	)

486 
	#RTC_DayLightSavög_ADD1H
 ((
uöt32_t
)0x00010000)

	)

487 
	#IS_RTC_DAYLIGHT_SAVING
(
SAVE
Ë(((SAVEË=
RTC_DayLightSavög_SUB1H
) || \

488 ((
SAVE
Ë=
RTC_DayLightSavög_ADD1H
))

	)

490 
	#RTC_St‹eO≥øti⁄_Re£t
 ((
uöt32_t
)0x00000000)

	)

491 
	#RTC_St‹eO≥øti⁄_Së
 ((
uöt32_t
)0x00040000)

	)

492 
	#IS_RTC_STORE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
RTC_St‹eO≥øti⁄_Re£t
) || \

493 ((
OPERATION
Ë=
RTC_St‹eO≥øti⁄_Së
))

	)

501 
	#RTC_Tam≥rTriggî_RisögEdge
 ((
uöt32_t
)0x00000000)

	)

502 
	#RTC_Tam≥rTriggî_FÆlögEdge
 ((
uöt32_t
)0x00000001)

	)

503 
	#RTC_Tam≥rTriggî_LowLevñ
 ((
uöt32_t
)0x00000000)

	)

504 
	#RTC_Tam≥rTriggî_HighLevñ
 ((
uöt32_t
)0x00000001)

	)

505 
	#IS_RTC_TAMPER_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
RTC_Tam≥rTriggî_RisögEdge
) || \

506 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_FÆlögEdge
) || \

507 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_LowLevñ
) || \

508 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_HighLevñ
))

	)

517 
	#RTC_Tam≥rFûãr_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

519 
	#RTC_Tam≥rFûãr_2Sam∂e
 ((
uöt32_t
)0x00000800Ë

	)

521 
	#RTC_Tam≥rFûãr_4Sam∂e
 ((
uöt32_t
)0x00001000Ë

	)

523 
	#RTC_Tam≥rFûãr_8Sam∂e
 ((
uöt32_t
)0x00001800Ë

	)

525 
	#IS_RTC_TAMPER_FILTER
(
FILTER
Ë(((FILTERË=
RTC_Tam≥rFûãr_DißbÀ
) || \

526 ((
FILTER
Ë=
RTC_Tam≥rFûãr_2Sam∂e
) || \

527 ((
FILTER
Ë=
RTC_Tam≥rFûãr_4Sam∂e
) || \

528 ((
FILTER
Ë=
RTC_Tam≥rFûãr_8Sam∂e
))

	)

536 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
 ((
uöt32_t
)0x00000000Ë

	)

538 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
 ((
uöt32_t
)0x000000100Ë

	)

540 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
 ((
uöt32_t
)0x00000200Ë

	)

542 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
 ((
uöt32_t
)0x00000300Ë

	)

544 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
 ((
uöt32_t
)0x00000400Ë

	)

546 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
 ((
uöt32_t
)0x00000500Ë

	)

548 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
 ((
uöt32_t
)0x00000600Ë

	)

550 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
 ((
uöt32_t
)0x00000700Ë

	)

552 
	#IS_RTC_TAMPER_SAMPLING_FREQ
(
FREQ
Ë(((FREQË==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
) || \

553 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
) || \

554 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
) || \

555 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
) || \

556 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
) || \

557 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
) || \

558 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
) || \

559 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
))

	)

568 
	#RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
 ((
uöt32_t
)0x00000000Ë

	)

570 
	#RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
 ((
uöt32_t
)0x00002000Ë

	)

572 
	#RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
 ((
uöt32_t
)0x00004000Ë

	)

574 
	#RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
 ((
uöt32_t
)0x00006000Ë

	)

577 
	#IS_RTC_TAMPER_PRECHARGE_DURATION
(
DURATION
Ë(((DURATIONË=
RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
) || \

578 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
) || \

579 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
) || \

580 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
))

	)

588 
	#RTC_Tam≥r_1
 
RTC_TAFCR_TAMP1E


	)

589 
	#IS_RTC_TAMPER
(
TAMPER
Ë(((TAMPERË=
RTC_Tam≥r_1
))

	)

598 
	#RTC_Tam≥rPö_PC13
 ((
uöt32_t
)0x00000000)

	)

599 
	#RTC_Tam≥rPö_PI8
 ((
uöt32_t
)0x00010000)

	)

600 
	#IS_RTC_TAMPER_PIN
(
PIN
Ë(((PINË=
RTC_Tam≥rPö_PC13
) || \

601 ((
PIN
Ë=
RTC_Tam≥rPö_PI8
))

	)

609 
	#RTC_TimeSèmpPö_PC13
 ((
uöt32_t
)0x00000000)

	)

610 
	#RTC_TimeSèmpPö_PI8
 ((
uöt32_t
)0x00020000)

	)

611 
	#IS_RTC_TIMESTAMP_PIN
(
PIN
Ë(((PINË=
RTC_TimeSèmpPö_PC13
) || \

612 ((
PIN
Ë=
RTC_TimeSèmpPö_PI8
))

	)

620 
	#RTC_OuçutTy≥_O≥nDøö
 ((
uöt32_t
)0x00000000)

	)

621 
	#RTC_OuçutTy≥_PushPuŒ
 ((
uöt32_t
)0x00040000)

	)

622 
	#IS_RTC_OUTPUT_TYPE
(
TYPE
Ë(((TYPEË=
RTC_OuçutTy≥_O≥nDøö
) || \

623 ((
TYPE
Ë=
RTC_OuçutTy≥_PushPuŒ
))

	)

632 
	#RTC_Shi·Add1S_Re£t
 ((
uöt32_t
)0x00000000)

	)

633 
	#RTC_Shi·Add1S_Së
 ((
uöt32_t
)0x80000000)

	)

634 
	#IS_RTC_SHIFT_ADD1S
(
SEL
Ë(((SELË=
RTC_Shi·Add1S_Re£t
) || \

635 ((
SEL
Ë=
RTC_Shi·Add1S_Së
))

	)

643 
	#IS_RTC_SHIFT_SUBFS
(
FS
Ë((FSË<0x00007FFF)

	)

653 
	#RTC_BKP_DR0
 ((
uöt32_t
)0x00000000)

	)

654 
	#RTC_BKP_DR1
 ((
uöt32_t
)0x00000001)

	)

655 
	#RTC_BKP_DR2
 ((
uöt32_t
)0x00000002)

	)

656 
	#RTC_BKP_DR3
 ((
uöt32_t
)0x00000003)

	)

657 
	#RTC_BKP_DR4
 ((
uöt32_t
)0x00000004)

	)

658 
	#RTC_BKP_DR5
 ((
uöt32_t
)0x00000005)

	)

659 
	#RTC_BKP_DR6
 ((
uöt32_t
)0x00000006)

	)

660 
	#RTC_BKP_DR7
 ((
uöt32_t
)0x00000007)

	)

661 
	#RTC_BKP_DR8
 ((
uöt32_t
)0x00000008)

	)

662 
	#RTC_BKP_DR9
 ((
uöt32_t
)0x00000009)

	)

663 
	#RTC_BKP_DR10
 ((
uöt32_t
)0x0000000A)

	)

664 
	#RTC_BKP_DR11
 ((
uöt32_t
)0x0000000B)

	)

665 
	#RTC_BKP_DR12
 ((
uöt32_t
)0x0000000C)

	)

666 
	#RTC_BKP_DR13
 ((
uöt32_t
)0x0000000D)

	)

667 
	#RTC_BKP_DR14
 ((
uöt32_t
)0x0000000E)

	)

668 
	#RTC_BKP_DR15
 ((
uöt32_t
)0x0000000F)

	)

669 
	#RTC_BKP_DR16
 ((
uöt32_t
)0x00000010)

	)

670 
	#RTC_BKP_DR17
 ((
uöt32_t
)0x00000011)

	)

671 
	#RTC_BKP_DR18
 ((
uöt32_t
)0x00000012)

	)

672 
	#RTC_BKP_DR19
 ((
uöt32_t
)0x00000013)

	)

673 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË=
RTC_BKP_DR0
) || \

674 ((
BKP
Ë=
RTC_BKP_DR1
) || \

675 ((
BKP
Ë=
RTC_BKP_DR2
) || \

676 ((
BKP
Ë=
RTC_BKP_DR3
) || \

677 ((
BKP
Ë=
RTC_BKP_DR4
) || \

678 ((
BKP
Ë=
RTC_BKP_DR5
) || \

679 ((
BKP
Ë=
RTC_BKP_DR6
) || \

680 ((
BKP
Ë=
RTC_BKP_DR7
) || \

681 ((
BKP
Ë=
RTC_BKP_DR8
) || \

682 ((
BKP
Ë=
RTC_BKP_DR9
) || \

683 ((
BKP
Ë=
RTC_BKP_DR10
) || \

684 ((
BKP
Ë=
RTC_BKP_DR11
) || \

685 ((
BKP
Ë=
RTC_BKP_DR12
) || \

686 ((
BKP
Ë=
RTC_BKP_DR13
) || \

687 ((
BKP
Ë=
RTC_BKP_DR14
) || \

688 ((
BKP
Ë=
RTC_BKP_DR15
) || \

689 ((
BKP
Ë=
RTC_BKP_DR16
) || \

690 ((
BKP
Ë=
RTC_BKP_DR17
) || \

691 ((
BKP
Ë=
RTC_BKP_DR18
) || \

692 ((
BKP
Ë=
RTC_BKP_DR19
))

	)

700 
	#RTC_F‹m©_BIN
 ((
uöt32_t
)0x000000000)

	)

701 
	#RTC_F‹m©_BCD
 ((
uöt32_t
)0x000000001)

	)

702 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_F‹m©_BIN
Ë|| ((FORMATË=
RTC_F‹m©_BCD
))

	)

711 
	#RTC_FLAG_RECALPF
 ((
uöt32_t
)0x00010000)

	)

712 
	#RTC_FLAG_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

713 
	#RTC_FLAG_TSOVF
 ((
uöt32_t
)0x00001000)

	)

714 
	#RTC_FLAG_TSF
 ((
uöt32_t
)0x00000800)

	)

715 
	#RTC_FLAG_WUTF
 ((
uöt32_t
)0x00000400)

	)

716 
	#RTC_FLAG_ALRBF
 ((
uöt32_t
)0x00000200)

	)

717 
	#RTC_FLAG_ALRAF
 ((
uöt32_t
)0x00000100)

	)

718 
	#RTC_FLAG_INITF
 ((
uöt32_t
)0x00000040)

	)

719 
	#RTC_FLAG_RSF
 ((
uöt32_t
)0x00000020)

	)

720 
	#RTC_FLAG_INITS
 ((
uöt32_t
)0x00000010)

	)

721 
	#RTC_FLAG_SHPF
 ((
uöt32_t
)0x00000008)

	)

722 
	#RTC_FLAG_WUTWF
 ((
uöt32_t
)0x00000004)

	)

723 
	#RTC_FLAG_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

724 
	#RTC_FLAG_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

725 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_TSOVF
Ë|| ((FLAGË=
RTC_FLAG_TSF
) || \

726 ((
FLAG
Ë=
RTC_FLAG_WUTF
Ë|| ((FLAGË=
RTC_FLAG_ALRBF
) || \

727 ((
FLAG
Ë=
RTC_FLAG_ALRAF
Ë|| ((FLAGË=
RTC_FLAG_INITF
) || \

728 ((
FLAG
Ë=
RTC_FLAG_RSF
Ë|| ((FLAGË=
RTC_FLAG_WUTWF
) || \

729 ((
FLAG
Ë=
RTC_FLAG_ALRBWF
Ë|| ((FLAGË=
RTC_FLAG_ALRAWF
) || \

730 ((
FLAG
Ë=
RTC_FLAG_TAMP1F
Ë|| ((FLAGË=
RTC_FLAG_RECALPF
) || \

731 ((
FLAG
Ë=
RTC_FLAG_SHPF
))

	)

732 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë(((FLAGË!(
uöt32_t
)
RESET
Ë&& (((FLAGË& 0xFFFF00DFË=(uöt32_t)RESET))

	)

740 
	#RTC_IT_TS
 ((
uöt32_t
)0x00008000)

	)

741 
	#RTC_IT_WUT
 ((
uöt32_t
)0x00004000)

	)

742 
	#RTC_IT_ALRB
 ((
uöt32_t
)0x00002000)

	)

743 
	#RTC_IT_ALRA
 ((
uöt32_t
)0x00001000)

	)

744 
	#RTC_IT_TAMP
 ((
uöt32_t
)0x00000004Ë

	)

745 
	#RTC_IT_TAMP1
 ((
uöt32_t
)0x00020000)

	)

747 
	#IS_RTC_CONFIG_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFF0FFBË=(uöt32_t)RESET))

	)

748 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_TS
Ë|| ((ITË=
RTC_IT_WUT
) || \

749 ((
IT
Ë=
RTC_IT_ALRB
Ë|| ((ITË=
RTC_IT_ALRA
) || \

750 ((
IT
Ë=
RTC_IT_TAMP1
))

	)

751 
	#IS_RTC_CLEAR_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFD0FFFË=(uöt32_t)RESET))

	)

760 
	#RTC_DigôÆCÆibC⁄fig
 
RTC_Cﬂr£CÆibC⁄fig


	)

761 
	#RTC_DigôÆCÆibCmd
 
RTC_Cﬂr£CÆibCmd


	)

775 
Eº‹Sètus
 
RTC_DeInô
();

778 
Eº‹Sètus
 
RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

779 
RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

780 
RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

781 
Eº‹Sètus
 
RTC_E¡îInôMode
();

782 
RTC_ExôInôMode
();

783 
Eº‹Sètus
 
RTC_WaôF‹Synchro
();

784 
Eº‹Sètus
 
RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

785 
RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

788 
Eº‹Sètus
 
RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

789 
RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

790 
RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

791 
uöt32_t
 
RTC_GëSubSec⁄d
();

792 
Eº‹Sètus
 
RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

793 
RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

794 
RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

797 
RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

798 
RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

799 
RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

800 
Eº‹Sètus
 
RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

801 
RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
);

802 
uöt32_t
 
RTC_GëAœrmSubSec⁄d
(uöt32_à
RTC_Aœrm
);

805 
RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
);

806 
RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
);

807 
uöt32_t
 
RTC_GëWakeUpCou¡î
();

808 
Eº‹Sètus
 
RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

811 
RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
);

812 
uöt32_t
 
RTC_GëSt‹eO≥øti⁄
();

815 
RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
);

818 
Eº‹Sètus
 
RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
);

819 
Eº‹Sètus
 
RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

820 
RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

821 
RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
);

822 
Eº‹Sètus
 
RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

823 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

824 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
);

827 
RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

828 
RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

829 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
);

830 
uöt32_t
 
RTC_GëTimeSèmpSubSec⁄d
();

833 
RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
);

834 
RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

835 
RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
);

836 
RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
);

837 
RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
);

838 
RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

839 
RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

842 
RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
);

843 
uöt32_t
 
RTC_RódBackupRegi°î
(uöt32_à
RTC_BKP_DR
);

847 
RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
);

848 
RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
);

849 
RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
);

852 
Eº‹Sètus
 
RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
);

855 
RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

856 
FœgSètus
 
RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
);

857 
RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
);

858 
ITSètus
 
RTC_GëITSètus
(
uöt32_t
 
RTC_IT
);

859 
RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
);

861 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_sdio.h

24 #i‚de‡
__STM32F4xx_SDIO_H


25 
	#__STM32F4xx_SDIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

46 
uöt32_t
 
SDIO_ClockEdge
;

49 
uöt32_t
 
SDIO_ClockBy∑ss
;

53 
uöt32_t
 
SDIO_ClockPowîSave
;

57 
uöt32_t
 
SDIO_BusWide
;

60 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

63 
uöt8_t
 
SDIO_ClockDiv
;

66 } 
	tSDIO_InôTy≥Def
;

70 
uöt32_t
 
SDIO_Argumít
;

75 
uöt32_t
 
SDIO_CmdIndex
;

77 
uöt32_t
 
SDIO_Re•⁄£
;

80 
uöt32_t
 
SDIO_Waô
;

83 
uöt32_t
 
SDIO_CPSM
;

86 } 
	tSDIO_CmdInôTy≥Def
;

90 
uöt32_t
 
SDIO_D©aTimeOut
;

92 
uöt32_t
 
SDIO_D©aLígth
;

94 
uöt32_t
 
SDIO_D©aBlockSize
;

97 
uöt32_t
 
SDIO_Tøns„rDú
;

101 
uöt32_t
 
SDIO_Tøns„rMode
;

104 
uöt32_t
 
SDIO_DPSM
;

107 } 
	tSDIO_D©aInôTy≥Def
;

120 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

121 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

122 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
) || \

123 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

	)

132 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

133 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

134 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
) || \

135 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

	)

144 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

145 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

146 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
) || \

147 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

	)

156 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

157 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

158 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

159 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
) || \

160 ((
WIDE
Ë=
SDIO_BusWide_8b
))

	)

170 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

171 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

172 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
) || \

173 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

	)

182 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

183 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

184 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

194 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

195 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

196 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

197 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

198 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

199 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

200 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

201 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

202 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

203 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

204 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

205 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

206 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

207 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

208 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

209 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

210 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

211 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

212 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

213 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

214 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

215 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

216 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

217 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

218 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

227 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

236 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

237 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

238 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

239 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
) || \

240 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

241 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

	)

250 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

251 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

252 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

253 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
) || \

254 ((
WAIT
Ë=
SDIO_Waô_Píd
))

	)

263 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

264 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

265 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

274 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

275 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

276 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

277 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

278 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
) || \

279 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

	)

288 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

297 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

298 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

299 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

300 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

301 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

302 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

303 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

304 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

305 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

306 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

307 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

308 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

309 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

310 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

311 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

312 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
) || \

313 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

314 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

315 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

	)

335 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

336 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

337 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
) || \

338 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

	)

347 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

348 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

349 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
) || \

350 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

	)

359 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

360 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

361 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

370 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

371 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

372 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

373 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

374 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

375 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

376 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

377 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

378 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

379 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

380 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

381 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

382 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

383 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

384 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

385 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

386 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

387 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

388 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

389 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

390 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

391 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

392 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

393 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

394 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
) || \

395 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

396 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

397 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

398 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

	)

419 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

421 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
) || \

422 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

423 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

424 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

425 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

426 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

427 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

428 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

429 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

430 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

431 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

432 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

433 ((
IT
Ë=
SDIO_IT_TXACT
) || \

434 ((
IT
Ë=
SDIO_IT_RXACT
) || \

435 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

436 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

437 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

438 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

439 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

440 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

441 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

442 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

443 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

444 ((
IT
Ë=
SDIO_IT_CEATAEND
))

	)

446 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

456 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000000)

	)

457 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000001)

	)

458 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
) || \

459 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

	)

471 
SDIO_DeInô
();

474 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

475 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

476 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

477 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

478 
uöt32_t
 
SDIO_GëPowîSèã
();

481 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

482 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

483 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

484 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

487 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

488 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

489 
uöt32_t
 
SDIO_GëD©aCou¡î
();

490 
uöt32_t
 
SDIO_RódD©a
();

491 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

492 
uöt32_t
 
SDIO_GëFIFOCou¡
();

495 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

496 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

497 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

498 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

499 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

510 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

512 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

513 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

514 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

516 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h

24 #i‚de‡
__STM32F4xx_SPI_H


25 
	#__STM32F4xx_SPI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt16_t
 
SPI_Dúe˘i⁄
;

53 
uöt16_t
 
SPI_Mode
;

56 
uöt16_t
 
SPI_D©aSize
;

59 
uöt16_t
 
SPI_CPOL
;

62 
uöt16_t
 
SPI_CPHA
;

65 
uöt16_t
 
SPI_NSS
;

69 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

75 
uöt16_t
 
SPI_Fú°Bô
;

78 
uöt16_t
 
SPI_CRCPﬁynomül
;

79 }
	tSPI_InôTy≥Def
;

88 
uöt16_t
 
I2S_Mode
;

91 
uöt16_t
 
I2S_Sènd¨d
;

94 
uöt16_t
 
I2S_D©aF‹m©
;

97 
uöt16_t
 
I2S_MCLKOuçut
;

100 
uöt32_t
 
I2S_AudioFªq
;

103 
uöt16_t
 
I2S_CPOL
;

105 }
	tI2S_InôTy≥Def
;

113 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

114 ((
PERIPH
Ë=
SPI2
) || \

115 ((
PERIPH
Ë=
SPI3
))

	)

117 
	#IS_SPI_ALL_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

118 ((
PERIPH
Ë=
SPI2
) || \

119 ((
PERIPH
Ë=
SPI3
) || \

120 ((
PERIPH
Ë=
I2S2ext
) || \

121 ((
PERIPH
Ë=
I2S3ext
))

	)

123 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

124 ((
PERIPH
Ë=
SPI3
))

	)

126 
	#IS_SPI_23_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

127 ((
PERIPH
Ë=
SPI3
) || \

128 ((
PERIPH
Ë=
I2S2ext
) || \

129 ((
PERIPH
Ë=
I2S3ext
))

	)

131 
	#IS_I2S_EXT_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2S2ext
) || \

132 ((
PERIPH
Ë=
I2S2ext
))

	)

139 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

140 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

141 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

142 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

143 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
) || \

144 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

145 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

146 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

	)

155 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

156 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

157 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
) || \

158 ((
MODE
Ë=
SPI_Mode_Sœve
))

	)

167 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

168 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

169 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
) || \

170 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

	)

179 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

180 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

181 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
) || \

182 ((
CPOL
Ë=
SPI_CPOL_High
))

	)

191 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

192 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

193 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
) || \

194 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

	)

203 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

204 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

205 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
) || \

206 ((
NSS
Ë=
SPI_NSS_H¨d
))

	)

215 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

216 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

217 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

218 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

219 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

220 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

221 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

222 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

223 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
) || \

224 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

225 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

226 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

227 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

228 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

229 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

230 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

	)

239 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

240 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

241 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
) || \

242 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

	)

251 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

252 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

253 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

254 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

255 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
) || \

256 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

257 ((
MODE
Ë=
I2S_Mode_Ma°îTx
)|| \

258 ((
MODE
Ë=
I2S_Mode_Ma°îRx
))

	)

268 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

269 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

270 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

271 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

272 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

273 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
) || \

274 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

275 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

276 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

277 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

	)

286 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

287 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

288 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

289 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

290 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
) || \

291 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

292 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

293 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

	)

302 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

303 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

304 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
) || \

305 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

	)

314 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

315 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

316 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

317 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

318 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

319 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

320 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

321 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

322 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

323 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

325 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
) && \

326 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

327 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

	)

336 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

337 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

338 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
) || \

339 ((
CPOL
Ë=
I2S_CPOL_High
))

	)

348 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

349 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

350 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

359 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

360 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

361 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
) || \

362 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

	)

371 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

372 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

373 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

382 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

383 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

384 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
) || \

385 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

	)

394 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

395 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

396 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

397 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

398 
	#SPI_I2S_IT_TIFRFE
 ((
uöt8_t
)0x58)

	)

400 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
) || \

401 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

402 ((
IT
Ë=
SPI_I2S_IT_ERR
))

	)

404 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

405 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

406 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

408 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

410 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
)|| ((ITË=
SPI_I2S_IT_TXE
) || \

411 ((
IT
Ë=
SPI_IT_CRCERR
Ë|| ((ITË=
SPI_IT_MODF
) || \

412 ((
IT
Ë=
SPI_I2S_IT_OVR
Ë|| ((ITË=
I2S_IT_UDR
) ||\

413 ((
IT
Ë=
SPI_I2S_IT_TIFRFE
))

	)

422 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

423 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

424 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

425 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

426 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

427 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

428 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

429 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

430 
	#SPI_I2S_FLAG_TIFRFE
 ((
uöt16_t
)0x0100)

	)

432 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

433 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
) || \

434 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

435 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

436 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
)|| \

437 ((
FLAG
Ë=
SPI_I2S_FLAG_TIFRFE
))

	)

446 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

455 
	#SPI_DMAReq_Tx
 
SPI_I2S_DMAReq_Tx


	)

456 
	#SPI_DMAReq_Rx
 
SPI_I2S_DMAReq_Rx


	)

457 
	#SPI_IT_TXE
 
SPI_I2S_IT_TXE


	)

458 
	#SPI_IT_RXNE
 
SPI_I2S_IT_RXNE


	)

459 
	#SPI_IT_ERR
 
SPI_I2S_IT_ERR


	)

460 
	#SPI_IT_OVR
 
SPI_I2S_IT_OVR


	)

461 
	#SPI_FLAG_RXNE
 
SPI_I2S_FLAG_RXNE


	)

462 
	#SPI_FLAG_TXE
 
SPI_I2S_FLAG_TXE


	)

463 
	#SPI_FLAG_OVR
 
SPI_I2S_FLAG_OVR


	)

464 
	#SPI_FLAG_BSY
 
SPI_I2S_FLAG_BSY


	)

465 
	#SPI_DeInô
 
SPI_I2S_DeInô


	)

466 
	#SPI_ITC⁄fig
 
SPI_I2S_ITC⁄fig


	)

467 
	#SPI_DMACmd
 
SPI_I2S_DMACmd


	)

468 
	#SPI_SídD©a
 
SPI_I2S_SídD©a


	)

469 
	#SPI_Re˚iveD©a
 
SPI_I2S_Re˚iveD©a


	)

470 
	#SPI_GëFœgSètus
 
SPI_I2S_GëFœgSètus


	)

471 
	#SPI_CÀ¨Fœg
 
SPI_I2S_CÀ¨Fœg


	)

472 
	#SPI_GëITSètus
 
SPI_I2S_GëITSètus


	)

473 
	#SPI_CÀ¨ITPídögBô
 
SPI_I2S_CÀ¨ITPídögBô


	)

486 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

489 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

490 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

491 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

492 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

493 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

494 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

495 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

496 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

497 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

498 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

499 
SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

501 
I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

504 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

505 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

508 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

510 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

511 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

514 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

517 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

518 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

519 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

520 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

521 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

523 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_syscfg.h

24 #i‚de‡
__STM32F4xx_SYSCFG_H


25 
	#__STM32F4xx_SYSCFG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

52 
	#EXTI_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

53 
	#EXTI_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

54 
	#EXTI_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

55 
	#EXTI_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

56 
	#EXTI_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

57 
	#EXTI_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

58 
	#EXTI_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

59 
	#EXTI_P‹tSour˚GPIOH
 ((
uöt8_t
)0x07)

	)

60 
	#EXTI_P‹tSour˚GPIOI
 ((
uöt8_t
)0x08)

	)

62 
	#IS_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
EXTI_P‹tSour˚GPIOA
) || \

63 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOB
) || \

64 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOC
) || \

65 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOD
) || \

66 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOE
) || \

67 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOF
) || \

68 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOG
) || \

69 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOH
) || \

70 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOI
))

	)

79 
	#EXTI_PöSour˚0
 ((
uöt8_t
)0x00)

	)

80 
	#EXTI_PöSour˚1
 ((
uöt8_t
)0x01)

	)

81 
	#EXTI_PöSour˚2
 ((
uöt8_t
)0x02)

	)

82 
	#EXTI_PöSour˚3
 ((
uöt8_t
)0x03)

	)

83 
	#EXTI_PöSour˚4
 ((
uöt8_t
)0x04)

	)

84 
	#EXTI_PöSour˚5
 ((
uöt8_t
)0x05)

	)

85 
	#EXTI_PöSour˚6
 ((
uöt8_t
)0x06)

	)

86 
	#EXTI_PöSour˚7
 ((
uöt8_t
)0x07)

	)

87 
	#EXTI_PöSour˚8
 ((
uöt8_t
)0x08)

	)

88 
	#EXTI_PöSour˚9
 ((
uöt8_t
)0x09)

	)

89 
	#EXTI_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

90 
	#EXTI_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

91 
	#EXTI_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

92 
	#EXTI_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

93 
	#EXTI_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

94 
	#EXTI_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

95 
	#IS_EXTI_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
EXTI_PöSour˚0
) || \

96 ((
PINSOURCE
Ë=
EXTI_PöSour˚1
) || \

97 ((
PINSOURCE
Ë=
EXTI_PöSour˚2
) || \

98 ((
PINSOURCE
Ë=
EXTI_PöSour˚3
) || \

99 ((
PINSOURCE
Ë=
EXTI_PöSour˚4
) || \

100 ((
PINSOURCE
Ë=
EXTI_PöSour˚5
) || \

101 ((
PINSOURCE
Ë=
EXTI_PöSour˚6
) || \

102 ((
PINSOURCE
Ë=
EXTI_PöSour˚7
) || \

103 ((
PINSOURCE
Ë=
EXTI_PöSour˚8
) || \

104 ((
PINSOURCE
Ë=
EXTI_PöSour˚9
) || \

105 ((
PINSOURCE
Ë=
EXTI_PöSour˚10
) || \

106 ((
PINSOURCE
Ë=
EXTI_PöSour˚11
) || \

107 ((
PINSOURCE
Ë=
EXTI_PöSour˚12
) || \

108 ((
PINSOURCE
Ë=
EXTI_PöSour˚13
) || \

109 ((
PINSOURCE
Ë=
EXTI_PöSour˚14
) || \

110 ((
PINSOURCE
Ë=
EXTI_PöSour˚15
))

	)

119 
	#SYSCFG_Mem‹yRem≠_Fœsh
 ((
uöt8_t
)0x00)

	)

120 
	#SYSCFG_Mem‹yRem≠_Sy°emFœsh
 ((
uöt8_t
)0x01)

	)

121 
	#SYSCFG_Mem‹yRem≠_FSMC
 ((
uöt8_t
)0x02)

	)

122 
	#SYSCFG_Mem‹yRem≠_SRAM
 ((
uöt8_t
)0x03)

	)

124 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

125 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

126 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

127 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FSMC
))

	)

136 
	#SYSCFG_ETH_MedüI¡îÁ˚_MII
 ((
uöt32_t
)0x00000000)

	)

137 
	#SYSCFG_ETH_MedüI¡îÁ˚_RMII
 ((
uöt32_t
)0x00000001)

	)

139 
	#IS_SYSCFG_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
SYSCFG_ETH_MedüI¡îÁ˚_MII
) || \

140 ((
INTERFACE
Ë=
SYSCFG_ETH_MedüI¡îÁ˚_RMII
))

	)

152 
SYSCFG_DeInô
();

153 
SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
);

154 
SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
);

155 
SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
);

156 
SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

157 
FœgSètus
 
SYSCFG_GëCom≥nßti⁄CñlSètus
();

159 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h

24 #i‚de‡
__STM32F4xx_TIM_H


25 
	#__STM32F4xx_TIM_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

51 
uöt16_t
 
TIM_PªsˇÀr
;

54 
uöt16_t
 
TIM_Cou¡îMode
;

57 
uöt32_t
 
TIM_Pîiod
;

61 
uöt16_t
 
TIM_ClockDivisi⁄
;

64 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

72 } 
	tTIM_TimeBa£InôTy≥Def
;

80 
uöt16_t
 
TIM_OCMode
;

83 
uöt16_t
 
TIM_OuçutSèã
;

86 
uöt16_t
 
TIM_OuçutNSèã
;

90 
uöt32_t
 
TIM_Pul£
;

93 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

96 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

100 
uöt16_t
 
TIM_OCIdÀSèã
;

104 
uöt16_t
 
TIM_OCNIdÀSèã
;

107 } 
	tTIM_OCInôTy≥Def
;

116 
uöt16_t
 
TIM_Ch™√l
;

119 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

122 
uöt16_t
 
TIM_ICSñe˘i⁄
;

125 
uöt16_t
 
TIM_ICPªsˇÀr
;

128 
uöt16_t
 
TIM_ICFûãr
;

130 } 
	tTIM_ICInôTy≥Def
;

140 
uöt16_t
 
TIM_OSSRSèã
;

143 
uöt16_t
 
TIM_OSSISèã
;

146 
uöt16_t
 
TIM_LOCKLevñ
;

149 
uöt16_t
 
TIM_DódTime
;

153 
uöt16_t
 
TIM_Bªak
;

156 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

159 
uöt16_t
 
TIM_Autom©icOuçut
;

161 } 
	tTIM_BDTRInôTy≥Def
;

169 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

170 ((
PERIPH
Ë=
TIM2
) || \

171 ((
PERIPH
Ë=
TIM3
) || \

172 ((
PERIPH
Ë=
TIM4
) || \

173 ((
PERIPH
Ë=
TIM5
) || \

174 ((
PERIPH
Ë=
TIM6
) || \

175 ((
PERIPH
Ë=
TIM7
) || \

176 ((
PERIPH
Ë=
TIM8
) || \

177 ((
PERIPH
Ë=
TIM9
) || \

178 ((
PERIPH
Ë=
TIM10
) || \

179 ((
PERIPH
Ë=
TIM11
) || \

180 ((
PERIPH
Ë=
TIM12
) || \

181 (((
PERIPH
Ë=
TIM13
) || \

182 ((
PERIPH
Ë=
TIM14
)))

	)

184 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

185 ((
PERIPH
Ë=
TIM2
) || \

186 ((
PERIPH
Ë=
TIM3
) || \

187 ((
PERIPH
Ë=
TIM4
) || \

188 ((
PERIPH
Ë=
TIM5
) || \

189 ((
PERIPH
Ë=
TIM8
) || \

190 ((
PERIPH
Ë=
TIM9
) || \

191 ((
PERIPH
Ë=
TIM10
) || \

192 ((
PERIPH
Ë=
TIM11
) || \

193 ((
PERIPH
Ë=
TIM12
) || \

194 ((
PERIPH
Ë=
TIM13
) || \

195 ((
PERIPH
Ë=
TIM14
))

	)

198 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

199 ((
PERIPH
Ë=
TIM2
) || \

200 ((
PERIPH
Ë=
TIM3
) || \

201 ((
PERIPH
Ë=
TIM4
) || \

202 ((
PERIPH
Ë=
TIM5
) || \

203 ((
PERIPH
Ë=
TIM8
) || \

204 ((
PERIPH
Ë=
TIM9
) || \

205 ((
PERIPH
Ë=
TIM12
))

	)

207 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

208 ((
PERIPH
Ë=
TIM2
) || \

209 ((
PERIPH
Ë=
TIM3
) || \

210 ((
PERIPH
Ë=
TIM4
) || \

211 ((
PERIPH
Ë=
TIM5
) || \

212 ((
PERIPH
Ë=
TIM8
))

	)

214 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

215 ((
PERIPH
Ë=
TIM8
))

	)

217 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

218 ((
PERIPH
Ë=
TIM2
) || \

219 ((
PERIPH
Ë=
TIM3
) || \

220 ((
PERIPH
Ë=
TIM4
) || \

221 ((
PERIPH
Ë=
TIM5
) || \

222 ((
PERIPH
Ë=
TIM6
) || \

223 ((
PERIPH
Ë=
TIM7
) || \

224 ((
PERIPH
Ë=
TIM8
))

	)

226 
	#IS_TIM_LIST6_PERIPH
(
TIMx
)(((TIMxË=
TIM2
) || \

227 ((
TIMx
Ë=
TIM5
) || \

228 ((
TIMx
Ë=
TIM11
))

	)

234 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

235 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

236 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

237 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

238 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

239 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

240 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

241 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

242 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

243 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

244 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

245 ((
MODE
Ë=
TIM_OCMode_PWM2
))

	)

246 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

247 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

248 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

249 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

250 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

251 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

252 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

253 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

262 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

263 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

264 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
) || \

265 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

	)

274 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

275 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

276 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

277 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

279 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

280 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

281 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

282 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

	)

284 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

285 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

	)

286 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

287 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

288 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

	)

297 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

298 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

299 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

300 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
) || \

301 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

302 ((
DIV
Ë=
TIM_CKD_DIV4
))

	)

311 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

312 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

313 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

314 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

315 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

316 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
) || \

317 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

318 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

319 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

320 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

	)

329 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

330 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

331 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
) || \

332 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

	)

341 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

342 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

343 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
) || \

344 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

	)

353 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

354 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

355 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
) || \

356 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

	)

365 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

366 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

367 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
) || \

368 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

	)

377 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

378 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

379 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
) || \

380 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

	)

389 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

390 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

391 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
) || \

392 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

	)

401 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

402 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

403 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
) || \

404 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

	)

413 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

414 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

415 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
) || \

416 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

	)

425 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

426 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

427 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
) || \

428 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

	)

437 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

438 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

439 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

440 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

441 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
) || \

442 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

443 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

444 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

	)

453 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

454 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

455 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
) || \

456 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

	)

465 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

466 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

467 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
) || \

468 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

	)

477 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

478 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

479 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
) || \

480 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

	)

489 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

490 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

491 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
) || \

492 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

	)

501 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

502 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

503 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

504 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

505 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

506 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

	)

515 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

517 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

519 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

520 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
) || \

521 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

522 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

	)

531 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

532 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

533 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

534 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

535 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

536 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

537 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

538 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

547 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

548 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

549 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

550 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

551 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

552 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

553 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

554 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

555 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

557 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
) || \

558 ((
IT
Ë=
TIM_IT_CC1
) || \

559 ((
IT
Ë=
TIM_IT_CC2
) || \

560 ((
IT
Ë=
TIM_IT_CC3
) || \

561 ((
IT
Ë=
TIM_IT_CC4
) || \

562 ((
IT
Ë=
TIM_IT_COM
) || \

563 ((
IT
Ë=
TIM_IT_Triggî
) || \

564 ((
IT
Ë=
TIM_IT_Bªak
))

	)

573 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

574 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

575 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

576 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

577 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

578 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

579 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

580 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

581 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

582 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

583 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

584 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

585 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

586 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

587 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

588 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

589 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

590 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

591 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

592 
	#TIM_DMABa£_OR
 ((
uöt16_t
)0x0013)

	)

593 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
) || \

594 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

595 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

596 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

597 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

598 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

599 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

600 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

601 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

602 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

603 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

604 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

605 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

606 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

607 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

608 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

609 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

610 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

611 ((
BASE
Ë=
TIM_DMABa£_DCR
) || \

612 ((
BASE
Ë=
TIM_DMABa£_OR
))

	)

621 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

622 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

623 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

624 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

625 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

626 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

627 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

628 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

629 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

630 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

631 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

632 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

633 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

634 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

635 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

636 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

637 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

638 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

639 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
) || \

640 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

641 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

642 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

643 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

644 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

645 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

646 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

647 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

648 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

649 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

650 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

651 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

652 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

653 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

654 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

655 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

656 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

	)

665 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

666 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

667 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

668 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

669 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

670 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

671 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

672 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

682 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

683 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

684 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

685 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

686 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
) || \

687 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

688 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

689 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

	)

698 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

699 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

700 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

701 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

702 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

703 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

704 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

705 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

706 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

707 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

708 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

709 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

710 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

711 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

712 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

713 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

714 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

715 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

716 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

717 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

726 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

727 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

728 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

737 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

738 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

739 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
) || \

740 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

	)

749 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

750 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

751 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
) || \

752 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

	)

761 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

762 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

763 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

764 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

773 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

774 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

775 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

776 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
) || \

777 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

778 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

	)

788 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

789 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

790 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

791 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

792 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

793 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

794 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

795 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

796 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

806 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

809 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

810 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
) || \

811 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

	)

820 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

821 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

822 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
) || \

823 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

	)

832 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

833 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

834 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
) || \

835 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

	)

845 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

846 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

847 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
) || \

848 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

	)

857 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

858 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

859 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

860 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

861 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

862 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

863 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

864 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

865 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
) || \

866 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

867 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

868 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

869 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

870 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

871 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

872 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

	)

881 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

882 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

883 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

884 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

885 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
) || \

886 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

887 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

888 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

	)

897 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

898 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

899 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
) || \

900 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

	)

908 
	#TIM2_TIM8_TRGO
 ((
uöt16_t
)0x0000)

	)

909 
	#TIM2_ETH_PTP
 ((
uöt16_t
)0x0400)

	)

910 
	#TIM2_USBFS_SOF
 ((
uöt16_t
)0x0800)

	)

911 
	#TIM2_USBHS_SOF
 ((
uöt16_t
)0x0C00)

	)

913 
	#TIM5_GPIO
 ((
uöt16_t
)0x0000)

	)

914 
	#TIM5_LSI
 ((
uöt16_t
)0x0040)

	)

915 
	#TIM5_LSE
 ((
uöt16_t
)0x0080)

	)

916 
	#TIM5_RTC
 ((
uöt16_t
)0x00C0)

	)

918 
	#TIM11_GPIO
 ((
uöt16_t
)0x0000)

	)

919 
	#TIM11_HSE
 ((
uöt16_t
)0x0002)

	)

921 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM2_TIM8_TRGO
)||\

922 ((
TIM_REMAP
Ë=
TIM2_ETH_PTP
)||\

923 ((
TIM_REMAP
Ë=
TIM2_USBFS_SOF
)||\

924 ((
TIM_REMAP
Ë=
TIM2_USBHS_SOF
)||\

925 ((
TIM_REMAP
Ë=
TIM5_GPIO
)||\

926 ((
TIM_REMAP
Ë=
TIM5_LSI
)||\

927 ((
TIM_REMAP
Ë=
TIM5_LSE
)||\

928 ((
TIM_REMAP
Ë=
TIM5_RTC
)||\

929 ((
TIM_REMAP
Ë=
TIM11_GPIO
)||\

930 ((
TIM_REMAP
Ë=
TIM11_HSE
))

	)

939 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

940 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

941 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

942 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

943 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

944 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

945 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

946 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

947 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

948 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

949 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

950 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

951 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
) || \

952 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

953 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

954 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

955 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

956 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

957 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

958 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

959 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

960 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

961 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

962 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

	)

972 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

981 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

990 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

991 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

992 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

993 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

994 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

995 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

996 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

997 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

998 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

999 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1000 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1001 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1002 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1003 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1004 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1005 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1006 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1007 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1020 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1021 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1022 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1023 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1024 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1025 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
);

1026 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
);

1027 
uöt32_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1028 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1029 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1030 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1031 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1032 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1033 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1034 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1037 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1038 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1039 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1040 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1041 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1042 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1043 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
);

1044 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
);

1045 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
);

1046 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
);

1047 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1048 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1049 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1050 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1051 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1052 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1053 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1054 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1055 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1056 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1057 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1058 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1059 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1060 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1061 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1062 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1063 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1064 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1065 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1066 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1067 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1068 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1069 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1070 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1071 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1074 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1075 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1076 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1077 
uöt32_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1078 
uöt32_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1079 
uöt32_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1080 
uöt32_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1081 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1082 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1083 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1084 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1087 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1088 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1089 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1090 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1091 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1094 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1095 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1096 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1097 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1098 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1099 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1100 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1101 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1102 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1105 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1106 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1107 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1108 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1109 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1110 
uöt16_t
 
ExtTRGFûãr
);

1111 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1112 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1115 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1116 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1117 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1118 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1119 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1120 
uöt16_t
 
ExtTRGFûãr
);

1123 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1124 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1125 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1128 
TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
);

1130 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h

24 #i‚de‡
__STM32F4xx_USART_H


25 
	#__STM32F4xx_USART_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt32_t
 
USART_BaudR©e
;

56 
uöt16_t
 
USART_W‹dLígth
;

59 
uöt16_t
 
USART_St›Bôs
;

62 
uöt16_t
 
USART_P¨ôy
;

69 
uöt16_t
 
USART_Mode
;

72 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

75 } 
	tUSART_InôTy≥Def
;

84 
uöt16_t
 
USART_Clock
;

87 
uöt16_t
 
USART_CPOL
;

90 
uöt16_t
 
USART_CPHA
;

93 
uöt16_t
 
USART_La°Bô
;

96 } 
	tUSART_ClockInôTy≥Def
;

104 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

105 ((
PERIPH
Ë=
USART2
) || \

106 ((
PERIPH
Ë=
USART3
) || \

107 ((
PERIPH
Ë=
UART4
) || \

108 ((
PERIPH
Ë=
UART5
) || \

109 ((
PERIPH
Ë=
USART6
))

	)

111 
	#IS_USART_1236_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

112 ((
PERIPH
Ë=
USART2
) || \

113 ((
PERIPH
Ë=
USART3
) || \

114 ((
PERIPH
Ë=
USART6
))

	)

120 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

121 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

123 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
) || \

124 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

	)

133 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

134 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

135 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

136 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

137 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
) || \

138 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

139 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

140 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

	)

149 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

150 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

151 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

152 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
) || \

153 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

154 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

	)

163 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

164 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

165 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

173 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

174 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

175 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

176 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

177 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

178 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

179 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

180 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

181 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

	)

189 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

190 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

191 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
) || \

192 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

	)

201 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

202 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

203 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

213 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

214 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

215 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

225 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

226 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

227 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
) || \

228 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

	)

237 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

238 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

239 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

240 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

241 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

242 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

243 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

244 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

245 
	#USART_IT_ORE
 ((
uöt16_t
)0x0360)

	)

246 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

247 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

248 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

249 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

250 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

251 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

	)

252 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

253 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

254 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

255 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

256 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

	)

257 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

258 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

	)

267 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

268 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

269 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

279 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

280 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

281 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
) || \

282 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

	)

291 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

292 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

293 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
) \

294 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

295 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

	)

304 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

305 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

306 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
) || \

307 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

	)

316 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

317 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

318 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

319 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

320 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

321 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

322 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

323 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

324 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

325 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

326 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
) || \

327 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

328 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

329 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

330 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

	)

332 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

334 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 7500001))

	)

335 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

336 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

350 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

353 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

354 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

355 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

356 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

357 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

358 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

359 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

360 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

363 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

364 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

367 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

368 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

369 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

372 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

373 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

374 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

377 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

380 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

381 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

382 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

385 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

386 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

389 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

392 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

393 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

394 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

395 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

396 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

398 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_wwdg.h

24 #i‚de‡
__STM32F4xx_WWDG_H


25 
	#__STM32F4xx_WWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

53 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

54 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

55 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

56 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

57 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
) || \

58 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

59 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

60 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

	)

61 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

62 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

76 
WWDG_DeInô
();

79 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

80 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

81 
WWDG_E«bÀIT
();

82 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

85 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

88 
FœgSètus
 
WWDG_GëFœgSètus
();

89 
WWDG_CÀ¨Fœg
();

91 #ifde‡
__˝lu•lus


	@libstm/STM32F4xx_StdPeriph_Driver/src/misc.c

70 
	~"misc.h
"

83 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

112 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

115 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

118 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

119 
	}
}

130 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

132 
uöt8_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

135 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

136 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

137 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

139 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

142 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

143 
tmµª
 = (0x4 - 
tmµri‹ôy
);

144 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

146 
tmµri‹ôy
 = 
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

147 
tmµri‹ôy
 |(
uöt8_t
)(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
);

149 
tmµri‹ôy
 =Åmppriority << 0x04;

151 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

154 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

155 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

160 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

161 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

163 
	}
}

174 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

177 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

178 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

180 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

181 
	}
}

193 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

196 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

197 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

199 i‡(
NewSèã
 !
DISABLE
)

201 
SCB
->
SCR
 |
LowPowîMode
;

205 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

207 
	}
}

217 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

220 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

221 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

223 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

227 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

229 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c

98 
	~"°m32f4xx_adc.h
"

99 
	~"°m32f4xx_rcc.h
"

114 
	#CR1_DISCNUM_RESET
 ((
uöt32_t
)0xFFFF1FFF)

	)

117 
	#CR1_AWDCH_RESET
 ((
uöt32_t
)0xFFFFFFE0)

	)

120 
	#CR1_AWDMode_RESET
 ((
uöt32_t
)0xFF3FFDFF)

	)

123 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0xFCFFFEFF)

	)

126 
	#CR2_EXTEN_RESET
 ((
uöt32_t
)0xCFFFFFFF)

	)

129 
	#CR2_JEXTEN_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

132 
	#CR2_JEXTSEL_RESET
 ((
uöt32_t
)0xFFF0FFFF)

	)

135 
	#CR2_CLEAR_MASK
 ((
uöt32_t
)0xC0FFF7FD)

	)

138 
	#SQR3_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

139 
	#SQR2_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

140 
	#SQR1_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

143 
	#SQR1_L_RESET
 ((
uöt32_t
)0xFF0FFFFF)

	)

146 
	#JSQR_JSQ_SET
 ((
uöt32_t
)0x0000001F)

	)

149 
	#JSQR_JL_SET
 ((
uöt32_t
)0x00300000)

	)

150 
	#JSQR_JL_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

153 
	#SMPR1_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

154 
	#SMPR2_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

157 
	#JDR_OFFSET
 ((
uöt8_t
)0x28)

	)

160 
	#CDR_ADDRESS
 ((
uöt32_t
)0x40012308)

	)

163 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0xFFFC30E0)

	)

206 
	$ADC_DeInô
()

209 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
ENABLE
);

212 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
DISABLE
);

213 
	}
}

228 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

230 
uöt32_t
 
tm¥eg1
 = 0;

231 
uöt8_t
 
tm¥eg2
 = 0;

233 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

234 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
));

235 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

236 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

237 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
));

238 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

239 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

240 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
));

244 
tm¥eg1
 = 
ADCx
->
CR1
;

247 
tm¥eg1
 &
CR1_CLEAR_MASK
;

252 
tm¥eg1
 |(
uöt32_t
)(((uöt32_t)
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 << 8) | \

253 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
);

255 
ADCx
->
CR1
 = 
tm¥eg1
;

258 
tm¥eg1
 = 
ADCx
->
CR2
;

261 
tm¥eg1
 &
CR2_CLEAR_MASK
;

269 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | \

270 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 |

271 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 | \

272 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

275 
ADCx
->
CR2
 = 
tm¥eg1
;

278 
tm¥eg1
 = 
ADCx
->
SQR1
;

281 
tm¥eg1
 &
SQR1_L_RESET
;

285 
tm¥eg2
 |(
uöt8_t
)(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 - (uint8_t)1);

286 
tm¥eg1
 |((
uöt32_t
)
tm¥eg2
 << 20);

289 
ADCx
->
SQR1
 = 
tm¥eg1
;

290 
	}
}

303 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

306 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
 = 
ADC_Resﬁuti⁄_12b
;

309 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

312 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

315 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 = 
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
;

318 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

321 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

324 
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 = 1;

325 
	}
}

334 
	$ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

336 
uöt32_t
 
tm¥eg1
 = 0;

338 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
));

339 
	`as£π_∑øm
(
	`IS_ADC_PRESCALER
(
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
));

340 
	`as£π_∑øm
(
	`IS_ADC_DMA_ACCESS_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
));

341 
	`as£π_∑øm
(
	`IS_ADC_SAMPLING_DELAY
(
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
));

344 
tm¥eg1
 = 
ADC
->
CCR
;

347 
tm¥eg1
 &
CR_CLEAR_MASK
;

355 
tm¥eg1
 |(
uöt32_t
)(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 |

356 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 |

357 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 |

358 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
);

361 
ADC
->
CCR
 = 
tm¥eg1
;

362 
	}
}

370 
	$ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

373 
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

376 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 = 
ADC_PªsˇÀr_Div2
;

379 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 = 
ADC_DMAAc˚ssMode_DißbÀd
;

382 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
 = 
ADC_TwoSam∂ögDñay_5Cy˛es
;

383 
	}
}

392 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

395 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

396 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

397 i‡(
NewSèã
 !
DISABLE
)

400 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_ADON
;

405 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_ADON
);

407 
	}
}

450 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

452 
uöt32_t
 
tm¥eg
 = 0;

454 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

455 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

458 
tm¥eg
 = 
ADCx
->
CR1
;

461 
tm¥eg
 &
CR1_AWDMode_RESET
;

464 
tm¥eg
 |
ADC_A«logW©chdog
;

467 
ADCx
->
CR1
 = 
tm¥eg
;

468 
	}
}

479 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

480 
uöt16_t
 
LowThªshﬁd
)

483 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

484 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

485 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

488 
ADCx
->
HTR
 = 
HighThªshﬁd
;

491 
ADCx
->
LTR
 = 
LowThªshﬁd
;

492 
	}
}

520 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

522 
uöt32_t
 
tm¥eg
 = 0;

524 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

525 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

528 
tm¥eg
 = 
ADCx
->
CR1
;

531 
tm¥eg
 &
CR1_AWDCH_RESET
;

534 
tm¥eg
 |
ADC_Ch™√l
;

537 
ADCx
->
CR1
 = 
tm¥eg
;

538 
	}
}

585 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

588 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

589 i‡(
NewSèã
 !
DISABLE
)

592 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_TSVREFE
;

597 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_TSVREFE
);

599 
	}
}

607 
	$ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

610 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

611 i‡(
NewSèã
 !
DISABLE
)

614 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_VBATE
;

619 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_VBATE
);

621 
	}
}

708 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

710 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

712 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

713 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

714 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

715 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

718 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

721 
tm¥eg1
 = 
ADCx
->
SMPR1
;

724 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 10));

727 
tm¥eg1
 &~
tm¥eg2
;

730 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

733 
tm¥eg1
 |
tm¥eg2
;

736 
ADCx
->
SMPR1
 = 
tm¥eg1
;

741 
tm¥eg1
 = 
ADCx
->
SMPR2
;

744 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

747 
tm¥eg1
 &~
tm¥eg2
;

750 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

753 
tm¥eg1
 |
tm¥eg2
;

756 
ADCx
->
SMPR2
 = 
tm¥eg1
;

759 i‡(
R™k
 < 7)

762 
tm¥eg1
 = 
ADCx
->
SQR3
;

765 
tm¥eg2
 = 
SQR3_SQ_SET
 << (5 * (
R™k
 - 1));

768 
tm¥eg1
 &~
tm¥eg2
;

771 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

774 
tm¥eg1
 |
tm¥eg2
;

777 
ADCx
->
SQR3
 = 
tm¥eg1
;

780 i‡(
R™k
 < 13)

783 
tm¥eg1
 = 
ADCx
->
SQR2
;

786 
tm¥eg2
 = 
SQR2_SQ_SET
 << (5 * (
R™k
 - 7));

789 
tm¥eg1
 &~
tm¥eg2
;

792 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

795 
tm¥eg1
 |
tm¥eg2
;

798 
ADCx
->
SQR2
 = 
tm¥eg1
;

804 
tm¥eg1
 = 
ADCx
->
SQR1
;

807 
tm¥eg2
 = 
SQR1_SQ_SET
 << (5 * (
R™k
 - 13));

810 
tm¥eg1
 &~
tm¥eg2
;

813 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

816 
tm¥eg1
 |
tm¥eg2
;

819 
ADCx
->
SQR1
 = 
tm¥eg1
;

821 
	}
}

828 
	$ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

831 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

834 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

835 
	}
}

842 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

844 
FœgSètus
 
bô°©us
 = 
RESET
;

846 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

849 i‡((
ADCx
->
CR2
 & 
ADC_CR2_JSWSTART
Ë!(
uöt32_t
)
RESET
)

852 
bô°©us
 = 
SET
;

857 
bô°©us
 = 
RESET
;

861  
bô°©us
;

862 
	}
}

872 
	$ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

875 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

876 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

878 i‡(
NewSèã
 !
DISABLE
)

881 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_EOCS
;

886 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_EOCS
);

888 
	}
}

897 
	$ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

900 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

901 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

903 i‡(
NewSèã
 !
DISABLE
)

906 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_CONT
;

911 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_CONT
);

913 
	}
}

923 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

925 
uöt32_t
 
tm¥eg1
 = 0;

926 
uöt32_t
 
tm¥eg2
 = 0;

929 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

930 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

933 
tm¥eg1
 = 
ADCx
->
CR1
;

936 
tm¥eg1
 &
CR1_DISCNUM_RESET
;

939 
tm¥eg2
 = 
Numbî
 - 1;

940 
tm¥eg1
 |
tm¥eg2
 << 13;

943 
ADCx
->
CR1
 = 
tm¥eg1
;

944 
	}
}

955 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

958 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

959 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

961 i‡(
NewSèã
 !
DISABLE
)

964 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_DISCEN
;

969 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_DISCEN
);

971 
	}
}

978 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

981 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

984  (
uöt16_t
Ë
ADCx
->
DR
;

985 
	}
}

999 
uöt32_t
 
	$ADC_GëMu…iModeC⁄vîsi⁄VÆue
()

1002  (*(
__IO
 
uöt32_t
 *Ë
CDR_ADDRESS
);

1003 
	}
}

1048 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1051 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1052 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1053 i‡(
NewSèã
 !
DISABLE
)

1056 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DMA
;

1061 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DMA
);

1063 
	}
}

1072 
	$ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1075 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1076 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1077 i‡(
NewSèã
 !
DISABLE
)

1080 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DDS
;

1085 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DDS
);

1087 
	}
}

1099 
	$ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1103 i‡(
NewSèã
 !
DISABLE
)

1106 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_DDS
;

1111 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_DDS
);

1113 
	}
}

1186 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

1188 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

1190 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1191 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1192 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

1193 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

1195 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

1198 
tm¥eg1
 = 
ADCx
->
SMPR1
;

1200 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3*(
ADC_Ch™√l
 - 10));

1202 
tm¥eg1
 &~
tm¥eg2
;

1204 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

1206 
tm¥eg1
 |
tm¥eg2
;

1208 
ADCx
->
SMPR1
 = 
tm¥eg1
;

1213 
tm¥eg1
 = 
ADCx
->
SMPR2
;

1215 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

1217 
tm¥eg1
 &~
tm¥eg2
;

1219 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

1221 
tm¥eg1
 |
tm¥eg2
;

1223 
ADCx
->
SMPR2
 = 
tm¥eg1
;

1227 
tm¥eg1
 = 
ADCx
->
JSQR
;

1229 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_SET
)>> 20;

1231 
tm¥eg2
 = 
JSQR_JSQ_SET
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1233 
tm¥eg1
 &~
tm¥eg2
;

1235 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1237 
tm¥eg1
 |
tm¥eg2
;

1239 
ADCx
->
JSQR
 = 
tm¥eg1
;

1240 
	}
}

1249 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

1251 
uöt32_t
 
tm¥eg1
 = 0;

1252 
uöt32_t
 
tm¥eg2
 = 0;

1254 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1255 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1258 
tm¥eg1
 = 
ADCx
->
JSQR
;

1261 
tm¥eg1
 &
JSQR_JL_RESET
;

1264 
tm¥eg2
 = 
Lígth
 - 1;

1265 
tm¥eg1
 |
tm¥eg2
 << 20;

1268 
ADCx
->
JSQR
 = 
tm¥eg1
;

1269 
	}
}

1284 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1286 
__IO
 
uöt32_t
 
tmp
 = 0;

1288 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1289 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1290 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1292 
tmp
 = (
uöt32_t
)
ADCx
;

1293 
tmp
 +
ADC_Inje˘edCh™√l
;

1296 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1297 
	}
}

1322 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

1324 
uöt32_t
 
tm¥eg
 = 0;

1326 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1327 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

1330 
tm¥eg
 = 
ADCx
->
CR2
;

1333 
tm¥eg
 &
CR2_JEXTSEL_RESET
;

1336 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

1339 
ADCx
->
CR2
 = 
tm¥eg
;

1340 
	}
}

1356 
	$ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
)

1358 
uöt32_t
 
tm¥eg
 = 0;

1360 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1361 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG_EDGE
(
ADC_Exã∫ÆTrigInjecC⁄vEdge
));

1363 
tm¥eg
 = 
ADCx
->
CR2
;

1365 
tm¥eg
 &
CR2_JEXTEN_RESET
;

1367 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄vEdge
;

1369 
ADCx
->
CR2
 = 
tm¥eg
;

1370 
	}
}

1377 
	$ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

1380 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1382 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_JSWSTART
;

1383 
	}
}

1390 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

1392 
FœgSètus
 
bô°©us
 = 
RESET
;

1394 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1397 i‡((
ADCx
->
CR2
 & 
ADC_CR2_JSWSTART
Ë!(
uöt32_t
)
RESET
)

1400 
bô°©us
 = 
SET
;

1405 
bô°©us
 = 
RESET
;

1408  
bô°©us
;

1409 
	}
}

1419 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1422 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1423 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1424 i‡(
NewSèã
 !
DISABLE
)

1427 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JAUTO
;

1432 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JAUTO
);

1434 
	}
}

1445 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1448 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1449 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1450 i‡(
NewSèã
 !
DISABLE
)

1453 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JDISCEN
;

1458 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JDISCEN
);

1460 
	}
}

1473 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1475 
__IO
 
uöt32_t
 
tmp
 = 0;

1478 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1479 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1481 
tmp
 = (
uöt32_t
)
ADCx
;

1482 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_OFFSET
;

1485  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1486 
	}
}

1581 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1583 
uöt32_t
 
ômask
 = 0;

1585 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1586 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1587 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1590 
ômask
 = (
uöt8_t
)
ADC_IT
;

1591 
ômask
 = (
uöt32_t
)0x01 << itmask;

1593 i‡(
NewSèã
 !
DISABLE
)

1596 
ADCx
->
CR1
 |
ômask
;

1601 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

1603 
	}
}

1618 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1620 
FœgSètus
 
bô°©us
 = 
RESET
;

1622 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1623 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1626 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1629 
bô°©us
 = 
SET
;

1634 
bô°©us
 = 
RESET
;

1637  
bô°©us
;

1638 
	}
}

1653 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1656 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1657 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1660 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1661 
	}
}

1674 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1676 
ITSètus
 
bô°©us
 = 
RESET
;

1677 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1680 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1681 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1684 
ômask
 = 
ADC_IT
 >> 8;

1687 
íabÀ°©us
 = (
ADCx
->
CR1
 & ((
uöt32_t
)0x01 << (
uöt8_t
)
ADC_IT
)) ;

1690 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1693 
bô°©us
 = 
SET
;

1698 
bô°©us
 = 
RESET
;

1701  
bô°©us
;

1702 
	}
}

1715 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1717 
uöt8_t
 
ômask
 = 0;

1719 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1720 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1722 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1724 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1725 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c

80 
	~"°m32f4xx_ˇn.h
"

81 
	~"°m32f4xx_rcc.h
"

95 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

98 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

101 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

104 
	#INAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

106 
	#SLAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

109 
	#CAN_FLAGS_TSR
 ((
uöt32_t
)0x08000000)

	)

111 
	#CAN_FLAGS_RF1R
 ((
uöt32_t
)0x04000000)

	)

113 
	#CAN_FLAGS_RF0R
 ((
uöt32_t
)0x02000000)

	)

115 
	#CAN_FLAGS_MSR
 ((
uöt32_t
)0x01000000)

	)

117 
	#CAN_FLAGS_ESR
 ((
uöt32_t
)0x00F00000)

	)

120 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

121 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

122 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

124 
	#CAN_MODE_MASK
 ((
uöt32_t
Ë0x00000003)

	)

130 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

162 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

165 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

167 i‡(
CANx
 =
CAN1
)

170 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

172 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

177 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

179 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

181 
	}
}

192 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

194 
uöt8_t
 
InôSètus
 = 
CAN_InôSètus_Faûed
;

195 
uöt32_t
 
waô_ack
 = 0x00000000;

197 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

198 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

199 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

200 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

201 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

202 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

203 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

204 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

205 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

206 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

207 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

208 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

211 
CANx
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

214 
CANx
->
MCR
 |
CAN_MCR_INRQ
 ;

217 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë!CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

219 
waô_ack
++;

223 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

225 
InôSètus
 = 
CAN_InôSètus_Faûed
;

230 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

232 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

236 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

240 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

242 
CANx
->
MCR
 |
CAN_MCR_ABOM
;

246 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

250 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

252 
CANx
->
MCR
 |
CAN_MCR_AWUM
;

256 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

260 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

262 
CANx
->
MCR
 |
CAN_MCR_NART
;

266 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

270 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

272 
CANx
->
MCR
 |
CAN_MCR_RFLM
;

276 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

280 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

282 
CANx
->
MCR
 |
CAN_MCR_TXFP
;

286 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

290 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30) | \

291 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_SJW
 << 24) | \

292 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16) | \

293 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS2
 << 20) | \

294 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

297 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

300 
waô_ack
 = 0;

302 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë=CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

304 
waô_ack
++;

308 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

310 
InôSètus
 = 
CAN_InôSètus_Faûed
;

314 
InôSètus
 = 
CAN_InôSètus_Suc˚ss
 ;

319  
InôSètus
;

320 
	}
}

329 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

331 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

333 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

334 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

335 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

336 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

337 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

339 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

342 
CAN1
->
FMR
 |
FMR_FINIT
;

345 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

348 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

351 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

355 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

356 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

357 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

361 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

362 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

363 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

366 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

369 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

371 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

372 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

373 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

375 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

376 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

377 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

381 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

384 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

389 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

393 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

396 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

399 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

402 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

406 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

408 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

412 
CAN1
->
FMR
 &~
FMR_FINIT
;

413 
	}
}

420 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

425 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

428 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

431 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

434 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

437 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

440 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

443 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

446 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

449 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

452 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

455 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

456 
	}
}

463 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

466 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

469 
CAN1
->
FMR
 |
FMR_FINIT
;

472 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

473 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

476 
CAN1
->
FMR
 &~
FMR_FINIT
;

477 
	}
}

488 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

491 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

492 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

494 i‡(
NewSèã
 !
DISABLE
)

497 
CANx
->
MCR
 |
MCR_DBF
;

502 
CANx
->
MCR
 &~
MCR_DBF
;

504 
	}
}

518 
	$CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

521 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

522 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

523 i‡(
NewSèã
 !
DISABLE
)

526 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

529 
CANx
->
sTxMaûBox
[0].
TDTR
 |((
uöt32_t
)
CAN_TDT0R_TGT
);

530 
CANx
->
sTxMaûBox
[1].
TDTR
 |((
uöt32_t
)
CAN_TDT1R_TGT
);

531 
CANx
->
sTxMaûBox
[2].
TDTR
 |((
uöt32_t
)
CAN_TDT2R_TGT
);

536 
CANx
->
MCR
 &(
uöt32_t
)(~(uöt32_t)
CAN_MCR_TTCM
);

539 
CANx
->
sTxMaûBox
[0].
TDTR
 &((
uöt32_t
)~
CAN_TDT0R_TGT
);

540 
CANx
->
sTxMaûBox
[1].
TDTR
 &((
uöt32_t
)~
CAN_TDT1R_TGT
);

541 
CANx
->
sTxMaûBox
[2].
TDTR
 &((
uöt32_t
)~
CAN_TDT2R_TGT
);

543 
	}
}

572 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

574 
uöt8_t
 
å™smô_maûbox
 = 0;

576 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

577 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

578 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

579 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

582 i‡((
CANx
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

584 
å™smô_maûbox
 = 0;

586 i‡((
CANx
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

588 
å™smô_maûbox
 = 1;

590 i‡((
CANx
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

592 
å™smô_maûbox
 = 2;

596 
å™smô_maûbox
 = 
CAN_TxSètus_NoMaûBox
;

599 i‡(
å™smô_maûbox
 !
CAN_TxSètus_NoMaûBox
)

602 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

603 i‡(
TxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

605 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

606 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21) | \

607 
TxMesßge
->
RTR
);

611 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

612 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
 << 3) | \

613 
TxMesßge
->
IDE
 | \

614 
TxMesßge
->
RTR
);

618 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

619 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

620 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

623 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

624 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

625 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

626 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

627 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

628 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

629 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

630 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

632 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

634  
å™smô_maûbox
;

635 
	}
}

644 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

646 
uöt32_t
 
°©e
 = 0;

649 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

650 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

652 
TønsmôMaûbox
)

654 (
CAN_TXMAILBOX_0
):

655 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
);

657 (
CAN_TXMAILBOX_1
):

658 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
);

660 (
CAN_TXMAILBOX_2
):

661 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
);

664 
°©e
 = 
CAN_TxSètus_Faûed
;

667 
°©e
)

670 (0x0): 
°©e
 = 
CAN_TxSètus_Pídög
;

673 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
): 
°©e
 = 
CAN_TxSètus_Faûed
;

675 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
): 
°©e
 = 
CAN_TxSètus_Faûed
;

677 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
): 
°©e
 = 
CAN_TxSètus_Faûed
;

680 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
):
°©e
 = 
CAN_TxSètus_Ok
;

682 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
):
°©e
 = 
CAN_TxSètus_Ok
;

684 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
):
°©e
 = 
CAN_TxSètus_Ok
;

686 : 
°©e
 = 
CAN_TxSètus_Faûed
;

689  (
uöt8_t
Ë
°©e
;

690 
	}
}

698 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

701 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

702 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

704 
Maûbox
)

706 (
CAN_TXMAILBOX_0
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ0
;

708 (
CAN_TXMAILBOX_1
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ1
;

710 (
CAN_TXMAILBOX_2
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ2
;

715 
	}
}

745 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

748 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

749 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

751 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

752 i‡(
RxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

754 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

758 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

761 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

763 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

765 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

767 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

768 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

769 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

770 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

771 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

772 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

773 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

774 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

777 i‡(
FIFONumbî
 =
CAN_FIFO0
)

779 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

784 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

786 
	}
}

794 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

797 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

798 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

800 i‡(
FIFONumbî
 =
CAN_FIFO0
)

802 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

807 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

809 
	}
}

817 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

819 
uöt8_t
 
mesßge_≥ndög
=0;

821 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

822 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

823 i‡(
FIFONumbî
 =
CAN_FIFO0
)

825 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

827 i‡(
FIFONumbî
 =
CAN_FIFO1
)

829 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

833 
mesßge_≥ndög
 = 0;

835  
mesßge_≥ndög
;

836 
	}
}

867 
uöt8_t
 
	$CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_O≥øtögMode
)

869 
uöt8_t
 
°©us
 = 
CAN_ModeSètus_Faûed
;

872 
uöt32_t
 
timeout
 = 
INAK_TIMEOUT
;

875 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

876 
	`as£π_∑øm
(
	`IS_CAN_OPERATING_MODE
(
CAN_O≥øtögMode
));

878 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_Inôüliz©i⁄
)

881 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_SLEEP
)Ë| 
CAN_MCR_INRQ
);

884 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
Ë&& (
timeout
 != 0))

886 
timeout
--;

888 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
)

890 
°©us
 = 
CAN_ModeSètus_Faûed
;

894 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

897 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_N‹mÆ
)

900 
CANx
->
MCR
 &(
uöt32_t
)(~(
CAN_MCR_SLEEP
|
CAN_MCR_INRQ
));

903 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!0Ë&& (
timeout
!=0))

905 
timeout
--;

907 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
) != 0)

909 
°©us
 = 
CAN_ModeSètus_Faûed
;

913 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

916 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_SÀï
)

919 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

922 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
Ë&& (
timeout
!=0))

924 
timeout
--;

926 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
)

928 
°©us
 = 
CAN_ModeSètus_Faûed
;

932 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

937 
°©us
 = 
CAN_ModeSètus_Faûed
;

940  (
uöt8_t
Ë
°©us
;

941 
	}
}

948 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

950 
uöt8_t
 
¶ìp°©us
 = 
CAN_SÀï_Faûed
;

953 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

956 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

959 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

962 
¶ìp°©us
 = 
CAN_SÀï_Ok
;

965  (
uöt8_t
)
¶ìp°©us
;

966 
	}
}

973 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

975 
uöt32_t
 
waô_¶ak
 = 
SLAK_TIMEOUT
;

976 
uöt8_t
 
wakeup°©us
 = 
CAN_WakeUp_Faûed
;

979 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

982 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

985 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

987 
waô_¶ak
--;

989 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

992 
wakeup°©us
 = 
CAN_WakeUp_Ok
;

995  (
uöt8_t
)
wakeup°©us
;

996 
	}
}

1035 
uöt8_t
 
	$CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
)

1037 
uöt8_t
 
îr‹code
=0;

1040 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1043 
îr‹code
 = (((
uöt8_t
)
CANx
->
ESR
Ë& (uöt8_t)
CAN_ESR_LEC
);

1046  
îr‹code
;

1047 
	}
}

1060 
uöt8_t
 
	$CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1062 
uöt8_t
 
cou¡î
=0;

1065 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1068 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_REC
)>> 24);

1071  
cou¡î
;

1072 
	}
}

1080 
uöt8_t
 
	$CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1082 
uöt8_t
 
cou¡î
=0;

1085 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1088 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_TEC
)>> 16);

1091  
cou¡î
;

1092 
	}
}

1287 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1290 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1291 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1292 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1294 i‡(
NewSèã
 !
DISABLE
)

1297 
CANx
->
IER
 |
CAN_IT
;

1302 
CANx
->
IER
 &~
CAN_IT
;

1304 
	}
}

1327 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1329 
FœgSètus
 
bô°©us
 = 
RESET
;

1332 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1333 
	`as£π_∑øm
(
	`IS_CAN_GET_FLAG
(
CAN_FLAG
));

1336 if((
CAN_FLAG
 & 
CAN_FLAGS_ESR
Ë!(
uöt32_t
)
RESET
)

1339 i‡((
CANx
->
ESR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1342 
bô°©us
 = 
SET
;

1347 
bô°©us
 = 
RESET
;

1350 if((
CAN_FLAG
 & 
CAN_FLAGS_MSR
Ë!(
uöt32_t
)
RESET
)

1353 i‡((
CANx
->
MSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1356 
bô°©us
 = 
SET
;

1361 
bô°©us
 = 
RESET
;

1364 if((
CAN_FLAG
 & 
CAN_FLAGS_TSR
Ë!(
uöt32_t
)
RESET
)

1367 i‡((
CANx
->
TSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1370 
bô°©us
 = 
SET
;

1375 
bô°©us
 = 
RESET
;

1378 if((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
Ë!(
uöt32_t
)
RESET
)

1381 i‡((
CANx
->
RF0R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1384 
bô°©us
 = 
SET
;

1389 
bô°©us
 = 
RESET
;

1395 i‡((
uöt32_t
)(
CANx
->
RF1R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(uöt32_t)
RESET
)

1398 
bô°©us
 = 
SET
;

1403 
bô°©us
 = 
RESET
;

1407  
bô°©us
;

1408 
	}
}

1427 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1429 
uöt32_t
 
Êagtmp
=0;

1431 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1432 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_FLAG
(
CAN_FLAG
));

1434 i‡(
CAN_FLAG
 =
CAN_FLAG_LEC
)

1437 
CANx
->
ESR
 = (
uöt32_t
)
RESET
;

1441 
Êagtmp
 = 
CAN_FLAG
 & 0x000FFFFF;

1443 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
)!=(
uöt32_t
)
RESET
)

1446 
CANx
->
RF0R
 = (
uöt32_t
)(
Êagtmp
);

1448 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF1R
)!=(
uöt32_t
)
RESET
)

1451 
CANx
->
RF1R
 = (
uöt32_t
)(
Êagtmp
);

1453 i‡((
CAN_FLAG
 & 
CAN_FLAGS_TSR
)!=(
uöt32_t
)
RESET
)

1456 
CANx
->
TSR
 = (
uöt32_t
)(
Êagtmp
);

1461 
CANx
->
MSR
 = (
uöt32_t
)(
Êagtmp
);

1464 
	}
}

1487 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1489 
ITSètus
 
ô°©us
 = 
RESET
;

1491 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1492 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1495 if((
CANx
->
IER
 & 
CAN_IT
Ë!
RESET
)

1498 
CAN_IT
)

1500 
CAN_IT_TME
:

1502 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
);

1504 
CAN_IT_FMP0
:

1506 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FMP0
);

1508 
CAN_IT_FF0
:

1510 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FULL0
);

1512 
CAN_IT_FOV0
:

1514 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FOVR0
);

1516 
CAN_IT_FMP1
:

1518 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FMP1
);

1520 
CAN_IT_FF1
:

1522 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FULL1
);

1524 
CAN_IT_FOV1
:

1526 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FOVR1
);

1528 
CAN_IT_WKU
:

1530 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_WKUI
);

1532 
CAN_IT_SLK
:

1534 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_SLAKI
);

1536 
CAN_IT_EWG
:

1538 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EWGF
);

1540 
CAN_IT_EPV
:

1542 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EPVF
);

1544 
CAN_IT_BOF
:

1546 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_BOFF
);

1548 
CAN_IT_LEC
:

1550 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_LEC
);

1552 
CAN_IT_ERR
:

1554 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_ERRI
);

1558 
ô°©us
 = 
RESET
;

1565 
ô°©us
 = 
RESET
;

1569  
ô°©us
;

1570 
	}
}

1591 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1594 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1595 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_IT
(
CAN_IT
));

1597 
CAN_IT
)

1599 
CAN_IT_TME
:

1601 
CANx
->
TSR
 = 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
;

1603 
CAN_IT_FF0
:

1605 
CANx
->
RF0R
 = 
CAN_RF0R_FULL0
;

1607 
CAN_IT_FOV0
:

1609 
CANx
->
RF0R
 = 
CAN_RF0R_FOVR0
;

1611 
CAN_IT_FF1
:

1613 
CANx
->
RF1R
 = 
CAN_RF1R_FULL1
;

1615 
CAN_IT_FOV1
:

1617 
CANx
->
RF1R
 = 
CAN_RF1R_FOVR1
;

1619 
CAN_IT_WKU
:

1621 
CANx
->
MSR
 = 
CAN_MSR_WKUI
;

1623 
CAN_IT_SLK
:

1625 
CANx
->
MSR
 = 
CAN_MSR_SLAKI
;

1627 
CAN_IT_EWG
:

1629 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1632 
CAN_IT_EPV
:

1634 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1637 
CAN_IT_BOF
:

1639 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1642 
CAN_IT_LEC
:

1644 
CANx
->
ESR
 = 
RESET
;

1646 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1648 
CAN_IT_ERR
:

1650 
CANx
->
ESR
 = 
RESET
;

1652 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1658 
	}
}

1669 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

1671 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

1673 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

1676 
≥ndögbô°©us
 = 
SET
;

1681 
≥ndögbô°©us
 = 
RESET
;

1683  
≥ndögbô°©us
;

1684 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_crc.c

23 
	~"°m32f4xx_¸c.h
"

50 
	$CRC_Re£tDR
()

53 
CRC
->
CR
 = 
CRC_CR_RESET
;

54 
	}
}

61 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

63 
CRC
->
DR
 = 
D©a
;

65  (
CRC
->
DR
);

66 
	}
}

74 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

76 
uöt32_t
 
ödex
 = 0;

78 
ödex
 = 0; index < 
Buf„rLígth
; index++)

80 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

82  (
CRC
->
DR
);

83 
	}
}

90 
uöt32_t
 
	$CRC_GëCRC
()

92  (
CRC
->
DR
);

93 
	}
}

100 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

102 
CRC
->
IDR
 = 
IDVÆue
;

103 
	}
}

110 
uöt8_t
 
	$CRC_GëIDRegi°î
()

112  (
CRC
->
IDR
);

113 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c

159 
	~"°m32f4xx_¸yp.h
"

160 
	~"°m32f4xx_rcc.h
"

173 
	#FLAG_MASK
 ((
uöt8_t
)0x20)

	)

174 
	#MAX_TIMEOUT
 ((
uöt16_t
)0xFFFF)

	)

215 
	$CRYP_DeInô
()

218 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_CRYP
, 
ENABLE
);

221 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_CRYP
, 
DISABLE
);

222 
	}
}

231 
	$CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
)

234 
	`as£π_∑øm
(
	`IS_CRYP_ALGOMODE
(
CRYP_InôSåu˘
->
CRYP_AlgoMode
));

235 
	`as£π_∑øm
(
	`IS_CRYP_DATATYPE
(
CRYP_InôSåu˘
->
CRYP_D©aTy≥
));

236 
	`as£π_∑øm
(
	`IS_CRYP_ALGODIR
(
CRYP_InôSåu˘
->
CRYP_AlgoDú
));

239 
CRYP
->
CR
 &~
CRYP_CR_ALGOMODE
;

240 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_AlgoMode
;

243 
CRYP
->
CR
 &~
CRYP_CR_DATATYPE
;

244 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_D©aTy≥
;

247 i‡((
CRYP_InôSåu˘
->
CRYP_AlgoMode
 =
CRYP_AlgoMode_AES_ECB
) ||

248 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 =
CRYP_AlgoMode_AES_CBC
) ||

249 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 =
CRYP_AlgoMode_AES_CTR
) ||

250 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 =
CRYP_AlgoMode_AES_Key
))

252 
	`as£π_∑øm
(
	`IS_CRYP_KEYSIZE
(
CRYP_InôSåu˘
->
CRYP_KeySize
));

253 
CRYP
->
CR
 &~
CRYP_CR_KEYSIZE
;

254 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_KeySize
;

260 
CRYP
->
CR
 &~
CRYP_CR_ALGODIR
;

261 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_AlgoDú
;

262 
	}
}

270 
	$CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
)

273 
CRYP_InôSåu˘
->
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

276 
CRYP_InôSåu˘
->
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_ECB
;

279 
CRYP_InôSåu˘
->
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

282 
CRYP_InôSåu˘
->
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

283 
	}
}

292 
	$CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

295 
CRYP
->
K0LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
;

296 
CRYP
->
K0RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
;

297 
CRYP
->
K1LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
;

298 
CRYP
->
K1RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
;

299 
CRYP
->
K2LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
;

300 
CRYP
->
K2RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
;

301 
CRYP
->
K3LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
;

302 
CRYP
->
K3RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
;

303 
	}
}

311 
	$CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

313 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
 = 0;

314 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
 = 0;

315 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
 = 0;

316 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
 = 0;

317 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
 = 0;

318 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
 = 0;

319 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
 = 0;

320 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
 = 0;

321 
	}
}

329 
	$CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
)

331 
CRYP
->
IV0LR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV0Le·
;

332 
CRYP
->
IV0RR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV0Right
;

333 
CRYP
->
IV1LR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV1Le·
;

334 
CRYP
->
IV1RR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV1Right
;

335 
	}
}

343 
	$CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
)

345 
CRYP_IVInôSåu˘
->
CRYP_IV0Le·
 = 0;

346 
CRYP_IVInôSåu˘
->
CRYP_IV0Right
 = 0;

347 
CRYP_IVInôSåu˘
->
CRYP_IV1Le·
 = 0;

348 
CRYP_IVInôSåu˘
->
CRYP_IV1Right
 = 0;

349 
	}
}

358 
	$CRYP_FIFOFlush
()

361 
CRYP
->
CR
 |
CRYP_CR_FFLUSH
;

362 
	}
}

370 
	$CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

373 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

375 i‡(
NewSèã
 !
DISABLE
)

378 
CRYP
->
CR
 |
CRYP_CR_CRYPEN
;

383 
CRYP
->
CR
 &~
CRYP_CR_CRYPEN
;

385 
	}
}

413 
	$CRYP_D©aIn
(
uöt32_t
 
D©a
)

415 
CRYP
->
DR
 = 
D©a
;

416 
	}
}

423 
uöt32_t
 
	$CRYP_D©aOut
()

425  
CRYP
->
DOUT
;

426 
	}
}

466 
Eº‹Sètus
 
	$CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

467 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

469 
__IO
 
uöt32_t
 
timeout
 = 0;

470 
uöt32_t
 
ckeckmask
 = 0, 
bô°©us
;

471 
Eº‹Sètus
 
°©us
 = 
ERROR
;

474 
CRYP
->
DMACR
 &~(
uöt32_t
)
CRYP_DMACR_DIEN
;

480 i‡((
CRYP
->
CR
 & (
uöt32_t
)(
CRYP_CR_ALGOMODE_TDES_ECB
 | 
CRYP_CR_ALGOMODE_TDES_CBC
)) != (uint32_t)0 )

482 
ckeckmask
 = 
CRYP_SR_IFEM
 | 
CRYP_SR_BUSY
 ;

486 
ckeckmask
 = 
CRYP_SR_IFEM
 | 
CRYP_SR_BUSY
 | 
CRYP_SR_OFNE
;

491 
bô°©us
 = 
CRYP
->
SR
 & 
ckeckmask
;

492 
timeout
++;

494 (
timeout
 !
MAX_TIMEOUT
Ë&& (
bô°©us
 !
CRYP_SR_IFEM
));

496 i‡((
CRYP
->
SR
 & 
ckeckmask
Ë!
CRYP_SR_IFEM
)

498 
°©us
 = 
ERROR
;

506 
CRYP
->
DMACR
 &~(
uöt32_t
)
CRYP_DMACR_DOEN
;

507 
CRYP
->
CR
 &~(
uöt32_t
)
CRYP_CR_CRYPEN
;

510 
CRYP_C⁄ãxtSave
->
CR_bôs9to2
 = 
CRYP
->
CR
 & (
CRYP_CR_KEYSIZE
 |

511 
CRYP_CR_DATATYPE
 |

512 
CRYP_CR_ALGOMODE
 |

513 
CRYP_CR_ALGODIR
);

516 
CRYP_C⁄ãxtSave
->
CRYP_IV0LR
 = 
CRYP
->
IV0LR
;

517 
CRYP_C⁄ãxtSave
->
CRYP_IV0RR
 = 
CRYP
->
IV0RR
;

518 
CRYP_C⁄ãxtSave
->
CRYP_IV1LR
 = 
CRYP
->
IV1LR
;

519 
CRYP_C⁄ãxtSave
->
CRYP_IV1RR
 = 
CRYP
->
IV1RR
;

522 
CRYP_C⁄ãxtSave
->
CRYP_K0LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
;

523 
CRYP_C⁄ãxtSave
->
CRYP_K0RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
;

524 
CRYP_C⁄ãxtSave
->
CRYP_K1LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
;

525 
CRYP_C⁄ãxtSave
->
CRYP_K1RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
;

526 
CRYP_C⁄ãxtSave
->
CRYP_K2LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
;

527 
CRYP_C⁄ãxtSave
->
CRYP_K2RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
;

528 
CRYP_C⁄ãxtSave
->
CRYP_K3LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
;

529 
CRYP_C⁄ãxtSave
->
CRYP_K3RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
;

534 
°©us
 = 
SUCCESS
;

537  
°©us
;

538 
	}
}

551 
	$CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
)

555 
CRYP
->
CR
 = 
CRYP_C⁄ãxtRe°‹e
->
CR_bôs9to2
;

558 
CRYP
->
K0LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K0LR
;

559 
CRYP
->
K0RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K0RR
;

560 
CRYP
->
K1LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K1LR
;

561 
CRYP
->
K1RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K1RR
;

562 
CRYP
->
K2LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K2LR
;

563 
CRYP
->
K2RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K2RR
;

564 
CRYP
->
K3LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K3LR
;

565 
CRYP
->
K3RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K3RR
;

568 
CRYP
->
IV0LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV0LR
;

569 
CRYP
->
IV0RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV0RR
;

570 
CRYP
->
IV1LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV1LR
;

571 
CRYP
->
IV1RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV1RR
;

574 
CRYP
->
CR
 |
CRYP_CR_CRYPEN
;

575 
	}
}

612 
	$CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

615 
	`as£π_∑øm
(
	`IS_CRYP_DMAREQ
(
CRYP_DMAReq
));

616 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

618 i‡(
NewSèã
 !
DISABLE
)

621 
CRYP
->
DMACR
 |
CRYP_DMAReq
;

626 
CRYP
->
DMACR
 &(
uöt8_t
)~
CRYP_DMAReq
;

628 
	}
}

737 
	$CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

740 
	`as£π_∑øm
(
	`IS_CRYP_CONFIG_IT
(
CRYP_IT
));

741 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

743 i‡(
NewSèã
 !
DISABLE
)

746 
CRYP
->
IMSCR
 |
CRYP_IT
;

751 
CRYP
->
IMSCR
 &(
uöt8_t
)~
CRYP_IT
;

753 
	}
}

765 
ITSètus
 
	$CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
)

767 
ITSètus
 
bô°©us
 = 
RESET
;

769 
	`as£π_∑øm
(
	`IS_CRYP_GET_IT
(
CRYP_IT
));

772 i‡((
CRYP
->
MISR
 & 
CRYP_IT
Ë!(
uöt8_t
)
RESET
)

775 
bô°©us
 = 
SET
;

780 
bô°©us
 = 
RESET
;

783  
bô°©us
;

784 
	}
}

799 
FœgSètus
 
	$CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
)

801 
FœgSètus
 
bô°©us
 = 
RESET
;

802 
uöt32_t
 
ãm¥eg
 = 0;

805 
	`as£π_∑øm
(
	`IS_CRYP_GET_FLAG
(
CRYP_FLAG
));

808 i‡((
CRYP_FLAG
 & 
FLAG_MASK
) != 0x00)

810 
ãm¥eg
 = 
CRYP
->
RISR
;

814 
ãm¥eg
 = 
CRYP
->
SR
;

819 i‡((
ãm¥eg
 & 
CRYP_FLAG
 ) !(
uöt8_t
)
RESET
)

822 
bô°©us
 = 
SET
;

827 
bô°©us
 = 
RESET
;

831  
bô°©us
;

832 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c

46 
	~"°m32f4xx_¸yp.h
"

59 
	#AESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

98 
Eº‹Sètus
 
	$CRYP_AES_ECB
(
uöt8_t
 
Mode
, uöt8_t* 
Key
, 
uöt16_t
 
Keysize
,

99 
uöt8_t
* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

101 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

102 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

103 
__IO
 
uöt32_t
 
cou¡î
 = 0;

104 
uöt32_t
 
busy°©us
 = 0;

105 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

106 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

107 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

108 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

109 
uöt32_t
 
i
 = 0;

112 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

114 
Keysize
)

117 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

118 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

119 
keyaddr
+=4;

120 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

121 
keyaddr
+=4;

122 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

123 
keyaddr
+=4;

124 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

127 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

128 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

129 
keyaddr
+=4;

130 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

131 
keyaddr
+=4;

132 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

133 
keyaddr
+=4;

134 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

135 
keyaddr
+=4;

136 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

137 
keyaddr
+=4;

138 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

141 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

142 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

143 
keyaddr
+=4;

144 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

145 
keyaddr
+=4;

146 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

147 
keyaddr
+=4;

148 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

149 
keyaddr
+=4;

150 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

151 
keyaddr
+=4;

152 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

153 
keyaddr
+=4;

154 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

155 
keyaddr
+=4;

156 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

163 if(
Mode
 =
MODE_DECRYPT
)

166 
	`CRYP_FIFOFlush
();

169 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

170 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_Key
;

171 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

172 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

175 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

178 
	`CRYP_Cmd
(
ENABLE
);

183 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

184 
cou¡î
++;

185 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

187 i‡(
busy°©us
 !
RESET
)

189 
°©us
 = 
ERROR
;

194 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

201 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

204 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

207 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_ECB
;

208 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

209 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

212 
	`CRYP_FIFOFlush
();

215 
	`CRYP_Cmd
(
ENABLE
);

217 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

221 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

222 
öpuèddr
+=4;

223 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

224 
öpuèddr
+=4;

225 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

226 
öpuèddr
+=4;

227 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

228 
öpuèddr
+=4;

231 
cou¡î
 = 0;

234 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

235 
cou¡î
++;

236 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

238 i‡(
busy°©us
 !
RESET
)

240 
°©us
 = 
ERROR
;

246 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

247 
ouçuèddr
+=4;

248 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

249 
ouçuèddr
+=4;

250 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

251 
ouçuèddr
+=4;

252 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

253 
ouçuèddr
+=4;

258 
	`CRYP_Cmd
(
DISABLE
);

260  
°©us
;

261 
	}
}

279 
Eº‹Sètus
 
	$CRYP_AES_CBC
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16], uöt8_à*
Key
,

280 
uöt16_t
 
Keysize
, 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

281 
uöt8_t
 *
Ouçut
)

283 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

284 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

285 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

286 
__IO
 
uöt32_t
 
cou¡î
 = 0;

287 
uöt32_t
 
busy°©us
 = 0;

288 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

289 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

290 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

291 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

292 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

293 
uöt32_t
 
i
 = 0;

296 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

298 
Keysize
)

301 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

302 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

303 
keyaddr
+=4;

304 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

305 
keyaddr
+=4;

306 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

307 
keyaddr
+=4;

308 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

311 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

312 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

313 
keyaddr
+=4;

314 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

315 
keyaddr
+=4;

316 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

317 
keyaddr
+=4;

318 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

319 
keyaddr
+=4;

320 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

321 
keyaddr
+=4;

322 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

325 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

326 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

327 
keyaddr
+=4;

328 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

329 
keyaddr
+=4;

330 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

331 
keyaddr
+=4;

332 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

333 
keyaddr
+=4;

334 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

335 
keyaddr
+=4;

336 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

337 
keyaddr
+=4;

338 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

339 
keyaddr
+=4;

340 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

347 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

348 
ivaddr
+=4;

349 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

350 
ivaddr
+=4;

351 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

352 
ivaddr
+=4;

353 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

357 if(
Mode
 =
MODE_DECRYPT
)

360 
	`CRYP_FIFOFlush
();

363 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

364 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_Key
;

365 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

367 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

370 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

373 
	`CRYP_Cmd
(
ENABLE
);

378 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

379 
cou¡î
++;

380 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

382 i‡(
busy°©us
 !
RESET
)

384 
°©us
 = 
ERROR
;

389 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

395 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

398 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

400 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CBC
;

401 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

402 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

405 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

408 
	`CRYP_FIFOFlush
();

411 
	`CRYP_Cmd
(
ENABLE
);

414 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

418 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

419 
öpuèddr
+=4;

420 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

421 
öpuèddr
+=4;

422 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

423 
öpuèddr
+=4;

424 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

425 
öpuèddr
+=4;

427 
cou¡î
 = 0;

430 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

431 
cou¡î
++;

432 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

434 i‡(
busy°©us
 !
RESET
)

436 
°©us
 = 
ERROR
;

442 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

443 
ouçuèddr
+=4;

444 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

445 
ouçuèddr
+=4;

446 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

447 
ouçuèddr
+=4;

448 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

449 
ouçuèddr
+=4;

454 
	`CRYP_Cmd
(
DISABLE
);

456  
°©us
;

457 
	}
}

475 
Eº‹Sètus
 
	$CRYP_AES_CTR
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16], uöt8_à*
Key
,

476 
uöt16_t
 
Keysize
, 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

477 
uöt8_t
 *
Ouçut
)

479 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

480 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

481 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

482 
__IO
 
uöt32_t
 
cou¡î
 = 0;

483 
uöt32_t
 
busy°©us
 = 0;

484 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

485 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

486 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

487 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

488 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

489 
uöt32_t
 
i
 = 0;

492 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

494 
Keysize
)

497 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

498 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

499 
keyaddr
+=4;

500 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

501 
keyaddr
+=4;

502 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

503 
keyaddr
+=4;

504 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

507 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

508 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

509 
keyaddr
+=4;

510 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

511 
keyaddr
+=4;

512 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

513 
keyaddr
+=4;

514 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

515 
keyaddr
+=4;

516 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

517 
keyaddr
+=4;

518 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

521 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

522 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

523 
keyaddr
+=4;

524 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

525 
keyaddr
+=4;

526 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

527 
keyaddr
+=4;

528 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

529 
keyaddr
+=4;

530 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

531 
keyaddr
+=4;

532 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

533 
keyaddr
+=4;

534 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

535 
keyaddr
+=4;

536 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

542 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

543 
ivaddr
+=4;

544 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

545 
ivaddr
+=4;

546 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

547 
ivaddr
+=4;

548 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

551 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

554 if(
Mode
 =
MODE_DECRYPT
)

557 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

563 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

565 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CTR
;

566 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

567 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

570 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

573 
	`CRYP_FIFOFlush
();

576 
	`CRYP_Cmd
(
ENABLE
);

578 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

582 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

583 
öpuèddr
+=4;

584 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

585 
öpuèddr
+=4;

586 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

587 
öpuèddr
+=4;

588 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

589 
öpuèddr
+=4;

591 
cou¡î
 = 0;

594 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

595 
cou¡î
++;

596 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

598 i‡(
busy°©us
 !
RESET
)

600 
°©us
 = 
ERROR
;

606 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

607 
ouçuèddr
+=4;

608 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

609 
ouçuèddr
+=4;

610 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

611 
ouçuèddr
+=4;

612 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

613 
ouçuèddr
+=4;

617 
	`CRYP_Cmd
(
DISABLE
);

619  
°©us
;

620 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c

43 
	~"°m32f4xx_¸yp.h
"

57 
	#DESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

94 
Eº‹Sètus
 
	$CRYP_DES_ECB
(
uöt8_t
 
Mode
, uöt8_à
Key
[8], uöt8_à*
I≈ut
,

95 
uöt32_t
 
IÀngth
, 
uöt8_t
 *
Ouçut
)

97 
CRYP_InôTy≥Def
 
DES_CRYP_InôSåu˘uª
;

98 
CRYP_KeyInôTy≥Def
 
DES_CRYP_KeyInôSåu˘uª
;

99 
__IO
 
uöt32_t
 
cou¡î
 = 0;

100 
uöt32_t
 
busy°©us
 = 0;

101 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

102 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

103 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

104 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

105 
uöt32_t
 
i
 = 0;

108 
	`CRYP_KeySåu˘Inô
(&
DES_CRYP_KeyInôSåu˘uª
);

111 if–
Mode
 =
MODE_ENCRYPT
 )

113 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

117 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

120 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_DES_ECB
;

121 
DES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

122 
	`CRYP_Inô
(&
DES_CRYP_InôSåu˘uª
);

125 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

126 
keyaddr
+=4;

127 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

128 
	`CRYP_KeyInô
(& 
DES_CRYP_KeyInôSåu˘uª
);

131 
	`CRYP_FIFOFlush
();

134 
	`CRYP_Cmd
(
ENABLE
);

136 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

140 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

141 
öpuèddr
+=4;

142 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

143 
öpuèddr
+=4;

146 
cou¡î
 = 0;

149 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

150 
cou¡î
++;

151 }(
cou¡î
 !
DESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

153 i‡(
busy°©us
 !
RESET
)

155 
°©us
 = 
ERROR
;

161 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

162 
ouçuèddr
+=4;

163 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

164 
ouçuèddr
+=4;

169 
	`CRYP_Cmd
(
DISABLE
);

171  
°©us
;

172 
	}
}

189 
Eº‹Sètus
 
	$CRYP_DES_CBC
(
uöt8_t
 
Mode
, uöt8_à
Key
[8], uöt8_à
InôVe˘‹s
[8],

190 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_à*
Ouçut
)

192 
CRYP_InôTy≥Def
 
DES_CRYP_InôSåu˘uª
;

193 
CRYP_KeyInôTy≥Def
 
DES_CRYP_KeyInôSåu˘uª
;

194 
CRYP_IVInôTy≥Def
 
DES_CRYP_IVInôSåu˘uª
;

195 
__IO
 
uöt32_t
 
cou¡î
 = 0;

196 
uöt32_t
 
busy°©us
 = 0;

197 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

198 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

199 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

200 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

201 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

202 
uöt32_t
 
i
 = 0;

205 
	`CRYP_KeySåu˘Inô
(&
DES_CRYP_KeyInôSåu˘uª
);

208 if(
Mode
 =
MODE_ENCRYPT
)

210 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

214 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

217 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_DES_CBC
;

218 
DES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

219 
	`CRYP_Inô
(&
DES_CRYP_InôSåu˘uª
);

222 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

223 
keyaddr
+=4;

224 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

225 
	`CRYP_KeyInô
(& 
DES_CRYP_KeyInôSåu˘uª
);

228 
DES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

229 
ivaddr
+=4;

230 
DES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

231 
	`CRYP_IVInô
(&
DES_CRYP_IVInôSåu˘uª
);

234 
	`CRYP_FIFOFlush
();

237 
	`CRYP_Cmd
(
ENABLE
);

239 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

242 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

243 
öpuèddr
+=4;

244 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

245 
öpuèddr
+=4;

248 
cou¡î
 = 0;

251 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

252 
cou¡î
++;

253 }(
cou¡î
 !
DESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

255 i‡(
busy°©us
 !
RESET
)

257 
°©us
 = 
ERROR
;

262 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

263 
ouçuèddr
+=4;

264 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

265 
ouçuèddr
+=4;

270 
	`CRYP_Cmd
(
DISABLE
);

272  
°©us
;

273 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c

43 
	~"°m32f4xx_¸yp.h
"

57 
	#TDESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

96 
Eº‹Sètus
 
	$CRYP_TDES_ECB
(
uöt8_t
 
Mode
, uöt8_à
Key
[24], uöt8_à*
I≈ut
,

97 
uöt32_t
 
IÀngth
, 
uöt8_t
 *
Ouçut
)

99 
CRYP_InôTy≥Def
 
TDES_CRYP_InôSåu˘uª
;

100 
CRYP_KeyInôTy≥Def
 
TDES_CRYP_KeyInôSåu˘uª
;

101 
__IO
 
uöt32_t
 
cou¡î
 = 0;

102 
uöt32_t
 
busy°©us
 = 0;

103 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

104 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

105 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

106 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

107 
uöt32_t
 
i
 = 0;

110 
	`CRYP_KeySåu˘Inô
(&
TDES_CRYP_KeyInôSåu˘uª
);

113 if(
Mode
 =
MODE_ENCRYPT
)

115 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

119 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

122 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_ECB
;

123 
TDES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

124 
	`CRYP_Inô
(&
TDES_CRYP_InôSåu˘uª
);

127 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

128 
keyaddr
+=4;

129 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

130 
keyaddr
+=4;

131 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

132 
keyaddr
+=4;

133 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

134 
keyaddr
+=4;

135 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

136 
keyaddr
+=4;

137 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

138 
	`CRYP_KeyInô
(& 
TDES_CRYP_KeyInôSåu˘uª
);

141 
	`CRYP_FIFOFlush
();

144 
	`CRYP_Cmd
(
ENABLE
);

146 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

149 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

150 
öpuèddr
+=4;

151 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

152 
öpuèddr
+=4;

155 
cou¡î
 = 0;

158 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

159 
cou¡î
++;

160 }(
cou¡î
 !
TDESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

162 i‡(
busy°©us
 !
RESET
)

164 
°©us
 = 
ERROR
;

170 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

171 
ouçuèddr
+=4;

172 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

173 
ouçuèddr
+=4;

178 
	`CRYP_Cmd
(
DISABLE
);

180  
°©us
;

181 
	}
}

198 
Eº‹Sètus
 
	$CRYP_TDES_CBC
(
uöt8_t
 
Mode
, uöt8_à
Key
[24], uöt8_à
InôVe˘‹s
[8],

199 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_à*
Ouçut
)

201 
CRYP_InôTy≥Def
 
TDES_CRYP_InôSåu˘uª
;

202 
CRYP_KeyInôTy≥Def
 
TDES_CRYP_KeyInôSåu˘uª
;

203 
CRYP_IVInôTy≥Def
 
TDES_CRYP_IVInôSåu˘uª
;

204 
__IO
 
uöt32_t
 
cou¡î
 = 0;

205 
uöt32_t
 
busy°©us
 = 0;

206 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

207 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

208 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

209 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

210 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

211 
uöt32_t
 
i
 = 0;

214 
	`CRYP_KeySåu˘Inô
(&
TDES_CRYP_KeyInôSåu˘uª
);

217 if(
Mode
 =
MODE_ENCRYPT
)

219 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

223 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

225 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_CBC
;

226 
TDES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

228 
	`CRYP_Inô
(&
TDES_CRYP_InôSåu˘uª
);

231 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

232 
keyaddr
+=4;

233 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

234 
keyaddr
+=4;

235 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

236 
keyaddr
+=4;

237 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

238 
keyaddr
+=4;

239 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

240 
keyaddr
+=4;

241 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

242 
	`CRYP_KeyInô
(& 
TDES_CRYP_KeyInôSåu˘uª
);

245 
TDES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

246 
ivaddr
+=4;

247 
TDES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

248 
	`CRYP_IVInô
(&
TDES_CRYP_IVInôSåu˘uª
);

251 
	`CRYP_FIFOFlush
();

254 
	`CRYP_Cmd
(
ENABLE
);

256 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

259 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

260 
öpuèddr
+=4;

261 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

262 
öpuèddr
+=4;

265 
cou¡î
 = 0;

268 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

269 
cou¡î
++;

270 }(
cou¡î
 !
TDESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

272 i‡(
busy°©us
 !
RESET
)

274 
°©us
 = 
ERROR
;

280 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

281 
ouçuèddr
+=4;

282 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

283 
ouçuèddr
+=4;

288 
	`CRYP_Cmd
(
DISABLE
);

290  
°©us
;

291 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dac.c

118 
	~"°m32f4xx_dac.h
"

119 
	~"°m32f4xx_rcc.h
"

134 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

137 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

138 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

141 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

142 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

143 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

146 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

174 
	$DAC_DeInô
()

177 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

179 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

180 
	}
}

193 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

195 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

198 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

199 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

200 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

201 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

205 
tm¥eg1
 = 
DAC
->
CR
;

207 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

214 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

215 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | \

216 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
);

218 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

220 
DAC
->
CR
 = 
tm¥eg1
;

221 
	}
}

229 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

233 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

235 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

237 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

239 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

240 
	}
}

253 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

256 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

257 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

259 i‡(
NewSèã
 !
DISABLE
)

262 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

267 
DAC
->
CR
 &(~(
DAC_CR_EN1
 << 
DAC_Ch™√l
));

269 
	}
}

281 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

284 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

285 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

287 i‡(
NewSèã
 !
DISABLE
)

290 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

295 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

297 
	}
}

305 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

308 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

310 i‡(
NewSèã
 !
DISABLE
)

313 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
;

318 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

320 
	}
}

336 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

339 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

340 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

341 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

343 i‡(
NewSèã
 !
DISABLE
)

346 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

351 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

353 
	}
}

365 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

367 
__IO
 
uöt32_t
 
tmp
 = 0;

370 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

371 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

373 
tmp
 = (
uöt32_t
)
DAC_BASE
;

374 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

377 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

378 
	}
}

390 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

392 
__IO
 
uöt32_t
 
tmp
 = 0;

395 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

396 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

398 
tmp
 = (
uöt32_t
)
DAC_BASE
;

399 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

402 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

403 
	}
}

418 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

420 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

423 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

424 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

425 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

428 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

430 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

434 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

437 
tmp
 = (
uöt32_t
)
DAC_BASE
;

438 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

441 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

442 
	}
}

452 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

454 
__IO
 
uöt32_t
 
tmp
 = 0;

457 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

459 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

460 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

463  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

464 
	}
}

497 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

500 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

501 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

503 i‡(
NewSèã
 !
DISABLE
)

506 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

511 
DAC
->
CR
 &(~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
));

513 
	}
}

545 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

548 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

549 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

550 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

552 i‡(
NewSèã
 !
DISABLE
)

555 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

560 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

562 
	}
}

577 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

579 
FœgSètus
 
bô°©us
 = 
RESET
;

581 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

582 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

585 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

588 
bô°©us
 = 
SET
;

593 
bô°©us
 = 
RESET
;

596  
bô°©us
;

597 
	}
}

612 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

615 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

616 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

619 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

620 
	}
}

635 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

637 
ITSètus
 
bô°©us
 = 
RESET
;

638 
uöt32_t
 
íabÀ°©us
 = 0;

641 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

642 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

645 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

648 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

651 
bô°©us
 = 
SET
;

656 
bô°©us
 = 
RESET
;

659  
bô°©us
;

660 
	}
}

675 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

678 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

679 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

682 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

683 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dbgmcu.c

23 
	~"°m32f4xx_dbgmcu.h
"

36 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

52 
uöt32_t
 
	$DBGMCU_GëREVID
()

54 (
DBGMCU
->
IDCODE
 >> 16);

55 
	}
}

62 
uöt32_t
 
	$DBGMCU_GëDEVID
()

64 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

65 
	}
}

78 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

81 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

82 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

83 i‡(
NewSèã
 !
DISABLE
)

85 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

89 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

91 
	}
}

117 
	$DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

120 
	`as£π_∑øm
(
	`IS_DBGMCU_APB1PERIPH
(
DBGMCU_Pîùh
));

121 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

123 i‡(
NewSèã
 !
DISABLE
)

125 
DBGMCU
->
APB1FZ
 |
DBGMCU_Pîùh
;

129 
DBGMCU
->
APB1FZ
 &~
DBGMCU_Pîùh
;

131 
	}
}

146 
	$DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

149 
	`as£π_∑øm
(
	`IS_DBGMCU_APB2PERIPH
(
DBGMCU_Pîùh
));

150 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

152 i‡(
NewSèã
 !
DISABLE
)

154 
DBGMCU
->
APB2FZ
 |
DBGMCU_Pîùh
;

158 
DBGMCU
->
APB2FZ
 &~
DBGMCU_Pîùh
;

160 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c

82 
	~"°m32f4xx_dcmi.h
"

83 
	~"°m32f4xx_rcc.h
"

122 
	$DCMI_DeInô
()

124 
DCMI
->
CR
 = 0x0;

125 
DCMI
->
IER
 = 0x0;

126 
DCMI
->
ICR
 = 0x1F;

127 
DCMI
->
ESCR
 = 0x0;

128 
DCMI
->
ESUR
 = 0x0;

129 
DCMI
->
CWSTRTR
 = 0x0;

130 
DCMI
->
CWSIZER
 = 0x0;

131 
	}
}

139 
	$DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
)

141 
uöt32_t
 
ãmp
 = 0x0;

144 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_MODE
(
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
));

145 
	`as£π_∑øm
(
	`IS_DCMI_SYNCHRO
(
DCMI_InôSåu˘
->
DCMI_SynchroMode
));

146 
	`as£π_∑øm
(
	`IS_DCMI_PCKPOLARITY
(
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
));

147 
	`as£π_∑øm
(
	`IS_DCMI_VSPOLARITY
(
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
));

148 
	`as£π_∑øm
(
	`IS_DCMI_HSPOLARITY
(
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
));

149 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_RATE
(
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
));

150 
	`as£π_∑øm
(
	`IS_DCMI_EXTENDED_DATA
(
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
));

154 
DCMI
->
CR
 &~(
DCMI_CR_ENABLE
 | 
DCMI_CR_CAPTURE
);

157 
ãmp
 = 
DCMI
->
CR
;

159 
ãmp
 &~((
uöt32_t
)
DCMI_CR_CM
 | 
DCMI_CR_ESS
 | 
DCMI_CR_PCKPOL
 |

160 
DCMI_CR_HSPOL
 | 
DCMI_CR_VSPOL
 | 
DCMI_CR_FCRC_0
 |

161 
DCMI_CR_FCRC_1
 | 
DCMI_CR_EDM_0
 | 
DCMI_CR_EDM_1
);

164 
ãmp
 |((
uöt32_t
)
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
 |

165 
DCMI_InôSåu˘
->
DCMI_SynchroMode
 |

166 
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
 |

167 
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
 |

168 
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
 |

169 
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
 |

170 
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
);

172 
DCMI
->
CR
 = 
ãmp
;

173 
	}
}

181 
	$DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
)

184 
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
 = 
DCMI_C≠tuªMode_C⁄töuous
;

185 
DCMI_InôSåu˘
->
DCMI_SynchroMode
 = 
DCMI_SynchroMode_H¨dw¨e
;

186 
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
 = 
DCMI_PCKPﬁ¨ôy_FÆlög
;

187 
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
 = 
DCMI_VSPﬁ¨ôy_Low
;

188 
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
 = 
DCMI_HSPﬁ¨ôy_Low
;

189 
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
 = 
DCMI_C≠tuªR©e_AŒ_Føme
;

190 
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
 = 
DCMI_ExãndedD©aMode_8b
;

191 
	}
}

201 
	$DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
)

204 
DCMI
->
CWSTRTR
 = (
uöt32_t
)((uöt32_t)
DCMI_CROPInôSåu˘
->
DCMI_H‹iz⁄èlOff£tCou¡
 |

205 ((
uöt32_t
)
DCMI_CROPInôSåu˘
->
DCMI_VîtiˇlSèπLöe
 << 16));

208 
DCMI
->
CWSIZER
 = (
uöt32_t
)(
DCMI_CROPInôSåu˘
->
DCMI_C≠tuªCou¡
 |

209 ((
uöt32_t
)
DCMI_CROPInôSåu˘
->
DCMI_VîtiˇlLöeCou¡
 << 16));

210 
	}
}

219 
	$DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

222 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

224 i‡(
NewSèã
 !
DISABLE
)

227 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CROP
;

232 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CROP
;

234 
	}
}

242 
	$DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
)

244 
DCMI
->
ESCR
 = (
uöt32_t
)(
DCMI_CodesInôSåu˘
->
DCMI_FømeSèπCode
 |

245 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_LöeSèπCode
 << 8)|

246 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_LöeEndCode
 << 16)|

247 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_FømeEndCode
 << 24));

248 
	}
}

257 
	$DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

260 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

262 i‡(
NewSèã
 !
DISABLE
)

265 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_JPEG
;

270 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_JPEG
;

272 
	}
}

295 
	$DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_ENABLE
;

308 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_ENABLE
;

310 
	}
}

318 
	$DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

321 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

323 i‡(
NewSèã
 !
DISABLE
)

326 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CAPTURE
;

331 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CAPTURE
;

333 
	}
}

340 
uöt32_t
 
	$DCMI_RódD©a
()

342  
DCMI
->
DR
;

343 
	}
}

373 
	$DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

376 
	`as£π_∑øm
(
	`IS_DCMI_CONFIG_IT
(
DCMI_IT
));

377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

379 i‡(
NewSèã
 !
DISABLE
)

382 
DCMI
->
IER
 |
DCMI_IT
;

387 
DCMI
->
IER
 &(
uöt16_t
)(~
DCMI_IT
);

389 
	}
}

410 
FœgSètus
 
	$DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
)

412 
FœgSètus
 
bô°©us
 = 
RESET
;

413 
uöt32_t
 
dcmúeg
, 
ãm¥eg
 = 0;

416 
	`as£π_∑øm
(
	`IS_DCMI_GET_FLAG
(
DCMI_FLAG
));

419 
dcmúeg
 = (((
uöt16_t
)
DCMI_FLAG
) >> 12);

421 i‡(
dcmúeg
 == 0x01)

423 
ãm¥eg

DCMI
->
RISR
;

425 i‡(
dcmúeg
 == 0x02)

427 
ãm¥eg
 = 
DCMI
->
SR
;

431 
ãm¥eg
 = 
DCMI
->
MISR
;

434 i‡((
ãm¥eg
 & 
DCMI_FLAG
Ë!(
uöt16_t
)
RESET
 )

436 
bô°©us
 = 
SET
;

440 
bô°©us
 = 
RESET
;

443  
bô°©us
;

444 
	}
}

457 
	$DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
)

460 
	`as£π_∑øm
(
	`IS_DCMI_CLEAR_FLAG
(
DCMI_FLAG
));

465 
DCMI
->
ICR
 = 
DCMI_FLAG
;

466 
	}
}

479 
ITSètus
 
	$DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
)

481 
ITSètus
 
bô°©us
 = 
RESET
;

482 
uöt32_t
 
ô°©us
 = 0;

485 
	`as£π_∑øm
(
	`IS_DCMI_GET_IT
(
DCMI_IT
));

487 
ô°©us
 = 
DCMI
->
MISR
 & 
DCMI_IT
;

489 i‡((
ô°©us
 !(
uöt16_t
)
RESET
))

491 
bô°©us
 = 
SET
;

495 
bô°©us
 = 
RESET
;

497  
bô°©us
;

498 
	}
}

511 
	$DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
)

516 
DCMI
->
ICR
 = 
DCMI_IT
;

517 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c

116 
	~"°m32f4xx_dma.h
"

117 
	~"°m32f4xx_rcc.h
"

132 
	#TRANSFER_IT_ENABLE_MASK
 (
uöt32_t
)(
DMA_SxCR_TCIE
 | 
DMA_SxCR_HTIE
 | \

133 
DMA_SxCR_TEIE
 | 
DMA_SxCR_DMEIE
)

	)

135 
	#DMA_Såóm0_IT_MASK
 (
uöt32_t
)(
DMA_LISR_FEIF0
 | 
DMA_LISR_DMEIF0
 | \

136 
DMA_LISR_TEIF0
 | 
DMA_LISR_HTIF0
 | \

137 
DMA_LISR_TCIF0
)

	)

139 
	#DMA_Såóm1_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 6)

	)

140 
	#DMA_Såóm2_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 16)

	)

141 
	#DMA_Såóm3_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 22)

	)

142 
	#DMA_Såóm4_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 | (uöt32_t)0x20000000)

	)

143 
	#DMA_Såóm5_IT_MASK
 (
uöt32_t
)(
DMA_Såóm1_IT_MASK
 | (uöt32_t)0x20000000)

	)

144 
	#DMA_Såóm6_IT_MASK
 (
uöt32_t
)(
DMA_Såóm2_IT_MASK
 | (uöt32_t)0x20000000)

	)

145 
	#DMA_Såóm7_IT_MASK
 (
uöt32_t
)(
DMA_Såóm3_IT_MASK
 | (uöt32_t)0x20000000)

	)

146 
	#TRANSFER_IT_MASK
 (
uöt32_t
)0x0F3C0F3C

	)

147 
	#HIGH_ISR_MASK
 (
uöt32_t
)0x20000000

	)

148 
	#RESERVED_MASK
 (
uöt32_t
)0x0F7D0F7D

	)

188 
	$DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

191 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

194 
DMAy_Såómx
->
CR
 &~((
uöt32_t
)
DMA_SxCR_EN
);

197 
DMAy_Såómx
->
CR
 = 0;

200 
DMAy_Såómx
->
NDTR
 = 0;

203 
DMAy_Såómx
->
PAR
 = 0;

206 
DMAy_Såómx
->
M0AR
 = 0;

209 
DMAy_Såómx
->
M1AR
 = 0;

212 
DMAy_Såómx
->
FCR
 = (
uöt32_t
)0x00000021;

215 i‡(
DMAy_Såómx
 =
DMA1_Såóm0
)

218 
DMA1
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

220 i‡(
DMAy_Såómx
 =
DMA1_Såóm1
)

223 
DMA1
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

225 i‡(
DMAy_Såómx
 =
DMA1_Såóm2
)

228 
DMA1
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

230 i‡(
DMAy_Såómx
 =
DMA1_Såóm3
)

233 
DMA1
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

235 i‡(
DMAy_Såómx
 =
DMA1_Såóm4
)

238 
DMA1
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

240 i‡(
DMAy_Såómx
 =
DMA1_Såóm5
)

243 
DMA1
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

245 i‡(
DMAy_Såómx
 =
DMA1_Såóm6
)

248 
DMA1
->
HIFCR
 = (
uöt32_t
)
DMA_Såóm6_IT_MASK
;

250 i‡(
DMAy_Såómx
 =
DMA1_Såóm7
)

253 
DMA1
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

255 i‡(
DMAy_Såómx
 =
DMA2_Såóm0
)

258 
DMA2
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

260 i‡(
DMAy_Såómx
 =
DMA2_Såóm1
)

263 
DMA2
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

265 i‡(
DMAy_Såómx
 =
DMA2_Såóm2
)

268 
DMA2
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

270 i‡(
DMAy_Såómx
 =
DMA2_Såóm3
)

273 
DMA2
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

275 i‡(
DMAy_Såómx
 =
DMA2_Såóm4
)

278 
DMA2
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

280 i‡(
DMAy_Såómx
 =
DMA2_Såóm5
)

283 
DMA2
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

285 i‡(
DMAy_Såómx
 =
DMA2_Såóm6
)

288 
DMA2
->
HIFCR
 = 
DMA_Såóm6_IT_MASK
;

292 i‡(
DMAy_Såómx
 =
DMA2_Såóm7
)

295 
DMA2
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

298 
	}
}

311 
	$DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

313 
uöt32_t
 
tm¥eg
 = 0;

316 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

317 
	`as£π_∑øm
(
	`IS_DMA_CHANNEL
(
DMA_InôSåu˘
->
DMA_Ch™√l
));

318 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
DMA_InôSåu˘
->
DMA_DIR
));

319 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

320 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

321 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

322 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

323 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

324 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

325 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

326 
	`as£π_∑øm
(
	`IS_DMA_FIFO_MODE_STATE
(
DMA_InôSåu˘
->
DMA_FIFOMode
));

327 
	`as£π_∑øm
(
	`IS_DMA_FIFO_THRESHOLD
(
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
));

328 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_BURST
(
DMA_InôSåu˘
->
DMA_Mem‹yBur°
));

329 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_BURST
(
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
));

333 
tm¥eg
 = 
DMAy_Såómx
->
CR
;

336 
tm¥eg
 &((
uöt32_t
)~(
DMA_SxCR_CHSEL
 | 
DMA_SxCR_MBURST
 | 
DMA_SxCR_PBURST
 | \

337 
DMA_SxCR_PL
 | 
DMA_SxCR_MSIZE
 | 
DMA_SxCR_PSIZE
 | \

338 
DMA_SxCR_MINC
 | 
DMA_SxCR_PINC
 | 
DMA_SxCR_CIRC
 | \

339 
DMA_SxCR_DIR
));

352 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_Ch™√l
 | DMA_InôSåu˘->
DMA_DIR
 |

353 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

354 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

355 
DMA_InôSåu˘
->
DMA_Mode
 | DMA_InôSåu˘->
DMA_Pri‹ôy
 |

356 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 | DMA_InôSåu˘->
DMA_PîùhîÆBur°
;

359 
DMAy_Såómx
->
CR
 = 
tm¥eg
;

363 
tm¥eg
 = 
DMAy_Såómx
->
FCR
;

366 
tm¥eg
 &(
uöt32_t
)~(
DMA_SxFCR_DMDIS
 | 
DMA_SxFCR_FTH
);

371 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_FIFOMode
 | DMA_InôSåu˘->
DMA_FIFOThªshﬁd
;

374 
DMAy_Såómx
->
FCR
 = 
tm¥eg
;

378 
DMAy_Såómx
->
NDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

382 
DMAy_Såómx
->
PAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

386 
DMAy_Såómx
->
M0AR
 = 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
;

387 
	}
}

395 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

399 
DMA_InôSåu˘
->
DMA_Ch™√l
 = 0;

402 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

405 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
 = 0;

408 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆToMem‹y
;

411 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

414 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

417 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

420 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

423 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

426 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

429 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

432 
DMA_InôSåu˘
->
DMA_FIFOMode
 = 
DMA_FIFOMode_DißbÀ
;

435 
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
;

438 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

441 
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

442 
	}
}

470 
	$DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

473 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

474 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

476 i‡(
NewSèã
 !
DISABLE
)

479 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_EN
;

484 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_EN
;

486 
	}
}

506 
	$DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
)

509 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

510 
	`as£π_∑øm
(
	`IS_DMA_PINCOS_SIZE
(
DMA_Pöcos
));

513 if(
DMA_Pöcos
 !
DMA_PINCOS_Psize
)

516 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PINCOS
;

521 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PINCOS
;

523 
	}
}

542 
	$DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
)

545 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

546 
	`as£π_∑øm
(
	`IS_DMA_FLOW_CTRL
(
DMA_FlowCål
));

549 if(
DMA_FlowCål
 !
DMA_FlowCål_Mem‹y
)

552 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PFCTRL
;

557 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PFCTRL
;

559 
	}
}

626 
	$DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
)

629 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

632 
DMAy_Såómx
->
NDTR
 = (
uöt16_t
)
Cou¡î
;

633 
	}
}

641 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

644 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

647  ((
uöt16_t
)(
DMAy_Såómx
->
NDTR
));

648 
	}
}

718 
	$DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

719 
uöt32_t
 
DMA_CuºítMem‹y
)

722 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

723 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_CuºítMem‹y
));

725 i‡(
DMA_CuºítMem‹y
 !
DMA_Mem‹y_0
)

728 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_SxCR_CT
);

733 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_SxCR_CT
);

737 
DMAy_Såómx
->
M1AR
 = 
Mem‹y1Ba£Addr
;

738 
	}
}

749 
	$DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

752 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

753 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

756 i‡(
NewSèã
 !
DISABLE
)

759 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_DBM
;

764 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_DBM
;

766 
	}
}

790 
	$DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

791 
uöt32_t
 
DMA_Mem‹yT¨gë
)

794 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

795 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_Mem‹yT¨gë
));

798 i‡(
DMA_Mem‹yT¨gë
 !
DMA_Mem‹y_0
)

801 
DMAy_Såómx
->
M1AR
 = 
Mem‹yBa£Addr
;

806 
DMAy_Såómx
->
M0AR
 = 
Mem‹yBa£Addr
;

808 
	}
}

816 
uöt32_t
 
	$DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

818 
uöt32_t
 
tmp
 = 0;

821 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

824 i‡((
DMAy_Såómx
->
CR
 & 
DMA_SxCR_CT
) != 0)

827 
tmp
 = 1;

832 
tmp
 = 0;

834  
tmp
;

835 
	}
}

925 
Fun˘i⁄ÆSèã
 
	$DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

927 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

930 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

932 i‡((
DMAy_Såómx
->
CR
 & (
uöt32_t
)
DMA_SxCR_EN
) != 0)

935 
°©e
 = 
ENABLE
;

941 
°©e
 = 
DISABLE
;

943  
°©e
;

944 
	}
}

959 
uöt32_t
 
	$DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

961 
uöt32_t
 
tm¥eg
 = 0;

964 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

967 
tm¥eg
 = (
uöt32_t
)((
DMAy_Såómx
->
FCR
 & 
DMA_SxFCR_FS
));

969  
tm¥eg
;

970 
	}
}

986 
FœgSètus
 
	$DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

988 
FœgSètus
 
bô°©us
 = 
RESET
;

989 
DMA_Ty≥Def
* 
DMAy
;

990 
uöt32_t
 
tm¥eg
 = 0;

993 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

994 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

997 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1000 
DMAy
 = 
DMA1
;

1005 
DMAy
 = 
DMA2
;

1009 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1012 
tm¥eg
 = 
DMAy
->
HISR
;

1017 
tm¥eg
 = 
DMAy
->
LISR
;

1021 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1024 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

1027 
bô°©us
 = 
SET
;

1032 
bô°©us
 = 
RESET
;

1036  
bô°©us
;

1037 
	}
}

1053 
	$DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

1055 
DMA_Ty≥Def
* 
DMAy
;

1058 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1059 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

1062 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1065 
DMAy
 = 
DMA1
;

1070 
DMAy
 = 
DMA2
;

1074 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1077 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1082 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1084 
	}
}

1100 
	$DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1103 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1104 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

1105 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1108 i‡((
DMA_IT
 & 
DMA_IT_FE
) != 0)

1110 i‡(
NewSèã
 !
DISABLE
)

1113 
DMAy_Såómx
->
FCR
 |(
uöt32_t
)
DMA_IT_FE
;

1118 
DMAy_Såómx
->
FCR
 &~(
uöt32_t
)
DMA_IT_FE
;

1123 i‡(
DMA_IT
 !
DMA_IT_FE
)

1125 i‡(
NewSèã
 !
DISABLE
)

1128 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1133 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1136 
	}
}

1152 
ITSètus
 
	$DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1154 
ITSètus
 
bô°©us
 = 
RESET
;

1155 
DMA_Ty≥Def
* 
DMAy
;

1156 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

1159 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1160 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

1163 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1166 
DMAy
 = 
DMA1
;

1171 
DMAy
 = 
DMA2
;

1175 i‡((
DMA_IT
 & 
TRANSFER_IT_MASK
Ë!(
uöt32_t
)
RESET
)

1178 
tm¥eg
 = (
uöt32_t
)((
DMA_IT
 >> 11Ë& 
TRANSFER_IT_ENABLE_MASK
);

1181 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
CR
 & 
tm¥eg
);

1186 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
FCR
 & 
DMA_IT_FE
);

1190 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1193 
tm¥eg
 = 
DMAy
->
HISR
 ;

1198 
tm¥eg
 = 
DMAy
->
LISR
 ;

1202 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1205 i‡(((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

1208 
bô°©us
 = 
SET
;

1213 
bô°©us
 = 
RESET
;

1217  
bô°©us
;

1218 
	}
}

1234 
	$DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1236 
DMA_Ty≥Def
* 
DMAy
;

1239 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1240 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

1243 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1246 
DMAy
 = 
DMA1
;

1251 
DMAy
 = 
DMA2
;

1255 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1258 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1263 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1265 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_exti.c

61 
	~"°m32f4xx_exti.h
"

75 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

103 
	$EXTI_DeInô
()

105 
EXTI
->
IMR
 = 0x00000000;

106 
EXTI
->
EMR
 = 0x00000000;

107 
EXTI
->
RTSR
 = 0x00000000;

108 
EXTI
->
FTSR
 = 0x00000000;

109 
EXTI
->
PR
 = 0x007FFFFF;

110 
	}
}

119 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

121 
uöt32_t
 
tmp
 = 0;

124 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

125 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

126 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

127 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

129 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

131 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

134 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

135 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

137 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

139 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

142 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

143 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

146 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

149 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

150 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

154 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

155 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

157 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

162 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

165 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

167 
	}
}

175 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

177 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

178 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

179 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

180 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

181 
	}
}

190 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

193 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

195 
EXTI
->
SWIER
 |
EXTI_Löe
;

196 
	}
}

220 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

222 
FœgSètus
 
bô°©us
 = 
RESET
;

224 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

226 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

228 
bô°©us
 = 
SET
;

232 
bô°©us
 = 
RESET
;

234  
bô°©us
;

235 
	}
}

243 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

246 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

248 
EXTI
->
PR
 = 
EXTI_Löe
;

249 
	}
}

257 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

259 
ITSètus
 
bô°©us
 = 
RESET
;

260 
uöt32_t
 
íabÀ°©us
 = 0;

262 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

264 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

265 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

267 
bô°©us
 = 
SET
;

271 
bô°©us
 = 
RESET
;

273  
bô°©us
;

274 
	}
}

282 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

285 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

287 
EXTI
->
PR
 = 
EXTI_Löe
;

288 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_flash.c

70 
	~"°m32f4xx_Êash.h
"

83 
	#SECTOR_MASK
 ((
uöt32_t
)0xFFFFFF07)

	)

164 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

167 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

170 *(
__IO
 
uöt8_t
 *)
ACR_BYTE0_ADDRESS
 = (uöt8_t)
FLASH_L©ícy
;

171 
	}
}

179 
	$FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

182 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

185 if(
NewSèã
 !
DISABLE
)

187 
FLASH
->
ACR
 |
FLASH_ACR_PRFTEN
;

191 
FLASH
->
ACR
 &(~
FLASH_ACR_PRFTEN
);

193 
	}
}

201 
	$FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

204 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

206 if(
NewSèã
 !
DISABLE
)

208 
FLASH
->
ACR
 |
FLASH_ACR_ICEN
;

212 
FLASH
->
ACR
 &(~
FLASH_ACR_ICEN
);

214 
	}
}

222 
	$FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

225 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

227 if(
NewSèã
 !
DISABLE
)

229 
FLASH
->
ACR
 |
FLASH_ACR_DCEN
;

233 
FLASH
->
ACR
 &(~
FLASH_ACR_DCEN
);

235 
	}
}

243 
	$FLASH_In°ru˘i⁄CacheRe£t
()

245 
FLASH
->
ACR
 |
FLASH_ACR_ICRST
;

246 
	}
}

254 
	$FLASH_D©aCacheRe£t
()

256 
FLASH
->
ACR
 |
FLASH_ACR_DCRST
;

257 
	}
}

298 
	$FLASH_U∆ock
()

300 if((
FLASH
->
CR
 & 
FLASH_CR_LOCK
Ë!
RESET
)

303 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

304 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

306 
	}
}

313 
	$FLASH_Lock
()

316 
FLASH
->
CR
 |
FLASH_CR_LOCK
;

317 
	}
}

339 
FLASH_Sètus
 
	$FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
)

341 
uöt32_t
 
tmp_psize
 = 0x0;

342 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

345 
	`as£π_∑øm
(
	`IS_FLASH_SECTOR
(
FLASH_Se˘‹
));

346 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

348 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

350 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

352 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

354 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

356 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

358 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

362 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

365 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

367 if(
°©us
 =
FLASH_COMPLETE
)

370 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

371 
FLASH
->
CR
 |
tmp_psize
;

372 
FLASH
->
CR
 &
SECTOR_MASK
;

373 
FLASH
->
CR
 |
FLASH_CR_SER
 | 
FLASH_Se˘‹
;

374 
FLASH
->
CR
 |
FLASH_CR_STRT
;

377 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

380 
FLASH
->
CR
 &(~
FLASH_CR_SER
);

381 
FLASH
->
CR
 &
SECTOR_MASK
;

384  
°©us
;

385 
	}
}

404 
FLASH_Sètus
 
	$FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

406 
uöt32_t
 
tmp_psize
 = 0x0;

407 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

410 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

411 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

413 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

415 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

417 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

419 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

421 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

423 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

427 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

429 if(
°©us
 =
FLASH_COMPLETE
)

432 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

433 
FLASH
->
CR
 |
tmp_psize
;

434 
FLASH
->
CR
 |
FLASH_CR_MER
;

435 
FLASH
->
CR
 |
FLASH_CR_STRT
;

438 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

441 
FLASH
->
CR
 &(~
FLASH_CR_MER
);

445  
°©us
;

446 
	}
}

457 
FLASH_Sètus
 
	$FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
)

459 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

462 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

465 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

467 if(
°©us
 =
FLASH_COMPLETE
)

470 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

471 
FLASH
->
CR
 |
FLASH_PSIZE_DOUBLE_WORD
;

472 
FLASH
->
CR
 |
FLASH_CR_PG
;

474 *(
__IO
 
uöt64_t
*)
Addªss
 = 
D©a
;

477 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

480 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

483  
°©us
;

484 
	}
}

495 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

497 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

500 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

503 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

505 if(
°©us
 =
FLASH_COMPLETE
)

508 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

509 
FLASH
->
CR
 |
FLASH_PSIZE_WORD
;

510 
FLASH
->
CR
 |
FLASH_CR_PG
;

512 *(
__IO
 
uöt32_t
*)
Addªss
 = 
D©a
;

515 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

518 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

521  
°©us
;

522 
	}
}

533 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

535 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

538 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

541 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

543 if(
°©us
 =
FLASH_COMPLETE
)

546 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

547 
FLASH
->
CR
 |
FLASH_PSIZE_HALF_WORD
;

548 
FLASH
->
CR
 |
FLASH_CR_PG
;

550 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

553 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

556 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

559  
°©us
;

560 
	}
}

571 
FLASH_Sètus
 
	$FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

573 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

576 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

579 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

581 if(
°©us
 =
FLASH_COMPLETE
)

584 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

585 
FLASH
->
CR
 |
FLASH_PSIZE_BYTE
;

586 
FLASH
->
CR
 |
FLASH_CR_PG
;

588 *(
__IO
 
uöt8_t
*)
Addªss
 = 
D©a
;

591 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

594 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

598  
°©us
;

599 
	}
}

656 
	$FLASH_OB_U∆ock
()

658 if((
FLASH
->
OPTCR
 & 
FLASH_OPTCR_OPTLOCK
Ë!
RESET
)

661 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY1
;

662 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY2
;

664 
	}
}

671 
	$FLASH_OB_Lock
()

674 
FLASH
->
OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

675 
	}
}

687 
	$FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

689 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

692 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

693 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

695 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

697 if(
°©us
 =
FLASH_COMPLETE
)

699 if(
NewSèã
 !
DISABLE
)

701 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
OB_WRP
);

705 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
OB_WRP
;

708 
	}
}

722 
	$FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
)

724 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

727 
	`as£π_∑øm
(
	`IS_OB_RDP
(
OB_RDP
));

729 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

731 if(
°©us
 =
FLASH_COMPLETE
)

733 *(
__IO
 
uöt8_t
*)
OPTCR_BYTE1_ADDRESS
 = 
OB_RDP
;

736 
	}
}

754 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
)

756 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

757 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

760 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

761 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

762 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

765 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

767 if(
°©us
 =
FLASH_COMPLETE
)

770 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0F);

773 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 = 
OB_IWDG
 | (uöt8_t)(
OB_STDBY
 | (uöt8_t)(
OB_STOP
 | ((uöt8_t)
›ti⁄tmp
)));

775 
	}
}

787 
	$FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
)

790 
	`as£π_∑øm
(
	`IS_OB_BOR
(
OB_BOR
));

793 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BOR_LEV
);

794 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
OB_BOR
;

796 
	}
}

804 
FLASH_Sètus
 
	$FLASH_OB_Launch
()

806 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

809 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
FLASH_OPTCR_OPTSTRT
;

812 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

814  
°©us
;

815 
	}
}

823 
uöt8_t
 
	$FLASH_OB_GëU£r
()

826  (
uöt8_t
)(
FLASH
->
OPTCR
 >> 5);

827 
	}
}

834 
uöt16_t
 
	$FLASH_OB_GëWRP
()

837  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

838 
	}
}

847 
FœgSètus
 
	$FLASH_OB_GëRDP
()

849 
FœgSètus
 
ªad°©us
 = 
RESET
;

851 i‡((*(
__IO
 
uöt8_t
*)(
OPTCR_BYTE1_ADDRESS
Ë!(uöt8_t)
OB_RDP_Levñ_0
))

853 
ªad°©us
 = 
SET
;

857 
ªad°©us
 = 
RESET
;

859  
ªad°©us
;

860 
	}
}

871 
uöt8_t
 
	$FLASH_OB_GëBOR
()

874  (
uöt8_t
)(*(
__IO
 uöt8_à*)(
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0C);

875 
	}
}

901 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

904 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

905 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

907 if(
NewSèã
 !
DISABLE
)

910 
FLASH
->
CR
 |
FLASH_IT
;

915 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

917 
	}
}

932 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

934 
FœgSètus
 
bô°©us
 = 
RESET
;

936 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
));

938 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

940 
bô°©us
 = 
SET
;

944 
bô°©us
 = 
RESET
;

947  
bô°©us
;

948 
	}
}

962 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

965 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
));

968 
FLASH
->
SR
 = 
FLASH_FLAG
;

969 
	}
}

977 
FLASH_Sètus
 
	$FLASH_GëSètus
()

979 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

981 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

983 
Êash°©us
 = 
FLASH_BUSY
;

987 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPERR
Ë!(
uöt32_t
)0x00)

989 
Êash°©us
 = 
FLASH_ERROR_WRP
;

993 if((
FLASH
->
SR
 & (
uöt32_t
)0xEF) != (uint32_t)0x00)

995 
Êash°©us
 = 
FLASH_ERROR_PROGRAM
;

999 if((
FLASH
->
SR
 & 
FLASH_FLAG_OPERR
Ë!(
uöt32_t
)0x00)

1001 
Êash°©us
 = 
FLASH_ERROR_OPERATION
;

1005 
Êash°©us
 = 
FLASH_COMPLETE
;

1011  
Êash°©us
;

1012 
	}
}

1020 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
()

1022 
__IO
 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1025 
°©us
 = 
	`FLASH_GëSètus
();

1030 
°©us
 =
FLASH_BUSY
)

1032 
°©us
 = 
	`FLASH_GëSètus
();

1035  
°©us
;

1036 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fsmc.c

30 
	~"°m32f4xx_fsmc.h
"

31 
	~"°m32f4xx_rcc.h
"

47 
	#BCR_MBKEN_SET
 ((
uöt32_t
)0x00000001)

	)

48 
	#BCR_MBKEN_RESET
 ((
uöt32_t
)0x000FFFFE)

	)

49 
	#BCR_FACCEN_SET
 ((
uöt32_t
)0x00000040)

	)

52 
	#PCR_PBKEN_SET
 ((
uöt32_t
)0x00000004)

	)

53 
	#PCR_PBKEN_RESET
 ((
uöt32_t
)0x000FFFFB)

	)

54 
	#PCR_ECCEN_SET
 ((
uöt32_t
)0x00000040)

	)

55 
	#PCR_ECCEN_RESET
 ((
uöt32_t
)0x000FFFBF)

	)

56 
	#PCR_MEMORYTYPE_NAND
 ((
uöt32_t
)0x00000008)

	)

116 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

119 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

122 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

124 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

129 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

131 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

132 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

133 
	}
}

143 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

146 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

147 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

148 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

149 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

150 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

151 
	`as£π_∑øm
(
	`IS_FSMC_ASYNWAIT
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
));

152 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

153 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

154 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

155 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

156 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

157 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

158 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

159 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

160 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

161 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

162 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

163 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

164 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

165 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

168 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

169 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

170 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

171 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

172 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

173 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 |

174 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

175 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

176 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

177 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

178 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

179 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

180 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

181 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

183 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_SET
;

186 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

187 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

188 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

189 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

190 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

191 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

192 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

193 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

197 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

199 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

200 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

201 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

202 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

203 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

204 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

205 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

206 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

207 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

208 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

209 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

210 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

211 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

215 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

217 
	}
}

225 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

228 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

229 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

230 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

231 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

232 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

233 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 = 
FSMC_Asynchr⁄ousWaô_DißbÀ
;

234 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

235 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

236 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

237 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

238 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

239 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

240 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

241 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

242 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

243 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

244 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

245 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

246 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

247 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

248 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

249 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

250 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

251 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

252 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

253 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

254 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

255 
	}
}

268 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

270 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

271 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

273 i‡(
NewSèã
 !
DISABLE
)

276 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_SET
;

281 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_RESET
;

283 
	}
}

339 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

342 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

344 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

347 
FSMC_B™k2
->
PCR2
 = 0x00000018;

348 
FSMC_B™k2
->
SR2
 = 0x00000040;

349 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

350 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

356 
FSMC_B™k3
->
PCR3
 = 0x00000018;

357 
FSMC_B™k3
->
SR3
 = 0x00000040;

358 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

359 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

361 
	}
}

370 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

372 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

375 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

376 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

377 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

378 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

379 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

380 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

381 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

382 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

383 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

384 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

385 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

386 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

387 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

388 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

389 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

392 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

393 
PCR_MEMORYTYPE_NAND
 |

394 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

395 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

396 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

397 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

398 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

401 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

402 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

403 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

404 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

407 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

408 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

409 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

410 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

412 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

415 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

416 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

417 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

422 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

423 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

424 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

426 
	}
}

435 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

438 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

439 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

440 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

441 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

442 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

443 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

444 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

445 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

446 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

447 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

448 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

449 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

450 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

451 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

452 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

453 
	}
}

464 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

466 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

467 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

469 i‡(
NewSèã
 !
DISABLE
)

472 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

474 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_SET
;

478 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_SET
;

484 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

486 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_RESET
;

490 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_RESET
;

493 
	}
}

504 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

506 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

507 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

509 i‡(
NewSèã
 !
DISABLE
)

512 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

514 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_SET
;

518 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_SET
;

524 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

526 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_RESET
;

530 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_RESET
;

533 
	}
}

543 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

545 
uöt32_t
 
eccvÆ
 = 0x00000000;

547 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

550 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

555 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

558 (
eccvÆ
);

559 
	}
}

607 
	$FSMC_PCCARDDeInô
()

610 
FSMC_B™k4
->
PCR4
 = 0x00000018;

611 
FSMC_B™k4
->
SR4
 = 0x00000000;

612 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

613 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

614 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

615 
	}
}

624 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

627 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

628 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

629 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

631 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

632 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

633 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

634 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

636 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

637 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

638 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

639 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

640 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

641 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

642 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

643 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

646 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

647 
FSMC_Mem‹yD©aWidth_16b
 |

648 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

649 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

652 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

653 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

654 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

655 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

658 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

659 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

660 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

661 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

664 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

665 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

666 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

667 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

668 
	}
}

676 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

679 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

680 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

681 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

682 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

683 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

684 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

685 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

686 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

687 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

688 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

689 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

690 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

691 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

692 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

693 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

694 
	}
}

702 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

704 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

706 i‡(
NewSèã
 !
DISABLE
)

709 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_SET
;

714 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_RESET
;

716 
	}
}

749 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

751 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

752 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

753 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

755 i‡(
NewSèã
 !
DISABLE
)

758 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

760 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

763 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

765 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

770 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

776 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

779 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

782 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

784 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

789 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

792 
	}
}

809 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

811 
FœgSètus
 
bô°©us
 = 
RESET
;

812 
uöt32_t
 
tmp§
 = 0x00000000;

815 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

816 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

818 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

820 
tmp§
 = 
FSMC_B™k2
->
SR2
;

822 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

824 
tmp§
 = 
FSMC_B™k3
->
SR3
;

829 
tmp§
 = 
FSMC_B™k4
->
SR4
;

833 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

835 
bô°©us
 = 
SET
;

839 
bô°©us
 = 
RESET
;

842  
bô°©us
;

843 
	}
}

859 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

862 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

863 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

865 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

867 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

869 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

871 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

876 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

878 
	}
}

894 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

896 
ITSètus
 
bô°©us
 = 
RESET
;

897 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

900 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

901 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

903 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

905 
tmp§
 = 
FSMC_B™k2
->
SR2
;

907 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

909 
tmp§
 = 
FSMC_B™k3
->
SR3
;

914 
tmp§
 = 
FSMC_B™k4
->
SR4
;

917 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

919 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

920 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

922 
bô°©us
 = 
SET
;

926 
bô°©us
 = 
RESET
;

928  
bô°©us
;

929 
	}
}

945 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

948 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

949 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

951 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

953 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

955 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

957 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

962 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

964 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c

79 
	~"°m32f4xx_gpio.h
"

80 
	~"°m32f4xx_rcc.h
"

120 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

123 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

125 i‡(
GPIOx
 =
GPIOA
)

127 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

128 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
DISABLE
);

130 i‡(
GPIOx
 =
GPIOB
)

132 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

133 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
DISABLE
);

135 i‡(
GPIOx
 =
GPIOC
)

137 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

138 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
DISABLE
);

140 i‡(
GPIOx
 =
GPIOD
)

142 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

143 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
DISABLE
);

145 i‡(
GPIOx
 =
GPIOE
)

147 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
ENABLE
);

148 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
DISABLE
);

150 i‡(
GPIOx
 =
GPIOF
)

152 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
ENABLE
);

153 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
DISABLE
);

155 i‡(
GPIOx
 =
GPIOG
)

157 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
ENABLE
);

158 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
DISABLE
);

160 i‡(
GPIOx
 =
GPIOH
)

162 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
ENABLE
);

163 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
DISABLE
);

167 i‡(
GPIOx
 =
GPIOI
)

169 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
ENABLE
);

170 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
DISABLE
);

173 
	}
}

182 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

184 
uöt32_t
 
pöpos
 = 0x00, 
pos
 = 0x00 , 
cuºíçö
 = 0x00;

187 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

188 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

189 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

190 
	`as£π_∑øm
(
	`IS_GPIO_PUPD
(
GPIO_InôSåu˘
->
GPIO_PuPd
));

194 
pöpos
 = 0x00;Öinpos < 0x10;Öinpos++)

196 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

198 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

200 i‡(
cuºíçö
 =
pos
)

202 
GPIOx
->
MODER
 &~(
GPIO_MODER_MODER0
 << (
pöpos
 * 2));

203 
GPIOx
->
MODER
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
Ë<< (
pöpos
 * 2));

205 i‡((
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_OUT
Ë|| (GPIO_InôSåu˘->GPIO_Modê=
GPIO_Mode_AF
))

208 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

211 
GPIOx
->
OSPEEDR
 &~(
GPIO_OSPEEDER_OSPEEDR0
 << (
pöpos
 * 2));

212 
GPIOx
->
OSPEEDR
 |((
uöt32_t
)(
GPIO_InôSåu˘
->
GPIO_S≥ed
Ë<< (
pöpos
 * 2));

215 
	`as£π_∑øm
(
	`IS_GPIO_OTYPE
(
GPIO_InôSåu˘
->
GPIO_OTy≥
));

218 
GPIOx
->
OTYPER
 &~((
GPIO_OTYPER_OT_0
Ë<< ((
uöt16_t
)
pöpos
)) ;

219 
GPIOx
->
OTYPER
 |(
uöt16_t
)(((uöt16_t)
GPIO_InôSåu˘
->
GPIO_OTy≥
Ë<< ((uöt16_t)
pöpos
));

223 
GPIOx
->
PUPDR
 &~(
GPIO_PUPDR_PUPDR0
 << ((
uöt16_t
)
pöpos
 * 2));

224 
GPIOx
->
PUPDR
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_PuPd
Ë<< (
pöpos
 * 2));

227 
	}
}

234 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

237 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

238 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN
;

239 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

240 
GPIO_InôSåu˘
->
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

241 
GPIO_InôSåu˘
->
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

242 
	}
}

255 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

257 
__IO
 
uöt32_t
 
tmp
 = 0x00010000;

260 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

261 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

263 
tmp
 |
GPIO_Pö
;

265 
GPIOx
->
LCKR
 = 
tmp
;

267 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

269 
GPIOx
->
LCKR
 = 
tmp
;

271 
tmp
 = 
GPIOx
->
LCKR
;

273 
tmp
 = 
GPIOx
->
LCKR
;

274 
	}
}

299 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

301 
uöt8_t
 
bô°©us
 = 0x00;

304 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

305 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

307 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

309 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

313 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

315  
bô°©us
;

316 
	}
}

323 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

326 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

328  ((
uöt16_t
)
GPIOx
->
IDR
);

329 
	}
}

338 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

340 
uöt8_t
 
bô°©us
 = 0x00;

343 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

344 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

346 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

348 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

352 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

354  
bô°©us
;

355 
	}
}

362 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

365 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

367  ((
uöt16_t
)
GPIOx
->
ODR
);

368 
	}
}

380 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

383 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

384 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

386 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

387 
	}
}

399 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

402 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

403 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

405 
GPIOx
->
BSRRH
 = 
GPIO_Pö
;

406 
	}
}

419 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

422 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

423 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

424 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

426 i‡(
BôVÆ
 !
Bô_RESET
)

428 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

432 
GPIOx
->
BSRRH
 = 
GPIO_Pö
 ;

434 
	}
}

442 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

445 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

447 
GPIOx
->
ODR
 = 
P‹tVÆ
;

448 
	}
}

456 
	$GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

459 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

461 
GPIOx
->
ODR
 ^
GPIO_Pö
;

462 
	}
}

529 
	$GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
)

531 
uöt32_t
 
ãmp
 = 0x00;

532 
uöt32_t
 
ãmp_2
 = 0x00;

535 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

536 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

537 
	`as£π_∑øm
(
	`IS_GPIO_AF
(
GPIO_AF
));

539 
ãmp
 = ((
uöt32_t
)(
GPIO_AF
Ë<< ((uöt32_t)((uöt32_t)
GPIO_PöSour˚
 & (uint32_t)0x07) * 4)) ;

540 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] &~((
uöt32_t
)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;

541 
ãmp_2
 = 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] | 
ãmp
;

542 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] = 
ãmp_2
;

543 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c

123 
	~"°m32f4xx_hash.h
"

124 
	~"°m32f4xx_rcc.h
"

171 
	$HASH_DeInô
()

174 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_HASH
, 
ENABLE
);

176 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_HASH
, 
DISABLE
);

177 
	}
}

191 
	$HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
)

194 
	`as£π_∑øm
(
	`IS_HASH_ALGOSELECTION
(
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
));

195 
	`as£π_∑øm
(
	`IS_HASH_DATATYPE
(
HASH_InôSåu˘
->
HASH_D©aTy≥
));

196 
	`as£π_∑øm
(
	`IS_HASH_ALGOMODE
(
HASH_InôSåu˘
->
HASH_AlgoMode
));

199 
HASH
->
CR
 &~ (
HASH_CR_ALGO
 | 
HASH_CR_DATATYPE
 | 
HASH_CR_MODE
);

200 
HASH
->
CR
 |(
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
 | \

201 
HASH_InôSåu˘
->
HASH_D©aTy≥
 | \

202 
HASH_InôSåu˘
->
HASH_AlgoMode
);

205 if(
HASH_InôSåu˘
->
HASH_AlgoMode
 =
HASH_AlgoMode_HMAC
)

207 
	`as£π_∑øm
(
	`IS_HASH_HMAC_KEYTYPE
(
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
));

208 
HASH
->
CR
 &~
HASH_CR_LKEY
;

209 
HASH
->
CR
 |
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
;

214 
HASH
->
CR
 |
HASH_CR_INIT
;

215 
	}
}

225 
	$HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
)

228 
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

231 
HASH_InôSåu˘
->
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

234 
HASH_InôSåu˘
->
HASH_D©aTy≥
 = 
HASH_D©aTy≥_32b
;

237 
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

238 
	}
}

249 
	$HASH_Re£t
()

252 
HASH
->
CR
 |
HASH_CR_INIT
;

253 
	}
}

291 
	$HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
)

294 
	`as£π_∑øm
(
	`IS_HASH_VALIDBITSNUMBER
(
VÆidNumbî
));

297 
HASH
->
STR
 &~(
HASH_STR_NBW
);

298 
HASH
->
STR
 |
VÆidNumbî
;

299 
	}
}

306 
	$HASH_D©aIn
(
uöt32_t
 
D©a
)

309 
HASH
->
DIN
 = 
D©a
;

310 
	}
}

317 
uöt8_t
 
	$HASH_GëInFIFOW‹dsNbr
()

320  ((
HASH
->
CR
 & 
HASH_CR_NBW
) >> 8);

321 
	}
}

331 
	$HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
)

334 
HASH_MesßgeDige°
->
D©a
[0] = 
HASH
->
HR
[0];

335 
HASH_MesßgeDige°
->
D©a
[1] = 
HASH
->
HR
[1];

336 
HASH_MesßgeDige°
->
D©a
[2] = 
HASH
->
HR
[2];

337 
HASH_MesßgeDige°
->
D©a
[3] = 
HASH
->
HR
[3];

338 
HASH_MesßgeDige°
->
D©a
[4] = 
HASH
->
HR
[4];

339 
	}
}

346 
	$HASH_SèπDige°
()

349 
HASH
->
STR
 |
HASH_STR_DCAL
;

350 
	}
}

389 
	$HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
)

391 
uöt8_t
 
i
 = 0;

394 
HASH_C⁄ãxtSave
->
HASH_IMR
 = 
HASH
->
IMR
;

395 
HASH_C⁄ãxtSave
->
HASH_STR
 = 
HASH
->
STR
;

396 
HASH_C⁄ãxtSave
->
HASH_CR
 = 
HASH
->
CR
;

397 
i
=0; i<=50;i++)

399 
HASH_C⁄ãxtSave
->
HASH_CSR
[
i
] = 
HASH
->
CSR
[i];

401 
	}
}

411 
	$HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
)

413 
uöt8_t
 
i
 = 0;

416 
HASH
->
IMR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_IMR
;

417 
HASH
->
STR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_STR
;

418 
HASH
->
CR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_CR
;

421 
HASH
->
CR
 |
HASH_CR_INIT
;

424 
i
=0; i<=50;i++)

426 
HASH
->
CSR
[
i
] = 
HASH_C⁄ãxtRe°‹e
->
HASH_CSR
[i];

428 
	}
}

460 
	$HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

463 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

465 i‡(
NewSèã
 !
DISABLE
)

468 
HASH
->
CR
 |
HASH_CR_DMAE
;

473 
HASH
->
CR
 &~
HASH_CR_DMAE
;

475 
	}
}

555 
	$HASH_ITC⁄fig
(
uöt8_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

558 
	`as£π_∑øm
(
	`IS_HASH_IT
(
HASH_IT
));

559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

561 i‡(
NewSèã
 !
DISABLE
)

564 
HASH
->
IMR
 |
HASH_IT
;

569 
HASH
->
IMR
 &(
uöt8_t
Ë~
HASH_IT
;

571 
	}
}

584 
FœgSètus
 
	$HASH_GëFœgSètus
(
uöt16_t
 
HASH_FLAG
)

586 
FœgSètus
 
bô°©us
 = 
RESET
;

587 
uöt32_t
 
ãm¥eg
 = 0;

590 
	`as£π_∑øm
(
	`IS_HASH_GET_FLAG
(
HASH_FLAG
));

593 i‡((
HASH_FLAG
 & 
HASH_FLAG_DINNE
Ë!(
uöt16_t
)
RESET
 )

595 
ãm¥eg
 = 
HASH
->
CR
;

599 
ãm¥eg
 = 
HASH
->
SR
;

603 i‡((
ãm¥eg
 & 
HASH_FLAG
Ë!(
uöt16_t
)
RESET
)

606 
bô°©us
 = 
SET
;

611 
bô°©us
 = 
RESET
;

615  
bô°©us
;

616 
	}
}

625 
	$HASH_CÀ¨Fœg
(
uöt16_t
 
HASH_FLAG
)

628 
	`as£π_∑øm
(
	`IS_HASH_CLEAR_FLAG
(
HASH_FLAG
));

631 
HASH
->
SR
 = ~(
uöt32_t
)
HASH_FLAG
;

632 
	}
}

641 
ITSètus
 
	$HASH_GëITSètus
(
uöt8_t
 
HASH_IT
)

643 
ITSètus
 
bô°©us
 = 
RESET
;

644 
uöt32_t
 
tm¥eg
 = 0;

647 
	`as£π_∑øm
(
	`IS_HASH_GET_IT
(
HASH_IT
));

651 
tm¥eg
 = 
HASH
->
SR
;

653 i‡(((
HASH
->
IMR
 & 
tm¥eg
Ë& 
HASH_IT
Ë!
RESET
)

656 
bô°©us
 = 
SET
;

661 
bô°©us
 = 
RESET
;

664  
bô°©us
;

665 
	}
}

675 
	$HASH_CÀ¨ITPídögBô
(
uöt8_t
 
HASH_IT
)

678 
	`as£π_∑øm
(
	`IS_HASH_IT
(
HASH_IT
));

681 
HASH
->
SR
 = (
uöt8_t
)~
HASH_IT
;

682 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c

41 
	~"°m32f4xx_hash.h
"

54 
	#MD5BUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

87 
Eº‹Sètus
 
	$HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16])

89 
HASH_InôTy≥Def
 
MD5_HASH_InôSåu˘uª
;

90 
HASH_MsgDige°
 
MD5_MesßgeDige°
;

91 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

92 
uöt32_t
 
i
 = 0;

93 
__IO
 
uöt32_t
 
cou¡î
 = 0;

94 
uöt32_t
 
busy°©us
 = 0;

95 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

96 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

97 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

101 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

104 
	`HASH_DeInô
();

107 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_MD5
;

108 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

109 
MD5_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

110 
	`HASH_Inô
(&
MD5_HASH_InôSåu˘uª
);

113 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

116 
i
=0; i<
IÀn
; i+=4)

118 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

119 
öpuèddr
+=4;

123 
	`HASH_SèπDige°
();

128 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

129 
cou¡î
++;

130 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

132 i‡(
busy°©us
 !
RESET
)

134 
°©us
 = 
ERROR
;

139 
	`HASH_GëDige°
(&
MD5_MesßgeDige°
);

140 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[0]);

141 
ouçuèddr
+=4;

142 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[1]);

143 
ouçuèddr
+=4;

144 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[2]);

145 
ouçuèddr
+=4;

146 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[3]);

148  
°©us
;

149 
	}
}

162 
Eº‹Sètus
 
	$HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
, uöt8_à*
I≈ut
,

163 
uöt32_t
 
IÀn
, 
uöt8_t
 
Ouçut
[16])

165 
HASH_InôTy≥Def
 
MD5_HASH_InôSåu˘uª
;

166 
HASH_MsgDige°
 
MD5_MesßgeDige°
;

167 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

168 
__IO
 
uöt16_t
 
nbvÆidbôskey
 = 0;

169 
uöt32_t
 
i
 = 0;

170 
__IO
 
uöt32_t
 
cou¡î
 = 0;

171 
uöt32_t
 
busy°©us
 = 0;

172 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

173 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

174 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

175 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

178 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

181 
nbvÆidbôskey
 = 8 * (
KeyÀn
 % 4);

184 
	`HASH_DeInô
();

187 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_MD5
;

188 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HMAC
;

189 
MD5_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

190 if(
KeyÀn
 > 64)

193 
MD5_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_L⁄gKey
;

198 
MD5_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

200 
	`HASH_Inô
(&
MD5_HASH_InôSåu˘uª
);

203 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

206 
i
=0; i<
KeyÀn
; i+=4)

208 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

209 
keyaddr
+=4;

213 
	`HASH_SèπDige°
();

218 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

219 
cou¡î
++;

220 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

222 i‡(
busy°©us
 !
RESET
)

224 
°©us
 = 
ERROR
;

229 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

232 
i
=0; i<
IÀn
; i+=4)

234 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

235 
öpuèddr
+=4;

239 
	`HASH_SèπDige°
();

242 
cou¡î
 =0;

245 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

246 
cou¡î
++;

247 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

249 i‡(
busy°©us
 !
RESET
)

251 
°©us
 = 
ERROR
;

256 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

259 
keyaddr
 = (
uöt32_t
)
Key
;

260 
i
=0; i<
KeyÀn
; i+=4)

262 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

263 
keyaddr
+=4;

267 
	`HASH_SèπDige°
();

270 
cou¡î
 =0;

273 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

274 
cou¡î
++;

275 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

277 i‡(
busy°©us
 !
RESET
)

279 
°©us
 = 
ERROR
;

284 
	`HASH_GëDige°
(&
MD5_MesßgeDige°
);

285 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[0]);

286 
ouçuèddr
+=4;

287 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[1]);

288 
ouçuèddr
+=4;

289 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[2]);

290 
ouçuèddr
+=4;

291 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[3]);

295  
°©us
;

296 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c

41 
	~"°m32f4xx_hash.h
"

54 
	#SHA1BUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

87 
Eº‹Sètus
 
	$HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20])

89 
HASH_InôTy≥Def
 
SHA1_HASH_InôSåu˘uª
;

90 
HASH_MsgDige°
 
SHA1_MesßgeDige°
;

91 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

92 
uöt32_t
 
i
 = 0;

93 
__IO
 
uöt32_t
 
cou¡î
 = 0;

94 
uöt32_t
 
busy°©us
 = 0;

95 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

96 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

97 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

100 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

103 
	`HASH_DeInô
();

106 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

107 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

108 
SHA1_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

109 
	`HASH_Inô
(&
SHA1_HASH_InôSåu˘uª
);

112 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

115 
i
=0; i<
IÀn
; i+=4)

117 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

118 
öpuèddr
+=4;

122 
	`HASH_SèπDige°
();

127 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

128 
cou¡î
++;

129 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

131 i‡(
busy°©us
 !
RESET
)

133 
°©us
 = 
ERROR
;

138 
	`HASH_GëDige°
(&
SHA1_MesßgeDige°
);

139 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[0]);

140 
ouçuèddr
+=4;

141 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[1]);

142 
ouçuèddr
+=4;

143 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[2]);

144 
ouçuèddr
+=4;

145 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[3]);

146 
ouçuèddr
+=4;

147 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[4]);

149  
°©us
;

150 
	}
}

163 
Eº‹Sètus
 
	$HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
, uöt8_à*
I≈ut
,

164 
uöt32_t
 
IÀn
, 
uöt8_t
 
Ouçut
[20])

166 
HASH_InôTy≥Def
 
SHA1_HASH_InôSåu˘uª
;

167 
HASH_MsgDige°
 
SHA1_MesßgeDige°
;

168 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

169 
__IO
 
uöt16_t
 
nbvÆidbôskey
 = 0;

170 
uöt32_t
 
i
 = 0;

171 
__IO
 
uöt32_t
 
cou¡î
 = 0;

172 
uöt32_t
 
busy°©us
 = 0;

173 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

174 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

175 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

176 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

179 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

182 
nbvÆidbôskey
 = 8 * (
KeyÀn
 % 4);

185 
	`HASH_DeInô
();

188 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

189 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HMAC
;

190 
SHA1_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

191 if(
KeyÀn
 > 64)

194 
SHA1_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_L⁄gKey
;

199 
SHA1_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

201 
	`HASH_Inô
(&
SHA1_HASH_InôSåu˘uª
);

204 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

207 
i
=0; i<
KeyÀn
; i+=4)

209 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

210 
keyaddr
+=4;

214 
	`HASH_SèπDige°
();

219 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

220 
cou¡î
++;

221 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

223 i‡(
busy°©us
 !
RESET
)

225 
°©us
 = 
ERROR
;

230 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

233 
i
=0; i<
IÀn
; i+=4)

235 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

236 
öpuèddr
+=4;

240 
	`HASH_SèπDige°
();

244 
cou¡î
 =0;

247 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

248 
cou¡î
++;

249 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

251 i‡(
busy°©us
 !
RESET
)

253 
°©us
 = 
ERROR
;

258 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

261 
keyaddr
 = (
uöt32_t
)
Key
;

262 
i
=0; i<
KeyÀn
; i+=4)

264 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

265 
keyaddr
+=4;

269 
	`HASH_SèπDige°
();

272 
cou¡î
 =0;

275 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

276 
cou¡î
++;

277 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

279 i‡(
busy°©us
 !
RESET
)

281 
°©us
 = 
ERROR
;

286 
	`HASH_GëDige°
(&
SHA1_MesßgeDige°
);

287 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[0]);

288 
ouçuèddr
+=4;

289 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[1]);

290 
ouçuèddr
+=4;

291 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[2]);

292 
ouçuèddr
+=4;

293 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[3]);

294 
ouçuèddr
+=4;

295 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[4]);

299  
°©us
;

300 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c

87 
	~"°m32f4xx_i2c.h
"

88 
	~"°m32f4xx_rcc.h
"

102 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0xFBF5Ë

	)

103 
	#FLAG_MASK
 ((
uöt32_t
)0x00FFFFFFË

	)

104 
	#ITEN_MASK
 ((
uöt32_t
)0x07000000Ë

	)

132 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

135 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

137 i‡(
I2Cx
 =
I2C1
)

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

142 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

144 i‡(
I2Cx
 =
I2C2
)

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

149 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

153 i‡(
I2Cx
 =
I2C3
)

156 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C3
, 
ENABLE
);

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C3
, 
DISABLE
);

161 
	}
}

175 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

177 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

178 
uöt16_t
 
ªsu…
 = 0x04;

179 
uöt32_t
 
p˛k1
 = 8000000;

180 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

182 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

183 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

184 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

185 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

186 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

187 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

188 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

192 
tm¥eg
 = 
I2Cx
->
CR2
;

194 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_FREQ
);

196 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

197 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

199 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

200 
tm¥eg
 |
‰eqønge
;

202 
I2Cx
->
CR2
 = 
tm¥eg
;

206 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

209 
tm¥eg
 = 0;

212 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

215 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

217 i‡(
ªsu…
 < 0x04)

220 
ªsu…
 = 0x04;

223 
tm¥eg
 |
ªsu…
;

225 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

232 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

235 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

240 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

242 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

246 i‡((
ªsu…
 & 
I2C_CCR_CCR
) == 0)

249 
ªsu…
 |(
uöt16_t
)0x0001;

252 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
I2C_CCR_FS
);

254 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

258 
I2Cx
->
CCR
 = 
tm¥eg
;

260 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

264 
tm¥eg
 = 
I2Cx
->
CR1
;

266 
tm¥eg
 &
CR1_CLEAR_MASK
;

270 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

272 
I2Cx
->
CR1
 = 
tm¥eg
;

276 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

277 
	}
}

284 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

288 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

290 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

292 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

294 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

296 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

298 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

299 
	}
}

308 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

311 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

312 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

313 i‡(
NewSèã
 !
DISABLE
)

316 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

321 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

323 
	}
}

332 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

335 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

336 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

337 i‡(
NewSèã
 !
DISABLE
)

340 
I2Cx
->
CR1
 |
I2C_CR1_START
;

345 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_START
);

347 
	}
}

356 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

359 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

360 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

361 i‡(
NewSèã
 !
DISABLE
)

364 
I2Cx
->
CR1
 |
I2C_CR1_STOP
;

369 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_STOP
);

371 
	}
}

384 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

387 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

388 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

390 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

393 
Addªss
 |
I2C_OAR1_ADD0
;

398 
Addªss
 &(
uöt8_t
)~((uöt8_t)
I2C_OAR1_ADD0
);

401 
I2Cx
->
DR
 = 
Addªss
;

402 
	}
}

411 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

414 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

415 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

416 i‡(
NewSèã
 !
DISABLE
)

419 
I2Cx
->
CR1
 |
I2C_CR1_ACK
;

424 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ACK
);

426 
	}
}

434 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

436 
uöt16_t
 
tm¥eg
 = 0;

439 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

442 
tm¥eg
 = 
I2Cx
->
OAR2
;

445 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ADD2
);

448 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

451 
I2Cx
->
OAR2
 = 
tm¥eg
;

452 
	}
}

461 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

464 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

465 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

466 i‡(
NewSèã
 !
DISABLE
)

469 
I2Cx
->
OAR2
 |
I2C_OAR2_ENDUAL
;

474 
I2Cx
->
OAR2
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ENDUAL
);

476 
	}
}

485 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

488 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

489 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

490 i‡(
NewSèã
 !
DISABLE
)

493 
I2Cx
->
CR1
 |
I2C_CR1_ENGC
;

498 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENGC
);

500 
	}
}

511 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

514 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

515 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

516 i‡(
NewSèã
 !
DISABLE
)

519 
I2Cx
->
CR1
 |
I2C_CR1_SWRST
;

524 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_SWRST
);

526 
	}
}

535 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

539 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

540 i‡(
NewSèã
 =
DISABLE
)

543 
I2Cx
->
CR1
 |
I2C_CR1_NOSTRETCH
;

548 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_NOSTRETCH
);

550 
	}
}

561 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

564 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

565 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

566 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

569 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

574 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

576 
	}
}

599 
	$I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
)

602 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

603 
	`as£π_∑øm
(
	`IS_I2C_NACK_POSITION
(
I2C_NACKPosôi⁄
));

606 i‡(
I2C_NACKPosôi⁄
 =
I2C_NACKPosôi⁄_Next
)

609 
I2Cx
->
CR1
 |
I2C_NACKPosôi⁄_Next
;

614 
I2Cx
->
CR1
 &
I2C_NACKPosôi⁄_Cuºít
;

616 
	}
}

627 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

630 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

631 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

632 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

635 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

640 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

642 
	}
}

651 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

654 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

655 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

656 i‡(
NewSèã
 !
DISABLE
)

659 
I2Cx
->
CR1
 |
I2C_CR1_ENARP
;

664 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENARP
);

666 
	}
}

689 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

692 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

694 
I2Cx
->
DR
 = 
D©a
;

695 
	}
}

702 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

705 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

707  (
uöt8_t
)
I2Cx
->
DR
;

708 
	}
}

733 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

736 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

737 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

738 i‡(
NewSèã
 !
DISABLE
)

741 
I2Cx
->
CR1
 |
I2C_CR1_PEC
;

746 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PEC
);

748 
	}
}

764 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

767 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

768 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

769 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

772 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

777 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

779 
	}
}

788 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

791 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

792 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

793 i‡(
NewSèã
 !
DISABLE
)

796 
I2Cx
->
CR1
 |
I2C_CR1_ENPEC
;

801 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENPEC
);

803 
	}
}

810 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

813 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

815  ((
I2Cx
->
SR2
) >> 8);

816 
	}
}

843 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

846 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

847 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

848 i‡(
NewSèã
 !
DISABLE
)

851 
I2Cx
->
CR2
 |
I2C_CR2_DMAEN
;

856 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_DMAEN
);

858 
	}
}

867 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

870 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

871 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

872 i‡(
NewSèã
 !
DISABLE
)

875 
I2Cx
->
CR2
 |
I2C_CR2_LAST
;

880 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_LAST
);

882 
	}
}

1005 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

1007 
__IO
 
uöt32_t
 
tmp
 = 0;

1010 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1011 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

1013 
tmp
 = (
uöt32_t
Ë
I2Cx
;

1014 
tmp
 +
I2C_Regi°î
;

1017  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

1018 
	}
}

1032 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1035 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1036 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1037 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

1039 i‡(
NewSèã
 !
DISABLE
)

1042 
I2Cx
->
CR2
 |
I2C_IT
;

1047 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

1049 
	}
}

1091 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

1093 
uöt32_t
 
œ°evít
 = 0;

1094 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1095 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1098 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1099 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

1102 
Êag1
 = 
I2Cx
->
SR1
;

1103 
Êag2
 = 
I2Cx
->
SR2
;

1104 
Êag2
 = flag2 << 16;

1107 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1110 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1113 
°©us
 = 
SUCCESS
;

1118 
°©us
 = 
ERROR
;

1121  
°©us
;

1122 
	}
}

1139 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1141 
uöt32_t
 
œ°evít
 = 0;

1142 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1145 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1148 
Êag1
 = 
I2Cx
->
SR1
;

1149 
Êag2
 = 
I2Cx
->
SR2
;

1150 
Êag2
 = flag2 << 16;

1153 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1156  
œ°evít
;

1157 
	}
}

1194 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1196 
FœgSètus
 
bô°©us
 = 
RESET
;

1197 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1200 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1201 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1204 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1207 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1210 
I2C_FLAG
 &
FLAG_MASK
;

1212 if(
i2¸eg
 != 0)

1215 
i2cxba£
 += 0x14;

1220 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1222 
i2cxba£
 += 0x18;

1225 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1228 
bô°©us
 = 
SET
;

1233 
bô°©us
 = 
RESET
;

1237  
bô°©us
;

1238 
	}
}

1271 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1273 
uöt32_t
 
Êagpos
 = 0;

1275 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1276 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1278 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_MASK
;

1280 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1281 
	}
}

1305 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1307 
ITSètus
 
bô°©us
 = 
RESET
;

1308 
uöt32_t
 
íabÀ°©us
 = 0;

1311 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1312 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1315 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_MASK
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1318 
I2C_IT
 &
FLAG_MASK
;

1321 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1324 
bô°©us
 = 
SET
;

1329 
bô°©us
 = 
RESET
;

1332  
bô°©us
;

1333 
	}
}

1365 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1367 
uöt32_t
 
Êagpos
 = 0;

1369 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1370 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1373 
Êagpos
 = 
I2C_IT
 & 
FLAG_MASK
;

1376 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1377 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_iwdg.c

82 
	~"°m32f4xx_iwdg.h
"

97 
	#KR_KEY_RELOAD
 ((
uöt16_t
)0xAAAA)

	)

98 
	#KR_KEY_ENABLE
 ((
uöt16_t
)0xCCCC)

	)

129 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

132 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

133 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

134 
	}
}

149 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

152 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

153 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

154 
	}
}

162 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

165 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

166 
IWDG
->
RLR
 = 
Rñﬂd
;

167 
	}
}

175 
	$IWDG_RñﬂdCou¡î
()

177 
IWDG
->
KR
 = 
KR_KEY_RELOAD
;

178 
	}
}

201 
	$IWDG_E«bÀ
()

203 
IWDG
->
KR
 = 
KR_KEY_ENABLE
;

204 
	}
}

230 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

232 
FœgSètus
 
bô°©us
 = 
RESET
;

234 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

235 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

237 
bô°©us
 = 
SET
;

241 
bô°©us
 = 
RESET
;

244  
bô°©us
;

245 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c

32 
	~"°m32f4xx_pwr.h
"

33 
	~"°m32f4xx_rcc.h
"

47 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

53 
	#DBP_BôNumbî
 0x08

	)

54 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

57 
	#PVDE_BôNumbî
 0x04

	)

58 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

61 
	#FPDS_BôNumbî
 0x09

	)

62 
	#CR_FPDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
FPDS_BôNumbî
 * 4))

	)

65 
	#PMODE_BôNumbî
 0x0E

	)

66 
	#CR_PMODE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PMODE_BôNumbî
 * 4))

	)

72 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

73 
	#EWUP_BôNumbî
 0x08

	)

74 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

77 
	#BRE_BôNumbî
 0x09

	)

78 
	#CSR_BRE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
BRE_BôNumbî
 * 4))

	)

83 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

84 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

120 
	$PWR_DeInô
()

122 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

123 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

124 
	}
}

135 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

138 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

140 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

141 
	}
}

181 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

183 
uöt32_t
 
tm¥eg
 = 0;

186 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

188 
tm¥eg
 = 
PWR
->
CR
;

191 
tm¥eg
 &
CR_PLS_MASK
;

194 
tm¥eg
 |
PWR_PVDLevñ
;

197 
PWR
->
CR
 = 
tm¥eg
;

198 
	}
}

206 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

209 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

211 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

212 
	}
}

240 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

243 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

245 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

246 
	}
}

288 
	$PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

291 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

293 *(
__IO
 
uöt32_t
 *Ë
CSR_BRE_BB
 = (uöt32_t)
NewSèã
;

294 
	}
}

329 
	$PWR_HighPîf‹m™˚ModeCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

332 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

334 *(
__IO
 
uöt32_t
 *Ë
CR_PMODE_BB
 = (uöt32_t)
NewSèã
;

335 
	}
}

343 
	$PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

346 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

348 *(
__IO
 
uöt32_t
 *Ë
CR_FPDS_BB
 = (uöt32_t)
NewSèã
;

349 
	}
}

483 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

485 
uöt32_t
 
tm¥eg
 = 0;

488 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

489 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

492 
tm¥eg
 = 
PWR
->
CR
;

494 
tm¥eg
 &
CR_DS_MASK
;

497 
tm¥eg
 |
PWR_Reguœt‹
;

500 
PWR
->
CR
 = 
tm¥eg
;

503 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

506 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

509 
	`__WFI
();

514 
	`__WFE
();

517 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

518 
	}
}

531 
	$PWR_E¡îSTANDBYMode
()

534 
PWR
->
CR
 |
PWR_CR_CWUF
;

537 
PWR
->
CR
 |
PWR_CR_PDDS
;

540 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

543 #i‡
	`deföed
 ( 
__CC_ARM
 )

544 
	`__f‹˚_°‹es
();

547 
	`__WFI
();

548 
	}
}

587 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

589 
FœgSètus
 
bô°©us
 = 
RESET
;

592 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

594 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

596 
bô°©us
 = 
SET
;

600 
bô°©us
 = 
RESET
;

603  
bô°©us
;

604 
	}
}

614 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

617 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

619 
PWR
->
CR
 |
PWR_FLAG
 << 2;

620 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c

56 
	~"°m32f4xx_rcc.h
"

70 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

73 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

74 
	#HSION_BôNumbî
 0x00

	)

75 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

77 
	#CSSON_BôNumbî
 0x13

	)

78 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

80 
	#PLLON_BôNumbî
 0x18

	)

81 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

83 
	#PLLI2SON_BôNumbî
 0x1A

	)

84 
	#CR_PLLI2SON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLI2SON_BôNumbî
 * 4))

	)

88 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x08)

	)

89 
	#I2SSRC_BôNumbî
 0x17

	)

90 
	#CFGR_I2SSRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
I2SSRC_BôNumbî
 * 4))

	)

94 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x70)

	)

95 
	#RTCEN_BôNumbî
 0x0F

	)

96 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

98 
	#BDRST_BôNumbî
 0x10

	)

99 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

102 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x74)

	)

103 
	#LSION_BôNumbî
 0x00

	)

104 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

107 
	#CFGR_MCO2_RESET_MASK
 ((
uöt32_t
)0x07FFFFFF)

	)

108 
	#CFGR_MCO1_RESET_MASK
 ((
uöt32_t
)0xF89FFFFF)

	)

111 
	#FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

114 
	#CR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023802)

	)

117 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x01))

	)

120 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x02))

	)

123 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

127 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

196 
	$RCC_DeInô
()

199 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

202 
RCC
->
CFGR
 = 0x00000000;

205 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

208 
RCC
->
PLLCFGR
 = 0x24003010;

211 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

214 
RCC
->
CIR
 = 0x00000000;

215 
	}
}

237 
	$RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
)

240 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

243 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE_OFF
;

246 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE
;

247 
	}
}

261 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

263 
__IO
 
uöt32_t
 
°¨tupcou¡î
 = 0;

264 
Eº‹Sètus
 
°©us
 = 
ERROR
;

265 
FœgSètus
 
h£°©us
 = 
RESET
;

269 
h£°©us
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

270 
°¨tupcou¡î
++;

271 } (
°¨tupcou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
h£°©us
 =
RESET
));

273 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

275 
°©us
 = 
SUCCESS
;

279 
°©us
 = 
ERROR
;

281  (
°©us
);

282 
	}
}

292 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

294 
uöt32_t
 
tm¥eg
 = 0;

296 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

298 
tm¥eg
 = 
RCC
->
CR
;

301 
tm¥eg
 &~
RCC_CR_HSITRIM
;

304 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

307 
RCC
->
CR
 = 
tm¥eg
;

308 
	}
}

328 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

333 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

334 
	}
}

353 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

356 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

360 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

363 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

366 
RCC_LSE
)

368 
RCC_LSE_ON
:

370 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

372 
RCC_LSE_By∑ss
:

374 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

379 
	}
}

393 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

396 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

398 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

399 
	}
}

436 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
)

439 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

440 
	`as£π_∑øm
(
	`IS_RCC_PLLM_VALUE
(
PLLM
));

441 
	`as£π_∑øm
(
	`IS_RCC_PLLN_VALUE
(
PLLN
));

442 
	`as£π_∑øm
(
	`IS_RCC_PLLP_VALUE
(
PLLP
));

443 
	`as£π_∑øm
(
	`IS_RCC_PLLQ_VALUE
(
PLLQ
));

445 
RCC
->
PLLCFGR
 = 
PLLM
 | (
PLLN
 << 6Ë| (((
PLLP
 >> 1Ë-1Ë<< 16Ë| (
RCC_PLLSour˚
) |

446 (
PLLQ
 << 24);

447 
	}
}

459 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

462 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

463 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

464 
	}
}

486 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
)

489 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

490 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

492 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SR
 << 28);

493 
	}
}

502 
	$RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

505 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

506 *(
__IO
 
uöt32_t
 *Ë
CR_PLLI2SON_BB
 = (uöt32_t)
NewSèã
;

507 
	}
}

520 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

523 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

524 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

525 
	}
}

545 
	$RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
)

547 
uöt32_t
 
tm¥eg
 = 0;

550 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCO1Sour˚
));

551 
	`as£π_∑øm
(
	`IS_RCC_MCO1DIV
(
RCC_MCO1Div
));

553 
tm¥eg
 = 
RCC
->
CFGR
;

556 
tm¥eg
 &
CFGR_MCO1_RESET_MASK
;

559 
tm¥eg
 |
RCC_MCO1Sour˚
 | 
RCC_MCO1Div
;

562 
RCC
->
CFGR
 = 
tm¥eg
;

563 
	}
}

583 
	$RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
)

585 
uöt32_t
 
tm¥eg
 = 0;

588 
	`as£π_∑øm
(
	`IS_RCC_MCO2SOURCE
(
RCC_MCO2Sour˚
));

589 
	`as£π_∑øm
(
	`IS_RCC_MCO2DIV
(
RCC_MCO2Div
));

591 
tm¥eg
 = 
RCC
->
CFGR
;

594 
tm¥eg
 &
CFGR_MCO2_RESET_MASK
;

597 
tm¥eg
 |
RCC_MCO2Sour˚
 | 
RCC_MCO2Div
;

600 
RCC
->
CFGR
 = 
tm¥eg
;

601 
	}
}

688 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

690 
uöt32_t
 
tm¥eg
 = 0;

693 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

695 
tm¥eg
 = 
RCC
->
CFGR
;

698 
tm¥eg
 &~
RCC_CFGR_SW
;

701 
tm¥eg
 |
RCC_SYSCLKSour˚
;

704 
RCC
->
CFGR
 = 
tm¥eg
;

705 
	}
}

716 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

718  ((
uöt8_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SWS
));

719 
	}
}

741 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

743 
uöt32_t
 
tm¥eg
 = 0;

746 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

748 
tm¥eg
 = 
RCC
->
CFGR
;

751 
tm¥eg
 &~
RCC_CFGR_HPRE
;

754 
tm¥eg
 |
RCC_SYSCLK
;

757 
RCC
->
CFGR
 = 
tm¥eg
;

758 
	}
}

773 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

775 
uöt32_t
 
tm¥eg
 = 0;

778 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

780 
tm¥eg
 = 
RCC
->
CFGR
;

783 
tm¥eg
 &~
RCC_CFGR_PPRE1
;

786 
tm¥eg
 |
RCC_HCLK
;

789 
RCC
->
CFGR
 = 
tm¥eg
;

790 
	}
}

804 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

806 
uöt32_t
 
tm¥eg
 = 0;

809 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

811 
tm¥eg
 = 
RCC
->
CFGR
;

814 
tm¥eg
 &~
RCC_CFGR_PPRE2
;

817 
tm¥eg
 |
RCC_HCLK
 << 3;

820 
RCC
->
CFGR
 = 
tm¥eg
;

821 
	}
}

856 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

858 
uöt32_t
 
tmp
 = 0, 
¥esc
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

861 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

863 
tmp
)

866 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

869 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

876 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

877 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

879 i‡(
∂lsour˚
 != 0)

882 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

887 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

890 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

891 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
∂lvco
/
∂Õ
;

894 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

900 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
;

901 
tmp
 =Åmp >> 4;

902 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

904 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

907 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
;

908 
tmp
 =Åmp >> 10;

909 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

911 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

914 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
;

915 
tmp
 =Åmp >> 13;

916 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

918 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

919 
	}
}

981 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

983 
uöt32_t
 
tm¥eg
 = 0;

986 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

988 i‡((
RCC_RTCCLKSour˚
 & 0x00000300) == 0x00000300)

990 
tm¥eg
 = 
RCC
->
CFGR
;

993 
tm¥eg
 &~
RCC_CFGR_RTCPRE
;

996 
tm¥eg
 |(
RCC_RTCCLKSour˚
 & 0xFFFFCFF);

999 
RCC
->
CFGR
 = 
tm¥eg
;

1003 
RCC
->
BDCR
 |(
RCC_RTCCLKSour˚
 & 0x00000FFF);

1004 
	}
}

1013 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1016 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1018 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

1019 
	}
}

1030 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1033 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1034 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1035 
	}
}

1050 
	$RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
)

1053 
	`as£π_∑øm
(
	`IS_RCC_I2SCLK_SOURCE
(
RCC_I2SCLKSour˚
));

1055 *(
__IO
 
uöt32_t
 *Ë
CFGR_I2SSRC_BB
 = 
RCC_I2SCLKSour˚
;

1056 
	}
}

1088 
	$RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1091 
	`as£π_∑øm
(
	`IS_RCC_AHB1_CLOCK_PERIPH
(
RCC_AHB1Pîùh
));

1093 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1094 i‡(
NewSèã
 !
DISABLE
)

1096 
RCC
->
AHB1ENR
 |
RCC_AHB1Pîùh
;

1100 
RCC
->
AHB1ENR
 &~
RCC_AHB1Pîùh
;

1102 
	}
}

1120 
	$RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1123 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1124 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1126 i‡(
NewSèã
 !
DISABLE
)

1128 
RCC
->
AHB2ENR
 |
RCC_AHB2Pîùh
;

1132 
RCC
->
AHB2ENR
 &~
RCC_AHB2Pîùh
;

1134 
	}
}

1147 
	$RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1150 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1151 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1153 i‡(
NewSèã
 !
DISABLE
)

1155 
RCC
->
AHB3ENR
 |
RCC_AHB3Pîùh
;

1159 
RCC
->
AHB3ENR
 &~
RCC_AHB3Pîùh
;

1161 
	}
}

1197 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1200 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1201 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1203 i‡(
NewSèã
 !
DISABLE
)

1205 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1209 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1211 
	}
}

1237 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1240 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1241 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1243 i‡(
NewSèã
 !
DISABLE
)

1245 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1249 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1251 
	}
}

1276 
	$RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1279 
	`as£π_∑øm
(
	`IS_RCC_AHB1_RESET_PERIPH
(
RCC_AHB1Pîùh
));

1280 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1282 i‡(
NewSèã
 !
DISABLE
)

1284 
RCC
->
AHB1RSTR
 |
RCC_AHB1Pîùh
;

1288 
RCC
->
AHB1RSTR
 &~
RCC_AHB1Pîùh
;

1290 
	}
}

1305 
	$RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1308 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1309 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1311 i‡(
NewSèã
 !
DISABLE
)

1313 
RCC
->
AHB2RSTR
 |
RCC_AHB2Pîùh
;

1317 
RCC
->
AHB2RSTR
 &~
RCC_AHB2Pîùh
;

1319 
	}
}

1329 
	$RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1332 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1333 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1335 i‡(
NewSèã
 !
DISABLE
)

1337 
RCC
->
AHB3RSTR
 |
RCC_AHB3Pîùh
;

1341 
RCC
->
AHB3RSTR
 &~
RCC_AHB3Pîùh
;

1343 
	}
}

1376 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1379 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1380 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1381 i‡(
NewSèã
 !
DISABLE
)

1383 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1387 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1389 
	}
}

1412 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1415 
	`as£π_∑øm
(
	`IS_RCC_APB2_RESET_PERIPH
(
RCC_APB2Pîùh
));

1416 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1417 i‡(
NewSèã
 !
DISABLE
)

1419 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1423 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1425 
	}
}

1458 
	$RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1461 
	`as£π_∑øm
(
	`IS_RCC_AHB1_LPMODE_PERIPH
(
RCC_AHB1Pîùh
));

1462 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1463 i‡(
NewSèã
 !
DISABLE
)

1465 
RCC
->
AHB1LPENR
 |
RCC_AHB1Pîùh
;

1469 
RCC
->
AHB1LPENR
 &~
RCC_AHB1Pîùh
;

1471 
	}
}

1490 
	$RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1493 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1494 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1495 i‡(
NewSèã
 !
DISABLE
)

1497 
RCC
->
AHB2LPENR
 |
RCC_AHB2Pîùh
;

1501 
RCC
->
AHB2LPENR
 &~
RCC_AHB2Pîùh
;

1503 
	}
}

1517 
	$RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1520 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1521 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1522 i‡(
NewSèã
 !
DISABLE
)

1524 
RCC
->
AHB3LPENR
 |
RCC_AHB3Pîùh
;

1528 
RCC
->
AHB3LPENR
 &~
RCC_AHB3Pîùh
;

1530 
	}
}

1567 
	$RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1570 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1571 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1572 i‡(
NewSèã
 !
DISABLE
)

1574 
RCC
->
APB1LPENR
 |
RCC_APB1Pîùh
;

1578 
RCC
->
APB1LPENR
 &~
RCC_APB1Pîùh
;

1580 
	}
}

1607 
	$RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1610 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1611 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1612 i‡(
NewSèã
 !
DISABLE
)

1614 
RCC
->
APB2LPENR
 |
RCC_APB2Pîùh
;

1618 
RCC
->
APB2LPENR
 &~
RCC_APB2Pîùh
;

1620 
	}
}

1652 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1655 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

1656 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1657 i‡(
NewSèã
 !
DISABLE
)

1660 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

1665 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

1667 
	}
}

1688 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1690 
uöt32_t
 
tmp
 = 0;

1691 
uöt32_t
 
°©u§eg
 = 0;

1692 
FœgSètus
 
bô°©us
 = 
RESET
;

1695 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1698 
tmp
 = 
RCC_FLAG
 >> 5;

1699 i‡(
tmp
 == 1)

1701 
°©u§eg
 = 
RCC
->
CR
;

1703 i‡(
tmp
 == 2)

1705 
°©u§eg
 = 
RCC
->
BDCR
;

1709 
°©u§eg
 = 
RCC
->
CSR
;

1713 
tmp
 = 
RCC_FLAG
 & 
FLAG_MASK
;

1714 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1716 
bô°©us
 = 
SET
;

1720 
bô°©us
 = 
RESET
;

1723  
bô°©us
;

1724 
	}
}

1733 
	$RCC_CÀ¨Fœg
()

1736 
RCC
->
CSR
 |
RCC_CSR_RMVF
;

1737 
	}
}

1752 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1754 
ITSètus
 
bô°©us
 = 
RESET
;

1757 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1760 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1762 
bô°©us
 = 
SET
;

1766 
bô°©us
 = 
RESET
;

1769  
bô°©us
;

1770 
	}
}

1785 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1788 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1792 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1793 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c

51 
	~"°m32f4xx_∫g.h
"

52 
	~"°m32f4xx_rcc.h
"

94 
	$RNG_DeInô
()

97 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_RNG
, 
ENABLE
);

100 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_RNG
, 
DISABLE
);

101 
	}
}

109 
	$RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

112 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

114 i‡(
NewSèã
 !
DISABLE
)

117 
RNG
->
CR
 |
RNG_CR_RNGEN
;

122 
RNG
->
CR
 &~
RNG_CR_RNGEN
;

124 
	}
}

171 
uöt32_t
 
	$RNG_GëR™domNumbî
()

174  
RNG
->
DR
;

175 
	}
}

268 
	$RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

271 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

273 i‡(
NewSèã
 !
DISABLE
)

276 
RNG
->
CR
 |
RNG_CR_IE
;

281 
RNG
->
CR
 &~
RNG_CR_IE
;

283 
	}
}

294 
FœgSètus
 
	$RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
)

296 
FœgSètus
 
bô°©us
 = 
RESET
;

298 
	`as£π_∑øm
(
	`IS_RNG_GET_FLAG
(
RNG_FLAG
));

301 i‡((
RNG
->
SR
 & 
RNG_FLAG
Ë!(
uöt8_t
)
RESET
)

304 
bô°©us
 = 
SET
;

309 
bô°©us
 = 
RESET
;

312  
bô°©us
;

313 
	}
}

327 
	$RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
)

330 
	`as£π_∑øm
(
	`IS_RNG_CLEAR_FLAG
(
RNG_FLAG
));

332 
RNG
->
SR
 = ~(
uöt32_t
)(((uöt32_t)
RNG_FLAG
) << 4);

333 
	}
}

343 
ITSètus
 
	$RNG_GëITSètus
(
uöt8_t
 
RNG_IT
)

345 
ITSètus
 
bô°©us
 = 
RESET
;

347 
	`as£π_∑øm
(
	`IS_RNG_GET_IT
(
RNG_IT
));

350 i‡((
RNG
->
SR
 & 
RNG_IT
Ë!(
uöt8_t
)
RESET
)

353 
bô°©us
 = 
SET
;

358 
bô°©us
 = 
RESET
;

361  
bô°©us
;

362 
	}
}

373 
	$RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
)

376 
	`as£π_∑øm
(
	`IS_RNG_IT
(
RNG_IT
));

379 
RNG
->
SR
 = (
uöt8_t
)~
RNG_IT
;

380 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c

277 
	~"°m32f4xx_πc.h
"

278 
	~"°m32f4xx_rcc.h
"

293 
	#RTC_TR_RESERVED_MASK
 ((
uöt32_t
)0x007F7F7F)

	)

294 
	#RTC_DR_RESERVED_MASK
 ((
uöt32_t
)0x00FFFF3F)

	)

295 
	#RTC_INIT_MASK
 ((
uöt32_t
)0xFFFFFFFF)

	)

296 
	#RTC_RSF_MASK
 ((
uöt32_t
)0xFFFFFF5F)

	)

297 
	#RTC_FLAGS_MASK
 ((
uöt32_t
)(
RTC_FLAG_TSOVF
 | 
RTC_FLAG_TSF
 | 
RTC_FLAG_WUTF
 | \

298 
RTC_FLAG_ALRBF
 | 
RTC_FLAG_ALRAF
 | 
RTC_FLAG_INITF
 | \

299 
RTC_FLAG_RSF
 | 
RTC_FLAG_INITS
 | 
RTC_FLAG_WUTWF
 | \

300 
RTC_FLAG_ALRBWF
 | 
RTC_FLAG_ALRAWF
 | 
RTC_FLAG_TAMP1F
 ))

	)

302 
	#INITMODE_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

303 
	#SYNCHRO_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

304 
	#RECALPF_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

305 
	#SHPF_TIMEOUT
 ((
uöt32_t
Ë0x00001000)

	)

310 
uöt8_t
 
RTC_ByãToBcd2
(uöt8_à
VÆue
);

311 
uöt8_t
 
RTC_Bcd2ToByã
(uöt8_à
VÆue
);

367 
Eº‹Sètus
 
	$RTC_DeInô
()

369 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

370 
uöt32_t
 
wutwf°©us
 = 0x00;

371 
Eº‹Sètus
 
°©us
 = 
ERROR
;

374 
RTC
->
WPR
 = 0xCA;

375 
RTC
->
WPR
 = 0x53;

378 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

380 
°©us
 = 
ERROR
;

385 
RTC
->
TR
 = (
uöt32_t
)0x00000000;

386 
RTC
->
DR
 = (
uöt32_t
)0x00002101;

388 
RTC
->
CR
 &(
uöt32_t
)0x00000007;

393 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

394 
wutcou¡î
++;

395 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

397 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

399 
°©us
 = 
ERROR
;

404 
RTC
->
CR
 &(
uöt32_t
)0x00000000;

405 
RTC
->
WUTR
 = (
uöt32_t
)0x0000FFFF;

406 
RTC
->
PRER
 = (
uöt32_t
)0x007F00FF;

407 
RTC
->
CALIBR
 = (
uöt32_t
)0x00000000;

408 
RTC
->
ALRMAR
 = (
uöt32_t
)0x00000000;

409 
RTC
->
ALRMBR
 = (
uöt32_t
)0x00000000;

412 
RTC
->
ISR
 = (
uöt32_t
)0x00000000;

415 
RTC
->
TAFCR
 = 0x00000000;

417 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

419 
°©us
 = 
ERROR
;

423 
°©us
 = 
SUCCESS
;

429 
RTC
->
WPR
 = 0xFF;

431  
°©us
;

432 
	}
}

445 
Eº‹Sètus
 
	$RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

447 
Eº‹Sètus
 
°©us
 = 
ERROR
;

450 
	`as£π_∑øm
(
	`IS_RTC_HOUR_FORMAT
(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

451 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
));

452 
	`as£π_∑øm
(
	`IS_RTC_SYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_SynchPªdiv
));

455 
RTC
->
WPR
 = 0xCA;

456 
RTC
->
WPR
 = 0x53;

459 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

461 
°©us
 = 
ERROR
;

466 
RTC
->
CR
 &((
uöt32_t
)~(
RTC_CR_FMT
));

468 
RTC
->
CR
 |((
uöt32_t
)(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

471 
RTC
->
PRER
 = (
uöt32_t
)(
RTC_InôSåu˘
->
RTC_SynchPªdiv
);

472 
RTC
->
PRER
 |(
uöt32_t
)(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 << 16);

475 
	`RTC_ExôInôMode
();

477 
°©us
 = 
SUCCESS
;

480 
RTC
->
WPR
 = 0xFF;

482  
°©us
;

483 
	}
}

491 
	$RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

494 
RTC_InôSåu˘
->
RTC_HourF‹m©
 = 
RTC_HourF‹m©_24
;

497 
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 = (
uöt32_t
)0x7F;

500 
RTC_InôSåu˘
->
RTC_SynchPªdiv
 = (
uöt32_t
)0xFF;

501 
	}
}

513 
	$RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

516 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

518 i‡(
NewSèã
 !
DISABLE
)

521 
RTC
->
WPR
 = 0xFF;

526 
RTC
->
WPR
 = 0xCA;

527 
RTC
->
WPR
 = 0x53;

529 
	}
}

540 
Eº‹Sètus
 
	$RTC_E¡îInôMode
()

542 
__IO
 
uöt32_t
 
öôcou¡î
 = 0x00;

543 
Eº‹Sètus
 
°©us
 = 
ERROR
;

544 
uöt32_t
 
öô°©us
 = 0x00;

547 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

550 
RTC
->
ISR
 = (
uöt32_t
)
RTC_INIT_MASK
;

555 
öô°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_INITF
;

556 
öôcou¡î
++;

557 } (
öôcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
öô°©us
 == 0x00));

559 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë!
RESET
)

561 
°©us
 = 
SUCCESS
;

565 
°©us
 = 
ERROR
;

570 
°©us
 = 
SUCCESS
;

573  (
°©us
);

574 
	}
}

585 
	$RTC_ExôInôMode
()

588 
RTC
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

589 
	}
}

607 
Eº‹Sètus
 
	$RTC_WaôF‹Synchro
()

609 
__IO
 
uöt32_t
 
synchrocou¡î
 = 0;

610 
Eº‹Sètus
 
°©us
 = 
ERROR
;

611 
uöt32_t
 
synchro°©us
 = 0x00;

614 
RTC
->
WPR
 = 0xCA;

615 
RTC
->
WPR
 = 0x53;

618 
RTC
->
ISR
 &(
uöt32_t
)
RTC_RSF_MASK
;

623 
synchro°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_RSF
;

624 
synchrocou¡î
++;

625 } (
synchrocou¡î
 !
SYNCHRO_TIMEOUT
Ë&& (
synchro°©us
 == 0x00));

627 i‡((
RTC
->
ISR
 & 
RTC_ISR_RSF
Ë!
RESET
)

629 
°©us
 = 
SUCCESS
;

633 
°©us
 = 
ERROR
;

637 
RTC
->
WPR
 = 0xFF;

639  (
°©us
);

640 
	}
}

650 
Eº‹Sètus
 
	$RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

652 
Eº‹Sètus
 
°©us
 = 
ERROR
;

655 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

658 
RTC
->
WPR
 = 0xCA;

659 
RTC
->
WPR
 = 0x53;

662 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

664 
°©us
 = 
ERROR
;

668 i‡(
NewSèã
 !
DISABLE
)

671 
RTC
->
CR
 |
RTC_CR_REFCKON
;

676 
RTC
->
CR
 &~
RTC_CR_REFCKON
;

679 
	`RTC_ExôInôMode
();

681 
°©us
 = 
SUCCESS
;

685 
RTC
->
WPR
 = 0xFF;

687  
°©us
;

688 
	}
}

698 
	$RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

701 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

704 
RTC
->
WPR
 = 0xCA;

705 
RTC
->
WPR
 = 0x53;

707 i‡(
NewSèã
 !
DISABLE
)

710 
RTC
->
CR
 |(
uöt8_t
)
RTC_CR_BYPSHAD
;

715 
RTC
->
CR
 &(
uöt8_t
)~
RTC_CR_BYPSHAD
;

719 
RTC
->
WPR
 = 0xFF;

720 
	}
}

753 
Eº‹Sètus
 
	$RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

755 
uöt32_t
 
tm¥eg
 = 0;

756 
Eº‹Sètus
 
°©us
 = 
ERROR
;

759 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

761 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

763 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

765 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_TimeSåu˘
->
RTC_Hours
));

766 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

770 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

771 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_TimeSåu˘
->
RTC_Hours
));

773 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_TimeSåu˘
->
RTC_Möuãs
));

774 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
));

778 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

780 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
);

781 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

782 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

786 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

787 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
)));

789 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Möuãs
)));

790 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)));

794 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

796 
tm¥eg
 = (((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

797 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

798 ((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_Sec⁄ds
) | \

799 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_H12
) << 16));

803 
tm¥eg
 = (
uöt32_t
)(((uöt32_t)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

804 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

805 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)) | \

806 (((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_H12
) << 16));

810 
RTC
->
WPR
 = 0xCA;

811 
RTC
->
WPR
 = 0x53;

814 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

816 
°©us
 = 
ERROR
;

821 
RTC
->
TR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_TR_RESERVED_MASK
);

824 
	`RTC_ExôInôMode
();

826 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

828 
°©us
 = 
ERROR
;

832 
°©us
 = 
SUCCESS
;

837 
RTC
->
WPR
 = 0xFF;

839  
°©us
;

840 
	}
}

849 
	$RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

852 
RTC_TimeSåu˘
->
RTC_H12
 = 
RTC_H12_AM
;

853 
RTC_TimeSåu˘
->
RTC_Hours
 = 0;

854 
RTC_TimeSåu˘
->
RTC_Möuãs
 = 0;

855 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = 0;

856 
	}
}

868 
	$RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

870 
uöt32_t
 
tm¥eg
 = 0;

873 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

876 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TR
 & 
RTC_TR_RESERVED_MASK
);

879 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

880 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >>8);

881 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

882 
RTC_TimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_PM
)) >> 16);

885 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

888 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Hours);

889 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Minutes);

890 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Seconds);

892 
	}
}

901 
uöt32_t
 
	$RTC_GëSubSec⁄d
()

903 
uöt32_t
 
tm¥eg
 = 0;

906 
tm¥eg
 = (
uöt32_t
)(
RTC
->
SSR
);

909 (Ë(
RTC
->
DR
);

911  (
tm¥eg
);

912 
	}
}

926 
Eº‹Sètus
 
	$RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

928 
uöt32_t
 
tm¥eg
 = 0;

929 
Eº‹Sètus
 
°©us
 = 
ERROR
;

932 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

934 i‡((
RTC_F‹m©
 =
RTC_F‹m©_BIN
Ë&& ((
RTC_D©eSåu˘
->
RTC_M⁄th
 & 0x10) == 0x10))

936 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (RTC_D©eSåu˘->RTC_M⁄th & (
uöt32_t
)~(0x10)) + 0x0A;

938 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

940 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
RTC_D©eSåu˘
->
RTC_Yór
));

941 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
RTC_D©eSåu˘
->
RTC_M⁄th
));

942 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
RTC_D©eSåu˘
->
RTC_D©e
));

946 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_Yór
)));

947 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_M⁄th
);

948 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
tm¥eg
));

949 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_D©e
);

950 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
tm¥eg
));

952 
	`as£π_∑øm
(
	`IS_RTC_WEEKDAY
(
RTC_D©eSåu˘
->
RTC_WìkDay
));

955 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

957 
tm¥eg
 = ((((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

958 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

959 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_D©e
) | \

960 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
) << 13));

964 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

965 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

966 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_D©e
)) | \

967 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
 << 13));

971 
RTC
->
WPR
 = 0xCA;

972 
RTC
->
WPR
 = 0x53;

975 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

977 
°©us
 = 
ERROR
;

982 
RTC
->
DR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_DR_RESERVED_MASK
);

985 
	`RTC_ExôInôMode
();

987 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

989 
°©us
 = 
ERROR
;

993 
°©us
 = 
SUCCESS
;

997 
RTC
->
WPR
 = 0xFF;

999  
°©us
;

1000 
	}
}

1009 
	$RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1012 
RTC_D©eSåu˘
->
RTC_WìkDay
 = 
RTC_Wìkday_M⁄day
;

1013 
RTC_D©eSåu˘
->
RTC_D©e
 = 1;

1014 
RTC_D©eSåu˘
->
RTC_M⁄th
 = 
RTC_M⁄th_J™u¨y
;

1015 
RTC_D©eSåu˘
->
RTC_Yór
 = 0;

1016 
	}
}

1028 
	$RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1030 
uöt32_t
 
tm¥eg
 = 0;

1033 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1036 
tm¥eg
 = (
uöt32_t
)(
RTC
->
DR
 & 
RTC_DR_RESERVED_MASK
);

1039 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_YT
 | 
RTC_DR_YU
)) >> 16);

1040 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1041 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1042 
RTC_D©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_WDU
)) >> 13);

1045 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1048 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Year);

1049 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Month);

1050 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Date);

1051 
RTC_D©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)(RTC_DateStruct->RTC_WeekDay);

1053 
	}
}

1089 
	$RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1091 
uöt32_t
 
tm¥eg
 = 0;

1094 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1095 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1096 
	`as£π_∑øm
(
	`IS_ALARM_MASK
(
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1097 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
));

1099 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1101 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1103 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1104 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1108 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1109 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1111 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
));

1112 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
));

1114 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1116 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1120 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1125 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1127 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
);

1128 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

1129 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1133 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1134 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
)));

1137 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
)));

1138 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)));

1140 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1142 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1143 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

1147 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1148 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

1153 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

1155 
tm¥eg
 = (((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1156 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1157 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
) | \

1158 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1159 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1160 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1161 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1165 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1166 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1167 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)) | \

1168 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1169 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1170 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1171 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1175 
RTC
->
WPR
 = 0xCA;

1176 
RTC
->
WPR
 = 0x53;

1179 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1181 
RTC
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

1185 
RTC
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

1189 
RTC
->
WPR
 = 0xFF;

1190 
	}
}

1200 
	$RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1203 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 
RTC_H12_AM
;

1204 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 0;

1205 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 0;

1206 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 0;

1209 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = 
RTC_AœrmD©eWìkDaySñ_D©e
;

1210 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 1;

1213 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = 
RTC_AœrmMask_N⁄e
;

1214 
	}
}

1230 
	$RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1232 
uöt32_t
 
tm¥eg
 = 0;

1235 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1236 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1239 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1241 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMAR
);

1245 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMBR
);

1249 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_HT
 | \

1250 
RTC_ALRMAR_HU
)) >> 16);

1251 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_MNT
 | \

1252 
RTC_ALRMAR_MNU
)) >> 8);

1253 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = (
uöt32_t
)(
tm¥eg
 & (
RTC_ALRMAR_ST
 | \

1254 
RTC_ALRMAR_SU
));

1255 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = (
uöt32_t
)((
tm¥eg
 & 
RTC_ALRMAR_PM
) >> 16);

1256 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_DT
 | 
RTC_ALRMAR_DU
)) >> 24);

1257 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALRMAR_WDSEL
);

1258 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_AœrmMask_AŒ
);

1260 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1262 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1263 
RTC_AœrmTime
.
RTC_Hours
);

1264 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1265 
RTC_AœrmTime
.
RTC_Möuãs
);

1266 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1267 
RTC_AœrmTime
.
RTC_Sec⁄ds
);

1268 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct->RTC_AlarmDateWeekDay);

1270 
	}
}

1284 
Eº‹Sètus
 
	$RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1286 
__IO
 
uöt32_t
 
Æ¨mcou¡î
 = 0x00;

1287 
uöt32_t
 
Æ¨m°©us
 = 0x00;

1288 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1291 
	`as£π_∑øm
(
	`IS_RTC_CMD_ALARM
(
RTC_Aœrm
));

1292 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1295 
RTC
->
WPR
 = 0xCA;

1296 
RTC
->
WPR
 = 0x53;

1299 i‡(
NewSèã
 !
DISABLE
)

1301 
RTC
->
CR
 |(
uöt32_t
)
RTC_Aœrm
;

1303 
°©us
 = 
SUCCESS
;

1308 
RTC
->
CR
 &(
uöt32_t
)~
RTC_Aœrm
;

1313 
Æ¨m°©us
 = 
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8);

1314 
Æ¨mcou¡î
++;

1315 } (
Æ¨mcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
Æ¨m°©us
 == 0x00));

1317 i‡((
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8)Ë=
RESET
)

1319 
°©us
 = 
ERROR
;

1323 
°©us
 = 
SUCCESS
;

1328 
RTC
->
WPR
 = 0xFF;

1330  
°©us
;

1331 
	}
}

1378 
	$RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
)

1380 
uöt32_t
 
tm¥eg
 = 0;

1383 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1384 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
RTC_AœrmSubSec⁄dVÆue
));

1385 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
RTC_AœrmSubSec⁄dMask
));

1388 
RTC
->
WPR
 = 0xCA;

1389 
RTC
->
WPR
 = 0x53;

1392 
tm¥eg
 = (
uöt32_t
Ë(uöt32_t)(
RTC_AœrmSubSec⁄dVÆue
Ë| (uöt32_t)(
RTC_AœrmSubSec⁄dMask
);

1394 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1397 
RTC
->
ALRMASSR
 = 
tm¥eg
;

1402 
RTC
->
ALRMBSSR
 = 
tm¥eg
;

1406 
RTC
->
WPR
 = 0xFF;

1408 
	}
}

1419 
uöt32_t
 
	$RTC_GëAœrmSubSec⁄d
(
uöt32_t
 
RTC_Aœrm
)

1421 
uöt32_t
 
tm¥eg
 = 0;

1424 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1426 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMASSR
Ë& 
RTC_ALRMASSR_SS
);

1430 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMBSSR
Ë& 
RTC_ALRMBSSR_SS
);

1433  (
tm¥eg
);

1434 
	}
}

1468 
	$RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
)

1471 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
RTC_WakeUpClock
));

1474 
RTC
->
WPR
 = 0xCA;

1475 
RTC
->
WPR
 = 0x53;

1478 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

1481 
RTC
->
CR
 |(
uöt32_t
)
RTC_WakeUpClock
;

1484 
RTC
->
WPR
 = 0xFF;

1485 
	}
}

1495 
	$RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
)

1498 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
RTC_WakeUpCou¡î
));

1501 
RTC
->
WPR
 = 0xCA;

1502 
RTC
->
WPR
 = 0x53;

1505 
RTC
->
WUTR
 = (
uöt32_t
)
RTC_WakeUpCou¡î
;

1508 
RTC
->
WPR
 = 0xFF;

1509 
	}
}

1516 
uöt32_t
 
	$RTC_GëWakeUpCou¡î
()

1519  ((
uöt32_t
)(
RTC
->
WUTR
 & 
RTC_WUTR_WUT
));

1520 
	}
}

1528 
Eº‹Sètus
 
	$RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1530 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

1531 
uöt32_t
 
wutwf°©us
 = 0x00;

1532 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1535 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1538 
RTC
->
WPR
 = 0xCA;

1539 
RTC
->
WPR
 = 0x53;

1541 i‡(
NewSèã
 !
DISABLE
)

1544 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_WUTE
;

1545 
°©us
 = 
SUCCESS
;

1550 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUTE
;

1554 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

1555 
wutcou¡î
++;

1556 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

1558 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

1560 
°©us
 = 
ERROR
;

1564 
°©us
 = 
SUCCESS
;

1569 
RTC
->
WPR
 = 0xFF;

1571  
°©us
;

1572 
	}
}

1605 
	$RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
)

1608 
	`as£π_∑øm
(
	`IS_RTC_DAYLIGHT_SAVING
(
RTC_DayLightSavög
));

1609 
	`as£π_∑øm
(
	`IS_RTC_STORE_OPERATION
(
RTC_St‹eO≥øti⁄
));

1612 
RTC
->
WPR
 = 0xCA;

1613 
RTC
->
WPR
 = 0x53;

1616 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_BCK
);

1619 
RTC
->
CR
 |(
uöt32_t
)(
RTC_DayLightSavög
 | 
RTC_St‹eO≥øti⁄
);

1622 
RTC
->
WPR
 = 0xFF;

1623 
	}
}

1632 
uöt32_t
 
	$RTC_GëSt‹eO≥øti⁄
()

1634  (
RTC
->
CR
 & 
RTC_CR_BCK
);

1635 
	}
}

1671 
	$RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
)

1674 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT
(
RTC_Ouçut
));

1675 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_POL
(
RTC_OuçutPﬁ¨ôy
));

1678 
RTC
->
WPR
 = 0xCA;

1679 
RTC
->
WPR
 = 0x53;

1682 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_OSEL
 | 
RTC_CR_POL
);

1685 
RTC
->
CR
 |(
uöt32_t
)(
RTC_Ouçut
 | 
RTC_OuçutPﬁ¨ôy
);

1688 
RTC
->
WPR
 = 0xFF;

1689 
	}
}

1725 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
)

1727 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1730 
	`as£π_∑øm
(
	`IS_RTC_CALIB_SIGN
(
RTC_CÆibSign
));

1731 
	`as£π_∑øm
(
	`IS_RTC_CALIB_VALUE
(
VÆue
));

1734 
RTC
->
WPR
 = 0xCA;

1735 
RTC
->
WPR
 = 0x53;

1738 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1740 
°©us
 = 
ERROR
;

1745 
RTC
->
CALIBR
 = (
uöt32_t
)(
RTC_CÆibSign
 | 
VÆue
);

1747 
	`RTC_ExôInôMode
();

1749 
°©us
 = 
SUCCESS
;

1753 
RTC
->
WPR
 = 0xFF;

1755  
°©us
;

1756 
	}
}

1766 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1768 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1771 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1774 
RTC
->
WPR
 = 0xCA;

1775 
RTC
->
WPR
 = 0x53;

1778 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1780 
°©us
 = 
ERROR
;

1784 i‡(
NewSèã
 !
DISABLE
)

1787 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_DCE
;

1792 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_DCE
;

1795 
	`RTC_ExôInôMode
();

1797 
°©us
 = 
SUCCESS
;

1801 
RTC
->
WPR
 = 0xFF;

1803  
°©us
;

1804 
	}
}

1812 
	$RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1815 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1818 
RTC
->
WPR
 = 0xCA;

1819 
RTC
->
WPR
 = 0x53;

1821 i‡(
NewSèã
 !
DISABLE
)

1824 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_COE
;

1829 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_COE
;

1833 
RTC
->
WPR
 = 0xFF;

1834 
	}
}

1844 
	$RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
)

1847 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
RTC_CÆibOuçut
));

1850 
RTC
->
WPR
 = 0xCA;

1851 
RTC
->
WPR
 = 0x53;

1854 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_COSEL
);

1857 
RTC
->
CR
 |(
uöt32_t
)
RTC_CÆibOuçut
;

1860 
RTC
->
WPR
 = 0xFF;

1861 
	}
}

1880 
Eº‹Sètus
 
	$RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

1881 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

1882 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
)

1884 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1885 
uöt32_t
 
ªˇÕfcou¡
 = 0;

1888 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PERIOD
(
RTC_SmoŸhCÆibPîiod
));

1889 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PLUS
(
RTC_SmoŸhCÆibPlusPul£s
));

1890 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
RTC_SmouthCÆibMöusPul£sVÆue
));

1893 
RTC
->
WPR
 = 0xCA;

1894 
RTC
->
WPR
 = 0x53;

1897 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

1900 ((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
Ë&& (
ªˇÕfcou¡
 !
RECALPF_TIMEOUT
))

1902 
ªˇÕfcou¡
++;

1907 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë=
RESET
)

1910 
RTC
->
CALR
 = (
uöt32_t
)((uöt32_t)
RTC_SmoŸhCÆibPîiod
 | (uöt32_t)
RTC_SmoŸhCÆibPlusPul£s
 | (uöt32_t)
RTC_SmouthCÆibMöusPul£sVÆue
);

1912 
°©us
 = 
SUCCESS
;

1916 
°©us
 = 
ERROR
;

1920 
RTC
->
WPR
 = 0xFF;

1922  (
Eº‹Sètus
)(
°©us
);

1923 
	}
}

1956 
	$RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1958 
uöt32_t
 
tm¥eg
 = 0;

1961 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_EDGE
(
RTC_TimeSèmpEdge
));

1962 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1965 
tm¥eg
 = (
uöt32_t
)(
RTC
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

1968 i‡(
NewSèã
 !
DISABLE
)

1970 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
 | 
RTC_CR_TSE
);

1974 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
);

1978 
RTC
->
WPR
 = 0xCA;

1979 
RTC
->
WPR
 = 0x53;

1982 
RTC
->
CR
 = (
uöt32_t
)
tm¥eg
;

1985 
RTC
->
WPR
 = 0xFF;

1986 
	}
}

2000 
	$RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

2001 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
)

2003 
uöt32_t
 
tm±ime
 = 0, 
tmpd©e
 = 0;

2006 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

2009 
tm±ime
 = (
uöt32_t
)(
RTC
->
TSTR
 & 
RTC_TR_RESERVED_MASK
);

2010 
tmpd©e
 = (
uöt32_t
)(
RTC
->
TSDR
 & 
RTC_DR_RESERVED_MASK
);

2013 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

2014 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >> 8);

2015 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm±ime
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

2016 
RTC_SèmpTimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_PM
)) >> 16);

2019 
RTC_SèmpD©eSåu˘
->
RTC_Yór
 = 0;

2020 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

2021 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tmpd©e
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

2022 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_WDU
)) >> 13);

2025 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

2028 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Hours);

2029 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Minutes);

2030 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Seconds);

2033 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Month);

2034 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Date);

2035 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_WeekDay);

2037 
	}
}

2044 
uöt32_t
 
	$RTC_GëTimeSèmpSubSec⁄d
()

2047  (
uöt32_t
)(
RTC
->
TSSSR
);

2048 
	}
}

2079 
	$RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
)

2082 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2083 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
RTC_Tam≥rTriggî
));

2085 i‡(
RTC_Tam≥rTriggî
 =
RTC_Tam≥rTriggî_RisögEdge
)

2088 
RTC
->
TAFCR
 &(
uöt32_t
)((uöt32_t)~(
RTC_Tam≥r
 << 1));

2093 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥r
 << 1);

2095 
	}
}

2105 
	$RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2108 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2109 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2111 i‡(
NewSèã
 !
DISABLE
)

2114 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥r
;

2119 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_Tam≥r
;

2121 
	}
}

2136 
	$RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
)

2139 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
RTC_Tam≥rFûãr
));

2142 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFLT
);

2145 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rFûãr
;

2146 
	}
}

2170 
	$RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
)

2173 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
RTC_Tam≥rSam∂ögFªq
));

2176 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFREQ
);

2179 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rSam∂ögFªq
;

2180 
	}
}

2193 
	$RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
)

2196 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
RTC_Tam≥rPªch¨geDuøti⁄
));

2199 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPPRCH
);

2202 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rPªch¨geDuøti⁄
;

2203 
	}
}

2213 
	$RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2216 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2218 i‡(
NewSèã
 !
DISABLE
)

2221 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPTS
;

2226 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPTS
;

2228 
	}
}

2236 
	$RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2239 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2241 i‡(
NewSèã
 !
DISABLE
)

2244 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPPUDIS
;

2249 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
;

2251 
	}
}

2277 
	$RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
)

2279 
__IO
 
uöt32_t
 
tmp
 = 0;

2282 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2284 
tmp
 = 
RTC_BASE
 + 0x50;

2285 
tmp
 +(
RTC_BKP_DR
 * 4);

2288 *(
__IO
 
uöt32_t
 *)
tmp
 = (uöt32_t)
D©a
;

2289 
	}
}

2298 
uöt32_t
 
	$RTC_RódBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
)

2300 
__IO
 
uöt32_t
 
tmp
 = 0;

2303 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2305 
tmp
 = 
RTC_BASE
 + 0x50;

2306 
tmp
 +(
RTC_BKP_DR
 * 4);

2309  (*(
__IO
 
uöt32_t
 *)
tmp
);

2310 
	}
}

2338 
	$RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
)

2341 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PIN
(
RTC_Tam≥rPö
));

2343 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPINSEL
);

2344 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥rPö
);

2345 
	}
}

2355 
	$RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
)

2358 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_PIN
(
RTC_TimeSèmpPö
));

2360 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TSINSEL
);

2361 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_TimeSèmpPö
);

2362 
	}
}

2374 
	$RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
)

2377 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_TYPE
(
RTC_OuçutTy≥
));

2379 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_ALARMOUTTYPE
);

2380 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_OuçutTy≥
);

2381 
	}
}

2412 
Eº‹Sètus
 
	$RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
)

2414 
Eº‹Sètus
 
°©us
 = 
ERROR
;

2415 
uöt32_t
 
shpfcou¡
 = 0;

2418 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_ADD1S
(
RTC_Shi·Add1S
));

2419 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_SUBFS
(
RTC_Shi·SubFS
));

2422 
RTC
->
WPR
 = 0xCA;

2423 
RTC
->
WPR
 = 0x53;

2426 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
)

2429 ((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
Ë&& (
shpfcou¡
 !
SHPF_TIMEOUT
))

2431 
shpfcou¡
++;

2436 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë=
RESET
)

2439 if((
RTC
->
CR
 & 
RTC_CR_REFCKON
Ë=
RESET
)

2442 
RTC
->
SHIFTR
 = (
uöt32_t
)(uöt32_t)(
RTC_Shi·SubFS
Ë| (uöt32_t)(
RTC_Shi·Add1S
);

2444 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

2446 
°©us
 = 
ERROR
;

2450 
°©us
 = 
SUCCESS
;

2455 
°©us
 = 
ERROR
;

2460 
°©us
 = 
ERROR
;

2464 
RTC
->
WPR
 = 0xFF;

2466  (
Eº‹Sètus
)(
°©us
);

2467 
	}
}

2531 
	$RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2534 
	`as£π_∑øm
(
	`IS_RTC_CONFIG_IT
(
RTC_IT
));

2535 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2538 
RTC
->
WPR
 = 0xCA;

2539 
RTC
->
WPR
 = 0x53;

2541 i‡(
NewSèã
 !
DISABLE
)

2544 
RTC
->
CR
 |(
uöt32_t
)(
RTC_IT
 & ~
RTC_TAFCR_TAMPIE
);

2546 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2551 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_IT
 & (uöt32_t)~
RTC_TAFCR_TAMPIE
);

2553 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2556 
RTC
->
WPR
 = 0xFF;

2557 
	}
}

2577 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
)

2579 
FœgSètus
 
bô°©us
 = 
RESET
;

2580 
uöt32_t
 
tm¥eg
 = 0;

2583 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

2586 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ISR
 & 
RTC_FLAGS_MASK
);

2589 i‡((
tm¥eg
 & 
RTC_FLAG
Ë!(
uöt32_t
)
RESET
)

2591 
bô°©us
 = 
SET
;

2595 
bô°©us
 = 
RESET
;

2597  
bô°©us
;

2598 
	}
}

2613 
	$RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
)

2616 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

2619 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
RTC_FLAG
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2620 
	}
}

2633 
ITSètus
 
	$RTC_GëITSètus
(
uöt32_t
 
RTC_IT
)

2635 
ITSètus
 
bô°©us
 = 
RESET
;

2636 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

2639 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

2642 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TAFCR
 & (
RTC_TAFCR_TAMPIE
));

2645 
íabÀ°©us
 = (
uöt32_t
)((
RTC
->
CR
 & 
RTC_IT
Ë| (
tm¥eg
 & (RTC_IT >> 15)));

2648 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ISR
 & (uöt32_t)(
RTC_IT
 >> 4)));

2651 i‡((
íabÀ°©us
 !(
uöt32_t
)
RESET
Ë&& ((
tm¥eg
 & 0x0000FFFF) != (uint32_t)RESET))

2653 
bô°©us
 = 
SET
;

2657 
bô°©us
 = 
RESET
;

2659  
bô°©us
;

2660 
	}
}

2673 
	$RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
)

2675 
uöt32_t
 
tm¥eg
 = 0;

2678 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_IT
(
RTC_IT
));

2681 
tm¥eg
 = (
uöt32_t
)(
RTC_IT
 >> 4);

2684 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
tm¥eg
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2685 
	}
}

2696 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

2698 
uöt8_t
 
bcdhigh
 = 0;

2700 
VÆue
 >= 10)

2702 
bcdhigh
++;

2703 
VÆue
 -= 10;

2706  ((
uöt8_t
)(
bcdhigh
 << 4Ë| 
VÆue
);

2707 
	}
}

2714 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

2716 
uöt8_t
 
tmp
 = 0;

2717 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;

2718  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

2719 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sdio.c

149 
	~"°m32f4xx_sdio.h
"

150 
	~"°m32f4xx_rcc.h
"

165 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

169 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

170 
	#CLKEN_BôNumbî
 0x08

	)

171 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

175 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

176 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

177 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

180 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

181 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

184 
	#NIEN_BôNumbî
 0x0D

	)

185 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

188 
	#ATACMD_BôNumbî
 0x0E

	)

189 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

193 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

194 
	#DMAEN_BôNumbî
 0x03

	)

195 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

198 
	#RWSTART_BôNumbî
 0x08

	)

199 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

202 
	#RWSTOP_BôNumbî
 0x09

	)

203 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

206 
	#RWMOD_BôNumbî
 0x0A

	)

207 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

210 
	#SDIOEN_BôNumbî
 0x0B

	)

211 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

216 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

220 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

224 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

228 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

231 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

259 
	$SDIO_DeInô
()

261 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
ENABLE
);

262 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
DISABLE
);

263 
	}
}

272 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

274 
uöt32_t
 
tm¥eg
 = 0;

277 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

278 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

279 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

280 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

281 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

285 
tm¥eg
 = 
SDIO
->
CLKCR
;

288 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

296 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

297 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

298 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

301 
SDIO
->
CLKCR
 = 
tm¥eg
;

302 
	}
}

310 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

313 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

314 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

315 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

316 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

317 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

318 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

319 
	}
}

327 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

330 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

332 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

333 
	}
}

343 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

346 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

348 
SDIO
->
POWER
 = 
SDIO_PowîSèã
;

349 
	}
}

360 
uöt32_t
 
	$SDIO_GëPowîSèã
()

362  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

363 
	}
}

392 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

394 
uöt32_t
 
tm¥eg
 = 0;

397 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

398 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

399 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

400 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

404 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

408 
tm¥eg
 = 
SDIO
->
CMD
;

410 
tm¥eg
 &
CMD_CLEAR_MASK
;

415 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


416 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

419 
SDIO
->
CMD
 = 
tm¥eg
;

420 
	}
}

428 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

431 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

432 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

433 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

434 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

435 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

436 
	}
}

443 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

445  (
uöt8_t
)(
SDIO
->
RESPCMD
);

446 
	}
}

458 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

460 
__IO
 
uöt32_t
 
tmp
 = 0;

463 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

465 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

467  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

468 
	}
}

496 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

498 
uöt32_t
 
tm¥eg
 = 0;

501 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

502 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

503 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

504 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

505 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

509 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

513 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

517 
tm¥eg
 = 
SDIO
->
DCTRL
;

519 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

524 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


525 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

528 
SDIO
->
DCTRL
 = 
tm¥eg
;

529 
	}
}

537 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

540 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

541 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

542 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

543 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

544 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

545 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

546 
	}
}

553 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

555  
SDIO
->
DCOUNT
;

556 
	}
}

563 
uöt32_t
 
	$SDIO_RódD©a
()

565  
SDIO
->
FIFO
;

566 
	}
}

573 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

575 
SDIO
->
FIFO
 = 
D©a
;

576 
	}
}

583 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

585  
SDIO
->
FIFOCNT
;

586 
	}
}

612 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

615 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

617 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

618 
	}
}

626 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

629 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

631 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

632 
	}
}

642 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

645 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

647 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

648 
	}
}

656 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

659 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

661 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

662 
	}
}

670 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

673 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

675 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

676 
	}
}

702 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

705 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

707 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

708 
	}
}

716 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

719 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

721 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

722 
	}
}

730 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

733 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

735 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

736 
	}
}

762 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

765 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

767 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

768 
	}
}

820 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

823 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

824 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

826 i‡(
NewSèã
 !
DISABLE
)

829 
SDIO
->
MASK
 |
SDIO_IT
;

834 
SDIO
->
MASK
 &~
SDIO_IT
;

836 
	}
}

868 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

870 
FœgSètus
 
bô°©us
 = 
RESET
;

873 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

875 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

877 
bô°©us
 = 
SET
;

881 
bô°©us
 = 
RESET
;

883  
bô°©us
;

884 
	}
}

905 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

908 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

910 
SDIO
->
ICR
 = 
SDIO_FLAG
;

911 
	}
}

944 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

946 
ITSètus
 
bô°©us
 = 
RESET
;

949 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

950 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

952 
bô°©us
 = 
SET
;

956 
bô°©us
 = 
RESET
;

958  
bô°©us
;

959 
	}
}

980 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

983 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

985 
SDIO
->
ICR
 = 
SDIO_IT
;

986 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c

156 
	~"°m32f4xx_•i.h
"

157 
	~"°m32f4xx_rcc.h
"

172 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0x3040)

	)

173 
	#I2SCFGR_CLEAR_MASK
 ((
uöt16_t
)0xF040)

	)

176 
	#PLLCFGR_PPLR_MASK
 ((
uöt32_t
)0x70000000)

	)

177 
	#PLLCFGR_PPLN_MASK
 ((
uöt32_t
)0x00007FC0)

	)

179 
	#SPI_CR2_FRF
 ((
uöt16_t
)0x0010)

	)

180 
	#SPI_SR_TIFRFE
 ((
uöt16_t
)0x0100)

	)

222 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

225 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

227 i‡(
SPIx
 =
SPI1
)

230 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

232 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

234 i‡(
SPIx
 =
SPI2
)

237 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

239 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

243 i‡(
SPIx
 =
SPI3
)

246 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

248 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

251 
	}
}

261 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

263 
uöt16_t
 
tm¥eg
 = 0;

266 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

269 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

270 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

271 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

272 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

273 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

274 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

275 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

276 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

277 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

281 
tm¥eg
 = 
SPIx
->
CR1
;

283 
tm¥eg
 &
CR1_CLEAR_MASK
;

292 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

293 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

294 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

295 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

297 
SPIx
->
CR1
 = 
tm¥eg
;

300 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SMOD
);

303 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

304 
	}
}

325 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

327 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

328 
uöt32_t
 
tmp
 = 0, 
i2s˛k
 = 0;

329 #i‚de‡
I2S_EXTERNAL_CLOCK_VAL


330 
uöt32_t
 
∂lm
 = 0, 
∂ 
 = 0, 
∂Ã
 = 0;

334 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

335 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

336 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

337 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

338 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

339 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

340 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

344 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

345 
SPIx
->
I2SPR
 = 0x0002;

348 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

351 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

353 
i2sodd
 = (
uöt16_t
)0;

354 
i2sdiv
 = (
uöt16_t
)2;

360 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

363 
∑ckëÀngth
 = 1;

368 
∑ckëÀngth
 = 2;

375 #ifde‡
I2S_EXTERNAL_CLOCK_VAL


377 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) == 0)

379 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_I2SSRC
;

383 
i2s˛k
 = 
I2S_EXTERNAL_CLOCK_VAL
;

387 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) != 0)

389 
RCC
->
CFGR
 &~(
uöt32_t
)
RCC_CFGR_I2SSRC
;

393 
∂ 
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
) >> 6) & \

394 (
RCC_PLLI2SCFGR_PLLI2SN
 >> 6));

397 
∂Ã
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
) >> 28) & \

398 (
RCC_PLLI2SCFGR_PLLI2SR
 >> 28));

401 
∂lm
 = (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
);

404 
i2s˛k
 = (
uöt32_t
)(((
HSE_VALUE
 / 
∂lm
Ë* 
∂ 
Ë/ 
∂Ã
);

408 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

411 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

416 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

420 
tmp
 =Åmp / 10;

423 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

426 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

429 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

433 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

436 
i2sdiv
 = 2;

437 
i2sodd
 = 0;

441 
SPIx
->
I2SPR
 = (
uöt16_t
)((uöt16_t)
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

444 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

445 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

446 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

449 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

450 
	}
}

457 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

461 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

463 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

465 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

467 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

469 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

471 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

473 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

475 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

477 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

478 
	}
}

485 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

489 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

492 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

495 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

498 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

501 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

504 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

505 
	}
}

514 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

517 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

518 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

519 i‡(
NewSèã
 !
DISABLE
)

522 
SPIx
->
CR1
 |
SPI_CR1_SPE
;

527 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_SPE
);

529 
	}
}

539 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

542 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH_EXT
(
SPIx
));

543 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

545 i‡(
NewSèã
 !
DISABLE
)

548 
SPIx
->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

553 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SE
);

555 
	}
}

566 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

569 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

570 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

572 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

574 
SPIx
->
CR1
 |
SPI_D©aSize
;

575 
	}
}

586 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

589 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

590 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

591 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

594 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

599 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

601 
	}
}

612 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

615 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

616 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

617 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

620 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

625 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

627 
	}
}

636 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

639 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

640 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

641 i‡(
NewSèã
 !
DISABLE
)

644 
SPIx
->
CR2
 |(
uöt16_t
)
SPI_CR2_SSOE
;

649 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_SSOE
);

651 
	}
}

667 
	$SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

670 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

671 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

673 i‡(
NewSèã
 !
DISABLE
)

676 
SPIx
->
CR2
 |
SPI_CR2_FRF
;

681 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_CR2_FRF
;

683 
	}
}

704 
	$I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

706 
uöt16_t
 
tm¥eg
 = 0, 
tmp
 = 0;

709 
	`as£π_∑øm
(
	`IS_I2S_EXT_PERIPH
(
I2Sxext
));

710 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

711 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

712 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

713 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

717 
I2Sxext
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

718 
I2Sxext
->
I2SPR
 = 0x0002;

721 
tm¥eg
 = 
I2Sxext
->
I2SCFGR
;

724 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îTx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveTx
))

726 
tmp
 = 
I2S_Mode_SœveRx
;

730 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îRx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveRx
))

732 
tmp
 = 
I2S_Mode_SœveTx
;

738 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
tmp
 | \

739 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

740 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

743 
I2Sxext
->
I2SCFGR
 = 
tm¥eg
;

744 
	}
}

779 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

782 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

785  
SPIx
->
DR
;

786 
	}
}

795 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

798 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

801 
SPIx
->
DR
 = 
D©a
;

802 
	}
}

884 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

887 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

888 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

889 i‡(
NewSèã
 !
DISABLE
)

892 
SPIx
->
CR1
 |
SPI_CR1_CRCEN
;

897 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_CRCEN
);

899 
	}
}

906 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

909 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

912 
SPIx
->
CR1
 |
SPI_CR1_CRCNEXT
;

913 
	}
}

924 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

926 
uöt16_t
 
¸¸eg
 = 0;

928 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

929 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

930 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

933 
¸¸eg
 = 
SPIx
->
TXCRCR
;

938 
¸¸eg
 = 
SPIx
->
RXCRCR
;

941  
¸¸eg
;

942 
	}
}

949 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

952 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

955  
SPIx
->
CRCPR
;

956 
	}
}

986 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

989 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

990 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

991 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

993 i‡(
NewSèã
 !
DISABLE
)

996 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

1001 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

1003 
	}
}

1095 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1097 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

1100 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1101 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1102 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

1105 
ôpos
 = 
SPI_I2S_IT
 >> 4;

1108 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

1110 i‡(
NewSèã
 !
DISABLE
)

1113 
SPIx
->
CR2
 |
ômask
;

1118 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

1120 
	}
}

1139 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1141 
FœgSètus
 
bô°©us
 = 
RESET
;

1143 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1144 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

1147 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

1150 
bô°©us
 = 
SET
;

1155 
bô°©us
 = 
RESET
;

1158  
bô°©us
;

1159 
	}
}

1180 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1183 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1184 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

1187 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

1188 
	}
}

1205 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1207 
ITSètus
 
bô°©us
 = 
RESET
;

1208 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

1211 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1212 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

1215 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1218 
ômask
 = 
SPI_I2S_IT
 >> 4;

1221 
ômask
 = 0x01 << itmask;

1224 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

1227 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

1230 
bô°©us
 = 
SET
;

1235 
bô°©us
 = 
RESET
;

1238  
bô°©us
;

1239 
	}
}

1260 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1262 
uöt16_t
 
ôpos
 = 0;

1264 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1265 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

1268 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1271 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

1272 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_syscfg.c

43 
	~"°m32f4xx_syscfg.h
"

44 
	~"°m32f4xx_rcc.h
"

58 
	#SYSCFG_OFFSET
 (
SYSCFG_BASE
 - 
PERIPH_BASE
)

	)

61 
	#PMC_OFFSET
 (
SYSCFG_OFFSET
 + 0x04)

	)

62 
	#MII_RMII_SEL_BôNumbî
 ((
uöt8_t
)0x17)

	)

63 
	#PMC_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
PMC_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

67 
	#CMPCR_OFFSET
 (
SYSCFG_OFFSET
 + 0x20)

	)

68 
	#CMP_PD_BôNumbî
 ((
uöt8_t
)0x00)

	)

69 
	#CMPCR_CMP_PD_BB
 (
PERIPH_BB_BASE
 + (
CMPCR_OFFSET
 * 32Ë+ (
CMP_PD_BôNumbî
 * 4))

	)

86 
	$SYSCFG_DeInô
()

88 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
ENABLE
);

89 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
DISABLE
);

90 
	}
}

109 
	$SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
)

112 
	`as£π_∑øm
(
	`IS_SYSCFG_MEMORY_REMAP_CONFING
(
SYSCFG_Mem‹yRem≠
));

114 
SYSCFG
->
MEMRMP
 = 
SYSCFG_Mem‹yRem≠
;

115 
	}
}

126 
	$SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
)

128 
uöt32_t
 
tmp
 = 0x00;

131 
	`as£π_∑øm
(
	`IS_EXTI_PORT_SOURCE
(
EXTI_P‹tSour˚GPIOx
));

132 
	`as£π_∑øm
(
	`IS_EXTI_PIN_SOURCE
(
EXTI_PöSour˚x
));

134 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
EXTI_PöSour˚x
 & (
uöt8_t
)0x03));

135 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] &~
tmp
;

136 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] |(((
uöt32_t
)
EXTI_P‹tSour˚GPIOx
Ë<< (0x04 * (EXTI_PöSour˚x & (
uöt8_t
)0x03)));

137 
	}
}

147 
	$SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
)

149 
	`as£π_∑øm
(
	`IS_SYSCFG_ETH_MEDIA_INTERFACE
(
SYSCFG_ETH_MedüI¡îÁ˚
));

151 *(
__IO
 
uöt32_t
 *Ë
PMC_MII_RMII_SEL_BB
 = 
SYSCFG_ETH_MedüI¡îÁ˚
;

152 
	}
}

164 
	$SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

167 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

169 *(
__IO
 
uöt32_t
 *Ë
CMPCR_CMP_PD_BB
 = (uöt32_t)
NewSèã
;

170 
	}
}

177 
FœgSètus
 
	$SYSCFG_GëCom≥nßti⁄CñlSètus
()

179 
FœgSètus
 
bô°©us
 = 
RESET
;

181 i‡((
SYSCFG
->
CMPCR
 & 
SYSCFG_CMPCR_READY
 ) !(
uöt32_t
)
RESET
)

183 
bô°©us
 = 
SET
;

187 
bô°©us
 = 
RESET
;

189  
bô°©us
;

190 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_tim.c

114 
	~"°m32f4xx_tim.h
"

115 
	~"°m32f4xx_rcc.h
"

130 
	#SMCR_ETR_MASK
 ((
uöt16_t
)0x00FF)

	)

131 
	#CCMR_OFFSET
 ((
uöt16_t
)0x0018)

	)

132 
	#CCER_CCE_SET
 ((
uöt16_t
)0x0001)

	)

133 
	#CCER_CCNE_SET
 ((
uöt16_t
)0x0004)

	)

134 
	#CCMR_OC13M_MASK
 ((
uöt16_t
)0xFF8F)

	)

135 
	#CCMR_OC24M_MASK
 ((
uöt16_t
)0x8FFF)

	)

140 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

141 
uöt16_t
 
TIM_ICFûãr
);

142 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

143 
uöt16_t
 
TIM_ICFûãr
);

144 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

145 
uöt16_t
 
TIM_ICFûãr
);

146 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

147 
uöt16_t
 
TIM_ICFûãr
);

194 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

197 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

199 i‡(
TIMx
 =
TIM1
)

201 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

202 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

204 i‡(
TIMx
 =
TIM2
)

206 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

207 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

209 i‡(
TIMx
 =
TIM3
)

211 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

212 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

214 i‡(
TIMx
 =
TIM4
)

216 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

217 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

219 i‡(
TIMx
 =
TIM5
)

221 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

222 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

224 i‡(
TIMx
 =
TIM6
)

226 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

227 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

229 i‡(
TIMx
 =
TIM7
)

231 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

234 i‡(
TIMx
 =
TIM8
)

236 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

237 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

239 i‡(
TIMx
 =
TIM9
)

241 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

242 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

244 i‡(
TIMx
 =
TIM10
)

246 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

247 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

249 i‡(
TIMx
 =
TIM11
)

251 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

252 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

254 i‡(
TIMx
 =
TIM12
)

256 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

257 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

259 i‡(
TIMx
 =
TIM13
)

261 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

262 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

266 i‡(
TIMx
 =
TIM14
)

268 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

269 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

272 
	}
}

282 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

284 
uöt16_t
 
tmp¸1
 = 0;

287 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

288 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

289 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

291 
tmp¸1
 = 
TIMx
->
CR1
;

293 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)||

294 (
TIMx
 =
TIM2
Ë|| (TIMx =
TIM3
)||

295 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

298 
tmp¸1
 &(
uöt16_t
)(~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
));

299 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

302 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

305 
tmp¸1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

306 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

309 
TIMx
->
CR1
 = 
tmp¸1
;

312 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

315 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

317 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

320 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

325 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

326 
	}
}

334 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

337 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFFFFFF;

338 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

339 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

340 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

341 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

342 
	}
}

354 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

357 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

358 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

360 
TIMx
->
PSC
 = 
PªsˇÀr
;

362 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

363 
	}
}

377 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

379 
uöt16_t
 
tmp¸1
 = 0;

382 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

383 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

385 
tmp¸1
 = 
TIMx
->
CR1
;

388 
tmp¸1
 &(
uöt16_t
)~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

391 
tmp¸1
 |
TIM_Cou¡îMode
;

394 
TIMx
->
CR1
 = 
tmp¸1
;

395 
	}
}

403 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
)

406 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

409 
TIMx
->
CNT
 = 
Cou¡î
;

410 
	}
}

418 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
)

421 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

424 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

425 
	}
}

432 
uöt32_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

435 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

438  
TIMx
->
CNT
;

439 
	}
}

446 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

449 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

452  
TIMx
->
PSC
;

453 
	}
}

462 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

465 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

466 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

468 i‡(
NewSèã
 !
DISABLE
)

471 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

476 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_UDIS
;

478 
	}
}

491 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

494 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

495 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

497 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

500 
TIMx
->
CR1
 |
TIM_CR1_URS
;

505 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_URS
;

507 
	}
}

516 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

519 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

520 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

522 i‡(
NewSèã
 !
DISABLE
)

525 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

530 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_ARPE
;

532 
	}
}

543 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

546 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

547 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

550 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_OPM
;

553 
TIMx
->
CR1
 |
TIM_OPMode
;

554 
	}
}

566 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

569 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

570 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

573 
TIMx
->
CR1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

576 
TIMx
->
CR1
 |
TIM_CKD
;

577 
	}
}

586 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

589 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

590 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

592 i‡(
NewSèã
 !
DISABLE
)

595 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

600 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_CEN
;

602 
	}
}

665 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

667 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

670 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

671 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

672 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

673 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

676 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

679 
tmpc˚r
 = 
TIMx
->
CCER
;

681 
tmp¸2
 = 
TIMx
->
CR2
;

684 
tmpccmrx
 = 
TIMx
->
CCMR1
;

687 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

688 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC1S
;

690 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

693 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1P
;

695 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

698 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

700 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

702 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

703 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

704 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

705 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

708 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

710 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

712 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NE
;

715 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

717 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1
;

718 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1N
;

720 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

722 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

725 
TIMx
->
CR2
 = 
tmp¸2
;

728 
TIMx
->
CCMR1
 = 
tmpccmrx
;

731 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

734 
TIMx
->
CCER
 = 
tmpc˚r
;

735 
	}
}

746 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

748 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

751 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

752 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

753 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

754 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

757 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

760 
tmpc˚r
 = 
TIMx
->
CCER
;

762 
tmp¸2
 = 
TIMx
->
CR2
;

765 
tmpccmrx
 = 
TIMx
->
CCMR1
;

768 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

769 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC2S
;

772 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

775 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2P
;

777 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

780 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

782 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

784 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

785 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

786 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

787 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

790 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

792 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

794 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NE
;

797 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

799 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2
;

800 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2N
;

802 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

804 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

807 
TIMx
->
CR2
 = 
tmp¸2
;

810 
TIMx
->
CCMR1
 = 
tmpccmrx
;

813 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

816 
TIMx
->
CCER
 = 
tmpc˚r
;

817 
	}
}

827 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

829 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

832 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

833 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

834 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

835 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

838 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

841 
tmpc˚r
 = 
TIMx
->
CCER
;

843 
tmp¸2
 = 
TIMx
->
CR2
;

846 
tmpccmrx
 = 
TIMx
->
CCMR2
;

849 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

850 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC3S
;

852 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

855 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

857 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

860 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

862 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

864 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

865 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

866 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

867 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

870 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

872 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

874 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NE
;

877 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

879 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3
;

880 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3N
;

882 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

884 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

887 
TIMx
->
CR2
 = 
tmp¸2
;

890 
TIMx
->
CCMR2
 = 
tmpccmrx
;

893 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

896 
TIMx
->
CCER
 = 
tmpc˚r
;

897 
	}
}

907 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

909 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

912 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

913 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

914 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

915 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

918 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

921 
tmpc˚r
 = 
TIMx
->
CCER
;

923 
tmp¸2
 = 
TIMx
->
CR2
;

926 
tmpccmrx
 = 
TIMx
->
CCMR2
;

929 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

930 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC4S
;

933 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

936 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

938 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

941 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

943 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

945 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

947 
tmp¸2
 &=(
uöt16_t
Ë~
TIM_CR2_OIS4
;

949 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

952 
TIMx
->
CR2
 = 
tmp¸2
;

955 
TIMx
->
CCMR2
 = 
tmpccmrx
;

958 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

961 
TIMx
->
CCER
 = 
tmpc˚r
;

962 
	}
}

970 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

973 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

974 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

975 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

976 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x00000000;

977 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

978 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

979 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

980 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

981 
	}
}

1006 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

1008 
uöt32_t
 
tmp
 = 0;

1009 
uöt16_t
 
tmp1
 = 0;

1012 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1013 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1014 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

1016 
tmp
 = (
uöt32_t
Ë
TIMx
;

1017 
tmp
 +
CCMR_OFFSET
;

1019 
tmp1
 = 
CCER_CCE_SET
 << (
uöt16_t
)
TIM_Ch™√l
;

1022 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

1024 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

1026 
tmp
 +(
TIM_Ch™√l
>>1);

1029 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC13M_MASK
;

1032 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

1036 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

1039 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC24M_MASK
;

1042 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

1044 
	}
}

1052 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
)

1055 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1058 
TIMx
->
CCR1
 = 
Com∑ª1
;

1059 
	}
}

1068 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
)

1071 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1074 
TIMx
->
CCR2
 = 
Com∑ª2
;

1075 
	}
}

1083 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
)

1086 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1089 
TIMx
->
CCR3
 = 
Com∑ª3
;

1090 
	}
}

1098 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
)

1101 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1104 
TIMx
->
CCR4
 = 
Com∑ª4
;

1105 
	}
}

1116 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1118 
uöt16_t
 
tmpccmr1
 = 0;

1121 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1122 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1123 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1126 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

1129 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1132 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1133 
	}
}

1145 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1147 
uöt16_t
 
tmpccmr1
 = 0;

1150 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1151 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1152 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1155 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

1158 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1161 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1162 
	}
}

1173 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1175 
uöt16_t
 
tmpccmr2
 = 0;

1178 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1179 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1181 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1184 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

1187 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1190 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1191 
	}
}

1202 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1204 
uöt16_t
 
tmpccmr2
 = 0;

1207 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1208 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1209 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1212 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

1215 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1218 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1219 
	}
}

1230 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1232 
uöt16_t
 
tmpccmr1
 = 0;

1235 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1236 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1238 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1241 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC1PE
);

1244 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1247 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1248 
	}
}

1260 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1262 
uöt16_t
 
tmpccmr1
 = 0;

1265 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1266 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1268 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1271 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2PE
);

1274 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1277 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1278 
	}
}

1289 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1291 
uöt16_t
 
tmpccmr2
 = 0;

1294 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1295 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1297 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1300 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC3PE
);

1303 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1306 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1307 
	}
}

1318 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1320 
uöt16_t
 
tmpccmr2
 = 0;

1323 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1324 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1326 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1329 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4PE
);

1332 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1335 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1336 
	}
}

1347 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1349 
uöt16_t
 
tmpccmr1
 = 0;

1352 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1353 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1356 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1359 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1FE
;

1362 
tmpccmr1
 |
TIM_OCFa°
;

1365 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1366 
	}
}

1378 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1380 
uöt16_t
 
tmpccmr1
 = 0;

1383 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1384 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1387 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1390 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2FE
);

1393 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1396 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1397 
	}
}

1408 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1410 
uöt16_t
 
tmpccmr2
 = 0;

1413 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1414 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1417 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1420 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3FE
;

1423 
tmpccmr2
 |
TIM_OCFa°
;

1426 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1427 
	}
}

1438 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1440 
uöt16_t
 
tmpccmr2
 = 0;

1443 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1444 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1447 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1450 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4FE
);

1453 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1456 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1457 
	}
}

1468 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1470 
uöt16_t
 
tmpccmr1
 = 0;

1473 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1474 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1476 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1479 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1CE
;

1482 
tmpccmr1
 |
TIM_OCCÀ¨
;

1485 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1486 
	}
}

1498 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1500 
uöt16_t
 
tmpccmr1
 = 0;

1503 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1504 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1506 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1509 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2CE
;

1512 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1515 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1516 
	}
}

1527 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1529 
uöt16_t
 
tmpccmr2
 = 0;

1532 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1533 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1535 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1538 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3CE
;

1541 
tmpccmr2
 |
TIM_OCCÀ¨
;

1544 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1545 
	}
}

1556 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1558 
uöt16_t
 
tmpccmr2
 = 0;

1561 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1562 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1564 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1567 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4CE
;

1570 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1573 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1574 
	}
}

1585 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1587 
uöt16_t
 
tmpc˚r
 = 0;

1590 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1591 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1593 
tmpc˚r
 = 
TIMx
->
CCER
;

1596 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC1P
);

1597 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1600 
TIMx
->
CCER
 = 
tmpc˚r
;

1601 
	}
}

1612 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1614 
uöt16_t
 
tmpc˚r
 = 0;

1616 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1617 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1619 
tmpc˚r
 = 
TIMx
->
CCER
;

1622 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

1623 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1626 
TIMx
->
CCER
 = 
tmpc˚r
;

1627 
	}
}

1639 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1641 
uöt16_t
 
tmpc˚r
 = 0;

1644 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1645 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1647 
tmpc˚r
 = 
TIMx
->
CCER
;

1650 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC2P
);

1651 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1654 
TIMx
->
CCER
 = 
tmpc˚r
;

1655 
	}
}

1666 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1668 
uöt16_t
 
tmpc˚r
 = 0;

1671 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1672 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1674 
tmpc˚r
 = 
TIMx
->
CCER
;

1677 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

1678 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1681 
TIMx
->
CCER
 = 
tmpc˚r
;

1682 
	}
}

1693 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1695 
uöt16_t
 
tmpc˚r
 = 0;

1698 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1699 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1701 
tmpc˚r
 = 
TIMx
->
CCER
;

1704 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

1705 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1708 
TIMx
->
CCER
 = 
tmpc˚r
;

1709 
	}
}

1720 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1722 
uöt16_t
 
tmpc˚r
 = 0;

1725 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1726 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1728 
tmpc˚r
 = 
TIMx
->
CCER
;

1731 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

1732 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1735 
TIMx
->
CCER
 = 
tmpc˚r
;

1736 
	}
}

1747 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1749 
uöt16_t
 
tmpc˚r
 = 0;

1752 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1753 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1755 
tmpc˚r
 = 
TIMx
->
CCER
;

1758 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

1759 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1762 
TIMx
->
CCER
 = 
tmpc˚r
;

1763 
	}
}

1778 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1780 
uöt16_t
 
tmp
 = 0;

1783 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1784 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1785 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1787 
tmp
 = 
CCER_CCE_SET
 << 
TIM_Ch™√l
;

1790 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1793 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1794 
	}
}

1808 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

1810 
uöt16_t
 
tmp
 = 0;

1813 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1814 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

1815 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

1817 
tmp
 = 
CCER_CCNE_SET
 << 
TIM_Ch™√l
;

1820 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

1823 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

1824 
	}
}

1890 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1893 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1894 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

1895 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

1896 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

1897 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

1899 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

1902 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1903 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1904 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1906 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1908 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

1911 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1912 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1913 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1915 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1917 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

1920 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1921 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1922 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1924 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1929 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1930 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1931 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1933 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1935 
	}
}

1943 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1946 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

1947 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1948 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1949 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

1950 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

1951 
	}
}

1962 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1964 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1965 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1968 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1971 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

1973 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

1977 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1980 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

1982 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

1986 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1988 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

1991 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

1992 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1994 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1996 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1998 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2003 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2004 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2006 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2008 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2010 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2012 
	}
}

2019 
uöt32_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2022 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2025  
TIMx
->
CCR1
;

2026 
	}
}

2034 
uöt32_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2037 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2040  
TIMx
->
CCR2
;

2041 
	}
}

2048 
uöt32_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2051 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2054  
TIMx
->
CCR3
;

2055 
	}
}

2062 
uöt32_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2065 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2068  
TIMx
->
CCR4
;

2069 
	}
}

2082 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2085 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2086 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2089 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC1PSC
;

2092 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2093 
	}
}

2107 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2110 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2111 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2114 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC2PSC
;

2117 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2118 
	}
}

2131 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2134 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2135 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2138 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC3PSC
;

2141 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2142 
	}
}

2155 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2158 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2159 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2162 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC4PSC
;

2165 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2166 
	}
}

2208 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

2211 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2212 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

2213 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

2214 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

2215 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

2216 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

2217 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

2221 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

2222 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

2223 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

2224 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

2225 
	}
}

2233 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

2236 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

2237 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

2238 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

2239 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

2240 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

2241 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

2242 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

2243 
	}
}

2252 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2255 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2256 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2258 i‡(
NewSèã
 !
DISABLE
)

2261 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

2266 
TIMx
->
BDTR
 &(
uöt16_t
)~
TIM_BDTR_MOE
;

2268 
	}
}

2277 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2280 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2281 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2283 i‡(
NewSèã
 !
DISABLE
)

2286 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

2291 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCUS
;

2293 
	}
}

2302 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2305 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2306 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2307 i‡(
NewSèã
 !
DISABLE
)

2310 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

2315 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCPC
;

2317 
	}
}

2359 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2362 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2363 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2364 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2366 i‡(
NewSèã
 !
DISABLE
)

2369 
TIMx
->
DIER
 |
TIM_IT
;

2374 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

2376 
	}
}

2397 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

2400 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2401 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

2404 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

2405 
	}
}

2430 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2432 
ITSètus
 
bô°©us
 = 
RESET
;

2434 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2435 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2438 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2440 
bô°©us
 = 
SET
;

2444 
bô°©us
 = 
RESET
;

2446  
bô°©us
;

2447 
	}
}

2472 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2475 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2478 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2479 
	}
}

2500 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2502 
ITSètus
 
bô°©us
 = 
RESET
;

2503 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2505 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2506 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2508 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2510 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2511 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2513 
bô°©us
 = 
SET
;

2517 
bô°©us
 = 
RESET
;

2519  
bô°©us
;

2520 
	}
}

2541 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2544 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2547 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2548 
	}
}

2578 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

2581 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2582 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

2583 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

2586 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

2587 
	}
}

2605 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2608 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2609 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

2610 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2612 i‡(
NewSèã
 !
DISABLE
)

2615 
TIMx
->
DIER
 |
TIM_DMASour˚
;

2620 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

2622 
	}
}

2631 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2634 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2635 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2637 i‡(
NewSèã
 !
DISABLE
)

2640 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

2645 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCDS
;

2647 
	}
}

2670 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

2673 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2676 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2677 
	}
}

2691 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2694 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2695 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2698 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

2701 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2702 
	}
}

2721 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

2722 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

2725 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2726 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

2727 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

2730 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

2732 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2736 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2739 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

2741 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2742 
	}
}

2761 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2762 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2764 
uöt16_t
 
tmpsm¸
 = 0;

2767 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2768 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2769 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2770 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2772 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2775 
tmpsm¸
 = 
TIMx
->
SMCR
;

2778 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2781 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

2784 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2785 
tmpsm¸
 |
TIM_TS_ETRF
;

2788 
TIMx
->
SMCR
 = 
tmpsm¸
;

2789 
	}
}

2808 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2809 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2812 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2813 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2814 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2815 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2818 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2821 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

2822 
	}
}

2876 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2878 
uöt16_t
 
tmpsm¸
 = 0;

2881 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2882 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2885 
tmpsm¸
 = 
TIMx
->
SMCR
;

2888 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2891 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

2894 
TIMx
->
SMCR
 = 
tmpsm¸
;

2895 
	}
}

2919 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2922 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2923 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2926 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_MMS
;

2928 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2929 
	}
}

2943 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2946 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2947 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2950 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2953 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2954 
	}
}

2966 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2969 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2970 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2973 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_MSM
;

2976 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2977 
	}
}

2996 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2997 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2999 
uöt16_t
 
tmpsm¸
 = 0;

3002 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

3003 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

3004 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

3005 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

3007 
tmpsm¸
 = 
TIMx
->
SMCR
;

3010 
tmpsm¸
 &
SMCR_ETR_MASK
;

3013 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

3016 
TIMx
->
SMCR
 = 
tmpsm¸
;

3017 
	}
}

3054 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

3055 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

3057 
uöt16_t
 
tmpsm¸
 = 0;

3058 
uöt16_t
 
tmpccmr1
 = 0;

3059 
uöt16_t
 
tmpc˚r
 = 0;

3062 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3063 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

3064 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

3065 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

3068 
tmpsm¸
 = 
TIMx
->
SMCR
;

3071 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3074 
tmpc˚r
 = 
TIMx
->
CCER
;

3077 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

3078 
tmpsm¸
 |
TIM_EncodîMode
;

3081 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_CC2S
);

3082 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

3085 
tmpc˚r
 &((
uöt16_t
)~
TIM_CCER_CC1P
Ë& ((uöt16_t)~
TIM_CCER_CC2P
);

3086 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

3089 
TIMx
->
SMCR
 = 
tmpsm¸
;

3092 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3095 
TIMx
->
CCER
 = 
tmpc˚r
;

3096 
	}
}

3106 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

3109 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3110 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

3112 i‡(
NewSèã
 !
DISABLE
)

3115 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

3120 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_TI1S
;

3122 
	}
}

3157 
	$TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
)

3160 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

3161 
	`as£π_∑øm
(
	`IS_TIM_REMAP
(
TIM_Rem≠
));

3164 
TIMx
->
OR
 = 
TIM_Rem≠
;

3165 
	}
}

3188 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3189 
uöt16_t
 
TIM_ICFûãr
)

3191 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

3194 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

3195 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3196 
tmpc˚r
 = 
TIMx
->
CCER
;

3199 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_IC1F
);

3200 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3203 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

3204 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

3207 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3208 
TIMx
->
CCER
 = 
tmpc˚r
;

3209 
	}
}

3229 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3230 
uöt16_t
 
TIM_ICFûãr
)

3232 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3235 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

3236 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3237 
tmpc˚r
 = 
TIMx
->
CCER
;

3238 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

3241 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3242 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3243 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3246 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

3247 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

3250 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

3251 
TIMx
->
CCER
 = 
tmpc˚r
;

3252 
	}
}

3271 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3272 
uöt16_t
 
TIM_ICFûãr
)

3274 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3277 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

3278 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3279 
tmpc˚r
 = 
TIMx
->
CCER
;

3280 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

3283 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR2_IC3F
);

3284 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3287 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
);

3288 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

3291 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3292 
TIMx
->
CCER
 = 
tmpc˚r
;

3293 
	}
}

3312 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3313 
uöt16_t
 
TIM_ICFûãr
)

3315 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3318 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

3319 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3320 
tmpc˚r
 = 
TIMx
->
CCER
;

3321 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

3324 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3325 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3326 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3329 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
);

3330 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

3333 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3334 
TIMx
->
CCER
 = 
tmpc˚r
 ;

3335 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c

85 
	~"°m32f4xx_ußπ.h
"

86 
	~"°m32f4xx_rcc.h
"

101 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | \

102 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

103 
USART_CR1_RE
))

	)

106 
	#CR2_CLOCK_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR2_CLKEN
 | 
USART_CR2_CPOL
 | \

107 
USART_CR2_CPHA
 | 
USART_CR2_LBCL
))

	)

110 
	#CR3_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

113 
	#IT_MASK
 ((
uöt16_t
)0x001F)

	)

178 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

181 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

183 i‡(
USARTx
 =
USART1
)

185 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

186 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

188 i‡(
USARTx
 =
USART2
)

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

191 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

193 i‡(
USARTx
 =
USART3
)

195 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

196 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

198 i‡(
USARTx
 =
UART4
)

200 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

201 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

203 i‡(
USARTx
 =
UART5
)

205 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

206 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

210 i‡(
USARTx
 =
USART6
)

212 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
ENABLE
);

213 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
DISABLE
);

216 
	}
}

227 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

229 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

230 
uöt32_t
 
öãgîdividî
 = 0x00;

231 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

232 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

235 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

236 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

237 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

238 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

239 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

240 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

241 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

244 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

246 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

250 
tm¥eg
 = 
USARTx
->
CR2
;

253 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

257 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

260 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

263 
tm¥eg
 = 
USARTx
->
CR1
;

266 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR1_CLEAR_MASK
);

272 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

273 
USART_InôSåu˘
->
USART_Mode
;

276 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

279 
tm¥eg
 = 
USARTx
->
CR3
;

282 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR3_CLEAR_MASK
);

286 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

289 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

293 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

295 i‡((
USARTx
 =
USART1
Ë|| (USARTx =
USART6
))

297 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

301 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

305 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

308 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

313 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

315 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

318 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

321 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

323 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

327 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

331 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

332 
	}
}

340 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

343 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

344 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

345 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

346 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

347 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

348 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

349 
	}
}

360 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

362 
uöt32_t
 
tm¥eg
 = 0x00;

364 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

365 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

366 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

367 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

368 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

371 
tm¥eg
 = 
USARTx
->
CR2
;

373 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR2_CLOCK_CLEAR_MASK
);

379 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

380 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

382 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

383 
	}
}

391 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

394 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

395 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

396 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

397 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

398 
	}
}

408 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

411 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

412 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

414 i‡(
NewSèã
 !
DISABLE
)

417 
USARTx
->
CR1
 |
USART_CR1_UE
;

422 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_UE
);

424 
	}
}

434 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

437 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

440 
USARTx
->
GTPR
 &
USART_GTPR_GT
;

442 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

443 
	}
}

455 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

458 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

459 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

461 i‡(
NewSèã
 !
DISABLE
)

464 
USARTx
->
CR1
 |
USART_CR1_OVER8
;

469 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_OVER8
);

471 
	}
}

481 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 i‡(
NewSèã
 !
DISABLE
)

490 
USARTx
->
CR3
 |
USART_CR3_ONEBIT
;

495 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
);

497 
	}
}

538 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

541 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

542 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

545 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

546 
	}
}

554 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

557 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

560  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

561 
	}
}

605 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

608 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

609 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

612 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_ADD
);

614 
USARTx
->
CR2
 |
USART_Addªss
;

615 
	}
}

625 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

628 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

629 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

631 i‡(
NewSèã
 !
DISABLE
)

634 
USARTx
->
CR1
 |
USART_CR1_RWU
;

639 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_RWU
);

641 
	}
}

652 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

655 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

656 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

658 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_WAKE
);

659 
USARTx
->
CR1
 |
USART_WakeUp
;

660 
	}
}

721 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

724 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

725 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

727 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LBDL
);

728 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

729 
	}
}

739 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

742 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

743 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

745 i‡(
NewSèã
 !
DISABLE
)

748 
USARTx
->
CR2
 |
USART_CR2_LINEN
;

753 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LINEN
);

755 
	}
}

763 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

766 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

769 
USARTx
->
CR1
 |
USART_CR1_SBK
;

770 
	}
}

816 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

819 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

820 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

822 i‡(
NewSèã
 !
DISABLE
)

825 
USARTx
->
CR3
 |
USART_CR3_HDSEL
;

830 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_HDSEL
);

832 
	}
}

901 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

904 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

907 
USARTx
->
GTPR
 &
USART_GTPR_PSC
;

909 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

910 
	}
}

920 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

923 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

924 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

925 i‡(
NewSèã
 !
DISABLE
)

928 
USARTx
->
CR3
 |
USART_CR3_SCEN
;

933 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_SCEN
);

935 
	}
}

945 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

948 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

949 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

950 i‡(
NewSèã
 !
DISABLE
)

953 
USARTx
->
CR3
 |
USART_CR3_NACK
;

958 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_NACK
);

960 
	}
}

1016 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

1019 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1020 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

1022 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IRLP
);

1023 
USARTx
->
CR3
 |
USART_IrDAMode
;

1024 
	}
}

1034 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1037 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1038 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1040 i‡(
NewSèã
 !
DISABLE
)

1043 
USARTx
->
CR3
 |
USART_CR3_IREN
;

1048 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IREN
);

1050 
	}
}

1080 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1083 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1084 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

1085 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1087 i‡(
NewSèã
 !
DISABLE
)

1091 
USARTx
->
CR3
 |
USART_DMAReq
;

1097 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

1099 
	}
}

1208 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1210 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

1211 
uöt32_t
 
ußπxba£
 = 0x00;

1213 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1214 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

1215 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1218 i‡(
USART_IT
 =
USART_IT_CTS
)

1220 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1223 
ußπxba£
 = (
uöt32_t
)
USARTx
;

1226 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1229 
ôpos
 = 
USART_IT
 & 
IT_MASK
;

1230 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

1232 i‡(
ußπªg
 == 0x01)

1234 
ußπxba£
 += 0x0C;

1236 i‡(
ußπªg
 == 0x02)

1238 
ußπxba£
 += 0x10;

1242 
ußπxba£
 += 0x14;

1244 i‡(
NewSèã
 !
DISABLE
)

1246 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

1250 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

1252 
	}
}

1272 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1274 
FœgSètus
 
bô°©us
 = 
RESET
;

1276 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1277 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

1280 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

1282 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1285 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

1287 
bô°©us
 = 
SET
;

1291 
bô°©us
 = 
RESET
;

1293  
bô°©us
;

1294 
	}
}

1321 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1324 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1325 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

1328 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

1330 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1333 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

1334 
	}
}

1354 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1356 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

1357 
ITSètus
 
bô°©us
 = 
RESET
;

1359 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1360 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

1363 i‡(
USART_IT
 =
USART_IT_CTS
)

1365 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1369 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1371 
ômask
 = 
USART_IT
 & 
IT_MASK
;

1372 
ômask
 = (
uöt32_t
)0x01 << itmask;

1374 i‡(
ußπªg
 == 0x01)

1376 
ômask
 &
USARTx
->
CR1
;

1378 i‡(
ußπªg
 == 0x02)

1380 
ômask
 &
USARTx
->
CR2
;

1384 
ômask
 &
USARTx
->
CR3
;

1387 
bôpos
 = 
USART_IT
 >> 0x08;

1388 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

1389 
bôpos
 &
USARTx
->
SR
;

1390 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

1392 
bô°©us
 = 
SET
;

1396 
bô°©us
 = 
RESET
;

1399  
bô°©us
;

1400 
	}
}

1428 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1430 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1432 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1433 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1436 i‡(
USART_IT
 =
USART_IT_CTS
)

1438 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1441 
bôpos
 = 
USART_IT
 >> 0x08;

1442 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1443 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1444 
	}
}

	@libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c

80 
	~"°m32f4xx_wwdg.h
"

81 
	~"°m32f4xx_rcc.h
"

96 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

98 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

99 
	#EWI_BôNumbî
 0x09

	)

100 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

104 
	#CFR_WDGTB_MASK
 ((
uöt32_t
)0xFFFFFE7F)

	)

105 
	#CFR_W_MASK
 ((
uöt32_t
)0xFFFFFF80)

	)

106 
	#BIT_MASK
 ((
uöt8_t
)0x7F)

	)

134 
	$WWDG_DeInô
()

136 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

137 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

138 
	}
}

150 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

152 
uöt32_t
 
tm¥eg
 = 0;

154 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

156 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_MASK
;

158 
tm¥eg
 |
WWDG_PªsˇÀr
;

160 
WWDG
->
CFR
 = 
tm¥eg
;

161 
	}
}

169 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

171 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

174 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

177 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_MASK
;

180 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_MASK
;

183 
WWDG
->
CFR
 = 
tm¥eg
;

184 
	}
}

192 
	$WWDG_E«bÀIT
()

194 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

195 
	}
}

204 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

207 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

210 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_MASK
;

211 
	}
}

235 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

238 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

239 
WWDG
->
CR
 = 
WWDG_CR_WDGA
 | 
Cou¡î
;

240 
	}
}

262 
FœgSètus
 
	$WWDG_GëFœgSètus
()

264 
FœgSètus
 
bô°©us
 = 
RESET
;

266 i‡((
WWDG
->
SR
Ë!(
uöt32_t
)
RESET
)

268 
bô°©us
 = 
SET
;

272 
bô°©us
 = 
RESET
;

274  
bô°©us
;

275 
	}
}

282 
	$WWDG_CÀ¨Fœg
()

284 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

285 
	}
}

	@libstm/STM32_USB-FS-Device_Lib/inc/otgd_fs_cal.h

15 #i‚de‡
__OTG_CORE_H__


16 
	#__OTG_CORE_H__


	)

18 #ifde‡
STM32F10X_CL


20 
	~"°m32f10x.h
"

21 
	~"usb_ty≥.h
"

23 #i‡
deföed
 ( 
__CC_ARM
 )

24 
	#__∑cked
 
__∑cked


	)

25 #ñi‡
deföed
 ( 
__ICCARM__
 )

26 
	#__∑cked
 
__∑cked


	)

27 #ñi‡
deföed
 ( 
__GNUC__
 )

28 
	#__∑cked
 
	`__©åibuã__
 ((
__∑cked__
)Ë

	)

29 #ñi‡
deföed
 ( 
__TASKING__
 )

30 
	#__∑cked


	)

37 
	#DEVICE_MODE_ENABLED


	)

39 #i‚de‡
NULL


40 
	#NULL
 ((*)0)

	)

44 
	#DEV_EP_TX_DIS
 0x0000

	)

45 
	#DEV_EP_TX_STALL
 0x0010

	)

46 
	#DEV_EP_TX_NAK
 0x0020

	)

47 
	#DEV_EP_TX_VALID
 0x0030

	)

49 
	#DEV_EP_RX_DIS
 0x0000

	)

50 
	#DEV_EP_RX_STALL
 0x1000

	)

51 
	#DEV_EP_RX_NAK
 0x2000

	)

52 
	#DEV_EP_RX_VALID
 0x3000

	)

54 
	#USB_OTG_TIMEOUT
 200000

	)

57 
	#GAHBCFG_TXFEMPTYLVL_EMPTY
 1

	)

58 
	#GAHBCFG_TXFEMPTYLVL_HALFEMPTY
 0

	)

60 
	#GAHBCFG_GLBINT_ENABLE
 1

	)

61 
	#GAHBCFG_INT_DMA_BURST_SINGLE
 0

	)

62 
	#GAHBCFG_INT_DMA_BURST_INCR
 1

	)

63 
	#GAHBCFG_INT_DMA_BURST_INCR4
 3

	)

64 
	#GAHBCFG_INT_DMA_BURST_INCR8
 5

	)

65 
	#GAHBCFG_INT_DMA_BURST_INCR16
 7

	)

66 
	#GAHBCFG_DMAENABLE
 1

	)

67 
	#GAHBCFG_TXFEMPTYLVL_EMPTY
 1

	)

68 
	#GAHBCFG_TXFEMPTYLVL_HALFEMPTY
 0

	)

70 
	#GRXSTS_PKTSTS_IN
 2

	)

71 
	#GRXSTS_PKTSTS_IN_XFER_COMP
 3

	)

72 
	#GRXSTS_PKTSTS_DATA_TOGGLE_ERR
 5

	)

73 
	#GRXSTS_PKTSTS_CH_HALTED
 7

	)

77 
	#DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ
 0

	)

78 
	#DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
 1

	)

79 
	#DSTS_ENUMSPD_LS_PHY_6MHZ
 2

	)

80 
	#DSTS_ENUMSPD_FS_PHY_48MHZ
 3

	)

82 
	#DCFG_FRAME_INTERVAL_80
 0

	)

83 
	#DCFG_FRAME_INTERVAL_85
 1

	)

84 
	#DCFG_FRAME_INTERVAL_90
 2

	)

85 
	#DCFG_FRAME_INTERVAL_95
 3

	)

87 
	#DEP0CTL_MPS_64
 0

	)

88 
	#DEP0CTL_MPS_32
 1

	)

89 
	#DEP0CTL_MPS_16
 2

	)

90 
	#DEP0CTL_MPS_8
 3

	)

92 
	#EP_SPEED_LOW
 0

	)

93 
	#EP_SPEED_FULL
 1

	)

94 
	#EP_SPEED_HIGH
 2

	)

96 
	#EP_TYPE_CTRL
 0

	)

97 
	#EP_TYPE_ISOC
 1

	)

98 
	#EP_TYPE_BULK
 2

	)

99 
	#EP_TYPE_INTR
 3

	)

101 
	#STS_GOUT_NAK
 1

	)

102 
	#STS_DATA_UPDT
 2

	)

103 
	#STS_XFER_COMP
 3

	)

104 
	#STS_SETUP_COMP
 4

	)

105 
	#STS_SETUP_UPDT
 6

	)

112 
	mUSB_OTG_OK
,

113 
	mUSB_OTG_FAIL


116 
	tUSB_OTG_Sètus
;

118 
	sUSB_OTG_ï


120 
uöt8_t
 
	mnum
;

121 
uöt8_t
 
	mis_ö
;

122 
uöt32_t
 
	mtx_fifo_num
;

123 
uöt32_t
 
	mty≥
;

124 
uöt8_t
 
	meví_odd_‰ame
;

125 
uöt32_t
 
	mmax∑ckë
;

126 
uöt8_t
 *
	mx„r_buff
;

127 
uöt32_t
 
	mx„r_Àn
;

128 
uöt32_t
 
	mx„r_cou¡
;

130 
	tUSB_OTG_EP
 , *
	tPUSB_OTG_EP
;

136 
	#CLEAR_IN_EP_INTR
(
ïnum
,
öå
) \

137 
dõpöt
.
d32
=0; \

138 
dõpöt
.
b
.
öå
 = 1; \

139 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DINEPS
[
ïnum
]->
DIEPINTx
,
dõpöt
.
d32
);

	)

141 
	#CLEAR_OUT_EP_INTR
(
ïnum
,
öå
) \

142 
d€pöt
.
d32
=0; \

143 
d€pöt
.
b
.
öå
 = 1; \

144 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DOUTEPS
[
ïnum
]->
DOEPINTx
,
d€pöt
.
d32
);

	)

147 
	#USB_OTG_READ_REG32
(
ªg
Ë(*(
__IO
 
uöt32_t
 *Ïeg)

	)

149 
	#USB_OTG_WRITE_REG32
(
ªg
,
vÆue
Ë(*(
__IO
 
uöt32_t
 *Ïeg = vÆue)

	)

151 
	#USB_OTG_MODIFY_REG32
(
ªg
,
˛ór_mask
,
£t_mask
) \

152 
	`USB_OTG_WRITE_REG32
(
ªg
, (((
	`USB_OTG_READ_REG32
‘eg)Ë& ~
˛ór_mask
Ë| 
£t_mask
 ) )

	)

155 
	#uDELAY
(
u£c
Ë
	`USB_OTG_BSP_uDñay
(u£c)

	)

156 
	#mDELAY
(
m£c
Ë
	`USB_OTG_BSP_uDñay
(1000 * m£c)

	)

158 
	#_OTGD_FS_GATE_PHYCLK
 *(
__IO
 
uöt32_t
*)(0x50000E00Ë0x03

	)

159 
	#_OTGD_FS_UNGATE_PHYCLK
 *(
__IO
 
uöt32_t
*)(0x50000E00Ë0x00

	)

164 
USB_OTG_BSP_uDñay
 (c⁄° 
uöt32_t
 
u£c
);

168 
USB_OTG_Sètus
 
OTGD_FS_C‹eInô
();

169 
USB_OTG_Sètus
 
OTGD_FS_SëAddªss
(
uöt32_t
 
Ba£Addªss
);

170 
USB_OTG_Sètus
 
OTGD_FS_E«bÀGlobÆI¡
();

171 
USB_OTG_Sètus
 
OTGD_FS_DißbÀGlobÆI¡
();

172 
USB_OTG_Sètus
 
OTGD_FS_FlushTxFifo
 (
uöt32_t
 
num
);

173 
USB_OTG_Sètus
 
OTGD_FS_FlushRxFifo
 ();

174 
USB_OTG_Sètus
 
OTGD_FS_C‹eInôDev
 ();

175 
USB_OTG_Sètus
 
OTGD_FS_E«bÀDevI¡
();

176 
USB_OTG_Sètus
 
OTGD_FS_EP0A˘iv©e
();

177 
USB_OTG_Sètus
 
OTGD_FS_EPA˘iv©e
(
USB_OTG_EP
 *
ï
);

178 
USB_OTG_Sètus
 
OTGD_FS_EPDó˘iv©e
(
USB_OTG_EP
 *
ï
);

179 
USB_OTG_Sètus
 
OTGD_FS_EPSèπX„r
(
USB_OTG_EP
 *
ï
);

180 
USB_OTG_Sètus
 
OTGD_FS_EP0SèπX„r
(
USB_OTG_EP
 *
ï
);

181 
USB_OTG_Sètus
 
OTGD_FS_EPSëSèŒ
(
USB_OTG_EP
 *
ï
);

182 
USB_OTG_Sètus
 
OTGD_FS_EPCÀ¨SèŒ
(
USB_OTG_EP
 *
ï
);

183 
uöt32_t
 
OTGD_FS_RódDevAŒOutEp_ôr
();

184 
uöt32_t
 
OTGD_FS_RódDevOutEP_ôr
(
USB_OTG_EP
 *
ï
);

185 
uöt32_t
 
OTGD_FS_RódDevAŒInEPIå
();

186 
uöt32_t
 
OTGD_FS_GëEPSètus
(
USB_OTG_EP
 *
ï
);

187 
uöt32_t
 
USBD_FS_IsDevi˚Mode
();

188 
uöt32_t
 
OTGD_FS_RódC‹eIå
();

189 
USB_OTG_Sètus
 
OTGD_FS_WrôePackë
(
uöt8_t
 *
§c
,

190 
uöt8_t
 
ï_num
,

191 
uöt16_t
 
byãs
);

192 * 
OTGD_FS_RódPackë
(
uöt8_t
 *
de°
,

193 
uöt16_t
 
byãs
);

195 
OTGD_FS_SëEPSètus
(
USB_OTG_EP
 *
ï
, 
uöt32_t
 
Sètus
);

196 
OTGD_FS_SëRemŸeWakeup
();

197 
OTGD_FS_Re£tRemŸeWakeup
();

	@libstm/STM32_USB-FS-Device_Lib/inc/otgd_fs_dev.h

17 #i‚de‡
__OTG_DEV_H__


18 
	#__OTG_DEV_H__


	)

20 #ifde‡
STM32F10X_CL


23 
	~"°m32f10x.h
"

24 
	~"usb_ty≥.h
"

30 
	#OTG_DEV_EP_TYPE_CONTROL
 0

	)

31 
	#OTG_DEV_EP_TYPE_ISOC
 1

	)

32 
	#OTG_DEV_EP_TYPE_BULK
 2

	)

33 
	#OTG_DEV_EP_TYPE_INT
 3

	)

36 
	#EP0_OUT
 0x00

	)

37 
	#EP0_IN
 0x80

	)

38 
	#EP1_OUT
 0x01

	)

39 
	#EP1_IN
 0x81

	)

40 
	#EP2_OUT
 0x02

	)

41 
	#EP2_IN
 0x82

	)

42 
	#EP3_OUT
 0x03

	)

43 
	#EP3_IN
 0x83

	)

48 
	#ENDP0
 ((
uöt8_t
)0)

	)

49 
	#ENDP1
 ((
uöt8_t
)1)

	)

50 
	#ENDP2
 ((
uöt8_t
)2)

	)

51 
	#ENDP3
 ((
uöt8_t
)3)

	)

52 
	#ENDP4
 ((
uöt8_t
)4)

	)

53 
	#ENDP5
 ((
uöt8_t
)5)

	)

54 
	#ENDP6
 ((
uöt8_t
)6)

	)

55 
	#ENDP7
 ((
uöt8_t
)7)

	)

58 
	#EP_TX_DIS
 
DEV_EP_TX_DIS
Ë

	)

59 
	#EP_TX_STALL
 
DEV_EP_TX_STALL


	)

60 
	#EP_TX_NAK
 
DEV_EP_TX_NAK


	)

61 
	#EP_TX_VALID
 
DEV_EP_TX_VALID


	)

64 
	#EP_RX_DIS
 
DEV_EP_RX_DIS


	)

65 
	#EP_RX_STALL
 
DEV_EP_RX_STALL


	)

66 
	#EP_RX_NAK
 
DEV_EP_RX_NAK


	)

67 
	#EP_RX_VALID
 
DEV_EP_RX_VALID


	)

71 
	#_GëEPTxSètus
(
bEpNum
Ë((
uöt16_t
)
	`OTG_DEV_GëEPTxSètus
(bEpNum))

	)

72 
	#_GëEPRxSètus
(
bEpNum
Ë((
uöt16_t
)
	`OTG_DEV_GëEPRxSètus
(bEpNum))

	)

74 
	#_SëEPTxSètus
(
bEpNum
,
wSèã
Ë(
	`OTG_DEV_SëEPTxSètus
(bEpNum, wSèã))

	)

75 
	#_SëEPRxSètus
(
bEpNum
,
wSèã
Ë(
	`OTG_DEV_SëEPRxSètus
(bEpNum, wSèã))

	)

77 
	#_SëEPTxVÆid
(
bEpNum
Ë(
	`OTG_DEV_SëEPTxSètus
(bEpNum, 
EP_TX_VALID
))

	)

78 
	#_SëEPRxVÆid
(
bEpNum
Ë(
	`OTG_DEV_SëEPRxSètus
(bEpNum, 
EP_RX_VALID
))

	)

80 
	#_GëTxSèŒSètus
(
bEpNum
Ë(
	`OTG_DEV_GëEPTxSètus
(bEpNumË=
EP_TX_STALL
)

	)

81 
	#_GëRxSèŒSètus
(
bEpNum
Ë(
	`OTG_DEV_GëEPRxSètus
(bEpNumË=
EP_RX_STALL
)

	)

84 
	#OTGD_FS_DEVICE_RESET
 
Devi˚_Pr›îty
.
	`Re£t
()

	)

89 
OTG_DEV_Inô
();

90 
OTG_DEV_EP_Inô
(
uöt8_t
 
bEpAdd
, uöt8_à
bEpTy≥
, 
uöt16_t
 
wEpMaxPackSize
);

92 
OTG_DEV_SëEPRxSètus
(
uöt8_t
 
bE≤um
, 
uöt32_t
 
°©us
);

93 
OTG_DEV_SëEPTxSètus
(
uöt8_t
 
bE≤um
, 
uöt32_t
 
°©us
);

94 
uöt32_t
 
OTG_DEV_GëEPRxSètus
(
uöt8_t
 
bE≤um
);

95 
uöt32_t
 
OTG_DEV_GëEPTxSètus
(
uöt8_t
 
bE≤um
);

97 
USB_DevDisc⁄√˘
();

98 
USB_DevC⁄√˘
();

102 
SëEPTxSètus
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wSèã
);

103 
SëEPRxSètus
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wSèã
);

104 
uöt16_t
 
GëEPTxSètus
(
uöt8_t
 
bEpNum
);

105 
uöt16_t
 
GëEPRxSètus
(
uöt8_t
 
bEpNum
);

106 
SëEPTxVÆid
(
uöt8_t
 
bEpNum
);

107 
SëEPRxVÆid
(
uöt8_t
 
bEpNum
);

108 
uöt16_t
 
GëTxSèŒSètus
(
uöt8_t
 
bEpNum
);

109 
uöt16_t
 
GëRxSèŒSètus
(
uöt8_t
 
bEpNum
);

110 
SëEPTxCou¡
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wCou¡
);

111 
SëEPRxCou¡
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wCou¡
);

113 
uöt16_t
 
ToW‹d
(
uöt8_t
, uint8_t);

114 
uöt16_t
 
ByãSw≠
(uint16_t);

	@libstm/STM32_USB-FS-Device_Lib/inc/otgd_fs_int.h

17 #i‚de‡
__USB_INT_H


18 
	#__USB_INT_H


	)

26 #ifde‡
STM32F10X_CL


29 
uöt32_t
 
OTGD_FS_H™dÀ_Sof_ISR
();

30 
uöt32_t
 
OTGD_FS_H™dÀ_RxSètusQueueLevñ_ISR
();

31 
uöt32_t
 
OTGD_FS_H™dÀ_GInNakEff_ISR
();

32 
uöt32_t
 
OTGD_FS_H™dÀ_GOutNakEff_ISR
();

33 
uöt32_t
 
OTGD_FS_H™dÀ_E¨lySu•íd_ISR
();

34 
uöt32_t
 
OTGD_FS_H™dÀ_USBSu•íd_ISR
();

35 
uöt32_t
 
OTGD_FS_H™dÀ_UsbRe£t_ISR
();

36 
uöt32_t
 
OTGD_FS_H™dÀ_EnumD⁄e_ISR
();

37 
uöt32_t
 
OTGD_FS_H™dÀ_IsoOutDr›_ISR
();

38 
uöt32_t
 
OTGD_FS_H™dÀ_EOPF_ISR
();

39 
uöt32_t
 
OTGD_FS_H™dÀ_EPMism©ch_ISR
();

40 
uöt32_t
 
OTGD_FS_H™dÀ_InEP_ISR
();

41 
uöt32_t
 
OTGD_FS_H™dÀ_OutEP_ISR
();

42 
uöt32_t
 
OTGD_FS_H™dÀ_Incom∂IsoIn_ISR
();

43 
uöt32_t
 
OTGD_FS_H™dÀ_Incom∂IsoOut_ISR
();

44 
uöt32_t
 
OTGD_FS_H™dÀ_Wakeup_ISR
();

	@libstm/STM32_USB-FS-Device_Lib/inc/otgd_fs_pcd.h

17 #i‚de‡
__USB_OTG_PCD_H__


18 
	#__USB_OTG_PCD_H__


	)

20 
	~"Ÿgd_fs_ªgs.h
"

22 
	#MAX_EP0_SIZE
 0x40

	)

23 
	#MAX_PACKET_SIZE
 0x400

	)

26 
	#USB_ENDPOINT_XFER_CONTROL
 0

	)

27 
	#USB_ENDPOINT_XFER_ISOC
 1

	)

28 
	#USB_ENDPOINT_XFER_BULK
 2

	)

29 
	#USB_ENDPOINT_XFER_INT
 3

	)

30 
	#USB_ENDPOINT_XFERTYPE_MASK
 3

	)

36 
	eusb_devi˚_•ìd
 {

37 
	mUSB_SPEED_UNKNOWN
 = 0,

38 
	mUSB_SPEED_LOW
, 
	mUSB_SPEED_FULL
,

39 
	mUSB_SPEED_HIGH


44 
	susb_ï_des¸ùt‹


46 
uöt8_t
 
	mbLígth
;

47 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

48 
uöt8_t
 
	mbEndpoötAddªss
;

49 
uöt8_t
 
	mbmAâribuãs
;

50 
uöt16_t
 
	mwMaxPackëSize
;

51 
uöt8_t
 
	mbI¡îvÆ
;

53 
	tEP_DESCRIPTOR
 , *
	tPEP_DESCRIPTOR
;

57 
	sUSB_OTG_USBF


60 
USB_OTG_EP
 
	mï0
;

61 
USB_OTG_EP
 
	mö_ï
[ 
NUM_TX_FIFOS
 - 1];

62 
USB_OTG_EP
 
	mout_ï
[ 
NUM_TX_FIFOS
 - 1];

64 
	tUSB_OTG_PCD_DEV
 , *
	tUSB_OTG_PCD_PDEV
;

68 
PCD_Inô
();

69 
PCD_DevC⁄√˘
 ();

70 
PCD_DevDisc⁄√˘
 ();

71 
PCD_EP_SëAddªss
 (
uöt8_t
 
addªss
);

72 
uöt32_t
 
PCD_EP_O≥n
(
EP_DESCRIPTOR
 *
ïdesc
);

73 
uöt32_t
 
PCD_EP_Clo£
 ( 
uöt8_t
 
ï_addr
);

74 
uöt32_t
 
PCD_EP_Ród
 ( 
uöt8_t
 
ï_addr
,

75 
uöt8_t
 *
pbuf
,

76 
uöt32_t
 
buf_Àn
);

77 
uöt32_t
 
PCD_EP_Wrôe
 ( 
uöt8_t
 
ï_addr
,

78 
uöt8_t
 *
pbuf
,

79 
uöt32_t
 
buf_Àn
);

80 
uöt32_t
 
PCD_EP_SèŒ
 (
uöt8_t
 
ïnum
);

81 
uöt32_t
 
PCD_EP_CÃSèŒ
 (
uöt8_t
 
ïnum
);

82 
uöt32_t
 
PCD_EP_Flush
 (
uöt8_t
 
ïnum
);

83 
uöt32_t
 
PCD_H™dÀ_ISR
();

85 
USB_OTG_EP
* 
PCD_GëOutEP
(
uöt32_t
 
ï_num
) ;

86 
USB_OTG_EP
* 
PCD_GëInEP
(
uöt32_t
 
ï_num
);

87 
PCD_EP0_OutSèπ
();

	@libstm/STM32_USB-FS-Device_Lib/inc/otgd_fs_regs.h

16 #i‚de‡
__USB_OTG_REGS_H__


17 
	#__USB_OTG_REGS_H__


	)

19 #ifde‡
STM32F10X_CL


21 
	~"°m32f10x.h
"

22 
	~"usb_ty≥.h
"

24 
	#USB_OTG_FS_BASE_ADDR
 0x50000000

	)

26 
	#USB_OTG_CORE_GLOBAL_REGS_OFFSET
 0x0000

	)

27 
	#USB_OTG_DEV_GLOBAL_REG_OFFSET
 0x0800

	)

28 
	#USB_OTG_DEV_IN_EP_REG_OFFSET
 0x0900

	)

29 
	#USB_OTG_EP_REG_OFFSET
 0x0020

	)

30 
	#USB_OTG_DEV_OUT_EP_REG_OFFSET
 0x0B00

	)

31 
	#USB_OTG_PCGCCTL_OFFSET
 0x0E00

	)

32 
	#USB_OTG_DATA_FIFO_OFFSET
 0x1000

	)

33 
	#USB_OTG_DATA_FIFO_SIZE
 0x1000

	)

35 
	#NUM_TX_FIFOS
 4

	)

41 
	s_USB_OTG_GREGS


44 
__IO
 
uöt32_t
 
	mGOTGCTL
;

45 
__IO
 
uöt32_t
 
	mGOTGINT
;

46 
__IO
 
uöt32_t
 
	mGAHBCFG
;

47 
__IO
 
uöt32_t
 
	mGUSBCFG
;

48 
__IO
 
uöt32_t
 
	mGRSTCTL
;

49 
__IO
 
uöt32_t
 
	mGINTSTS
;

50 
__IO
 
uöt32_t
 
	mGINTMSK
;

51 
__IO
 
uöt32_t
 
	mGRXSTSR
;

52 
__IO
 
uöt32_t
 
	mGRXSTSP
;

53 
__IO
 
uöt32_t
 
	mGRXFSIZ
;

54 
__IO
 
uöt32_t
 
	mDIEPTXF0
;

55 
__IO
 
uöt32_t
 
	mHNPTXSTS
;

56 
uöt32_t
 
	mRe£rved30
[2];

57 
__IO
 
uöt32_t
 
	mGCCFG
;

58 
__IO
 
uöt32_t
 
	mCID
;

59 
uöt32_t
 
	mª£rved
[48];

60 
__IO
 
uöt32_t
 
	mHPTXFSIZ
;

61 
__IO
 
uöt32_t
 
	mDIEPTXFx
[
NUM_TX_FIFOS
 - 1];

64 
	tUSB_OTG_GREGS
;

74 
	s_USB_OTG_DEV


77 
__IO
 
uöt32_t
 
	mDCFG
;

78 
__IO
 
uöt32_t
 
	mDCTL
;

79 
__IO
 
uöt32_t
 
	mDSTS
;

80 
uöt32_t
 
	mª£rvedC
;

81 
__IO
 
uöt32_t
 
	mDIEPMSK
;

82 
__IO
 
uöt32_t
 
	mDOEPMSK
;

83 
__IO
 
uöt32_t
 
	mDAINT
;

84 
__IO
 
uöt32_t
 
	mDAINTMSK
;

85 
uöt32_t
 
	mRe£rved20
[2];

86 
__IO
 
uöt32_t
 
	mDVBUSDIS
;

87 
__IO
 
uöt32_t
 
	mDVBUSPULSE
;

88 
__IO
 
uöt32_t
 
	mRe£rved30
;

89 
__IO
 
uöt32_t
 
	mDIEPEMPMSK
;

92 
	tUSB_OTG_DEV
;

99 
	s_USB_OTG_DINEPS


101 
__IO
 
uöt32_t
 
	mDIEPCTLx
;

102 
uöt32_t
 
	mª£rved04
;

103 
__IO
 
uöt32_t
 
	mDIEPINTx
;

104 
uöt32_t
 
	mª£rved0C
;

105 
__IO
 
uöt32_t
 
	mDIEPTSIZx
;

106 
uöt32_t
 
	mª£rved14
;

107 
__IO
 
uöt32_t
 
	mDTXFSTSx
;

108 
uöt32_t
 
	mª£rved18
;

111 
	tUSB_OTG_DINEPS
;

120 
	s_USB_OTG_DOUTEPS


122 
__IO
 
uöt32_t
 
	mDOEPCTLx
;

123 
uöt32_t
 
	mª£rved04
;

124 
__IO
 
uöt32_t
 
	mDOEPINTx
;

125 
uöt32_t
 
	mª£rved0C
;

126 
__IO
 
uöt32_t
 
	mDOEPTSIZx
;

127 
__IO
 
uöt32_t
 
	mRe£rved14
[3];

129 
	tUSB_OTG_DOUTEPS
;

138 
	sUSB_OTG_USB_OTG_FS_REGS


140 
USB_OTG_GREGS
 *
	mGREGS
;

141 
USB_OTG_DEV
 *
	mDEV
;

142 
USB_OTG_DINEPS
 *
	mDINEPS
[
NUM_TX_FIFOS
];

143 
USB_OTG_DOUTEPS
 *
	mDOUTEPS
[
NUM_TX_FIFOS
];

144 
__IO
 
uöt32_t
 *
	mFIFO
[
NUM_TX_FIFOS
];

145 
__IO
 
uöt32_t
 *
	mPCGCCTL
;

148 
	tUSB_OTG_CORE_REGS
 , *
	tpUSB_OTG_CORE_REGS
;

150 
	u_USB_OTG_GAHBCFG_Ty≥Def


152 
uöt32_t
 
	md32
;

155 
uöt32_t
 
	mgötmsk
 :

157 
uöt32_t
 
	mª£rved1
 :

159 
uöt32_t
 
	mtx„m∂vl
 :

161 
uöt32_t
 
	mª£rved8_31
 :

164 
	mb
;

166 
	tUSB_OTG_GAHBCFG_Ty≥Def
;

169 
	u_USB_OTG_GUSBCFG_Ty≥Def


171 
uöt32_t
 
	md32
;

174 
uöt32_t
 
	mtoutˇl
 :

176 
uöt32_t
 
	mRe£rved3_5
 :

178 
uöt32_t
 
	mphy£l
 :

180 
uöt32_t
 
	mRe£rved7
 :

182 
uöt32_t
 
	m§pˇp
 :

184 
uöt32_t
 
	mh≈ˇp
 :

186 
uöt32_t
 
	musbådtim
 :

188 
uöt32_t
 
	mª£rved15_30
 :

190 
uöt32_t
 
	mf‹˚_ho°
 :

192 
uöt32_t
 
	mf‹˚_dev
 :

194 
uöt32_t
 
	mc‹ru±_tx
 :

197 
	mb
;

198 } 
	tUSB_OTG_GUSBCFG_Ty≥Def
;

201 
	u_USB_OTG_GRSTCTL_Ty≥Def


203 
uöt32_t
 
	md32
;

206 
uöt32_t
 
	mcs·r°
 :

208 
uöt32_t
 
	mhs·r°
 :

210 
uöt32_t
 
	mh°‰m
 :

212 
uöt32_t
 
	mª£rved3
 :

214 
uöt32_t
 
	mrxfÊsh
 :

216 
uöt32_t
 
	mtxfÊsh
 :

218 
uöt32_t
 
	mtx‚um
 :

220 
uöt32_t
 
	mª£rved11_30
 :

222 
uöt32_t
 
	mahbidÀ
 :

225 
	mb
;

226 } 
	tUSB_OTG_GRSTCTL_Ty≥Def
;

229 
	u_USB_OTG_GINTMSK_Ty≥Def


231 
uöt32_t
 
	md32
;

234 
uöt32_t
 
	mª£rved0
 :

236 
uöt32_t
 
	mmodemism©ch
 :

238 
uöt32_t
 
	mŸgöå
 :

240 
uöt32_t
 
	msoföå
 :

242 
uöt32_t
 
	mrx°sqlvl
 :

244 
uöt32_t
 
	mª£rved5
 :

246 
uöt32_t
 
	mgö«keff
 :

248 
uöt32_t
 
	mgouäakeff
 :

250 
uöt32_t
 
	mª£rved8_9
 :

252 
uöt32_t
 
	mîlysu•íd
 :

254 
uöt32_t
 
	musbsu•íd
 :

256 
uöt32_t
 
	musbª£t
 :

258 
uöt32_t
 
	míumd⁄e
 :

260 
uöt32_t
 
	misooutdr›
 :

262 
uöt32_t
 
	me›‰ame
 :

264 
uöt32_t
 
	mª£rved16
 :

266 
uöt32_t
 
	mïmism©ch
 :

268 
uöt32_t
 
	möïöå
 :

270 
uöt32_t
 
	mouãpöå
 :

272 
uöt32_t
 
	möcom∂isoö
 :

274 
uöt32_t
 
	möcom∂isoout
 :

276 
uöt32_t
 
	mª£rved22_23
 :

278 
uöt32_t
 
	mp‹töå
 :

280 
uöt32_t
 
	mhcöå
 :

282 
uöt32_t
 
	m±x„m±y
 :

284 
uöt32_t
 
	mª£rved27
 :

286 
uöt32_t
 
	mc⁄id°schng
 :

288 
uöt32_t
 
	mdisc⁄√˘
 :

290 
uöt32_t
 
	m£s§eqöå
 :

292 
uöt32_t
 
	mwkupöå
 :

295 
	mb
;

296 } 
	tUSB_OTG_GINTMSK_Ty≥Def
;

301 
	u_USB_OTG_GINTSTS_Ty≥Def


303 
uöt32_t
 
	md32
;

306 
uöt32_t
 
	mcurmode
 :

308 
uöt32_t
 
	mmodemism©ch
 :

310 
uöt32_t
 
	mŸgöå
 :

312 
uöt32_t
 
	msoföå
 :

314 
uöt32_t
 
	mrx°sqlvl
 :

316 
uöt32_t
 
	mª£rved5
 :

318 
uöt32_t
 
	mgö«keff
 :

320 
uöt32_t
 
	mgouäakeff
 :

322 
uöt32_t
 
	mª£rved8_9
 :

324 
uöt32_t
 
	mîlysu•íd
 :

326 
uöt32_t
 
	musbsu•íd
 :

328 
uöt32_t
 
	musbª£t
 :

330 
uöt32_t
 
	míumd⁄e
 :

332 
uöt32_t
 
	misooutdr›
 :

334 
uöt32_t
 
	me›‰ame
 :

336 
uöt32_t
 
	mRe£rved16_17
 :

338 
uöt32_t
 
	möïöt
:

340 
uöt32_t
 
	mouãpöå
 :

342 
uöt32_t
 
	möcom∂isoö
 :

344 
uöt32_t
 
	möcom∂isoout
 :

346 
uöt32_t
 
	mª£rved22_23
 :

348 
uöt32_t
 
	mp‹töå
 :

350 
uöt32_t
 
	mhcöå
 :

352 
uöt32_t
 
	m±x„m±y
 :

354 
uöt32_t
 
	mª£rved27
 :

356 
uöt32_t
 
	mc⁄id°schng
 :

358 
uöt32_t
 
	mdisc⁄√˘
 :

360 
uöt32_t
 
	m£s§eqöå
 :

362 
uöt32_t
 
	mwkupöå
 :

365 
	mb
;

366 } 
	tUSB_OTG_GINTSTS_Ty≥Def
;

369 
	u_USB_OTG_GRXSTSP_Ty≥Def


372 
uöt32_t
 
	md32
;

375 
uöt32_t
 
	mïnum
 :

377 
uöt32_t
 
	mb˙t
 :

379 
uöt32_t
 
	mdpid
 :

381 
uöt32_t
 
	mpkt°s
 :

383 
uöt32_t
 
	m‰mnum
 :

385 
uöt32_t
 
	mª£rved
 :

388 
	mb
;

389 } 
	tUSB_OTG_GRXSTSP_Ty≥Def
;

393 
	u_USB_OTG_FIFOSIZ_Ty≥Def


395 
uöt32_t
 
	md32
;

398 
uöt32_t
 
	m°¨èddr
 :

400 
uöt32_t
 
	mdïth
 :

403 
	mb
;

404 } 
	tUSB_OTG_FIFOSIZ_Ty≥Def
;

408 
	u_USB_OTG_DTXFSTS_Ty≥Def


410 
uöt32_t
 
	md32
;

413 
uöt32_t
 
	mtxf•ˇvaû
 :

415 
uöt32_t
 
	mª£rved
 :

418 
	mb
;

419 } 
	tUSB_OTG_DTXFSTS_Ty≥Def
;

423 
	u_USB_OTG_GCCFG_Ty≥Def


426 
uöt32_t
 
	md32
;

430 
uöt32_t
 
	mª£rved0
 :

432 
uöt32_t
 
	mpwdn
 :

434 
uöt32_t
 
	mª£rved17
 :

436 
uöt32_t
 
	mvbus£nsögA
 :

438 
uöt32_t
 
	mvbus£nsögB
 :

440 
uöt32_t
 
	mSOFouãn
 :

442 
uöt32_t
 
	mª£rved21
 :

445 
	mb
;

446 } 
	tUSB_OTG_GCCFG_Ty≥Def
;

450 
	u_USB_OTG_DCFG_Ty≥Def


453 
uöt32_t
 
	md32
;

456 
uöt32_t
 
	mdev•d
 :

458 
uöt32_t
 
	mnz°southshk
 :

460 
uöt32_t
 
	mª£rved3
 :

462 
uöt32_t
 
	mdevaddr
 :

464 
uöt32_t
 
	m≥r‰öt
 :

466 
uöt32_t
 
	mª£rved13_31
 :

469 
	mb
;

470 } 
	tUSB_OTG_DCFG_Ty≥Def
;

474 
	u_USB_OTG_DCTL_Ty≥Def


477 
uöt32_t
 
	md32
;

480 
uöt32_t
 
	mrmtwkupsig
 :

482 
uöt32_t
 
	ms·disc⁄
 :

484 
uöt32_t
 
	mg≈ö«k°s
 :

486 
uöt32_t
 
	mgouäak°s
 :

488 
uöt32_t
 
	mt°˘l
 :

490 
uöt32_t
 
	msg≈ö«k
 :

492 
uöt32_t
 
	mcg≈ö«k
 :

494 
uöt32_t
 
	msgouäak
 :

496 
uöt32_t
 
	mcgouäak
 :

498 
uöt32_t
 
	mpwr⁄¥gd⁄e
 :

500 
uöt32_t
 
	mª£rved
 :

503 
	mb
;

504 } 
	tUSB_OTG_DCTL_Ty≥Def
;

507 
	u_USB_OTG_DSTS_Ty≥Def


510 
uöt32_t
 
	md32
;

513 
uöt32_t
 
	msu•°s
 :

515 
uöt32_t
 
	míum•d
 :

517 
uöt32_t
 
	mîπi˚º
 :

519 
uöt32_t
 
	mª£rved4_7
:

521 
uöt32_t
 
	msof‚
 :

523 
uöt32_t
 
	mª£rved22_31
 :

526 
	mb
;

527 } 
	tUSB_OTG_DSTS_Ty≥Def
;

531 
	u_USB_OTG_DIEPINTx_Ty≥Def


534 
uöt32_t
 
	md32
;

537 
uöt32_t
 
	mx„rcom∂
 :

539 
uöt32_t
 
	mïdis
 :

541 
uöt32_t
 
	mRe£rved2
 :

543 
uöt32_t
 
	mtimeout
 :

545 
uöt32_t
 
	mötktx„mp
 :

547 
uöt32_t
 
	mª£rved5
 :

549 
uöt32_t
 
	möï«keff
 :

551 
uöt32_t
 
	mtx„m±y
 :

553 
uöt32_t
 
	mª£rved08_31
 :

556 
	mb
;

557 } 
	tUSB_OTG_DIEPINTx_Ty≥Def
;

560 
_USB_OTG_DIEPINTx_Ty≥Def
 
	tUSB_OTG_DIEPMSKx_Ty≥Def
;

563 
	u_USB_OTG_DOEPINTx_Ty≥Def


566 
uöt32_t
 
	md32
;

569 
uöt32_t
 
	mx„rcom∂
 :

571 
uöt32_t
 
	mïdis
 :

573 
uöt32_t
 
	mª£rved2
 :

575 
uöt32_t
 
	m£tup
 :

577 
uöt32_t
 
	mouâokíïdis
 :

579 
uöt32_t
 
	mª£rved5
 :

581 
uöt32_t
 
	mb2b£tup
 :

583 
uöt32_t
 
	mª£rved07_31
 :

586 
	mb
;

587 } 
	tUSB_OTG_DOEPINTx_Ty≥Def
;

590 
_USB_OTG_DOEPINTx_Ty≥Def
 
	tUSB_OTG_DOEPMSKx_Ty≥Def
;

593 
	u_USB_OTG_DAINT_Ty≥Def


596 
uöt32_t
 
	md32
;

599 
uöt32_t
 
	mö
 :

601 
uöt32_t
 
	mout
 :

604 
	mï
;

605 } 
	tUSB_OTG_DAINT_Ty≥Def
;

608 
	u_USB_OTG_DEPCTLx_Ty≥Def


611 
uöt32_t
 
	md32
;

614 
uöt32_t
 
	mmps
 :

616 
uöt32_t
 
	mRe£rved11_14
 :

618 
uöt32_t
 
	musba˘ï
 :

620 
uöt32_t
 
	mdpid
 :

622 
uöt32_t
 
	m«k°s
 :

624 
uöt32_t
 
	mïty≥
 :

626 
uöt32_t
 
	mRe£rved20
 :

628 
uöt32_t
 
	m°Æl
 :

630 
uöt32_t
 
	mtx‚um
 :

632 
uöt32_t
 
	m˙ak
 :

634 
uöt32_t
 
	m¢ak
 :

636 
uöt32_t
 
	m£td0pid
 :

638 
uöt32_t
 
	m£todd‰m
 :

640 
uöt32_t
 
	mïdis
 :

642 
uöt32_t
 
	mïía
 :

645 
	mb
;

646 } 
	tUSB_OTG_DEPCTLx_Ty≥Def
;

650 
	u_OTG_FS_DEPTSIZx_Ty≥Def


653 
uöt32_t
 
	md32
;

656 
uöt32_t
 
	mx„rsize
 :

658 
uöt32_t
 
	mpkt˙t
 :

660 
uöt32_t
 
	mmcou¡
 :

662 
uöt32_t
 
	mª£rved
 :

665 
	mb
;

667 
	tOTG_FS_DEPTSIZx_Ty≥Def
;

671 
	u_USB_OTG_DOEPTSIZ0_Ty≥Def


674 
uöt32_t
 
	md32
;

677 
uöt32_t
 
	mx„rsize
 :

679 
uöt32_t
 
	mª£rved7_18
 :

681 
uöt32_t
 
	mpkt˙t
 :

683 
uöt32_t
 
	mª£rved20_28
 :

685 
uöt32_t
 
	msup˙t
 :

687 
uöt32_t
 
	mª£rved31
;

689 
	mb
;

690 } 
	tUSB_OTG_DOEPTSIZ0_Ty≥Def
;

694 
	u_OTG_FS_PCGCCTL_Ty≥Def


696 
uöt32_t
 
	md32
;

699 
uöt32_t
 
	m°›p˛k
 :

701 
uöt32_t
 
	mg©eh˛k
 :

703 
uöt32_t
 
	mª£rved3
 :

706 
	mb
;

707 } 
	tOTG_FS_PCGCCTL_Ty≥Def
;

	@libstm/STM32_USB-FS-Device_Lib/inc/usb_core.h

17 #i‚de‡
__USB_CORE_H


18 
	#__USB_CORE_H


	)

22 
	e_CONTROL_STATE


24 
	mWAIT_SETUP
,

25 
	mSETTING_UP
,

26 
	mIN_DATA
,

27 
	mOUT_DATA
,

28 
	mLAST_IN_DATA
,

29 
	mLAST_OUT_DATA
,

30 
	mWAIT_STATUS_IN
,

31 
	mWAIT_STATUS_OUT
,

32 
	mSTALLED
,

33 
	mPAUSE


34 } 
	tCONTROL_STATE
;

36 
	sO√Des¸ùt‹


38 
uöt8_t
 *
	mDes¸ùt‹
;

39 
uöt16_t
 
	mDes¸ùt‹_Size
;

41 
	tONE_DESCRIPTOR
, *
	tPONE_DESCRIPTOR
;

45 
	e_RESULT


47 
	mUSB_SUCCESS
 = 0,

48 
	mUSB_ERROR
,

49 
	mUSB_UNSUPPORT
,

50 
	mUSB_NOT_READY


52 } 
	tRESULT
;

56 
	s_ENDPOINT_INFO


80 
uöt16_t
 
	mUsb_wLígth
;

81 
uöt16_t
 
	mUsb_wOff£t
;

82 
uöt16_t
 
	mPackëSize
;

83 
	muöt8_t
 *(*
	mC›yD©a
)(
uöt16_t
 
	mLígth
);

84 }
	tENDPOINT_INFO
;

88 
	s_DEVICE


90 
uöt8_t
 
	mTŸÆ_Endpoöt
;

91 
uöt8_t
 
	mTŸÆ_C⁄figuøti⁄
;

93 
	tDEVICE
;

97 
uöt16_t
 
	mw
;

98 
	sBW


100 
uöt8_t
 
	mbb1
;

101 
uöt8_t
 
	mbb0
;

103 
	mbw
;

104 } 
	tuöt16_t_uöt8_t
;

106 
	s_DEVICE_INFO


108 
uöt8_t
 
	mUSBbmReque°Ty≥
;

109 
uöt8_t
 
	mUSBbReque°
;

110 
uöt16_t_uöt8_t
 
	mUSBwVÆues
;

111 
uöt16_t_uöt8_t
 
	mUSBwIndexs
;

112 
uöt16_t_uöt8_t
 
	mUSBwLígths
;

114 
uöt8_t
 
	mC⁄åﬁSèã
;

115 
uöt8_t
 
	mCuºít_Fótuª
;

116 
uöt8_t
 
	mCuºít_C⁄figuøti⁄
;

117 
uöt8_t
 
	mCuºít_I¡îÁ˚
;

118 
uöt8_t
 
	mCuºít_A…î«ãSëtög
;

121 
ENDPOINT_INFO
 
	mCål_Info
;

122 }
	tDEVICE_INFO
;

124 
	s_DEVICE_PROP


126 (*
	mInô
)();

127 (*
	mRe£t
)();

130 (*
	mPro˚ss_Sètus_IN
)();

131 (*
	mPro˚ss_Sètus_OUT
)();

149 
RESULT
 (*
Cœss_D©a_Sëup
)(
uöt8_t
 
	mReque°No
);

160 
RESULT
 (*
Cœss_NoD©a_Sëup
)(
uöt8_t
 
	mReque°No
);

170 
RESULT
 (*
Cœss_Gë_I¡îÁ˚_Sëtög
)(
uöt8_t
 
	mI¡îÁ˚
, uöt8_à
	mA…î«ãSëtög
);

172 
	muöt8_t
* (*
	mGëDevi˚Des¸ùt‹
)(
uöt16_t
 
	mLígth
);

173 
	muöt8_t
* (*
	mGëC⁄figDes¸ùt‹
)(
uöt16_t
 
	mLígth
);

174 
	muöt8_t
* (*
	mGëSåögDes¸ùt‹
)(
uöt16_t
 
	mLígth
);

178 * 
	mRxEP_buf„r
;

180 
uöt8_t
 
	mMaxPackëSize
;

182 }
	tDEVICE_PROP
;

184 
	s_USER_STANDARD_REQUESTS


186 (*
	mU£r_GëC⁄figuøti⁄
)();

187 (*
	mU£r_SëC⁄figuøti⁄
)();

188 (*
	mU£r_GëI¡îÁ˚
)();

189 (*
	mU£r_SëI¡îÁ˚
)();

190 (*
	mU£r_GëSètus
)();

191 (*
	mU£r_CÀ¨Fótuª
)();

192 (*
	mU£r_SëEndPoötFótuª
)();

193 (*
	mU£r_SëDevi˚Fótuª
)();

194 (*
	mU£r_SëDevi˚Addªss
)();

196 
	tUSER_STANDARD_REQUESTS
;

199 
	#Ty≥_Recùõ¡
 (
pInf‹m©i⁄
->
USBbmReque°Ty≥
 & (
REQUEST_TYPE
 | 
RECIPIENT
))

	)

201 
	#Usb_rLígth
 
Usb_wLígth


	)

202 
	#Usb_rOff£t
 
Usb_wOff£t


	)

204 
	#USBwVÆue
 
USBwVÆues
.
w


	)

205 
	#USBwVÆue0
 
USBwVÆues
.
bw
.
bb0


	)

206 
	#USBwVÆue1
 
USBwVÆues
.
bw
.
bb1


	)

207 
	#USBwIndex
 
USBwIndexs
.
w


	)

208 
	#USBwIndex0
 
USBwIndexs
.
bw
.
bb0


	)

209 
	#USBwIndex1
 
USBwIndexs
.
bw
.
bb1


	)

210 
	#USBwLígth
 
USBwLígths
.
w


	)

211 
	#USBwLígth0
 
USBwLígths
.
bw
.
bb0


	)

212 
	#USBwLígth1
 
USBwLígths
.
bw
.
bb1


	)

216 
uöt8_t
 
Sëup0_Pro˚ss
();

217 
uöt8_t
 
Po°0_Pro˚ss
();

218 
uöt8_t
 
Out0_Pro˚ss
();

219 
uöt8_t
 
In0_Pro˚ss
();

221 
RESULT
 
Sènd¨d_SëEndPoötFótuª
();

222 
RESULT
 
Sènd¨d_SëDevi˚Fótuª
();

224 
uöt8_t
 *
Sènd¨d_GëC⁄figuøti⁄
(
uöt16_t
 
Lígth
);

225 
RESULT
 
Sènd¨d_SëC⁄figuøti⁄
();

226 
uöt8_t
 *
Sènd¨d_GëI¡îÁ˚
(
uöt16_t
 
Lígth
);

227 
RESULT
 
Sènd¨d_SëI¡îÁ˚
();

228 
uöt8_t
 *
Sènd¨d_GëDes¸ùt‹D©a
(
uöt16_t
 
Lígth
, 
PONE_DESCRIPTOR
 
pDesc
);

230 
uöt8_t
 *
Sènd¨d_GëSètus
(
uöt16_t
 
Lígth
);

231 
RESULT
 
Sènd¨d_CÀ¨Fótuª
();

232 
SëDevi˚Addªss
(
uöt8_t
);

233 
NOP_Pro˚ss
();

235 
DEVICE_PROP
 
Devi˚_Pr›îty
;

236 
USER_STANDARD_REQUESTS
 
U£r_Sènd¨d_Reque°s
;

237 
DEVICE
 
Devi˚_TabÀ
;

238 
DEVICE_INFO
 
Devi˚_Info
;

241 
__IO
 
uöt16_t
 
SaveRSèã
;

242 
__IO
 
uöt16_t
 
SaveTSèã
;

	@libstm/STM32_USB-FS-Device_Lib/inc/usb_def.h

17 #i‚de‡
__USB_DEF_H


18 
	#__USB_DEF_H


	)

22 
	e_RECIPIENT_TYPE


24 
	mDEVICE_RECIPIENT
,

25 
	mINTERFACE_RECIPIENT
,

26 
	mENDPOINT_RECIPIENT
,

27 
	mOTHER_RECIPIENT


28 } 
	tRECIPIENT_TYPE
;

31 
	e_STANDARD_REQUESTS


33 
	mGET_STATUS
 = 0,

34 
	mCLEAR_FEATURE
,

35 
	mRESERVED1
,

36 
	mSET_FEATURE
,

37 
	mRESERVED2
,

38 
	mSET_ADDRESS
,

39 
	mGET_DESCRIPTOR
,

40 
	mSET_DESCRIPTOR
,

41 
	mGET_CONFIGURATION
,

42 
	mSET_CONFIGURATION
,

43 
	mGET_INTERFACE
,

44 
	mSET_INTERFACE
,

45 
	mTOTAL_sREQUEST
,

46 
	mSYNCH_FRAME
 = 12

47 } 
	tSTANDARD_REQUESTS
;

50 
	e_DESCRIPTOR_TYPE


52 
	mDEVICE_DESCRIPTOR
 = 1,

53 
	mCONFIG_DESCRIPTOR
,

54 
	mSTRING_DESCRIPTOR
,

55 
	mINTERFACE_DESCRIPTOR
,

56 
	mENDPOINT_DESCRIPTOR


57 } 
	tDESCRIPTOR_TYPE
;

60 
	e_FEATURE_SELECTOR


62 
	mENDPOINT_STALL
,

63 
	mDEVICE_REMOTE_WAKEUP


64 } 
	tFEATURE_SELECTOR
;

68 
	#REQUEST_TYPE
 0x60

	)

69 
	#STANDARD_REQUEST
 0x00

	)

70 
	#CLASS_REQUEST
 0x20

	)

71 
	#VENDOR_REQUEST
 0x40

	)

73 
	#RECIPIENT
 0x1F

	)

	@libstm/STM32_USB-FS-Device_Lib/inc/usb_init.h

17 #i‚de‡
__USB_INIT_H


18 
	#__USB_INIT_H


	)

25 
USB_Inô
();

29 
uöt8_t
 
EPödex
;

34 
DEVICE_INFO
* 
pInf‹m©i⁄
;

37 
DEVICE_PROP
* 
pPr›îty
;

42 
USER_STANDARD_REQUESTS
 *
pU£r_Sènd¨d_Reque°s
;

44 
uöt16_t
 
SaveSèã
 ;

45 
uöt16_t
 
wI¡îru±_Mask
;

	@libstm/STM32_USB-FS-Device_Lib/inc/usb_int.h

18 #i‚de‡
__USB_INT_H


19 
	#__USB_INT_H


	)

26 
CTR_LP
();

27 
CTR_HP
();

	@libstm/STM32_USB-FS-Device_Lib/inc/usb_lib.h

17 #i‚de‡
__USB_LIB_H


18 
	#__USB_LIB_H


	)

21 
	~"°m32f4xx.h
"

23 
	~"usb_ty≥.h
"

24 
	~"usb_ªgs.h
"

25 
	~"usb_def.h
"

26 
	~"usb_c‹e.h
"

27 
	~"usb_öô.h
"

28 #i‚de‡
STM32F10X_CL


29 
	~"usb_mem.h
"

30 
	~"usb_öt.h
"

33 
	~"usb_sû.h
"

35 #ifde‡
STM32F10X_CL


36 
	~"Ÿgd_fs_ˇl.h
"

37 
	~"Ÿgd_fs_pcd.h
"

38 
	~"Ÿgd_fs_dev.h
"

39 
	~"Ÿgd_fs_öt.h
"

	@libstm/STM32_USB-FS-Device_Lib/inc/usb_mem.h

17 #i‚de‡
__USB_MEM_H


18 
	#__USB_MEM_H


	)

25 
U£rToPMABuf„rC›y
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
);

26 
PMAToU£rBuf„rC›y
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
);

	@libstm/STM32_USB-FS-Device_Lib/inc/usb_regs.h

17 #i‚de‡
__USB_REGS_H


18 
	#__USB_REGS_H


	)

20 #i‚de‡
STM32F10X_CL


24 
	e_EP_DBUF_DIR


27 
	mEP_DBUF_ERR
,

28 
	mEP_DBUF_OUT
,

29 
	mEP_DBUF_IN


30 }
	tEP_DBUF_DIR
;

33 
	eEP_BUF_NUM


35 
	mEP_NOBUF
,

36 
	mEP_BUF0
,

37 
	mEP_BUF1


41 
	#RegBa£
 (0x40005C00LË

	)

42 
	#PMAAddr
 (0x40006000LË

	)

49 
	#CNTR
 ((
__IO
 *)(
RegBa£
 + 0x40))

	)

51 
	#ISTR
 ((
__IO
 *)(
RegBa£
 + 0x44))

	)

53 
	#FNR
 ((
__IO
 *)(
RegBa£
 + 0x48))

	)

55 
	#DADDR
 ((
__IO
 *)(
RegBa£
 + 0x4C))

	)

57 
	#BTABLE
 ((
__IO
 *)(
RegBa£
 + 0x50))

	)

61 
	#EP0REG
 ((
__IO
 *)(
RegBa£
)Ë

	)

64 
	#EP0_OUT
 ((
uöt8_t
)0x00)

	)

65 
	#EP0_IN
 ((
uöt8_t
)0x80)

	)

66 
	#EP1_OUT
 ((
uöt8_t
)0x01)

	)

67 
	#EP1_IN
 ((
uöt8_t
)0x81)

	)

68 
	#EP2_OUT
 ((
uöt8_t
)0x02)

	)

69 
	#EP2_IN
 ((
uöt8_t
)0x82)

	)

70 
	#EP3_OUT
 ((
uöt8_t
)0x03)

	)

71 
	#EP3_IN
 ((
uöt8_t
)0x83)

	)

72 
	#EP4_OUT
 ((
uöt8_t
)0x04)

	)

73 
	#EP4_IN
 ((
uöt8_t
)0x84)

	)

74 
	#EP5_OUT
 ((
uöt8_t
)0x05)

	)

75 
	#EP5_IN
 ((
uöt8_t
)0x85)

	)

76 
	#EP6_OUT
 ((
uöt8_t
)0x06)

	)

77 
	#EP6_IN
 ((
uöt8_t
)0x86)

	)

78 
	#EP7_OUT
 ((
uöt8_t
)0x07)

	)

79 
	#EP7_IN
 ((
uöt8_t
)0x87)

	)

82 
	#ENDP0
 ((
uöt8_t
)0)

	)

83 
	#ENDP1
 ((
uöt8_t
)1)

	)

84 
	#ENDP2
 ((
uöt8_t
)2)

	)

85 
	#ENDP3
 ((
uöt8_t
)3)

	)

86 
	#ENDP4
 ((
uöt8_t
)4)

	)

87 
	#ENDP5
 ((
uöt8_t
)5)

	)

88 
	#ENDP6
 ((
uöt8_t
)6)

	)

89 
	#ENDP7
 ((
uöt8_t
)7)

	)

94 
	#ISTR_CTR
 (0x8000Ë

	)

95 
	#ISTR_DOVR
 (0x4000Ë

	)

96 
	#ISTR_ERR
 (0x2000Ë

	)

97 
	#ISTR_WKUP
 (0x1000Ë

	)

98 
	#ISTR_SUSP
 (0x0800Ë

	)

99 
	#ISTR_RESET
 (0x0400Ë

	)

100 
	#ISTR_SOF
 (0x0200Ë

	)

101 
	#ISTR_ESOF
 (0x0100Ë

	)

104 
	#ISTR_DIR
 (0x0010Ë

	)

105 
	#ISTR_EP_ID
 (0x000FË

	)

107 
	#CLR_CTR
 (~
ISTR_CTR
Ë

	)

108 
	#CLR_DOVR
 (~
ISTR_DOVR
Ë

	)

109 
	#CLR_ERR
 (~
ISTR_ERR
Ë

	)

110 
	#CLR_WKUP
 (~
ISTR_WKUP
Ë

	)

111 
	#CLR_SUSP
 (~
ISTR_SUSP
Ë

	)

112 
	#CLR_RESET
 (~
ISTR_RESET
Ë

	)

113 
	#CLR_SOF
 (~
ISTR_SOF
Ë

	)

114 
	#CLR_ESOF
 (~
ISTR_ESOF
Ë

	)

119 
	#CNTR_CTRM
 (0x8000Ë

	)

120 
	#CNTR_DOVRM
 (0x4000Ë

	)

121 
	#CNTR_ERRM
 (0x2000Ë

	)

122 
	#CNTR_WKUPM
 (0x1000Ë

	)

123 
	#CNTR_SUSPM
 (0x0800Ë

	)

124 
	#CNTR_RESETM
 (0x0400Ë

	)

125 
	#CNTR_SOFM
 (0x0200Ë

	)

126 
	#CNTR_ESOFM
 (0x0100Ë

	)

129 
	#CNTR_RESUME
 (0x0010Ë

	)

130 
	#CNTR_FSUSP
 (0x0008Ë

	)

131 
	#CNTR_LPMODE
 (0x0004Ë

	)

132 
	#CNTR_PDWN
 (0x0002Ë

	)

133 
	#CNTR_FRES
 (0x0001Ë

	)

138 
	#FNR_RXDP
 (0x8000Ë

	)

139 
	#FNR_RXDM
 (0x4000Ë

	)

140 
	#FNR_LCK
 (0x2000Ë

	)

141 
	#FNR_LSOF
 (0x1800Ë

	)

142 
	#FNR_FN
 (0x07FFË

	)

146 
	#DADDR_EF
 (0x80)

	)

147 
	#DADDR_ADD
 (0x7F)

	)

152 
	#EP_CTR_RX
 (0x8000Ë

	)

153 
	#EP_DTOG_RX
 (0x4000Ë

	)

154 
	#EPRX_STAT
 (0x3000Ë

	)

155 
	#EP_SETUP
 (0x0800Ë

	)

156 
	#EP_T_FIELD
 (0x0600Ë

	)

157 
	#EP_KIND
 (0x0100Ë

	)

158 
	#EP_CTR_TX
 (0x0080Ë

	)

159 
	#EP_DTOG_TX
 (0x0040Ë

	)

160 
	#EPTX_STAT
 (0x0030Ë

	)

161 
	#EPADDR_FIELD
 (0x000FË

	)

164 
	#EPREG_MASK
 (
EP_CTR_RX
|
EP_SETUP
|
EP_T_FIELD
|
EP_KIND
|
EP_CTR_TX
|
EPADDR_FIELD
)

	)

167 
	#EP_TYPE_MASK
 (0x0600Ë

	)

168 
	#EP_BULK
 (0x0000Ë

	)

169 
	#EP_CONTROL
 (0x0200Ë

	)

170 
	#EP_ISOCHRONOUS
 (0x0400Ë

	)

171 
	#EP_INTERRUPT
 (0x0600Ë

	)

172 
	#EP_T_MASK
 (~
EP_T_FIELD
 & 
EPREG_MASK
)

	)

176 
	#EPKIND_MASK
 (~
EP_KIND
 & 
EPREG_MASK
)

	)

179 
	#EP_TX_DIS
 (0x0000Ë

	)

180 
	#EP_TX_STALL
 (0x0010Ë

	)

181 
	#EP_TX_NAK
 (0x0020Ë

	)

182 
	#EP_TX_VALID
 (0x0030Ë

	)

183 
	#EPTX_DTOG1
 (0x0010Ë

	)

184 
	#EPTX_DTOG2
 (0x0020Ë

	)

185 
	#EPTX_DTOGMASK
 (
EPTX_STAT
|
EPREG_MASK
)

	)

188 
	#EP_RX_DIS
 (0x0000Ë

	)

189 
	#EP_RX_STALL
 (0x1000Ë

	)

190 
	#EP_RX_NAK
 (0x2000Ë

	)

191 
	#EP_RX_VALID
 (0x3000Ë

	)

192 
	#EPRX_DTOG1
 (0x1000Ë

	)

193 
	#EPRX_DTOG2
 (0x2000Ë

	)

194 
	#EPRX_DTOGMASK
 (
EPRX_STAT
|
EPREG_MASK
)

	)

197 
	#_SëCNTR
(
wRegVÆue
Ë(*
CNTR
 = (
uöt16_t
)wRegVÆue)

	)

200 
	#_SëISTR
(
wRegVÆue
Ë(*
ISTR
 = (
uöt16_t
)wRegVÆue)

	)

203 
	#_SëDADDR
(
wRegVÆue
Ë(*
DADDR
 = (
uöt16_t
)wRegVÆue)

	)

206 
	#_SëBTABLE
(
wRegVÆue
)(*
BTABLE
 = (
uöt16_t
)(wRegVÆuê& 0xFFF8))

	)

209 
	#_GëCNTR
(Ë((
uöt16_t
Ë*
CNTR
)

	)

212 
	#_GëISTR
(Ë((
uöt16_t
Ë*
ISTR
)

	)

215 
	#_GëFNR
(Ë((
uöt16_t
Ë*
FNR
)

	)

218 
	#_GëDADDR
(Ë((
uöt16_t
Ë*
DADDR
)

	)

221 
	#_GëBTABLE
(Ë((
uöt16_t
Ë*
BTABLE
)

	)

224 
	#_SëENDPOINT
(
bEpNum
,
wRegVÆue
Ë(*(
EP0REG
 + bEpNum)= \

225 (
uöt16_t
)
wRegVÆue
)

	)

228 
	#_GëENDPOINT
(
bEpNum
Ë((
uöt16_t
)(*(
EP0REG
 + bEpNum)))

	)

238 
	#_SëEPTy≥
(
bEpNum
,
wTy≥
Ë(
	`_SëENDPOINT
(bEpNum,\

239 ((
	`_GëENDPOINT
(
bEpNum
Ë& 
EP_T_MASK
Ë| 
wTy≥
 )))

	)

248 
	#_GëEPTy≥
(
bEpNum
Ë(
	`_GëENDPOINT
(bEpNumË& 
EP_T_FIELD
)

	)

258 
	#_SëEPTxSètus
(
bEpNum
,
wSèã
) {\

259 
uöt16_t
 
_wRegVÆ
; \

260 
_wRegVÆ
 = 
	`_GëENDPOINT
(
bEpNum
Ë& 
EPTX_DTOGMASK
;\

262 if((
EPTX_DTOG1
 & 
wSèã
)!= 0) \

263 
_wRegVÆ
 ^
EPTX_DTOG1
; \

265 if((
EPTX_DTOG2
 & 
wSèã
)!= 0) \

266 
_wRegVÆ
 ^
EPTX_DTOG2
; \

267 
	`_SëENDPOINT
(
bEpNum
, (
_wRegVÆ
 | 
EP_CTR_RX
|
EP_CTR_TX
)); \

268 }

	)

278 
	#_SëEPRxSètus
(
bEpNum
,
wSèã
) {\

279 
uöt16_t
 
_wRegVÆ
; \

281 
_wRegVÆ
 = 
	`_GëENDPOINT
(
bEpNum
Ë& 
EPRX_DTOGMASK
;\

283 if((
EPRX_DTOG1
 & 
wSèã
)!= 0) \

284 
_wRegVÆ
 ^
EPRX_DTOG1
; \

286 if((
EPRX_DTOG2
 & 
wSèã
)!= 0) \

287 
_wRegVÆ
 ^
EPRX_DTOG2
; \

288 
	`_SëENDPOINT
(
bEpNum
, (
_wRegVÆ
 | 
EP_CTR_RX
|
EP_CTR_TX
)); \

289 }

	)

300 
	#_SëEPRxTxSètus
(
bEpNum
,
wSèãrx
,
wSèãtx
) {\

301 
uöt32_t
 
_wRegVÆ
; \

303 
_wRegVÆ
 = 
	`_GëENDPOINT
(
bEpNum
Ë& (
EPRX_DTOGMASK
 |
EPTX_STAT
) ;\

305 if((
EPRX_DTOG1
 & 
wSèãrx
)!= 0) \

306 
_wRegVÆ
 ^
EPRX_DTOG1
; \

308 if((
EPRX_DTOG2
 & 
wSèãrx
)!= 0) \

309 
_wRegVÆ
 ^
EPRX_DTOG2
; \

311 if((
EPTX_DTOG1
 & 
wSèãtx
)!= 0) \

312 
_wRegVÆ
 ^
EPTX_DTOG1
; \

314 if((
EPTX_DTOG2
 & 
wSèãtx
)!= 0) \

315 
_wRegVÆ
 ^
EPTX_DTOG2
; \

316 
	`_SëENDPOINT
(
bEpNum
, 
_wRegVÆ
 | 
EP_CTR_RX
|
EP_CTR_TX
); \

317 }

	)

326 
	#_GëEPTxSètus
(
bEpNum
Ë((
uöt16_t
)
	`_GëENDPOINT
(bEpNumË& 
EPTX_STAT
)

	)

328 
	#_GëEPRxSètus
(
bEpNum
Ë((
uöt16_t
)
	`_GëENDPOINT
(bEpNumË& 
EPRX_STAT
)

	)

337 
	#_SëEPTxVÆid
(
bEpNum
Ë(
	`_SëEPTxSètus
(bEpNum, 
EP_TX_VALID
))

	)

339 
	#_SëEPRxVÆid
(
bEpNum
Ë(
	`_SëEPRxSètus
(bEpNum, 
EP_RX_VALID
))

	)

348 
	#_GëTxSèŒSètus
(
bEpNum
Ë(
	`_GëEPTxSètus
(bEpNum) \

349 =
EP_TX_STALL
)

	)

350 
	#_GëRxSèŒSètus
(
bEpNum
Ë(
	`_GëEPRxSètus
(bEpNum) \

351 =
EP_RX_STALL
)

	)

360 
	#_SëEP_KIND
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

361 (
EP_CTR_RX
|
EP_CTR_TX
|((
	`_GëENDPOINT
(
bEpNum
Ë| 
EP_KIND
Ë& 
EPREG_MASK
))))

	)

362 
	#_CÀ¨EP_KIND
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

363 (
EP_CTR_RX
|
EP_CTR_TX
|(
	`_GëENDPOINT
(
bEpNum
Ë& 
EPKIND_MASK
))))

	)

372 
	#_Së_Sètus_Out
(
bEpNum
Ë
	`_SëEP_KIND
(bEpNum)

	)

373 
	#_CÀ¨_Sètus_Out
(
bEpNum
Ë
	`_CÀ¨EP_KIND
(bEpNum)

	)

382 
	#_SëEPDoubÀBuff
(
bEpNum
Ë
	`_SëEP_KIND
(bEpNum)

	)

383 
	#_CÀ¨EPDoubÀBuff
(
bEpNum
Ë
	`_CÀ¨EP_KIND
(bEpNum)

	)

392 
	#_CÀ¨EP_CTR_RX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum,\

393 
	`_GëENDPOINT
(
bEpNum
Ë& 0x7FFF & 
EPREG_MASK
))

	)

394 
	#_CÀ¨EP_CTR_TX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum,\

395 
	`_GëENDPOINT
(
bEpNum
Ë& 0xFF7F & 
EPREG_MASK
))

	)

404 
	#_ToggÀDTOG_RX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

405 
EP_CTR_RX
|
EP_CTR_TX
|
EP_DTOG_RX
 | (
	`_GëENDPOINT
(
bEpNum
Ë& 
EPREG_MASK
)))

	)

406 
	#_ToggÀDTOG_TX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

407 
EP_CTR_RX
|
EP_CTR_TX
|
EP_DTOG_TX
 | (
	`_GëENDPOINT
(
bEpNum
Ë& 
EPREG_MASK
)))

	)

416 
	#_CÀ¨DTOG_RX
(
bEpNum
Ëif((
	`_GëENDPOINT
(bEpNumË& 
EP_DTOG_RX
) != 0)\

417 
	`_ToggÀDTOG_RX
(
bEpNum
)

	)

418 
	#_CÀ¨DTOG_TX
(
bEpNum
Ëif((
	`_GëENDPOINT
(bEpNumË& 
EP_DTOG_TX
) != 0)\

419 
	`_ToggÀDTOG_TX
(
bEpNum
)

	)

428 
	#_SëEPAddªss
(
bEpNum
,
bAddr
Ë
	`_SëENDPOINT
(bEpNum,\

429 
EP_CTR_RX
|
EP_CTR_TX
|(
	`_GëENDPOINT
(
bEpNum
Ë& 
EPREG_MASK
Ë| 
bAddr
)

	)

438 
	#_GëEPAddªss
(
bEpNum
Ë((
uöt8_t
)(
	`_GëENDPOINT
(bEpNumË& 
EPADDR_FIELD
))

	)

440 
	#_pEPTxAddr
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8 )*2 + 
PMAAddr
))

	)

441 
	#_pEPTxCou¡
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8+2)*2 + 
PMAAddr
))

	)

442 
	#_pEPRxAddr
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8+4)*2 + 
PMAAddr
))

	)

443 
	#_pEPRxCou¡
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8+6)*2 + 
PMAAddr
))

	)

453 
	#_SëEPTxAddr
(
bEpNum
,
wAddr
Ë(*
	`_pEPTxAddr
(bEpNumË((wAdd∏>> 1Ë<< 1))

	)

454 
	#_SëEPRxAddr
(
bEpNum
,
wAddr
Ë(*
	`_pEPRxAddr
(bEpNumË((wAdd∏>> 1Ë<< 1))

	)

463 
	#_GëEPTxAddr
(
bEpNum
Ë((
uöt16_t
)*
	`_pEPTxAddr
(bEpNum))

	)

464 
	#_GëEPRxAddr
(
bEpNum
Ë((
uöt16_t
)*
	`_pEPRxAddr
(bEpNum))

	)

474 
	#_BlocksOf32
(
dwReg
,
wCou¡
,
wNBlocks
) {\

475 
wNBlocks
 = 
wCou¡
 >> 5;\

476 if((
wCou¡
 & 0x1f) == 0)\

477 
wNBlocks
--;\

478 *
pdwReg
 = (
uöt32_t
)((
wNBlocks
 << 10) | 0x8000);\

479 }

	)

481 
	#_BlocksOf2
(
dwReg
,
wCou¡
,
wNBlocks
) {\

482 
wNBlocks
 = 
wCou¡
 >> 1;\

483 if((
wCou¡
 & 0x1) != 0)\

484 
wNBlocks
++;\

485 *
pdwReg
 = (
uöt32_t
)(
wNBlocks
 << 10);\

486 }

	)

488 
	#_SëEPCou¡RxReg
(
dwReg
,
wCou¡
) {\

489 
uöt16_t
 
wNBlocks
;\

490 if(
wCou¡
 > 62){
	`_BlocksOf32
(
dwReg
,wCou¡,
wNBlocks
);}\

491 {
	`_BlocksOf2
(
dwReg
,
wCou¡
,
wNBlocks
);}\

492 }

	)

496 
	#_SëEPRxDblBuf0Cou¡
(
bEpNum
,
wCou¡
) {\

497 
uöt32_t
 *
pdwReg
 = 
	`_pEPTxCou¡
(
bEpNum
); \

498 
	`_SëEPCou¡RxReg
(
pdwReg
, 
wCou¡
);\

499 }

	)

508 
	#_SëEPTxCou¡
(
bEpNum
,
wCou¡
Ë(*
	`_pEPTxCou¡
(bEpNumËwCou¡)

	)

509 
	#_SëEPRxCou¡
(
bEpNum
,
wCou¡
) {\

510 
uöt32_t
 *
pdwReg
 = 
	`_pEPRxCou¡
(
bEpNum
); \

511 
	`_SëEPCou¡RxReg
(
pdwReg
, 
wCou¡
);\

512 }

	)

520 
	#_GëEPTxCou¡
(
bEpNum
)((
uöt16_t
)(*
	`_pEPTxCou¡
(bEpNum)Ë& 0x3ff)

	)

521 
	#_GëEPRxCou¡
(
bEpNum
)((
uöt16_t
)(*
	`_pEPRxCou¡
(bEpNum)Ë& 0x3ff)

	)

531 
	#_SëEPDblBuf0Addr
(
bEpNum
,
wBuf0Addr
Ë{
	`_SëEPTxAddr
(bEpNum, wBuf0Addr);}

	)

532 
	#_SëEPDblBuf1Addr
(
bEpNum
,
wBuf1Addr
Ë{
	`_SëEPRxAddr
(bEpNum, wBuf1Addr);}

	)

543 
	#_SëEPDblBuffAddr
(
bEpNum
,
wBuf0Addr
,
wBuf1Addr
) { \

544 
	`_SëEPDblBuf0Addr
(
bEpNum
, 
wBuf0Addr
);\

545 
	`_SëEPDblBuf1Addr
(
bEpNum
, 
wBuf1Addr
);\

546 }

	)

555 
	#_GëEPDblBuf0Addr
(
bEpNum
Ë(
	`_GëEPTxAddr
(bEpNum))

	)

556 
	#_GëEPDblBuf1Addr
(
bEpNum
Ë(
	`_GëEPRxAddr
(bEpNum))

	)

568 
	#_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
) { \

569 if(
bDú
 =
EP_DBUF_OUT
)\

571 {
	`_SëEPRxDblBuf0Cou¡
(
bEpNum
,
wCou¡
);} \

572 if(
bDú
 =
EP_DBUF_IN
)\

574 *
	`_pEPTxCou¡
(
bEpNum
Ë(
uöt32_t
)
wCou¡
; \

575 }

	)

577 
	#_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
) { \

578 if(
bDú
 =
EP_DBUF_OUT
)\

580 {
	`_SëEPRxCou¡
(
bEpNum
,
wCou¡
);}\

581 if(
bDú
 =
EP_DBUF_IN
)\

583 *
	`_pEPRxCou¡
(
bEpNum
Ë(
uöt32_t
)
wCou¡
; \

584 }

	)

586 
	#_SëEPDblBuffCou¡
(
bEpNum
, 
bDú
, 
wCou¡
) {\

587 
	`_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
); \

588 
	`_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
); \

589 }

	)

598 
	#_GëEPDblBuf0Cou¡
(
bEpNum
Ë(
	`_GëEPTxCou¡
(bEpNum))

	)

599 
	#_GëEPDblBuf1Cou¡
(
bEpNum
Ë(
	`_GëEPRxCou¡
(bEpNum))

	)

603 
__IO
 
uöt16_t
 
wI°r
;

606 
SëCNTR
(
uöt16_t
 );

607 
SëISTR
(
uöt16_t
 );

608 
SëDADDR
(
uöt16_t
 );

609 
SëBTABLE
(
uöt16_t
 );

610 
SëBTABLE
(
uöt16_t
 );

611 
uöt16_t
 
GëCNTR
();

612 
uöt16_t
 
GëISTR
();

613 
uöt16_t
 
GëFNR
();

614 
uöt16_t
 
GëDADDR
();

615 
uöt16_t
 
GëBTABLE
();

616 
SëENDPOINT
(
uöt8_t
 , 
uöt16_t
 );

617 
uöt16_t
 
GëENDPOINT
(
uöt8_t
 );

618 
SëEPTy≥
(
uöt8_t
 , 
uöt16_t
 );

619 
uöt16_t
 
GëEPTy≥
(
uöt8_t
 );

620 
SëEPTxSètus
(
uöt8_t
 , 
uöt16_t
 );

621 
SëEPRxSètus
(
uöt8_t
 , 
uöt16_t
 );

622 
SëDouBÀBuffEPSèŒ
(
uöt8_t
 , uöt8_à
bDú
);

623 
uöt16_t
 
GëEPTxSètus
(
uöt8_t
 );

624 
uöt16_t
 
GëEPRxSètus
(
uöt8_t
 );

625 
SëEPTxVÆid
(
uöt8_t
 );

626 
SëEPRxVÆid
(
uöt8_t
 );

627 
uöt16_t
 
GëTxSèŒSètus
(
uöt8_t
 );

628 
uöt16_t
 
GëRxSèŒSètus
(
uöt8_t
 );

629 
SëEP_KIND
(
uöt8_t
 );

630 
CÀ¨EP_KIND
(
uöt8_t
 );

631 
Së_Sètus_Out
(
uöt8_t
 );

632 
CÀ¨_Sètus_Out
(
uöt8_t
 );

633 
SëEPDoubÀBuff
(
uöt8_t
 );

634 
CÀ¨EPDoubÀBuff
(
uöt8_t
 );

635 
CÀ¨EP_CTR_RX
(
uöt8_t
 );

636 
CÀ¨EP_CTR_TX
(
uöt8_t
 );

637 
ToggÀDTOG_RX
(
uöt8_t
 );

638 
ToggÀDTOG_TX
(
uöt8_t
 );

639 
CÀ¨DTOG_RX
(
uöt8_t
 );

640 
CÀ¨DTOG_TX
(
uöt8_t
 );

641 
SëEPAddªss
(
uöt8_t
 , uint8_t );

642 
uöt8_t
 
GëEPAddªss
(uint8_t );

643 
SëEPTxAddr
(
uöt8_t
 , 
uöt16_t
 );

644 
SëEPRxAddr
(
uöt8_t
 , 
uöt16_t
 );

645 
uöt16_t
 
GëEPTxAddr
(
uöt8_t
 );

646 
uöt16_t
 
GëEPRxAddr
(
uöt8_t
 );

647 
SëEPCou¡RxReg
(
uöt32_t
 * , 
uöt16_t
 );

648 
SëEPTxCou¡
(
uöt8_t
 , 
uöt16_t
 );

649 
SëEPRxCou¡
(
uöt8_t
 , 
uöt16_t
 );

650 
uöt16_t
 
GëEPTxCou¡
(
uöt8_t
 );

651 
uöt16_t
 
GëEPRxCou¡
(
uöt8_t
 );

652 
SëEPDblBuf0Addr
(
uöt8_t
 , 
uöt16_t
 );

653 
SëEPDblBuf1Addr
(
uöt8_t
 , 
uöt16_t
 );

654 
SëEPDblBuffAddr
(
uöt8_t
 , 
uöt16_t
 , uint16_t );

655 
uöt16_t
 
GëEPDblBuf0Addr
(
uöt8_t
 );

656 
uöt16_t
 
GëEPDblBuf1Addr
(
uöt8_t
 );

657 
SëEPDblBuffCou¡
(
uöt8_t
 , uöt8_à , 
uöt16_t
 );

658 
SëEPDblBuf0Cou¡
(
uöt8_t
 , uöt8_à , 
uöt16_t
 );

659 
SëEPDblBuf1Cou¡
(
uöt8_t
 , uöt8_à , 
uöt16_t
 );

660 
uöt16_t
 
GëEPDblBuf0Cou¡
(
uöt8_t
 );

661 
uöt16_t
 
GëEPDblBuf1Cou¡
(
uöt8_t
 );

662 
EP_DBUF_DIR
 
GëEPDblBufDú
(
uöt8_t
 );

663 
FªeU£rBuf„r
(
uöt8_t
 
bEpNum
 , uöt8_à
bDú
);

664 
uöt16_t
 
ToW‹d
(
uöt8_t
, uint8_t);

665 
uöt16_t
 
ByãSw≠
(uint16_t);

	@libstm/STM32_USB-FS-Device_Lib/inc/usb_sil.h

17 #i‚de‡
__USB_SIL_H


18 
	#__USB_SIL_H


	)

26 
uöt32_t
 
USB_SIL_Inô
();

27 
uöt32_t
 
USB_SIL_Wrôe
(
uöt8_t
 
bEpAddr
, uöt8_t* 
pBuf„rPoöãr
, uöt32_à
wBuf„rSize
);

28 
uöt32_t
 
USB_SIL_Ród
(
uöt8_t
 
bEpAddr
, uöt8_t* 
pBuf„rPoöãr
);

	@libstm/STM32_USB-FS-Device_Lib/inc/usb_type.h

17 #i‚de‡
__USB_TYPE_H


18 
	#__USB_TYPE_H


	)

21 
	~"usb_c⁄f.h
"

25 #i‚de‡
NULL


26 
	#NULL
 ((*)0)

	)

31 sig√d 
	ts32
;

32 sig√d 
	ts16
;

33 sig√d 
	ts8
;

35 vﬁ©ûêsig√d 
	tvs32
;

36 vﬁ©ûêsig√d 
	tvs16
;

37 vﬁ©ûêsig√d 
	tvs8
;

39 
	tu32
;

40 
	tu16
;

41 
	tu8
;

43 c⁄° 
	tuc32
;

44 c⁄° 
	tuc16
;

45 c⁄° 
	tuc8
;

47 vﬁ©ûê
	tvu32
;

48 vﬁ©ûê
	tvu16
;

49 vﬁ©ûê
	tvu8
;

51 vﬁ©ûêc⁄° 
	tvuc32
;

52 vﬁ©ûêc⁄° 
	tvuc16
;

53 vﬁ©ûêc⁄° 
	tvuc8
;

55 íum { 
	mRESET
 = 0, 
	mSET
 = !
RESET
 } 
	tFœgSètus
, 
	tITSètus
;

57 íum { 
	mDISABLE
 = 0, 
	mENABLE
 = !
DISABLE
} 
	tFun˘i⁄ÆSèã
;

59 íum { 
	mERROR
 = 0, 
	mSUCCESS
 = !
ERROR
} 
	tEº‹Sètus
;

64 
	mFALSE
 = 0, 
	mTRUE
 = !
FALSE


66 
	tboﬁ
;

	@libstm/STM32_USB-FS-Device_Lib/src/otgd_fs_cal.c

16 #ifde‡
STM32F10X_CL


19 
	~"Ÿgd_fs_ˇl.h
"

20 
	~"usb_c⁄f.h
"

21 
	~"Ÿgd_fs_ªgs.h
"

28 
USB_OTG_CORE_REGS
 
	gUSB_OTG_FS_ªgs
;

31 
USB_OTG_Sètus
 
OTGD_FS_SëDevi˚Mode
();

32 
USB_OTG_Sètus
 
OTGD_FS_C‹eRe£t
();

34 
uöt32_t
 
STM32_PCD_OTG_ISR_H™dÀr
 ();

47 
USB_OTG_Sètus
 
	$OTGD_FS_WrôePackë
(
uöt8_t
 *
§c
, uöt8_à
ï_num
, 
uöt16_t
 
byãs
)

49 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

50 
uöt32_t
 
dw‹d_cou¡
 = 0 , 
i
 = 0;

51 
__IO
 
uöt32_t
 *
fifo
;

55 
dw‹d_cou¡
 = (
byãs
 + 3) / 4;

57 
fifo
 = 
USB_OTG_FS_ªgs
.
FIFO
[
ï_num
];

59 
i
 = 0; i < 
dw‹d_cou¡
; i++, 
§c
 += 4)

61 
	`USB_OTG_WRITE_REG32
–
fifo
, *((
__∑cked
 
uöt32_t
 *)
§c
) );

64  
°©us
;

65 
	}
}

73 * 
	$OTGD_FS_RódPackë
(
uöt8_t
 *
de°
, 
uöt16_t
 
byãs
)

75 
uöt32_t
 
i
 = 0;

76 
uöt32_t
 
w‹d_cou¡
 = (
byãs
 + 3) / 4;

78 
__IO
 
uöt32_t
 *
fifo
 = 
USB_OTG_FS_ªgs
.
FIFO
[0];

79 
uöt32_t
 *
d©a_buff
 = (uöt32_à*)
de°
;

81 
i
 = 0; i < 
w‹d_cou¡
; i++, 
d©a_buff
++)

83 *
d©a_buff
 = 
	`USB_OTG_READ_REG32
(
fifo
);

88  ((*)
d©a_buff
);

89 
	}
}

98 
USB_OTG_Sètus
 
	$OTGD_FS_SëAddªss
(
uöt32_t
 
Ba£Addªss
)

100 
uöt32_t
 
i
 = 0;

101 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

102 
USB_OTG_FS_ªgs
.
GREGS
 = (
USB_OTG_GREGS
 *)(
Ba£Addªss
 +\

103 
USB_OTG_CORE_GLOBAL_REGS_OFFSET
);

105 
USB_OTG_FS_ªgs
.
DEV
 = (
USB_OTG_DEV
 *Ë(
Ba£Addªss
 +\

106 
USB_OTG_DEV_GLOBAL_REG_OFFSET
);

108 
i
 = 0; i < 
NUM_TX_FIFOS
; i++)

110 
USB_OTG_FS_ªgs
.
DINEPS
[
i
] = (
USB_OTG_DINEPS
 *Ë(
Ba£Addªss
 + \

111 
USB_OTG_DEV_IN_EP_REG_OFFSET
 + (
i
 * 
USB_OTG_EP_REG_OFFSET
));

113 
USB_OTG_FS_ªgs
.
DOUTEPS
[
i
] = (
USB_OTG_DOUTEPS
 *Ë(
Ba£Addªss
 + \

114 
USB_OTG_DEV_OUT_EP_REG_OFFSET
 + (
i
 * 
USB_OTG_EP_REG_OFFSET
));

117 
i
 = 0; i < 
NUM_TX_FIFOS
; i++)

119 
USB_OTG_FS_ªgs
.
FIFO
[
i
] = (
uöt32_t
 *)(
Ba£Addªss
 + \

120 
USB_OTG_DATA_FIFO_OFFSET
 + (
i
 * 
USB_OTG_DATA_FIFO_SIZE
));

123 
USB_OTG_FS_ªgs
.
PCGCCTL
 = (
uöt32_t
 *)(
Ba£Addªss
 + 
USB_OTG_PCGCCTL_OFFSET
);

125  
°©us
;

126 
	}
}

135 
USB_OTG_Sètus
 
	$OTGD_FS_C‹eInô
()

137 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

138 
USB_OTG_GUSBCFG_Ty≥Def
 
usbcfg
;

139 
USB_OTG_GCCFG_Ty≥Def
 
gccfg
;

141 
usbcfg
.
d32
 = 0;

142 
gccfg
.
d32
 = 0;

144 
usbcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GUSBCFG
);

145 
usbcfg
.
b
.
phy£l
 = 1;

146 
	`USB_OTG_WRITE_REG32
 (&
USB_OTG_FS_ªgs
.
GREGS
->
GUSBCFG
, 
usbcfg
.
d32
);

149 
gccfg
.
d32
 = 0;

150 
gccfg
.
b
.
vbus£nsögB
 = 1;

151 
gccfg
.
b
.
pwdn
 = 1;

152 
	`USB_OTG_WRITE_REG32
 (&
USB_OTG_FS_ªgs
.
GREGS
->
GCCFG
, 
gccfg
.
d32
);

153 
	`mDELAY
(50);

156 
	`OTGD_FS_C‹eRe£t
();

159 
	`OTGD_FS_SëDevi˚Mode
();

161  
°©us
;

162 
	}
}

171 
USB_OTG_Sètus
 
	$OTGD_FS_C‹eRe£t
()

173 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

174 
__IO
 
USB_OTG_GRSTCTL_Ty≥Def
 
gª£t
;

175 
uöt32_t
 
timeout
 = 0;

177 
gª£t
.
d32
 = 0;

182 
	`uDELAY
(5);

183 
gª£t
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GRSTCTL
);

184 i‡(++
timeout
 > 
USB_OTG_TIMEOUT
)

186  
USB_OTG_OK
;

189 
gª£t
.
b
.
ahbidÀ
 == 0);

192 
timeout
 = 0;

193 
gª£t
.
b
.
cs·r°
 = 1;

194 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GRSTCTL
, 
gª£t
.
d32
 );

198 
gª£t
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GRSTCTL
);

199 i‡(++
timeout
 > 
USB_OTG_TIMEOUT
)

204 
gª£t
.
b
.
cs·r°
 == 1);

207 
	`uDELAY
(5);

208  
°©us
;

209 
	}
}

218 
USB_OTG_Sètus
 
	$OTGD_FS_E«bÀGlobÆI¡
()

220 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

221 
USB_OTG_GAHBCFG_Ty≥Def
 
ahbcfg
;

223 
ahbcfg
.
d32
 = 0;

225 
ahbcfg
.
b
.
götmsk
 = 1;

226 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GAHBCFG
, 0, 
ahbcfg
.
d32
);

227  
°©us
;

228 
	}
}

237 
USB_OTG_Sètus
 
	$OTGD_FS_DißbÀGlobÆI¡
()

239 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

240 
USB_OTG_GAHBCFG_Ty≥Def
 
ahbcfg
;

242 
ahbcfg
.
d32
 = 0;

243 
ahbcfg
.
b
.
götmsk
 = 1;

244 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GAHBCFG
, 
ahbcfg
.
d32
, 0);

245  
°©us
;

246 
	}
}

255 
USB_OTG_Sètus
 
	$OTGD_FS_FlushTxFifo
 (
uöt32_t
 
num
 )

258 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

259 
__IO
 
USB_OTG_GRSTCTL_Ty≥Def
 
gª£t
;

260 
uöt32_t
 
timeout
 = 0;

262 
gª£t
.
d32
 = 0;

264 
gª£t
.
b
.
txfÊsh
 = 1;

265 
gª£t
.
b
.
tx‚um
 = 
num
;

266 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GRSTCTL
, 
gª£t
.
d32
 );

270 
gª£t
.
d32
 = 
	`USB_OTG_READ_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GRSTCTL
);

271 i‡(++
timeout
 > 
USB_OTG_TIMEOUT
)

276 
gª£t
.
b
.
txfÊsh
 == 1);

279 
	`uDELAY
(5);

281  
°©us
;

282 
	}
}

291 
USB_OTG_Sètus
 
	$OTGD_FS_FlushRxFifo
( )

293 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

294 
__IO
 
USB_OTG_GRSTCTL_Ty≥Def
 
gª£t
;

295 
uöt32_t
 
timeout
 = 0;

297 
gª£t
.
d32
 = 0;

299 
gª£t
.
b
.
rxfÊsh
 = 1;

300 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GRSTCTL
, 
gª£t
.
d32
 );

304 
gª£t
.
d32
 = 
	`USB_OTG_READ_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GRSTCTL
);

305 i‡(++
timeout
 > 
USB_OTG_TIMEOUT
)

310 
gª£t
.
b
.
rxfÊsh
 == 1);

313 
	`uDELAY
(5);

315  
°©us
;

316 
	}
}

325 
USB_OTG_Sètus
 
	$OTGD_FS_SëDevi˚Mode
()

328 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

329 
USB_OTG_GUSBCFG_Ty≥Def
 
usbcfg
 ;

331 
usbcfg
.
d32
 = 0;

333 
usbcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GUSBCFG
);

335 
usbcfg
.
b
.
f‹˚_dev
 = 1;

337 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GUSBCFG
, 
usbcfg
.
d32
);

339 
	`mDELAY
(50);

341  
°©us
;

342 
	}
}

350 
uöt32_t
 
	$USBD_FS_IsDevi˚Mode
()

352  ((
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
 ) & 0x1) == 0 );

353 
	}
}

362 
uöt32_t
 
	$OTGD_FS_RódC‹eIå
()

364 
uöt32_t
 
v
 = 0;

366 
v
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
);

367 
v
 &
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTMSK
);

369  
v
;

370 
	}
}

379 
uöt32_t
 
	$OTGD_FS_RódOtgIå
 ()

381  (
	`USB_OTG_READ_REG32
 (&
USB_OTG_FS_ªgs
.
GREGS
->
GOTGINT
));

382 
	}
}

396 
	$InôDevS≥ed
()

398 
USB_OTG_DCFG_Ty≥Def
 
dcfg
;

400 
dcfg
.
d32
 = 0;

402 
dcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCFG
);

403 
dcfg
.
b
.
dev•d
 = 0x3;

404 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCFG
, 
dcfg
.
d32
);

405 
	}
}

413 
USB_OTG_Sètus
 
	$OTGD_FS_C‹eInôDev
 ()

415 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

416 
USB_OTG_DEPCTLx_Ty≥Def
 
dï˘l
;

417 
USB_OTG_DCFG_Ty≥Def
 
dcfg
;

418 
USB_OTG_FIFOSIZ_Ty≥Def
 
txfifosize0
;

419 
USB_OTG_FIFOSIZ_Ty≥Def
 
txfifosize
;

420 
uöt32_t
 
i
 = 0;

422 
dï˘l
.
d32
 = 0;

423 
dcfg
.
d32
 = 0;

424 
txfifosize0
.
d32
 = 0;

425 
txfifosize
.
d32
 = 0;

428 
	`InôDevS≥ed
 ();

431 
	`USB_OTG_WRITE_REG32
(
USB_OTG_FS_ªgs
.
PCGCCTL
, 0);

434 
dcfg
.
d32
 = 
	`USB_OTG_READ_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DCFG
);

435 
dcfg
.
b
.
≥r‰öt
 = 
DCFG_FRAME_INTERVAL_80
;

436 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DCFG
, 
dcfg
.
d32
 );

439 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GRXFSIZ
, 
RX_FIFO_SIZE
);

442 
txfifosize0
.
b
.
dïth
 = 
TX0_FIFO_SIZE
;

443 
txfifosize0
.
b
.
°¨èddr
 = 
RX_FIFO_SIZE
;

444 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
DIEPTXF0
, 
txfifosize0
.
d32
 );

448 
txfifosize
.
b
.
°¨èddr
 = 
txfifosize0
.b.°¨èdd∏+Åxfifosize0.b.
dïth
;

449 
txfifosize
.
b
.
dïth
 = 
TX1_FIFO_SIZE
;

450 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
DIEPTXFx
[0], 
txfifosize
.
d32
 );

454 
txfifosize
.
b
.
°¨èddr
 +txfifosize.b.
dïth
;

455 
txfifosize
.
b
.
dïth
 = 
TX2_FIFO_SIZE
;

456 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
DIEPTXFx
[1], 
txfifosize
.
d32
 );

460 
txfifosize
.
b
.
°¨èddr
 +txfifosize.b.
dïth
;

461 
txfifosize
.
b
.
dïth
 = 
TX3_FIFO_SIZE
;

462 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
DIEPTXFx
[2], 
txfifosize
.
d32
 );

466 
	`OTGD_FS_FlushTxFifo
(0x10);

467 
	`OTGD_FS_FlushRxFifo
();

470 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DIEPMSK
, 0 );

471 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DOEPMSK
, 0 );

472 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DAINT
, 0xFFFFFFFF );

473 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DAINTMSK
, 0 );

475 
i
 = 0; i < 
NUM_TX_FIFOS
; i++)

477 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DINEPS
[
i
]->
DIEPCTLx
);

478 i‡(
dï˘l
.
b
.
ïía
)

480 
dï˘l
.
d32
 = 0;

481 
dï˘l
.
b
.
ïdis
 = 1;

482 
dï˘l
.
b
.
¢ak
 = 1;

486 
dï˘l
.
d32
 = 0;

489 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DINEPS
[
i
]->
DIEPCTLx
, 
dï˘l
.
d32
);

492 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DINEPS
[
i
]->
DIEPTSIZx
, 0);

493 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DINEPS
[
i
]->
DIEPINTx
, 0xFF);

496 
i
 = 0; i < 1 ; i++)

498 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DOUTEPS
[
i
]->
DOEPCTLx
);

499 i‡(
dï˘l
.
b
.
ïía
)

501 
dï˘l
.
d32
 = 0;

502 
dï˘l
.
b
.
ïdis
 = 1;

503 
dï˘l
.
b
.
¢ak
 = 1;

507 
dï˘l
.
d32
 = 0;

510 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DOUTEPS
[
i
]->
DOEPCTLx
, 
dï˘l
.
d32
);

512 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DOUTEPS
[
i
]->
DOEPTSIZx
, 0);

513 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DOUTEPS
[
i
]->
DOEPINTx
, 0xFF);

516 
	`OTGD_FS_E«bÀDevI¡
();

518  
°©us
;

519 
	}
}

527 
USB_OTG_Sètus
 
	$OTGD_FS_E«bÀDevI¡
()

530 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

531 
USB_OTG_GINTMSK_Ty≥Def
 
öå_mask
;

533 
öå_mask
.
d32
 = 0;

536 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GINTMSK
, 0);

539 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, 0xFFFFFFFF);

542 #ifde‡
INTR_SOFINTR


543 
öå_mask
.
b
.
soföå
 = 1;

545 #ifde‡
INTR_RXSTSQLVL


546 
öå_mask
.
b
.
rx°sqlvl
 = 1;

548 #ifde‡
INTR_GINNAKEFF


549 
öå_mask
.
b
.
gö«keff
 = 1;

551 #ifde‡
INTR_GOUTNAKEFF


552 
öå_mask
.
b
.
gouäakeff
 = 1;

554 #ifde‡
INTR_ERLYSUSPEND


555 
öå_mask
.
b
.
îlysu•íd
 = 1;

557 #ifde‡
INTR_USBSUSPEND


558 
öå_mask
.
b
.
usbsu•íd
 = 1;

560 #ifde‡
INTR_USBRESET


561 
öå_mask
.
b
.
usbª£t
 = 1;

563 #ifde‡
INTR_ENUMDONE


564 
öå_mask
.
b
.
íumd⁄e
 = 1;

566 #ifde‡
INTR_ISOOUTDROP


567 
öå_mask
.
b
.
isooutdr›
 = 1;

569 #ifde‡
INTR_EOPFRAME


570 
öå_mask
.
b
.
e›‰ame
 = 1;

572 #ifde‡
INTR_INEPINTR


573 
öå_mask
.
b
.
öïöå
 = 1;

575 #ifde‡
INTR_OUTEPINTR


576 
öå_mask
.
b
.
ouãpöå
 = 1;

578 #ifde‡
INTR_INCOMPLISOIN


579 
öå_mask
.
b
.
öcom∂isoö
 = 1;

581 #ifde‡
INTR_INCOMPLISOOUT


582 
öå_mask
.
b
.
öcom∂isoout
 = 1;

584 #ifde‡
INTR_DISCONNECT


585 
öå_mask
.
b
.
disc⁄√˘
 = 1;

587 #ifde‡
INTR_WKUPINTR


588 
öå_mask
.
b
.
wkupöå
 = 1;

591 
	`USB_OTG_MODIFY_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GINTMSK
, 
öå_mask
.
d32
, intr_mask.d32);

592  
°©us
;

594 
	}
}

603 
USB_OTG_Sètus
 
	$OTGD_FS_EP0A˘iv©e
()

605 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

606 
USB_OTG_DEPCTLx_Ty≥Def
 
dõp˘l
;

607 
USB_OTG_DCTL_Ty≥Def
 
d˘l
;

609 
dõp˘l
.
d32
 = 0;

610 
d˘l
.
d32
 = 0;

612 
dõp˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DINEPS
[0]->
DIEPCTLx
);

613 
dõp˘l
.
b
.
mps
 = 
DEP0CTL_MPS_64
;

614 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DINEPS
[0]->
DIEPCTLx
, 
dõp˘l
.
d32
);

616 
d˘l
.
b
.
cg≈ö«k
 = 1;

617 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCTL
, 
d˘l
.
d32
, dctl.d32);

619  
°©us
;

620 
	}
}

628 
USB_OTG_Sètus
 
	$OTGD_FS_EPA˘iv©e
(
USB_OTG_EP
 *
ï
)

631 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

632 
USB_OTG_DEPCTLx_Ty≥Def
 
dï˘l
;

633 
USB_OTG_DAINT_Ty≥Def
 
daötmsk
;

634 
__IO
 
uöt32_t
 *
addr
;

637 
dï˘l
.
d32
 = 0;

638 
daötmsk
.
d32
 = 0;

641 i‡(
ï
->
is_ö
 == 1)

643 
addr
 = &
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPCTLx
;

644 
daötmsk
.
ï
.
ö
 = 1 <<Ép->
num
;

648 
addr
 = &
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPCTLx
;

649 
daötmsk
.
ï
.
out
 = 1 <<Ép->
num
;

654 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
addr
);

655 i‡(!
dï˘l
.
b
.
usba˘ï
)

657 
dï˘l
.
b
.
mps
 = 
ï
->
max∑ckë
;

658 
dï˘l
.
b
.
ïty≥
 = 
ï
->
ty≥
;

659 
dï˘l
.
b
.
tx‚um
 = 
ï
->
tx_fifo_num
;

660 
dï˘l
.
b
.
£td0pid
 = 1;

661 
dï˘l
.
b
.
usba˘ï
 = 1;

662 
	`USB_OTG_WRITE_REG32
(
addr
, 
dï˘l
.
d32
);

666 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DAINTMSK
, 0, 
daötmsk
.
d32
);

667  
°©us
;

668 
	}
}

677 
USB_OTG_Sètus
 
	$OTGD_FS_EPDó˘iv©e
(
USB_OTG_EP
 *
ï
)

680 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

681 
USB_OTG_DEPCTLx_Ty≥Def
 
dï˘l
;

682 
__IO
 
uöt32_t
 *
addr
;

683 
USB_OTG_DAINT_Ty≥Def
 
daötmsk
;

685 
dï˘l
.
d32
 = 0;

686 
daötmsk
.
d32
 = 0;

689 i‡(
ï
->
is_ö
 == 1)

691 
addr
 = &
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPCTLx
;

692 
daötmsk
.
ï
.
ö
 = 1 <<Ép->
num
;

696 
addr
 = &
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPCTLx
;

697 
daötmsk
.
ï
.
out
 = 1 <<Ép->
num
;

700 
dï˘l
.
b
.
usba˘ï
 = 0;

701 
	`USB_OTG_WRITE_REG32
(
addr
, 
dï˘l
.
d32
);

704 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DAINTMSK
, 
daötmsk
.
d32
, 0);

705  
°©us
;

706 
	}
}

715 
USB_OTG_Sètus
 
	$OTGD_FS_EPSèπX„r
(
USB_OTG_EP
 *
ï
)

717 
USB_OTG_DSTS_Ty≥Def
 
d°s
;

718 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

719 
__IO
 
USB_OTG_DEPCTLx_Ty≥Def
 
dï˘l
;

720 
OTG_FS_DEPTSIZx_Ty≥Def
 
dïtsiz
;

722 
dï˘l
.
d32
 = 0;

723 
dïtsiz
.
d32
 = 0;

726 i‡(
ï
->
is_ö
 == 1)

729 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&(
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPCTLx
));

730 
dïtsiz
.
d32
 = 
	`USB_OTG_READ_REG32
(&(
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPTSIZx
));

733 i‡(
ï
->
x„r_Àn
 == 0)

735 
dïtsiz
.
b
.
x„rsize
 = 0;

736 
dïtsiz
.
b
.
pkt˙t
 = 1;

746 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
x„r_Àn
;

747 
dïtsiz
.
b
.
pkt˙t
 = (
ï
->
x„r_Àn
 - 1 +Ép->
max∑ckë
) /Ép->maxpacket;

749 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

751 
dïtsiz
.
b
.
mcou¡
 = 1;

754 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPTSIZx
, 
dïtsiz
.
d32
);

756 i‡(
ï
->
ty≥
 !
EP_TYPE_ISOC
)

759 
uöt32_t
 
fif€m±ymsk
 = 0;

760 
fif€m±ymsk
 = 1 << 
ï
->
num
;

761 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DIEPEMPMSK
, 0, 
fif€m±ymsk
);

765 
dï˘l
.
b
.
˙ak
 = 1;

766 
dï˘l
.
b
.
ïía
 = 1;

768 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

770 
d°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DSTS
);

772 i‡(((
d°s
.
b
.
sof‚
)&0x1)==0)

774 
dï˘l
.
b
.
£todd‰m
=1;

778 
dï˘l
.
b
.
£td0pid
=1;

782 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPCTLx
, 
dï˘l
.
d32
);

784 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

788 
	`OTGD_FS_WrôePackë
(
ï
->
x„r_buff
,Ép->
num
,Ép->
x„r_Àn
);

794 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&(
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPCTLx
));

795 
dïtsiz
.
d32
 = 
	`USB_OTG_READ_REG32
(&(
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPTSIZx
));

801 i‡(
ï
->
x„r_Àn
 == 0)

803 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
max∑ckë
;

804 
dïtsiz
.
b
.
pkt˙t
 = 1;

808 
dïtsiz
.
b
.
pkt˙t
 = (
ï
->
x„r_Àn
 + (ï->
max∑ckë
 - 1)) /Ép->maxpacket;

809 
dïtsiz
.
b
.
x„rsize
 = dïtsiz.b.
pkt˙t
 * 
ï
->
max∑ckë
;

811 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPTSIZx
, 
dïtsiz
.
d32
);

813 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

816 i‡(
ï
->
eví_odd_‰ame
)

818 
dï˘l
.
b
.
£todd‰m
 = 1;

822 
dï˘l
.
b
.
£td0pid
 = 1;

827 
dï˘l
.
b
.
˙ak
 = 1;

828 
dï˘l
.
b
.
ïía
 = 1;

830 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPCTLx
, 
dï˘l
.
d32
);

833  
°©us
;

834 
	}
}

843 
USB_OTG_Sètus
 
	$OTGD_FS_EP0SèπX„r
(
USB_OTG_EP
 *
ï
)

846 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

847 
uöt32_t
 
fif€m±ymsk
 = 0;

848 
USB_OTG_DEPCTLx_Ty≥Def
 
dï˘l
;

849 
OTG_FS_DEPTSIZx_Ty≥Def
 
dïtsiz
;

850 
USB_OTG_DINEPS
 *
ö_ªgs
 ;

852 
dï˘l
.
d32
 = 0;

853 
dïtsiz
.
d32
 = 0;

856 i‡(
ï
->
is_ö
 == 1)

858 
ö_ªgs
 = 
USB_OTG_FS_ªgs
.
DINEPS
[0];

859 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
ö_ªgs
->
DIEPCTLx
);

860 
dïtsiz
.
d32
 = 
	`USB_OTG_READ_REG32
(&
ö_ªgs
->
DIEPTSIZx
);

863 i‡(
ï
->
x„r_Àn
 == 0)

865 
dïtsiz
.
b
.
x„rsize
 = 0;

866 
dïtsiz
.
b
.
pkt˙t
 = 1;

870 i‡(
ï
->
x„r_Àn
 >Ép->
max∑ckë
)

872 
ï
->
x„r_Àn
 =Ép->
max∑ckë
;

873 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
max∑ckë
;

877 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
x„r_Àn
;

879 
dïtsiz
.
b
.
pkt˙t
 = 1;

882 
	`USB_OTG_WRITE_REG32
(&
ö_ªgs
->
DIEPTSIZx
, 
dïtsiz
.
d32
);

885 
dï˘l
.
b
.
˙ak
 = 1;

886 
dï˘l
.
b
.
ïía
 = 1;

887 
	`USB_OTG_WRITE_REG32
(&
ö_ªgs
->
DIEPCTLx
, 
dï˘l
.
d32
);

890 i‡(
ï
->
x„r_Àn
 > 0)

892 
fif€m±ymsk
 |1 << 
ï
->
num
;

893 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DIEPEMPMSK
, 0, 
fif€m±ymsk
);

899 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DOUTEPS
[0]->
DOEPCTLx
);

900 
dïtsiz
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DOUTEPS
[0]->
DOEPTSIZx
);

905 i‡(
ï
->
x„r_Àn
 == 0)

907 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
max∑ckë
;

908 
dïtsiz
.
b
.
pkt˙t
 = 1;

912 
dïtsiz
.
b
.
pkt˙t
 = (
ï
->
x„r_Àn
 + (ï->
max∑ckë
 - 1)) /Ép->maxpacket;

913 
dïtsiz
.
b
.
x„rsize
 = dïtsiz.b.
pkt˙t
 * 
ï
->
max∑ckë
;

916 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DOUTEPS
[0]->
DOEPTSIZx
, 
dïtsiz
.
d32
);

919 
dï˘l
.
b
.
˙ak
 = 1;

920 
dï˘l
.
b
.
ïía
 = 1;

921 
	`USB_OTG_WRITE_REG32
 (&(
USB_OTG_FS_ªgs
.
DOUTEPS
[0]->
DOEPCTLx
), 
dï˘l
.
d32
);

923  
°©us
;

924 
	}
}

932 
USB_OTG_Sètus
 
	$OTGD_FS_EPSëSèŒ
(
USB_OTG_EP
 *
ï
)

934 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

935 
USB_OTG_DEPCTLx_Ty≥Def
 
dï˘l
;

936 
__IO
 
uöt32_t
 *
dï˘l_addr
;

938 
dï˘l
.
d32
 = 0;

941 i‡(
ï
->
is_ö
 == 1)

943 
dï˘l_addr
 = &(
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPCTLx
);

944 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

947 i‡(
dï˘l
.
b
.
ïía
)

949 
dï˘l
.
b
.
ïdis
 = 1;

951 
dï˘l
.
b
.
°Æl
 = 1;

952 
	`USB_OTG_WRITE_REG32
(
dï˘l_addr
, 
dï˘l
.
d32
);

956 
dï˘l_addr
 = &(
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPCTLx
);

957 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

960 
dï˘l
.
b
.
°Æl
 = 1;

961 
	`USB_OTG_WRITE_REG32
(
dï˘l_addr
, 
dï˘l
.
d32
);

963  
°©us
;

964 
	}
}

973 
USB_OTG_Sètus
 
	$OTGD_FS_EPCÀ¨SèŒ
(
USB_OTG_EP
 *
ï
)

975 
USB_OTG_Sètus
 
°©us
 = 
USB_OTG_OK
;

976 
USB_OTG_DEPCTLx_Ty≥Def
 
dï˘l
;

977 
__IO
 
uöt32_t
 *
dï˘l_addr
;

980 
dï˘l
.
d32
 = 0;

982 i‡(
ï
->
is_ö
 == 1)

984 
dï˘l_addr
 = &(
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPCTLx
);

988 
dï˘l_addr
 = &(
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPCTLx
);

992 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

995 
dï˘l
.
b
.
°Æl
 = 0;

997 i‡(
ï
->
ty≥
 =
EP_TYPE_INTR
 ||Ép->ty≥ =
EP_TYPE_BULK
)

999 
dï˘l
.
b
.
£td0pid
 = 1;

1002 
	`USB_OTG_WRITE_REG32
(
dï˘l_addr
, 
dï˘l
.
d32
);

1003  
°©us
;

1004 
	}
}

1013 
uöt32_t
 
	$OTGD_FS_RódDevAŒOutEp_ôr
()

1015 
uöt32_t
 
v
 = 0;

1017 
v
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DAINT
);

1018 
v
 &
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DAINTMSK
);

1019  ((
v
 & 0xffff0000) >> 16);

1020 
	}
}

1029 
uöt32_t
 
	$OTGD_FS_RódDevOutEP_ôr
(
USB_OTG_EP
 *
ï
)

1031 
uöt32_t
 
v
 = 0;

1033 
v
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPINTx
);

1034 
v
 &
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DOEPMSK
);

1035  
v
;

1036 
	}
}

1044 
uöt32_t
 
	$OTGD_FS_RódDevAŒInEPIå
()

1046 
uöt32_t
 
v
 = 0;

1048 
v
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DAINT
);

1049 
v
 &
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DAINTMSK
);

1050  (
v
 & 0xffff);

1051 
	}
}

1061 
uöt32_t
 
	$OTGD_FS_GëEPSètus
(
USB_OTG_EP
 *
ï
)

1063 
USB_OTG_DEPCTLx_Ty≥Def
 
dï˘l
;

1064 
__IO
 
uöt32_t
 *
dï˘l_addr
;

1065 
uöt32_t
 
Sètus
 = 0;

1067 
dï˘l
.
d32
 = 0;

1069 i‡(
ï
->
is_ö
 == 1)

1071 
dï˘l_addr
 = &(
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPCTLx
);

1075 
dï˘l_addr
 = &(
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPCTLx
);

1078 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

1081 i‡(
ï
->
is_ö
 == 1)

1083 i‡(
dï˘l
.
b
.
°Æl
 == 1)

1084 
Sètus
 = 
DEV_EP_TX_STALL
;

1085 i‡(
dï˘l
.
b
.
«k°s
 == 1)

1086 
Sètus
 = 
DEV_EP_TX_NAK
;

1088 
Sètus
 = 
DEV_EP_TX_VALID
;

1093 i‡(
dï˘l
.
b
.
°Æl
 == 1)

1094 
Sètus
 = 
DEV_EP_RX_STALL
;

1095 i‡(
dï˘l
.
b
.
«k°s
 == 1)

1096 
Sètus
 = 
DEV_EP_RX_NAK
;

1098 
Sètus
 = 
DEV_EP_RX_VALID
;

1102  
Sètus
;

1103 
	}
}

1113 
	$OTGD_FS_SëEPSètus
(
USB_OTG_EP
 *
ï
, 
uöt32_t
 
Sètus
)

1115 
USB_OTG_DEPCTLx_Ty≥Def
 
dï˘l
;

1116 
__IO
 
uöt32_t
 *
dï˘l_addr
;

1118 
dï˘l
.
d32
 = 0;

1121 i‡(
ï
->
is_ö
 == 1)

1123 
dï˘l_addr
 = &(
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPCTLx
);

1127 
dï˘l_addr
 = &(
USB_OTG_FS_ªgs
.
DOUTEPS
[
ï
->
num
]->
DOEPCTLx
);

1130 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

1133 i‡(
ï
->
is_ö
 == 1)

1135 i‡(
Sètus
 =
DEV_EP_TX_STALL
)

1137 
	`OTGD_FS_EPSëSèŒ
(
ï
); ;

1139 i‡(
Sètus
 =
DEV_EP_TX_NAK
)

1140 
dï˘l
.
b
.
¢ak
 = 1;

1141 i‡(
Sètus
 =
DEV_EP_TX_VALID
)

1143 i‡(
dï˘l
.
b
.
°Æl
 == 1)

1145 
ï
->
eví_odd_‰ame
 = 0;

1146 
	`OTGD_FS_EPCÀ¨SèŒ
(
ï
);

1149 
dï˘l
.
b
.
˙ak
 = 1;

1150 
dï˘l
.
b
.
usba˘ï
 = 1;

1151 
dï˘l
.
b
.
ïía
 = 1;

1153 i‡(
Sètus
 =
DEV_EP_TX_DIS
)

1154 
dï˘l
.
b
.
usba˘ï
 = 0;

1158 i‡(
Sètus
 =
DEV_EP_RX_STALL
) {

1159 
dï˘l
.
b
.
°Æl
 = 1;

1161 i‡(
Sètus
 =
DEV_EP_RX_NAK
)

1162 
dï˘l
.
b
.
¢ak
 = 1;

1163 i‡(
Sètus
 =
DEV_EP_RX_VALID
)

1165 i‡(
dï˘l
.
b
.
°Æl
 == 1)

1167 
ï
->
eví_odd_‰ame
 = 0;

1168 
	`OTGD_FS_EPCÀ¨SèŒ
(
ï
);

1171 
dï˘l
.
b
.
˙ak
 = 1;

1172 
dï˘l
.
b
.
usba˘ï
 = 1;

1173 
dï˘l
.
b
.
ïía
 = 1;

1175 i‡(
Sètus
 =
DEV_EP_RX_DIS
)

1177 
dï˘l
.
b
.
usba˘ï
 = 0;

1181 
	`USB_OTG_WRITE_REG32
(
dï˘l_addr
, 
dï˘l
.
d32
);

1182 
	}
}

1191 
	$OTGD_FS_SëRemŸeWakeup
()

1193 
USB_OTG_DCTL_Ty≥Def
 
dev˘l
;

1195 
dev˘l
.
d32
 = 0;

1197 
dev˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCTL
);

1200 
dev˘l
.
b
.
rmtwkupsig
 = 1;

1202 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCTL
, 
dev˘l
.
d32
);

1203 
	}
}

1212 
	$OTGD_FS_Re£tRemŸeWakeup
()

1214 
USB_OTG_DCTL_Ty≥Def
 
dev˘l
;

1217 
dev˘l
.
d32
 = 0;

1219 
dev˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCTL
);

1222 
dev˘l
.
b
.
rmtwkupsig
 = 0;

1224 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCTL
, 
dev˘l
.
d32
);

1225 
	}
}

	@libstm/STM32_USB-FS-Device_Lib/src/otgd_fs_dev.c

16 #ifde‡
STM32F10X_CL


19 
	~"Ÿgd_fs_dev.h
"

20 
	~"usb_ªgs.h
"

21 
	~"Ÿgd_fs_ˇl.h
"

22 
	~"Ÿgd_fs_pcd.h
"

40 
	$OTG_DEV_Inô
()

42 
EP_DESCRIPTOR
 
ï_des¸ùt‹
;

45 
	`PCD_Inô
();

48 
ï_des¸ùt‹
.
bEndpoötAddªss
 = 0x80;

49 
ï_des¸ùt‹
.
wMaxPackëSize
 = 64;

50 
ï_des¸ùt‹
.
bmAâribuãs
 = 
USB_ENDPOINT_XFER_CONTROL
;

51 
	`PCD_EP_O≥n
(&
ï_des¸ùt‹
);

54 
ï_des¸ùt‹
.
bEndpoötAddªss
 = 0x00;

55 
	`PCD_EP_O≥n
(&
ï_des¸ùt‹
);

57 
	`OTGD_FS_EPSèπX„r
(
	`PCD_GëOutEP
(0));

60 
	`PCD_EP0_OutSèπ
();

63 
	`OTGD_FS_E«bÀGlobÆI¡
();

64 
	}
}

78 
	$OTG_DEV_EP_Inô
(
uöt8_t
 
bEpAdd
, uöt8_à
bEpTy≥
, 
uöt16_t
 
wEpMaxPackSize
)

80 
EP_DESCRIPTOR
 
ï_des¸ùt‹
;

81 
USB_OTG_EP
 *
ï
;

84 
ï_des¸ùt‹
.
bEndpoötAddªss
 = 
bEpAdd
;

85 
ï_des¸ùt‹
.
bmAâribuãs
 = 
bEpTy≥
;

86 
ï_des¸ùt‹
.
wMaxPackëSize
 = 
wEpMaxPackSize
;

88 
	`PCD_EP_Flush
(
bEpAdd
);

91 
	`PCD_EP_O≥n
(&
ï_des¸ùt‹
);

94 i‡((
bEpAdd
 & 0x80) == 0)

96 
ï
 = 
	`PCD_GëOutEP
(
bEpAdd
 & 0x7F);

97 
	`OTGD_FS_EPSèπX„r
(
ï
);

101 
ï
 = 
	`PCD_GëInEP
(
bEpAdd
 & 0x7F);

102 
ï
->
eví_odd_‰ame
 = 0;

103 
	`OTG_DEV_SëEPTxSètus
(
bEpAdd
, 
DEV_EP_TX_NAK
);

106 
	}
}

115 
uöt32_t
 
	$OTG_DEV_GëEPTxSètus
(
uöt8_t
 
bE≤um
)

117 
USB_OTG_EP
 *
ï
;

118 
uöt32_t
 
°©us
 = 0;

120 
ï
 = 
	`PCD_GëInEP
(
bE≤um
 & 0x7F);

122 
°©us
 = 
	`OTGD_FS_GëEPSètus
(
ï
);

124  
°©us
;

125 
	}
}

134 
uöt32_t
 
	$OTG_DEV_GëEPRxSètus
(
uöt8_t
 
bE≤um
)

136 
USB_OTG_EP
 *
ï
;

137 
uöt32_t
 
°©us
 = 0;

139 
ï
 = 
	`PCD_GëOutEP
(
bE≤um
 & 0x7F);

141 
°©us
 = 
	`OTGD_FS_GëEPSètus
(
ï
);

143  
°©us
;

144 
	}
}

156 
	$OTG_DEV_SëEPTxSètus
(
uöt8_t
 
bE≤um
, 
uöt32_t
 
Sètus
)

158 
USB_OTG_EP
 *
ï
;

160 
ï
 = 
	`PCD_GëInEP
(
bE≤um
 & 0x7F);

162 i‡((
bE≤um
 =0x80Ë&& (
Sètus
 =
DEV_EP_TX_STALL
))

164 
ï
->
is_ö
 = 1;

167 
	`OTGD_FS_SëEPSètus
(
ï
, 
Sètus
);

168 
	}
}

180 
	$OTG_DEV_SëEPRxSètus
(
uöt8_t
 
bE≤um
, 
uöt32_t
 
Sètus
)

182 
USB_OTG_EP
 *
ï
;

184 
ï
 = 
	`PCD_GëOutEP
(
bE≤um
 & 0x7F);

186 
	`OTGD_FS_SëEPSètus
(
ï
, 
Sètus
);

187 
	}
}

197 
	$USB_DevDisc⁄√˘
()

199 
	`PCD_DevDisc⁄√˘
();

200 
	}
}

210 
	$USB_DevC⁄√˘
()

212 
	`PCD_DevC⁄√˘
();

213 
	}
}

225 
	$SëEPTxSètus
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wSèã
)

227 
	`_SëEPTxSètus
(
bEpNum
, 
wSèã
);

228 
	}
}

238 
	$SëEPRxSètus
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wSèã
)

240 
	`_SëEPRxSètus
(
bEpNum
, 
wSèã
);

241 
	}
}

250 
uöt16_t
 
	$GëEPTxSètus
(
uöt8_t
 
bEpNum
)

252 (
	`_GëEPTxSètus
(
bEpNum
));

253 
	}
}

262 
uöt16_t
 
	$GëEPRxSètus
(
uöt8_t
 
bEpNum
)

264 (
	`_GëEPRxSètus
(
bEpNum
));

265 
	}
}

274 
	$SëEPTxVÆid
(
uöt8_t
 
bEpNum
)

276 
	`_SëEPTxSètus
(
bEpNum
, 
EP_TX_VALID
);

277 
	}
}

286 
	$SëEPRxVÆid
(
uöt8_t
 
bEpNum
)

288 
	`_SëEPRxSètus
(
bEpNum
, 
EP_RX_VALID
);

289 
	}
}

298 
uöt16_t
 
	$GëTxSèŒSètus
(
uöt8_t
 
bEpNum
)

300 (
	`_GëTxSèŒSètus
(
bEpNum
));

301 
	}
}

310 
uöt16_t
 
	$GëRxSèŒSètus
(
uöt8_t
 
bEpNum
)

312 (
	`_GëRxSèŒSètus
(
bEpNum
));

313 
	}
}

323 
	$SëEPTxCou¡
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wCou¡
)

325 
	}
}

335 
	$SëEPRxCou¡
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wCou¡
)

337 
	}
}

346 
uöt16_t
 
	$ToW‹d
(
uöt8_t
 
bh
, uöt8_à
bl
)

348 
uöt16_t
 
wRë
 = 0;

349 
wRë
 = (
uöt16_t
)
bl
 | ((uöt16_t)
bh
 << 8);

350 (
wRë
);

351 
	}
}

360 
uöt16_t
 
	$ByãSw≠
(
uöt16_t
 
wSwW
)

362 
uöt8_t
 
bTemp
 = 0;

363 
uöt16_t
 
wRë
 = 0;

365 
bTemp
 = (
uöt8_t
)(
wSwW
 & 0xff);

366 
wRë
 = (
wSwW
 >> 8Ë| ((
uöt16_t
)
bTemp
 << 8);

367 (
wRë
);

368 
	}
}

	@libstm/STM32_USB-FS-Device_Lib/src/otgd_fs_int.c

16 #ifde‡
STM32F10X_CL


19 #ifde‡
STM32L1XX_MD


20 
	~"°m32l15x.h
"

22 
	~"°m32f10x.h
"

25 
	~"usb_ty≥.h
"

26 
	~"Ÿgd_fs_öt.h
"

27 
	~"usb_lib.h
"

28 
	~"usb_i°r.h
"

35 
uöt8_t
 
	gUSBD_D©a_Buf„r
 [
RX_FIFO_SIZE
];

36 
__IO
 
uöt8_t
 
	gIsocBuff
 [(
ISOC_BUFFER_SZE
 * 
NUM_SUB_BUFFERS
)];

37 
__IO
 
uöt32_t
 
	gIsocBuf„rIdx
 = 0;

39 
USB_OTG_CORE_REGS
 
USB_OTG_FS_ªgs
;

41 
__IO
 
uöt16_t
 
	gSaveRSèã
;

42 
__IO
 
uöt16_t
 
	gSaveTSèã
;

45 (*
pEpI¡_IN
[7])();

46 (*
pEpI¡_OUT
[7])();

49 
uöt32_t
 
	`PCD_RódDevInEP
–
USB_OTG_EP
 *
ï
);

50 
uöt32_t
 
	`PCD_WrôeEm±yTxFifo
(uöt32_à
ïnum
);

61 
uöt32_t
 
	$OTGD_FS_H™dÀ_Sof_ISR
()

63 
USB_OTG_GINTSTS_Ty≥Def
 
GINTSTS
 ;

64 
GINTSTS
.
d32
 = 0;

67 
	`INTR_SOFINTR_CÆlback
();

70 
GINTSTS
.
b
.
soföå
 = 1;

71 
	`USB_OTG_WRITE_REG32
 (&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, GINTSTS.
d32
);

74 
	}
}

83 
uöt32_t
 
	$OTGD_FS_H™dÀ_RxSètusQueueLevñ_ISR
()

85 
USB_OTG_GINTMSK_Ty≥Def
 
öt_mask
;

86 
USB_OTG_GRXSTSP_Ty≥Def
 
°©us
;

87 
USB_OTG_EP
 *
ï
;

89 
öt_mask
.
d32
 = 0;

90 
°©us
.
d32
 = 0;

93 
öt_mask
.
b
.
rx°sqlvl
 = 1;

94 
	`USB_OTG_MODIFY_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GINTMSK
, 
öt_mask
.
d32
, 0);

97 
°©us
.
d32
 = 
	`USB_OTG_READ_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GRXSTSP
 );

100 
ï
 = 
	`PCD_GëOutEP
(
°©us
.
b
.
ïnum
);

102 
°©us
.
b
.
pkt°s
)

104 
STS_GOUT_NAK
:

106 
STS_DATA_UPDT
:

107 i‡(
°©us
.
b
.
b˙t
)

109 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

112 
	`INTR_RXSTSQLVL_ISODU_CÆlback
();

115 
	`OTGD_FS_RódPackë
((
uöt8_t
*)(
IsocBuff
 + (
ISOC_BUFFER_SZE
 * 
IsocBuf„rIdx
)), 
°©us
.
b
.
b˙t
);

116 
ï
->
x„r_buff
 = (
uöt8_t
*)(
IsocBuff
 + (
ISOC_BUFFER_SZE
 * 
IsocBuf„rIdx
));

119 i‡(
IsocBuf„rIdx
 =(
NUM_SUB_BUFFERS
 - 1))

122 
IsocBuf„rIdx
 = 0;

127 
IsocBuf„rIdx
 ++;

133 
	`OTGD_FS_RódPackë
(
USBD_D©a_Buf„r
, 
°©us
.
b
.
b˙t
);

134 
ï
->
x„r_buff
 = 
USBD_D©a_Buf„r
;

138 
ï
->
x„r_Àn
 = 
°©us
.
b
.
b˙t
;

139 
ï
->
x„r_cou¡
 +
°©us
.
b
.
b˙t
;

143 
ï
->
x„r_Àn
 = 
°©us
.
b
.
b˙t
;

146 
STS_XFER_COMP
:

148 
STS_SETUP_COMP
:

150 
STS_SETUP_UPDT
:

152 
	`OTGD_FS_RódPackë
(
USBD_D©a_Buf„r
, 8);

153 
ï
->
x„r_buff
 = 
USBD_D©a_Buf„r
;

154 
ï
->
x„r_cou¡
 +
°©us
.
b
.
b˙t
;

155 
ï
->
x„r_Àn
 = 
°©us
.
b
.
b˙t
;

162 
	`INTR_RXSTSQLVL_CÆlback
();

165 
	`USB_OTG_MODIFY_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GINTMSK
, 0, 
öt_mask
.
d32
);

171 
	}
}

179 
uöt32_t
 
	$OTGD_FS_H™dÀ_GInNakEff_ISR
()

183 
	`INTR_GINNAKEFF_CÆlback
();

189 
	}
}

198 
uöt32_t
 
	$OTGD_FS_H™dÀ_GOutNakEff_ISR
()

201 
	`INTR_GOUTNAKEFF_CÆlback
();

207 
	}
}

216 
uöt32_t
 
	$OTGD_FS_H™dÀ_E¨lySu•íd_ISR
()

218 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

219 
USB_OTG_GINTMSK_Ty≥Def
 
götmsk
;

221 
göt°s
.
d32
 = 0;

222 
götmsk
.
d32
 = 0;

226 
	`INTR_ERLYSUSPEND_CÆlback
();

228 
götmsk
.
b
.
îlysu•íd
 = 1;

229 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTMSK
, 
götmsk
.
d32
, 0 );

232 
göt°s
.
b
.
îlysu•íd
 = 1;

233 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

235 
	}
}

244 
uöt32_t
 
	$OTGD_FS_H™dÀ_USBSu•íd_ISR
()

246 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

248 
göt°s
.
d32
 = 0;

250 
	`INTR_USBSUSPEND_CÆlback
();

253 
göt°s
.
b
.
usbsu•íd
 = 1;

254 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

257 
	}
}

266 
uöt32_t
 
	$OTGD_FS_H™dÀ_UsbRe£t_ISR
()

268 
USB_OTG_DAINT_Ty≥Def
 
daötmsk
;

269 
USB_OTG_DOEPMSKx_Ty≥Def
 
d€pmsk
;

270 
USB_OTG_DIEPMSKx_Ty≥Def
 
dõpmsk
;

271 
USB_OTG_DCFG_Ty≥Def
 
dcfg
;

272 
USB_OTG_DCTL_Ty≥Def
 
d˘l
;

273 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

274 
uöt32_t
 
i
 = 0;

276 
daötmsk
.
d32
 = 0;

277 
d€pmsk
.
d32
 = 0;

278 
dõpmsk
.
d32
 = 0;

279 
dcfg
.
d32
 =0;

280 
d˘l
.
d32
 = 0;

281 
göt°s
.
d32
 = 0;

284 
d˘l
.
b
.
rmtwkupsig
 = 1;

285 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCTL
, 
d˘l
.
d32
, 0 );

288 
	`OTGD_FS_FlushTxFifo
( 0 );

291 
i
 = 0; i < 
NUM_TX_FIFOS
 ; i++)

293 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DINEPS
[
i
]->
DIEPINTx
, 0xFF);

294 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DOUTEPS
[
i
]->
DOEPINTx
, 0xFF);

296 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DAINT
, 0xFFFFFFFF );

298 
daötmsk
.
ï
.
ö
 = 1;

299 
daötmsk
.
ï
.
out
 = 1;

300 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DAINTMSK
, 
daötmsk
.
d32
 );

302 
d€pmsk
.
b
.
£tup
 = 1;

303 
d€pmsk
.
b
.
b2b£tup
 = 1;

304 
d€pmsk
.
b
.
x„rcom∂
 = 1;

305 
d€pmsk
.
b
.
ïdis
 = 1;

306 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DOEPMSK
, 
d€pmsk
.
d32
 );

308 
dõpmsk
.
b
.
x„rcom∂
 = 1;

309 
dõpmsk
.
b
.
timeout
 = 1;

310 
dõpmsk
.
b
.
ïdis
 = 1;

311 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DIEPMSK
, 
dõpmsk
.
d32
 );

314 
dcfg
.
d32
 = 
	`USB_OTG_READ_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DCFG
);

315 
dcfg
.
b
.
devaddr
 = 0;

316 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DCFG
, 
dcfg
.
d32
);

319 
	`PCD_EP0_OutSèπ
();

322 
göt°s
.
d32
 = 0;

323 
göt°s
.
b
.
usbª£t
 = 1;

324 
	`USB_OTG_WRITE_REG32
 (&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

327 
OTGD_FS_DEVICE_RESET
;

330 
	`INTR_USBRESET_CÆlback
();

333 
	}
}

342 
uöt32_t
 
	$OTGD_FS_H™dÀ_EnumD⁄e_ISR
()

344 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

345 
USB_OTG_GUSBCFG_Ty≥Def
 
gusbcfg
;

347 
göt°s
.
d32
 = 0;

348 
gusbcfg
.
d32
 = 0;

350 
	`OTGD_FS_EP0A˘iv©e
();

353 
gusbcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GUSBCFG
);

354 
gusbcfg
.
b
.
usbådtim
 = 9;

355 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GUSBCFG
, 
gusbcfg
.
d32
);

358 
	`INTR_ENUMDONE_CÆlback
();

361 
göt°s
.
b
.
íumd⁄e
 = 1;

362 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
 );

364 
	}
}

373 
uöt32_t
 
	$OTGD_FS_H™dÀ_IsoOutDr›_ISR
()

375 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

377 
göt°s
.
d32
 = 0;

379 
	`INTR_ISOOUTDROP_CÆlback
();

382 
göt°s
.
b
.
isooutdr›
 = 1;

383 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

386 
	}
}

395 
uöt32_t
 
	$OTGD_FS_H™dÀ_EOPF_ISR
()

397 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

398 
USB_OTG_GINTMSK_Ty≥Def
 
götmsk
;

400 
göt°s
.
d32
 = 0;

401 
götmsk
.
d32
 = 0;

403 
götmsk
.
b
.
e›‰ame
 = 1;

404 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTMSK
, 
götmsk
.
d32
, 0 );

407 
	`INTR_EOPFRAME_CÆlback
();

410 
göt°s
.
b
.
e›‰ame
 = 1;

411 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

413 
	}
}

420 
uöt32_t
 
	$OTGD_FS_H™dÀ_InEP_ISR
()

422 
USB_OTG_DIEPINTx_Ty≥Def
 
dõpöt
;

424 
uöt32_t
 
ï_öå
 = 0;

425 
uöt32_t
 
ïnum
 = 0;

426 
USB_OTG_EP
 *
ï
;

427 
uöt32_t
 
fif€m±ymsk
 = 0;

429 
dõpöt
.
d32
 = 0;

430 
ï_öå
 = 
	`OTGD_FS_RódDevAŒInEPIå
();

431  
ï_öå
 )

433 i‡(
ï_öå
&0x1)

435 
ï
 = 
	`PCD_GëInEP
(
ïnum
);

436 
dõpöt
.
d32
 = 
	`PCD_RódDevInEP
(
ï
);

437 i‡–
dõpöt
.
b
.
x„rcom∂
 )

439 
fif€m±ymsk
 = 0x1 << 
ï
->
num
;

440 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DIEPEMPMSK
, 
fif€m±ymsk
, 0);

443 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
x„rcom∂
);

445 i‡(
ïnum
 == 0)

448 
	`In0_Pro˚ss
();

451 
	`OTG_DEV_SëEPRxSètus
(
ïnum
, 
SaveRSèã
);

452 
	`OTG_DEV_SëEPTxSètus
(
ïnum
, 
SaveTSèã
);

457 (*
pEpI¡_IN
[
ïnum
 -1])();

460 i‡–
dõpöt
.
b
.
timeout
 )

462 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
timeout
);

464 i‡(
dõpöt
.
b
.
ötktx„mp
)

466 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
ötktx„mp
);

468 i‡(
dõpöt
.
b
.
öï«keff
)

470 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
öï«keff
);

472 i‡(
dõpöt
.
b
.
tx„m±y
)

474 i‡((
ïnum
 =0Ë|| (
	`OTG_DEV_GëEPTxSètus
”≤umË=
DEV_EP_TX_VALID
))

476 
	`PCD_WrôeEm±yTxFifo
(
ïnum
);

479 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
tx„m±y
);

481 i‡–
dõpöt
.
b
.
ïdis
)

484 
ï
->
eví_odd_‰ame
 = 0;

486 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
ïdis
);

489 
ïnum
++;

490 
ï_öå
 >>= 1;

494 
	`INTR_INEPINTR_CÆlback
();

497 
	}
}

507 
uöt32_t
 
	$OTGD_FS_H™dÀ_OutEP_ISR
()

509 
uöt32_t
 
ï_öå
 = 0;

510 
USB_OTG_DOEPINTx_Ty≥Def
 
d€pöt
;

511 
uöt32_t
 
ïnum
 = 0;

512 
USB_OTG_EP
 *
ï
;

514 
d€pöt
.
d32
 = 0;

517 
ï_öå
 = 
	`OTGD_FS_RódDevAŒOutEp_ôr
();

519  
ï_öå
 )

521 i‡(
ï_öå
&0x1)

524 
ï
 = 
	`PCD_GëOutEP
(
ïnum
);

525 
d€pöt
.
d32
 = 
	`OTGD_FS_RódDevOutEP_ôr
(
ï
);

528 i‡–
d€pöt
.
b
.
x„rcom∂
 )

531 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
x„rcom∂
);

533 i‡(
ïnum
 == 0)

536 
	`Out0_Pro˚ss
();

540 (*
pEpI¡_OUT
[
ïnum
-1])();

544 i‡–
d€pöt
.
b
.
ïdis
)

547 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
ïdis
);

550 i‡–
d€pöt
.
b
.
£tup
 )

552 i‡(
ïnum
 == 0)

555 
	`Sëup0_Pro˚ss
();

558 
	`OTG_DEV_SëEPTxSètus
(0x80, 
SaveTSèã
);

566 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
£tup
);

569 i‡–
d€pöt
.
b
.
b2b£tup
 )

571 i‡(
ïnum
 == 0)

574 
	`Sëup0_Pro˚ss
();

577 
	`OTG_DEV_SëEPTxSètus
(0x80, 
SaveTSèã
);

581 
ïnum
++;

582 
ï_öå
 >>= 1;

586 
	`INTR_OUTEPINTR_CÆlback
();

589 
	}
}

598 
uöt32_t
 
	$OTGD_FS_H™dÀ_Incom∂IsoIn_ISR
()

600 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

602 
göt°s
.
d32
 = 0;

605 
	`INTR_INCOMPLISOIN_CÆlback
();

608 
göt°s
.
b
.
öcom∂isoö
 = 1;

609 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

612 
	}
}

621 
uöt32_t
 
	$OTGD_FS_H™dÀ_Incom∂IsoOut_ISR
()

623 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

625 
göt°s
.
d32
 = 0;

628 
	`INTR_INCOMPLISOOUT_CÆlback
();

631 
göt°s
.
b
.
ouãpöå
 = 1;

632 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

635 
	}
}

644 
uöt32_t
 
	$OTGD_FS_H™dÀ_Wakeup_ISR
()

646 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

648 
göt°s
.
d32
 = 0;

650 
	`INTR_WKUPINTR_CÆlback
();

653 
göt°s
.
b
.
wkupöå
 = 1;

654 
	`USB_OTG_WRITE_REG32
 (&
USB_OTG_FS_ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

657 
	}
}

665 
uöt32_t
 
	$PCD_RódDevInEP
–
USB_OTG_EP
 *
ï
)

667 
uöt32_t
 
v
 = 0, 
msk
 = 0, 
emp
=0;

669 
msk
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DIEPMSK
);

670 
emp
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DIEPEMPMSK
);

671 
msk
 |((
emp
 >> 
ï
->
num
) & 0x1) << 7;

672 
v
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DINEPS
[
ï
->
num
]->
DIEPINTx
Ë& 
msk
;

674  
v
;

675 
	}
}

684 
uöt32_t
 
	$PCD_WrôeEm±yTxFifo
(
uöt32_t
 
ïnum
)

686 
USB_OTG_DTXFSTS_Ty≥Def
 
tx°©us
;

687 
USB_OTG_EP
 *
ï
;

688 
uöt32_t
 
Àn
 = 0;

689 
uöt32_t
 
dw‹ds
 = 0;

690 
uöt32_t
 
fif€m±ymsk
 = 0;

692 
tx°©us
.
d32
 = 0;

694 
ï
 = 
	`PCD_GëInEP
(
ïnum
);

696 
Àn
 = 
ï
->
x„r_Àn
 -Ép->
x„r_cou¡
;

698 i‡(
Àn
 > 
ï
->
max∑ckë
)

700 
Àn
 = 
ï
->
max∑ckë
;

703 
dw‹ds
 = (
Àn
 + 3) / 4;

704 
tx°©us
.
d32
 = 
	`USB_OTG_READ_REG32
–&
USB_OTG_FS_ªgs
.
DINEPS
[
ïnum
]->
DTXFSTSx
);

707 (
tx°©us
.
b
.
txf•ˇvaû
 > 
dw‹ds
) &&

708 (
ï
->
x„r_cou¡
 <Ép->
x„r_Àn
) &&

709 (
ï
->
x„r_Àn
) != 0)

711 
Àn
 = 
ï
->
x„r_Àn
 -Ép->
x„r_cou¡
;

713 i‡(
Àn
 > 
ï
->
max∑ckë
)

715 
Àn
 = 
ï
->
max∑ckë
;

717 
dw‹ds
 = (
Àn
 + 3) / 4;

719 
	`OTGD_FS_WrôePackë
(
ï
->
x„r_buff
, 
ïnum
, 
Àn
);

721 
ï
->
x„r_cou¡
 +
Àn
;

722 
ï
->
x„r_buff
 +
Àn
;

724 
tx°©us
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DINEPS
[
ïnum
]->
DTXFSTSx
);

727 i‡(
ï
->
x„r_Àn
 =ï->
x„r_cou¡
)

729 
fif€m±ymsk
 = 0x1 << 
ï
->
num
;

730 
	`USB_OTG_MODIFY_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DIEPEMPMSK
, 
fif€m±ymsk
, 0);

735 
	}
}

	@libstm/STM32_USB-FS-Device_Lib/src/otgd_fs_pcd.c

16 #ifde‡
STM32F10X_CL


18 
	~"usb_lib.h
"

19 
	~"Ÿgd_fs_ˇl.h
"

20 
	~"Ÿgd_fs_pcd.h
"

22 
USB_OTG_PCD_DEV
 
	gUSB_OTG_PCD_dev
;

24 
USB_OTG_CORE_REGS
 
USB_OTG_FS_ªgs
;

32 
	$PCD_Inô
()

34 
uöt32_t
 
i
 = 0;

35 
USB_OTG_EP
 *
ï
;

39 
ï
 = &
USB_OTG_PCD_dev
.
ï0
;

42 
ï
->
num
 = 0;

43 
ï
->
tx_fifo_num
 = 0;

46 
ï
->
ty≥
 = 
EP_TYPE_CTRL
;

47 
ï
->
max∑ckë
 = 
MAX_PACKET_SIZE
;

49 
ï
->
x„r_buff
 = 0;

50 
ï
->
x„r_Àn
 = 0;

52 
i
 = 1; i < 
NUM_TX_FIFOS
 ; i++)

54 
ï
 = &
USB_OTG_PCD_dev
.
ö_ï
[
i
-1];

57 
ï
->
is_ö
 = 1;

58 
ï
->
num
 = 
i
;

59 
ï
->
tx_fifo_num
 = 
i
;

62 
ï
->
ty≥
 = 
EP_TYPE_CTRL
;

63 
ï
->
max∑ckë
 = 
MAX_PACKET_SIZE
;

64 
ï
->
x„r_buff
 = 0;

65 
ï
->
x„r_Àn
 = 0;

68 
i
 = 1; i < 
NUM_TX_FIFOS
; i++)

70 
ï
 = &
USB_OTG_PCD_dev
.
out_ï
[
i
-1];

73 
ï
->
is_ö
 = 0;

74 
ï
->
num
 = 
i
;

75 
ï
->
tx_fifo_num
 = 
i
;

78 
ï
->
ty≥
 = 
EP_TYPE_CTRL
;

79 
ï
->
max∑ckë
 = 
MAX_PACKET_SIZE
;

80 
ï
->
x„r_buff
 = 0;

81 
ï
->
x„r_Àn
 = 0;

84 
USB_OTG_PCD_dev
.
ï0
.
max∑ckë
 = 
MAX_EP0_SIZE
;

85 
USB_OTG_PCD_dev
.
ï0
.
ty≥
 = 
EP_TYPE_CTRL
;

90 
	`OTGD_FS_SëAddªss
(
USB_OTG_FS_BASE_ADDR
);

93 
	`OTGD_FS_DißbÀGlobÆI¡
();

96 
	`OTGD_FS_C‹eInô
();

99 
	`OTGD_FS_C‹eInôDev
();

100 
	}
}

109 
uöt32_t
 
	$PCD_EP_O≥n
(
EP_DESCRIPTOR
 *
ïdesc
)

111 
USB_OTG_EP
 *
ï
;

114 i‡((0x80 & 
ïdesc
->
bEndpoötAddªss
) != 0)

116 
ï
 = 
	`PCD_GëInEP
(
ïdesc
->
bEndpoötAddªss
 & 0x7F);

117 
ï
->
is_ö
 = 1;

121 
ï
 = 
	`PCD_GëOutEP
(
ïdesc
->
bEndpoötAddªss
 & 0x7F);

122 
ï
->
is_ö
 = 0;

125 
ï
->
num
 = 
ïdesc
->
bEndpoötAddªss
 & 0x7F;

126 
ï
->
max∑ckë
 = 
ïdesc
->
wMaxPackëSize
;

127 
ï
->
ty≥
 = 
ïdesc
->
bmAâribuãs
 & 
USB_ENDPOINT_XFERTYPE_MASK
;

129 i‡(
ï
->
is_ö
)

132 
ï
->
tx_fifo_num
 =Ép->
num
;

135 
	`OTGD_FS_EPA˘iv©e
(
ï
 );

138 
	}
}

147 
uöt32_t
 
	$PCD_EP_Clo£
(
uöt8_t
 
ï_addr
)

150 
USB_OTG_EP
 *
ï
;

152 i‡((0x80 & 
ï_addr
) != 0)

154 
ï
 = 
	`PCD_GëInEP
(
ï_addr
 & 0x7F);

158 
ï
 = 
	`PCD_GëOutEP
(
ï_addr
 & 0x7F);

161 
ï
->
num
 = 
ï_addr
 & 0x7F;

162 
ï
->
is_ö
 = (0x80 & 
ï_addr
) != 0;

164 
	`OTGD_FS_EPDó˘iv©e
(
ï
 );

166 
	}
}

175 
uöt32_t
 
	$PCD_EP_Ród
 (
uöt8_t
 
ï_addr
, uöt8_à*
pbuf
, 
uöt32_t
 
buf_Àn
)

177 
USB_OTG_EP
 *
ï
;

178 
uöt32_t
 
i
 = 0;

180 
ï
 = 
	`PCD_GëOutEP
(
ï_addr
 & 0x7F);

183 
i
 = 0 ; i < 
buf_Àn
 ; i++)

185 
pbuf
[
i
] = 
ï
->
x„r_buff
[i];

189 
ï
->
x„r_buff
 = 
pbuf
;

190 
ï
->
x„r_Àn
 = 
buf_Àn
;

191 
ï
->
x„r_cou¡
 = 0;

192 
ï
->
is_ö
 = 0;

193 
ï
->
num
 = 
ï_addr
 & 0x7F;

195 i‡–
ï
->
num
 == 0 )

197 
	`OTGD_FS_EP0SèπX„r
(
ï
);

201 
	`OTGD_FS_EPSèπX„r
–
ï
 );

205 
	}
}

214 
uöt32_t
 
	$PCD_EP_Wrôe
 (
uöt8_t
 
ï_addr
, uöt8_à*
pbuf
, 
uöt32_t
 
buf_Àn
)

216 
USB_OTG_EP
 *
ï
;

218 
ï
 = 
	`PCD_GëInEP
(
ï_addr
 & 0x7f);

221 
ï
->
x„r_buff
 = 
pbuf
;

224 
ï
->
x„r_cou¡
 = 0;

225 
ï
->
x„r_Àn
 = 
buf_Àn
;

226 
ï
->
is_ö
 = 1;

227 
ï
->
num
 = 
ï_addr
 & 0x7F;

229 i‡–
ï
->
num
 == 0 )

231 
	`OTGD_FS_EP0SèπX„r
(
ï
);

235 
	`OTGD_FS_EPSèπX„r
–
ï
 );

239 
	}
}

248 
uöt32_t
 
	$PCD_EP_SèŒ
 (
uöt8_t
 
ï_addr
)

250 
USB_OTG_EP
 *
ï
;

252 i‡((0x80 & 
ï_addr
) != 0)

254 
ï
 = 
	`PCD_GëInEP
(
ï_addr
 & 0x7F);

258 
ï
 = 
	`PCD_GëOutEP
(
ï_addr
 & 0x7F);

261 
ï
->
num
 = 
ï_addr
 & 0x7F;

262 
ï
->
is_ö
 = ((
ï_addr
 & 0x80) == 0x80) ? 1 : 0;

264 
	`OTGD_FS_EPSëSèŒ
(
ï
);

266 
	}
}

274 
uöt32_t
 
	$PCD_EP_CÃSèŒ
 (
uöt8_t
 
ï_addr
)

277 
USB_OTG_EP
 *
ï
;

279 i‡((0x80 & 
ï_addr
) != 0)

281 
ï
 = 
	`PCD_GëInEP
(
ï_addr
 & 0x7F);

285 
ï
 = 
	`PCD_GëOutEP
(
ï_addr
 & 0x7F);

288 
ï
->
num
 = 
ï_addr
 & 0x7F;

289 
ï
->
is_ö
 = ((
ï_addr
 & 0x80) == 0x80) ? 1 : 0;

291 
	`OTGD_FS_EPCÀ¨SèŒ
(
ï
);

294 
	}
}

303 
uöt32_t
 
	$PCD_EP_Flush
 (
uöt8_t
 
ï_addr
)

306 
uöt8_t
 
is_out
 = 0;

307 
uöt8_t
 
ï_nbr
 = 0;

309 
ï_nbr
 = 
ï_addr
 & 0x7F;

310 
is_out
 = ((
ï_addr
 & 0x80) == 0x80) ? 0 : 1;

312 i‡(
is_out
 == 0)

314 
	`OTGD_FS_FlushTxFifo
(
ï_nbr
);

318 
	`OTGD_FS_FlushRxFifo
();

320 
	`PCD_EP_CÃSèŒ
(
ï_addr
);

322 
	}
}

331 
	$PCD_EP_SëAddªss
 (
uöt8_t
 
addªss
)

334 
USB_OTG_DCFG_Ty≥Def
 
dcfg
;

336 
dcfg
.
d32
 = 0;

338 
dcfg
.
b
.
devaddr
 = 
addªss
;

339 
	`USB_OTG_MODIFY_REG32
–&
USB_OTG_FS_ªgs
.
DEV
->
DCFG
, 0, 
dcfg
.
d32
);

340 
	}
}

350 
USB_OTG_EP
* 
	$PCD_GëInEP
(
uöt32_t
 
ï_num
)

352 i‡(
ï_num
 == 0)

354  &
USB_OTG_PCD_dev
.
ï0
;

358  &
USB_OTG_PCD_dev
.
ö_ï
[
ï_num
 - 1];

360 
	}
}

368 
USB_OTG_EP
* 
	$PCD_GëOutEP
(
uöt32_t
 
ï_num
)

370 i‡(
ï_num
 == 0)

372  &
USB_OTG_PCD_dev
.
ï0
;

376  &
USB_OTG_PCD_dev
.
out_ï
[
ï_num
 - 1];

378 
	}
}

387 
	$PCD_DevC⁄√˘
()

390 
USB_OTG_DCTL_Ty≥Def
 
d˘l
;

392 
d˘l
.
d32
 = 0;

394 
d˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCTL
);

397 
d˘l
.
b
.
s·disc⁄
 = 0;

398 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCTL
, 
d˘l
.
d32
);

399 
	`mDELAY
(25);

400 
	}
}

409 
	$PCD_DevDisc⁄√˘
 ()

412 
USB_OTG_DCTL_Ty≥Def
 
d˘l
;

414 
d˘l
.
d32
 = 0;

416 
d˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCTL
);

419 
d˘l
.
b
.
s·disc⁄
 = 1;

420 
	`USB_OTG_WRITE_REG32
(&
USB_OTG_FS_ªgs
.
DEV
->
DCTL
, 
d˘l
.
d32
);

421 
	`mDELAY
(25);

422 
	}
}

431 
	$PCD_EP0_OutSèπ
()

434 
USB_OTG_DOEPTSIZ0_Ty≥Def
 
d€±size0
;

435 
d€±size0
.
d32
 = 0;

438 
d€±size0
.
b
.
sup˙t
 = 3;

439 
d€±size0
.
b
.
pkt˙t
 = 1;

440 
d€±size0
.
b
.
x„rsize
 = 8 * 3;

442 
	`USB_OTG_WRITE_REG32
–&
USB_OTG_FS_ªgs
.
DOUTEPS
[0]->
DOEPTSIZx
, 
d€±size0
.
d32
 );

444 
	}
}

	@libstm/STM32_USB-FS-Device_Lib/src/usb_core.c

17 
	~"usb_lib.h
"

20 
	#VÆBô
(
VAR
,
Pœ˚
Ë(VAR & (1 << Pœ˚))

	)

21 
	#SëBô
(
VAR
,
Pœ˚
Ë(VAR |(1 << Pœ˚))

	)

22 
	#CÃBô
(
VAR
,
Pœ˚
Ë(VAR &((1 << Pœ˚Ë^ 255))

	)

24 #ifde‡
STM32F10X_CL


25 
	#Síd0LígthD©a
(Ë{
	`PCD_EP_Wrôe
 (0, 0, 0Ë; 
	`vSëEPTxSètus
(
EP_TX_VALID
);}

	)

27 
	#Síd0LígthD©a
(Ë{ 
	`_SëEPTxCou¡
(
ENDP0
, 0); \

28 
	`vSëEPTxSètus
(
EP_TX_VALID
); \

29 }

	)

32 
	#vSëEPRxSètus
(
°
Ë(
SaveRSèã
 = st)

	)

33 
	#vSëEPTxSètus
(
°
Ë(
SaveTSèã
 = st)

	)

35 
	#USB_SètusIn
(Ë
	`Síd0LígthD©a
()

	)

36 
	#USB_SètusOut
(Ë
	`vSëEPRxSètus
(
EP_RX_VALID
)

	)

38 
	#SètusInfo0
 
SètusInfo
.
bw
.
bb1


	)

39 
	#SètusInfo1
 
SètusInfo
.
bw
.
bb0


	)

43 
uöt16_t_uöt8_t
 
	gSètusInfo
;

45 
boﬁ
 
	gD©a_Mul_MaxPackëSize
 = 
FALSE
;

47 
D©aSègeOut
();

48 
D©aSègeIn
();

49 
NoD©a_Sëup0
();

50 
D©a_Sëup0
();

61 
uöt8_t
 *
	$Sènd¨d_GëC⁄figuøti⁄
(
uöt16_t
 
Lígth
)

63 i‡(
Lígth
 == 0)

65 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 =

66 (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
);

69 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëC⁄figuøti⁄
();

70  (
uöt8_t
 *)&
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
;

71 
	}
}

82 
RESULT
 
	$Sènd¨d_SëC⁄figuøti⁄
()

85 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 <=

86 
Devi˚_TabÀ
.
TŸÆ_C⁄figuøti⁄
Ë&& (
pInf‹m©i⁄
->
USBwVÆue1
 == 0)

87 && (
pInf‹m©i⁄
->
USBwIndex
 == 0))

89 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 =ÖInf‹m©i⁄->
USBwVÆue0
;

90 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëC⁄figuøti⁄
();

91  
USB_SUCCESS
;

95  
USB_UNSUPPORT
;

97 
	}
}

107 
uöt8_t
 *
	$Sènd¨d_GëI¡îÁ˚
(
uöt16_t
 
Lígth
)

109 i‡(
Lígth
 == 0)

111 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 =

112 (
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
);

115 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëI¡îÁ˚
();

116  (
uöt8_t
 *)&
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
;

117 
	}
}

128 
RESULT
 
	$Sènd¨d_SëI¡îÁ˚
()

130 
RESULT
 
Re
;

133 
Re
 = (*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
,ÖInf‹m©i⁄->
USBwVÆue0
);

135 i‡(
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0)

137 i‡((
Re
 !
USB_SUCCESS
Ë|| (
pInf‹m©i⁄
->
USBwIndex1
 != 0)

138 || (
pInf‹m©i⁄
->
USBwVÆue1
 != 0))

140  
USB_UNSUPPORT
;

142 i‡(
Re
 =
USB_SUCCESS
)

144 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëI¡îÁ˚
();

145 
pInf‹m©i⁄
->
Cuºít_I¡îÁ˚
 =ÖInf‹m©i⁄->
USBwIndex0
;

146 
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
 =ÖInf‹m©i⁄->
USBwVÆue0
;

147  
USB_SUCCESS
;

152  
USB_UNSUPPORT
;

153 
	}
}

163 
uöt8_t
 *
	$Sènd¨d_GëSètus
(
uöt16_t
 
Lígth
)

165 i‡(
Lígth
 == 0)

167 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 2;

172 
SètusInfo
.
w
 = 0;

174 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

177 
uöt8_t
 
Fótuª
 = 
pInf‹m©i⁄
->
Cuºít_Fótuª
;

180 i‡(
	`VÆBô
(
Fótuª
, 5))

182 
	`SëBô
(
SètusInfo0
, 1);

186 
	`CÃBô
(
SètusInfo0
, 1);

190 i‡(
	`VÆBô
(
Fótuª
, 6))

192 
	`SëBô
(
SètusInfo0
, 0);

196 
	`CÃBô
(
SètusInfo0
, 0);

200 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

202  (
uöt8_t
 *)&
SètusInfo
;

205 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

207 
uöt8_t
 
Rñ©ed_Endpoöt
;

208 
uöt8_t
 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

210 
Rñ©ed_Endpoöt
 = (
wIndex0
 & 0x0f);

211 i‡(
	`VÆBô
(
wIndex0
, 7))

214 i‡(
	`_GëTxSèŒSètus
(
Rñ©ed_Endpoöt
))

216 
	`SëBô
(
SètusInfo0
, 0);

222 i‡(
	`_GëRxSèŒSètus
(
Rñ©ed_Endpoöt
))

224 
	`SëBô
(
SètusInfo0
, 0);

231  
NULL
;

233 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëSètus
();

234  (
uöt8_t
 *)&
SètusInfo
;

235 
	}
}

245 
RESULT
 
	$Sènd¨d_CÀ¨Fótuª
()

247 
uöt32_t
 
Ty≥_Rec
 = 
Ty≥_Recùõ¡
;

248 
uöt32_t
 
Sètus
;

251 i‡(
Ty≥_Rec
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

253 
	`CÃBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5);

254  
USB_SUCCESS
;

256 i‡(
Ty≥_Rec
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

258 
DEVICE
* 
pDev
;

259 
uöt32_t
 
Rñ©ed_Endpoöt
;

260 
uöt32_t
 
wIndex0
;

261 
uöt32_t
 
rEP
;

263 i‡((
pInf‹m©i⁄
->
USBwVÆue
 !
ENDPOINT_STALL
)

264 || (
pInf‹m©i⁄
->
USBwIndex1
 != 0))

266  
USB_UNSUPPORT
;

269 
pDev
 = &
Devi˚_TabÀ
;

270 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

271 
rEP
 = 
wIndex0
 & ~0x80;

272 
Rñ©ed_Endpoöt
 = 
ENDP0
 + 
rEP
;

274 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

278 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

282 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

285 i‡((
rEP
 >
pDev
->
TŸÆ_Endpoöt
Ë|| (
Sètus
 == 0)

286 || (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 == 0))

288  
USB_UNSUPPORT
;

292 i‡(
wIndex0
 & 0x80)

295 i‡(
	`_GëTxSèŒSètus
(
Rñ©ed_Endpoöt
 ))

297 #i‚de‡
STM32F10X_CL


298 
	`CÀ¨DTOG_TX
(
Rñ©ed_Endpoöt
);

300 
	`SëEPTxSètus
(
Rñ©ed_Endpoöt
, 
EP_TX_VALID
);

306 i‡(
	`_GëRxSèŒSètus
(
Rñ©ed_Endpoöt
))

308 i‡(
Rñ©ed_Endpoöt
 =
ENDP0
)

311 
	`SëEPRxCou¡
(
Rñ©ed_Endpoöt
, 
Devi˚_Pr›îty
.
MaxPackëSize
);

312 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_VALID
);

316 #i‚de‡
STM32F10X_CL


317 
	`CÀ¨DTOG_RX
(
Rñ©ed_Endpoöt
);

319 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_VALID
);

323 
pU£r_Sènd¨d_Reque°s
->
	`U£r_CÀ¨Fótuª
();

324  
USB_SUCCESS
;

327  
USB_UNSUPPORT
;

328 
	}
}

338 
RESULT
 
	$Sènd¨d_SëEndPoötFótuª
()

340 
uöt32_t
 
wIndex0
;

341 
uöt32_t
 
Rñ©ed_Endpoöt
;

342 
uöt32_t
 
rEP
;

343 
uöt32_t
 
Sètus
;

345 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

346 
rEP
 = 
wIndex0
 & ~0x80;

347 
Rñ©ed_Endpoöt
 = 
ENDP0
 + 
rEP
;

349 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

353 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

357 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

360 i‡(
Rñ©ed_Endpoöt
 >
Devi˚_TabÀ
.
TŸÆ_Endpoöt


361 || 
pInf‹m©i⁄
->
USBwVÆue
 !0 || 
Sètus
 == 0

362 || 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 == 0)

364  
USB_UNSUPPORT
;

368 i‡(
wIndex0
 & 0x80)

371 
	`_SëEPTxSètus
(
Rñ©ed_Endpoöt
, 
EP_TX_STALL
);

377 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_STALL
);

380 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëEndPoötFótuª
();

381  
USB_SUCCESS
;

382 
	}
}

392 
RESULT
 
	$Sènd¨d_SëDevi˚Fótuª
()

394 
	`SëBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5);

395 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëDevi˚Fótuª
();

396  
USB_SUCCESS
;

397 
	}
}

418 
uöt8_t
 *
	$Sènd¨d_GëDes¸ùt‹D©a
(
uöt16_t
 
Lígth
, 
ONE_DESCRIPTOR
 *
pDesc
)

420 
uöt32_t
 
wOff£t
;

422 
wOff£t
 = 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wOff£t
;

423 i‡(
Lígth
 == 0)

425 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 
pDesc
->
Des¸ùt‹_Size
 - 
wOff£t
;

429  
pDesc
->
Des¸ùt‹
 + 
wOff£t
;

430 
	}
}

439 
	$D©aSègeOut
()

441 
ENDPOINT_INFO
 *
pEPöfo
 = &
pInf‹m©i⁄
->
Cål_Info
;

442 
uöt32_t
 
ßve_rLígth
;

444 
ßve_rLígth
 = 
pEPöfo
->
Usb_rLígth
;

446 i‡(
pEPöfo
->
C›yD©a
 && 
ßve_rLígth
)

448 
uöt8_t
 *
Buf„r
;

449 
uöt32_t
 
Lígth
;

451 
Lígth
 = 
pEPöfo
->
PackëSize
;

452 i‡(
Lígth
 > 
ßve_rLígth
)

454 
Lígth
 = 
ßve_rLígth
;

457 
Buf„r
 = (*
pEPöfo
->
C›yD©a
)(
Lígth
);

458 
pEPöfo
->
Usb_rLígth
 -
Lígth
;

459 
pEPöfo
->
Usb_rOff£t
 +
Lígth
;

461 #ifde‡
STM32F10X_CL


462 
	`PCD_EP_Ród
(
ENDP0
, 
Buf„r
, 
Lígth
);

464 
	`PMAToU£rBuf„rC›y
(
Buf„r
, 
	`GëEPRxAddr
(
ENDP0
), 
Lígth
);

468 i‡(
pEPöfo
->
Usb_rLígth
 != 0)

470 
	`vSëEPRxSètus
(
EP_RX_VALID
);

471 
	`SëEPTxCou¡
(
ENDP0
, 0);

472 
	`vSëEPTxSètus
(
EP_TX_VALID
);

475 i‡(
pEPöfo
->
Usb_rLígth
 >pEPöfo->
PackëSize
)

477 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
OUT_DATA
;

481 i‡(
pEPöfo
->
Usb_rLígth
 > 0)

483 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
LAST_OUT_DATA
;

485 i‡(
pEPöfo
->
Usb_rLígth
 == 0)

487 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
WAIT_STATUS_IN
;

488 
	`USB_SètusIn
();

491 
	}
}

500 
	$D©aSègeIn
()

502 
ENDPOINT_INFO
 *
pEPöfo
 = &
pInf‹m©i⁄
->
Cål_Info
;

503 
uöt32_t
 
ßve_wLígth
 = 
pEPöfo
->
Usb_wLígth
;

504 
uöt32_t
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

506 
uöt8_t
 *
D©aBuf„r
;

507 
uöt32_t
 
Lígth
;

509 i‡((
ßve_wLígth
 =0Ë&& (
C⁄åﬁSèã
 =
LAST_IN_DATA
))

511 if(
D©a_Mul_MaxPackëSize
 =
TRUE
)

514 
	`Síd0LígthD©a
();

515 
C⁄åﬁSèã
 = 
LAST_IN_DATA
;

516 
D©a_Mul_MaxPackëSize
 = 
FALSE
;

521 
C⁄åﬁSèã
 = 
WAIT_STATUS_OUT
;

523 #ifde‡
STM32F10X_CL


524 
	`PCD_EP_Ród
 (
ENDP0
, 0, 0);

527 #i‚de‡
STM32F10X_CL


528 
	`vSëEPTxSètus
(
EP_TX_STALL
);

532 
Ex≥˘_Sètus_Out
;

535 
Lígth
 = 
pEPöfo
->
PackëSize
;

536 
C⁄åﬁSèã
 = (
ßve_wLígth
 <
Lígth
Ë? 
LAST_IN_DATA
 : 
IN_DATA
;

538 i‡(
Lígth
 > 
ßve_wLígth
)

540 
Lígth
 = 
ßve_wLígth
;

543 
D©aBuf„r
 = (*
pEPöfo
->
C›yD©a
)(
Lígth
);

545 #ifde‡
STM32F10X_CL


546 
	`PCD_EP_Wrôe
 (
ENDP0
, 
D©aBuf„r
, 
Lígth
);

548 
	`U£rToPMABuf„rC›y
(
D©aBuf„r
, 
	`GëEPTxAddr
(
ENDP0
), 
Lígth
);

551 
	`SëEPTxCou¡
(
ENDP0
, 
Lígth
);

553 
pEPöfo
->
Usb_wLígth
 -
Lígth
;

554 
pEPöfo
->
Usb_wOff£t
 +
Lígth
;

555 
	`vSëEPTxSètus
(
EP_TX_VALID
);

557 
	`USB_SètusOut
();

559 
Ex≥˘_Sètus_Out
:

560 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

561 
	}
}

570 
	$NoD©a_Sëup0
()

572 
RESULT
 
Resu…
 = 
USB_UNSUPPORT
;

573 
uöt32_t
 
Reque°No
 = 
pInf‹m©i⁄
->
USBbReque°
;

574 
uöt32_t
 
C⁄åﬁSèã
;

576 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

580 i‡(
Reque°No
 =
SET_CONFIGURATION
)

582 
Resu…
 = 
	`Sènd¨d_SëC⁄figuøti⁄
();

586 i‡(
Reque°No
 =
SET_ADDRESS
)

588 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 > 127Ë|| (pInf‹m©i⁄->
USBwVÆue1
 != 0)

589 || (
pInf‹m©i⁄
->
USBwIndex
 != 0)

590 || (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0))

593 
C⁄åﬁSèã
 = 
STALLED
;

594 
exô_NoD©a_Sëup0
;

598 
Resu…
 = 
USB_SUCCESS
;

600 #ifde‡
STM32F10X_CL


601 
	`SëDevi˚Addªss
(
pInf‹m©i⁄
->
USBwVÆue0
);

606 i‡(
Reque°No
 =
SET_FEATURE
)

608 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 =
DEVICE_REMOTE_WAKEUP
) \

609 && (
pInf‹m©i⁄
->
USBwIndex
 == 0))

611 
Resu…
 = 
	`Sènd¨d_SëDevi˚Fótuª
();

615 
Resu…
 = 
USB_UNSUPPORT
;

619 i‡(
Reque°No
 =
CLEAR_FEATURE
)

621 i‡(
pInf‹m©i⁄
->
USBwVÆue0
 =
DEVICE_REMOTE_WAKEUP


622 && 
pInf‹m©i⁄
->
USBwIndex
 == 0

623 && 
	`VÆBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5))

625 
Resu…
 = 
	`Sènd¨d_CÀ¨Fótuª
();

629 
Resu…
 = 
USB_UNSUPPORT
;

636 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

639 i‡(
Reque°No
 =
SET_INTERFACE
)

641 
Resu…
 = 
	`Sènd¨d_SëI¡îÁ˚
();

646 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

649 i‡(
Reque°No
 =
CLEAR_FEATURE
)

651 
Resu…
 = 
	`Sènd¨d_CÀ¨Fótuª
();

654 i‡(
Reque°No
 =
SET_FEATURE
)

656 
Resu…
 = 
	`Sènd¨d_SëEndPoötFótuª
();

661 
Resu…
 = 
USB_UNSUPPORT
;

665 i‡(
Resu…
 !
USB_SUCCESS
)

667 
Resu…
 = (*
pPr›îty
->
Cœss_NoD©a_Sëup
)(
Reque°No
);

668 i‡(
Resu…
 =
USB_NOT_READY
)

670 
C⁄åﬁSèã
 = 
PAUSE
;

671 
exô_NoD©a_Sëup0
;

675 i‡(
Resu…
 !
USB_SUCCESS
)

677 
C⁄åﬁSèã
 = 
STALLED
;

678 
exô_NoD©a_Sëup0
;

681 
C⁄åﬁSèã
 = 
WAIT_STATUS_IN
;

683 
	`USB_SètusIn
();

685 
exô_NoD©a_Sëup0
:

686 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

688 
	}
}

697 
	$D©a_Sëup0
()

699 
uöt8_t
 *(*
C›yRoutöe
)(
uöt16_t
);

700 
RESULT
 
Resu…
;

701 
uöt32_t
 
Reque°_No
 = 
pInf‹m©i⁄
->
USBbReque°
;

703 
uöt32_t
 
Rñ©ed_Endpoöt
, 
Re£rved
;

704 
uöt32_t
 
wOff£t
, 
Sètus
;

708 
C›yRoutöe
 = 
NULL
;

709 
wOff£t
 = 0;

712 i‡(
Reque°_No
 =
GET_DESCRIPTOR
)

714 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

716 
uöt8_t
 
wVÆue1
 = 
pInf‹m©i⁄
->
USBwVÆue1
;

717 i‡(
wVÆue1
 =
DEVICE_DESCRIPTOR
)

719 
C›yRoutöe
 = 
pPr›îty
->
GëDevi˚Des¸ùt‹
;

721 i‡(
wVÆue1
 =
CONFIG_DESCRIPTOR
)

723 
C›yRoutöe
 = 
pPr›îty
->
GëC⁄figDes¸ùt‹
;

725 i‡(
wVÆue1
 =
STRING_DESCRIPTOR
)

727 
C›yRoutöe
 = 
pPr›îty
->
GëSåögDes¸ùt‹
;

733 i‡((
Reque°_No
 =
GET_STATUS
Ë&& (
pInf‹m©i⁄
->
USBwVÆue
 == 0)

734 && (
pInf‹m©i⁄
->
USBwLígth
 == 0x0002)

735 && (
pInf‹m©i⁄
->
USBwIndex1
 == 0))

738 i‡((
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

739 && (
pInf‹m©i⁄
->
USBwIndex
 == 0))

741 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

745 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

747 i‡(((*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
, 0Ë=
USB_SUCCESS
)

748 && (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0))

750 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

755 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

757 
Rñ©ed_Endpoöt
 = (
pInf‹m©i⁄
->
USBwIndex0
 & 0x0f);

758 
Re£rved
 = 
pInf‹m©i⁄
->
USBwIndex0
 & 0x70;

760 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

764 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

768 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

771 i‡((
Rñ©ed_Endpoöt
 < 
Devi˚_TabÀ
.
TŸÆ_Endpoöt
Ë&& (
Re£rved
 == 0)

772 && (
Sètus
 != 0))

774 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

781 i‡(
Reque°_No
 =
GET_CONFIGURATION
)

783 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

785 
C›yRoutöe
 = 
Sènd¨d_GëC⁄figuøti⁄
;

789 i‡(
Reque°_No
 =
GET_INTERFACE
)

791 i‡((
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

792 && (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 !0Ë&& (pInf‹m©i⁄->
USBwVÆue
 == 0)

793 && (
pInf‹m©i⁄
->
USBwIndex1
 =0Ë&& (pInf‹m©i⁄->
USBwLígth
 == 0x0001)

794 && ((*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
, 0Ë=
USB_SUCCESS
))

796 
C›yRoutöe
 = 
Sènd¨d_GëI¡îÁ˚
;

801 i‡(
C›yRoutöe
)

803 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wOff£t
 = 
wOff£t
;

804 
pInf‹m©i⁄
->
Cål_Info
.
C›yD©a
 = 
C›yRoutöe
;

807 (*
C›yRoutöe
)(0);

808 
Resu…
 = 
USB_SUCCESS
;

812 
Resu…
 = (*
pPr›îty
->
Cœss_D©a_Sëup
)(
pInf‹m©i⁄
->
USBbReque°
);

813 i‡(
Resu…
 =
USB_NOT_READY
)

815 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
PAUSE
;

820 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 == 0xFFFF)

823 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
PAUSE
;

826 i‡((
Resu…
 =
USB_UNSUPPORT
Ë|| (
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 == 0))

829 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
STALLED
;

834 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBbmReque°Ty≥
, 7))

837 
__IO
 
uöt32_t
 
wLígth
 = 
pInf‹m©i⁄
->
USBwLígth
;

840 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 > 
wLígth
)

842 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 
wLígth
;

845 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 <ÖInf‹m©i⁄->
USBwLígth
)

847 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 < 
pPr›îty
->
MaxPackëSize
)

849 
D©a_Mul_MaxPackëSize
 = 
FALSE
;

851 i‡((
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 % 
pPr›îty
->
MaxPackëSize
) == 0)

853 
D©a_Mul_MaxPackëSize
 = 
TRUE
;

857 
pInf‹m©i⁄
->
Cål_Info
.
PackëSize
 = 
pPr›îty
->
MaxPackëSize
;

858 
	`D©aSègeIn
();

862 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
OUT_DATA
;

863 
	`vSëEPRxSètus
(
EP_RX_VALID
);

867 
	}
}

876 
uöt8_t
 
	$Sëup0_Pro˚ss
()

881 
uöt8_t
* 
b
;

882 
uöt16_t
* 
w
;

883 } 
pBuf
;

885 #ifde‡
STM32F10X_CL


886 
USB_OTG_EP
 *
ï
;

887 
uöt16_t
 
off£t
 = 0;

889 
ï
 = 
	`PCD_GëOutEP
(
ENDP0
);

890 
pBuf
.
b
 = 
ï
->
x„r_buff
;

892 
uöt16_t
 
off£t
 = 1;

894 
pBuf
.
b
 = 
PMAAddr
 + (
uöt8_t
 *)(
	`_GëEPRxAddr
(
ENDP0
) * 2);

897 i‡(
pInf‹m©i⁄
->
C⁄åﬁSèã
 !
PAUSE
)

899 
pInf‹m©i⁄
->
USBbmReque°Ty≥
 = *
pBuf
.
b
++;

900 
pInf‹m©i⁄
->
USBbReque°
 = *
pBuf
.
b
++;

901 
pBuf
.
w
 +
off£t
;

902 
pInf‹m©i⁄
->
USBwVÆue
 = 
	`ByãSw≠
(*
pBuf
.
w
++);

903 
pBuf
.
w
 +
off£t
;

904 
pInf‹m©i⁄
->
USBwIndex
 = 
	`ByãSw≠
(*
pBuf
.
w
++);

905 
pBuf
.
w
 +
off£t
;

906 
pInf‹m©i⁄
->
USBwLígth
 = *
pBuf
.
w
;

909 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
SETTING_UP
;

910 i‡(
pInf‹m©i⁄
->
USBwLígth
 == 0)

913 
	`NoD©a_Sëup0
();

918 
	`D©a_Sëup0
();

920  
	`Po°0_Pro˚ss
();

921 
	}
}

930 
uöt8_t
 
	$In0_Pro˚ss
()

932 
uöt32_t
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

934 i‡((
C⁄åﬁSèã
 =
IN_DATA
Ë|| (C⁄åﬁSèã =
LAST_IN_DATA
))

936 
	`D©aSègeIn
();

938 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

941 i‡(
C⁄åﬁSèã
 =
WAIT_STATUS_IN
)

943 i‡((
pInf‹m©i⁄
->
USBbReque°
 =
SET_ADDRESS
) &&

944 (
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
)))

946 
	`SëDevi˚Addªss
(
pInf‹m©i⁄
->
USBwVÆue0
);

947 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëDevi˚Addªss
();

949 (*
pPr›îty
->
Pro˚ss_Sètus_IN
)();

950 
C⁄åﬁSèã
 = 
STALLED
;

955 
C⁄åﬁSèã
 = 
STALLED
;

958 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

960  
	`Po°0_Pro˚ss
();

961 
	}
}

970 
uöt8_t
 
	$Out0_Pro˚ss
()

972 
uöt32_t
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

974 i‡((
C⁄åﬁSèã
 =
IN_DATA
Ë|| (C⁄åﬁSèã =
LAST_IN_DATA
))

977 
C⁄åﬁSèã
 = 
STALLED
;

979 i‡((
C⁄åﬁSèã
 =
OUT_DATA
Ë|| (C⁄åﬁSèã =
LAST_OUT_DATA
))

981 
	`D©aSègeOut
();

982 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

985 i‡(
C⁄åﬁSèã
 =
WAIT_STATUS_OUT
)

987 (*
pPr›îty
->
Pro˚ss_Sètus_OUT
)();

988 #i‚de‡
STM32F10X_CL


989 
C⁄åﬁSèã
 = 
STALLED
;

997 
C⁄åﬁSèã
 = 
STALLED
;

1000 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

1002  
	`Po°0_Pro˚ss
();

1003 
	}
}

1013 
uöt8_t
 
	$Po°0_Pro˚ss
()

1015 #ifde‡
STM32F10X_CL


1016 
USB_OTG_EP
 *
ï
;

1019 
	`SëEPRxCou¡
(
ENDP0
, 
Devi˚_Pr›îty
.
MaxPackëSize
);

1021 i‡(
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
STALLED
)

1023 
	`vSëEPRxSètus
(
EP_RX_STALL
);

1024 
	`vSëEPTxSètus
(
EP_TX_STALL
);

1027 #ifde‡
STM32F10X_CL


1028 i‡((
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
OUT_DATA
) ||

1029 (
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
WAIT_STATUS_OUT
))

1031 
ï
 = 
	`PCD_GëInEP
(0);

1032 
ï
->
is_ö
 = 0;

1033 
	`OTGD_FS_EP0SèπX„r
(
ï
);

1035 
	`vSëEPTxSètus
(
EP_TX_VALID
);

1038 i‡((
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
IN_DATA
) ||

1039 (
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
WAIT_STATUS_IN
))

1041 
ï
 = 
	`PCD_GëInEP
(0);

1042 
ï
->
is_ö
 = 1;

1043 
	`OTGD_FS_EP0SèπX„r
(
ï
);

1047  (
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
PAUSE
);

1048 
	}
}

1057 
	$SëDevi˚Addªss
(
uöt8_t
 
VÆ
)

1059 #ifde‡
STM32F10X_CL


1060 
	`PCD_EP_SëAddªss
 ((
uöt8_t
)
VÆ
);

1062 
uöt32_t
 
i
;

1063 
uöt32_t
 
nEP
 = 
Devi˚_TabÀ
.
TŸÆ_Endpoöt
;

1066 
i
 = 0; i < 
nEP
; i++)

1068 
	`_SëEPAddªss
((
uöt8_t
)
i
, (uint8_t)i);

1070 
	`_SëDADDR
(
VÆ
 | 
DADDR_EF
);

1072 
	}
}

1081 
	$NOP_Pro˚ss
()

1083 
	}
}

	@libstm/STM32_USB-FS-Device_Lib/src/usb_init.c

17 
	~"usb_lib.h
"

24 
uöt8_t
 
	gEPödex
;

29 
DEVICE_INFO
 *
	gpInf‹m©i⁄
;

32 
DEVICE_PROP
 *
	gpPr›îty
;

37 
uöt16_t
 
	gSaveSèã
 ;

38 
uöt16_t
 
	gwI¡îru±_Mask
;

39 
DEVICE_INFO
 
	gDevi˚_Info
;

40 
USER_STANDARD_REQUESTS
 *
	gpU£r_Sènd¨d_Reque°s
;

53 
	$USB_Inô
()

55 
pInf‹m©i⁄
 = &
Devi˚_Info
;

56 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 2;

57 
pPr›îty
 = &
Devi˚_Pr›îty
;

58 
pU£r_Sènd¨d_Reque°s
 = &
U£r_Sènd¨d_Reque°s
;

60 
pPr›îty
->
	`Inô
();

61 
	}
}

	@libstm/STM32_USB-FS-Device_Lib/src/usb_int.c

15 #i‚de‡
STM32F10X_CL


18 
	~"usb_lib.h
"

24 
__IO
 
uöt16_t
 
	gSaveRSèã
;

25 
__IO
 
uöt16_t
 
	gSaveTSèã
;

28 (*
pEpI¡_IN
[7])();

29 (*
pEpI¡_OUT
[7])();

42 
	$CTR_LP
()

44 
__IO
 
uöt16_t
 
wEPVÆ
 = 0;

46 ((
wI°r
 = 
	`_GëISTR
()Ë& 
ISTR_CTR
) != 0)

49 
EPödex
 = (
uöt8_t
)(
wI°r
 & 
ISTR_EP_ID
);

50 i‡(
EPödex
 == 0)

60 
SaveRSèã
 = 
	`_GëENDPOINT
(
ENDP0
);

61 
SaveTSèã
 = 
SaveRSèã
 & 
EPTX_STAT
;

62 
SaveRSèã
 &
EPRX_STAT
;

64 
	`_SëEPRxTxSètus
(
ENDP0
,
EP_RX_NAK
,
EP_TX_NAK
);

68 i‡((
wI°r
 & 
ISTR_DIR
) == 0)

76 
	`_CÀ¨EP_CTR_TX
(
ENDP0
);

77 
	`In0_Pro˚ss
();

81 
	`_SëEPRxTxSètus
(
ENDP0
,
SaveRSèã
,
SaveTSèã
);

91 
wEPVÆ
 = 
	`_GëENDPOINT
(
ENDP0
);

93 i‡((
wEPVÆ
 &
EP_SETUP
) != 0)

95 
	`_CÀ¨EP_CTR_RX
(
ENDP0
);

96 
	`Sëup0_Pro˚ss
();

99 
	`_SëEPRxTxSètus
(
ENDP0
,
SaveRSèã
,
SaveTSèã
);

103 i‡((
wEPVÆ
 & 
EP_CTR_RX
) != 0)

105 
	`_CÀ¨EP_CTR_RX
(
ENDP0
);

106 
	`Out0_Pro˚ss
();

109 
	`_SëEPRxTxSètus
(
ENDP0
,
SaveRSèã
,
SaveTSèã
);

119 
wEPVÆ
 = 
	`_GëENDPOINT
(
EPödex
);

120 i‡((
wEPVÆ
 & 
EP_CTR_RX
) != 0)

123 
	`_CÀ¨EP_CTR_RX
(
EPödex
);

126 (*
pEpI¡_OUT
[
EPödex
-1])();

130 i‡((
wEPVÆ
 & 
EP_CTR_TX
) != 0)

133 
	`_CÀ¨EP_CTR_TX
(
EPödex
);

136 (*
pEpI¡_IN
[
EPödex
-1])();

142 
	}
}

152 
	$CTR_HP
()

154 
uöt32_t
 
wEPVÆ
 = 0;

156 ((
wI°r
 = 
	`_GëISTR
()Ë& 
ISTR_CTR
) != 0)

158 
	`_SëISTR
((
uöt16_t
)
CLR_CTR
);

160 
EPödex
 = (
uöt8_t
)(
wI°r
 & 
ISTR_EP_ID
);

162 
wEPVÆ
 = 
	`_GëENDPOINT
(
EPödex
);

163 i‡((
wEPVÆ
 & 
EP_CTR_RX
) != 0)

166 
	`_CÀ¨EP_CTR_RX
(
EPödex
);

169 (*
pEpI¡_OUT
[
EPödex
-1])();

172 i‡((
wEPVÆ
 & 
EP_CTR_TX
) != 0)

175 
	`_CÀ¨EP_CTR_TX
(
EPödex
);

178 (*
pEpI¡_IN
[
EPödex
-1])();

184 
	}
}

	@libstm/STM32_USB-FS-Device_Lib/src/usb_mem.c

15 #i‚de‡
STM32F10X_CL


18 
	~"usb_lib.h
"

36 
	$U£rToPMABuf„rC›y
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
)

38 
uöt32_t
 
n
 = (
wNByãs
 + 1) >> 1;

39 
uöt32_t
 
i
, 
ãmp1
, 
ãmp2
;

40 
uöt16_t
 *
pdwVÆ
;

41 
pdwVÆ
 = (
uöt16_t
 *)(
wPMABufAddr
 * 2 + 
PMAAddr
);

42 
i
 = 
n
; i != 0; i--)

44 
ãmp1
 = (
uöt16_t
Ë* 
pbU§Buf
;

45 
pbU§Buf
++;

46 
ãmp2
 = 
ãmp1
 | (
uöt16_t
Ë* 
pbU§Buf
 << 8;

47 *
pdwVÆ
++ = 
ãmp2
;

48 
pdwVÆ
++;

49 
pbU§Buf
++;

51 
	}
}

61 
	$PMAToU£rBuf„rC›y
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
)

63 
uöt32_t
 
n
 = (
wNByãs
 + 1) >> 1;

64 
uöt32_t
 
i
;

65 
uöt32_t
 *
pdwVÆ
;

66 
pdwVÆ
 = (
uöt32_t
 *)(
wPMABufAddr
 * 2 + 
PMAAddr
);

67 
i
 = 
n
; i != 0; i--)

69 *(
uöt16_t
*)
pbU§Buf
++ = *
pdwVÆ
++;

70 
pbU§Buf
++;

72 
	}
}

	@libstm/STM32_USB-FS-Device_Lib/src/usb_regs.c

15 #i‚de‡
STM32F10X_CL


18 
	~"usb_lib.h
"

35 
	$SëCNTR
(
uöt16_t
 
wRegVÆue
)

37 
	`_SëCNTR
(
wRegVÆue
);

38 
	}
}

47 
uöt16_t
 
	$GëCNTR
()

49 (
	`_GëCNTR
());

50 
	}
}

59 
	$SëISTR
(
uöt16_t
 
wRegVÆue
)

61 
	`_SëISTR
(
wRegVÆue
);

62 
	}
}

71 
uöt16_t
 
	$GëISTR
()

73 (
	`_GëISTR
());

74 
	}
}

83 
uöt16_t
 
	$GëFNR
()

85 (
	`_GëFNR
());

86 
	}
}

95 
	$SëDADDR
(
uöt16_t
 
wRegVÆue
)

97 
	`_SëDADDR
(
wRegVÆue
);

98 
	}
}

107 
uöt16_t
 
	$GëDADDR
()

109 (
	`_GëDADDR
());

110 
	}
}

119 
	$SëBTABLE
(
uöt16_t
 
wRegVÆue
)

121 
	`_SëBTABLE
(
wRegVÆue
);

122 
	}
}

131 
uöt16_t
 
	$GëBTABLE
()

133 (
	`_GëBTABLE
());

134 
	}
}

144 
	$SëENDPOINT
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wRegVÆue
)

146 
	`_SëENDPOINT
(
bEpNum
, 
wRegVÆue
);

147 
	}
}

156 
uöt16_t
 
	$GëENDPOINT
(
uöt8_t
 
bEpNum
)

158 (
	`_GëENDPOINT
(
bEpNum
));

159 
	}
}

169 
	$SëEPTy≥
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wTy≥
)

171 
	`_SëEPTy≥
(
bEpNum
, 
wTy≥
);

172 
	}
}

181 
uöt16_t
 
	$GëEPTy≥
(
uöt8_t
 
bEpNum
)

183 (
	`_GëEPTy≥
(
bEpNum
));

184 
	}
}

194 
	$SëEPTxSètus
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wSèã
)

196 
	`_SëEPTxSètus
(
bEpNum
, 
wSèã
);

197 
	}
}

207 
	$SëEPRxSètus
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wSèã
)

209 
	`_SëEPRxSètus
(
bEpNum
, 
wSèã
);

210 
	}
}

220 
	$SëDouBÀBuffEPSèŒ
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
)

222 
uöt16_t
 
Endpoöt_DTOG_Sètus
;

223 
Endpoöt_DTOG_Sètus
 = 
	`GëENDPOINT
(
bEpNum
);

224 i‡(
bDú
 =
EP_DBUF_OUT
)

226 
	`_SëENDPOINT
(
bEpNum
, 
Endpoöt_DTOG_Sètus
 & ~
EPRX_DTOG1
);

228 i‡(
bDú
 =
EP_DBUF_IN
)

230 
	`_SëENDPOINT
(
bEpNum
, 
Endpoöt_DTOG_Sètus
 & ~
EPTX_DTOG1
);

232 
	}
}

241 
uöt16_t
 
	$GëEPTxSètus
(
uöt8_t
 
bEpNum
)

243 (
	`_GëEPTxSètus
(
bEpNum
));

244 
	}
}

253 
uöt16_t
 
	$GëEPRxSètus
(
uöt8_t
 
bEpNum
)

255 (
	`_GëEPRxSètus
(
bEpNum
));

256 
	}
}

265 
	$SëEPTxVÆid
(
uöt8_t
 
bEpNum
)

267 
	`_SëEPTxSètus
(
bEpNum
, 
EP_TX_VALID
);

268 
	}
}

277 
	$SëEPRxVÆid
(
uöt8_t
 
bEpNum
)

279 
	`_SëEPRxSètus
(
bEpNum
, 
EP_RX_VALID
);

280 
	}
}

289 
	$SëEP_KIND
(
uöt8_t
 
bEpNum
)

291 
	`_SëEP_KIND
(
bEpNum
);

292 
	}
}

301 
	$CÀ¨EP_KIND
(
uöt8_t
 
bEpNum
)

303 
	`_CÀ¨EP_KIND
(
bEpNum
);

304 
	}
}

312 
	$CÀ¨_Sètus_Out
(
uöt8_t
 
bEpNum
)

314 
	`_CÀ¨EP_KIND
(
bEpNum
);

315 
	}
}

323 
	$Së_Sètus_Out
(
uöt8_t
 
bEpNum
)

325 
	`_SëEP_KIND
(
bEpNum
);

326 
	}
}

334 
	$SëEPDoubÀBuff
(
uöt8_t
 
bEpNum
)

336 
	`_SëEP_KIND
(
bEpNum
);

337 
	}
}

345 
	$CÀ¨EPDoubÀBuff
(
uöt8_t
 
bEpNum
)

347 
	`_CÀ¨EP_KIND
(
bEpNum
);

348 
	}
}

356 
uöt16_t
 
	$GëTxSèŒSètus
(
uöt8_t
 
bEpNum
)

358 (
	`_GëTxSèŒSètus
(
bEpNum
));

359 
	}
}

367 
uöt16_t
 
	$GëRxSèŒSètus
(
uöt8_t
 
bEpNum
)

369 (
	`_GëRxSèŒSètus
(
bEpNum
));

370 
	}
}

378 
	$CÀ¨EP_CTR_RX
(
uöt8_t
 
bEpNum
)

380 
	`_CÀ¨EP_CTR_RX
(
bEpNum
);

381 
	}
}

389 
	$CÀ¨EP_CTR_TX
(
uöt8_t
 
bEpNum
)

391 
	`_CÀ¨EP_CTR_TX
(
bEpNum
);

392 
	}
}

400 
	$ToggÀDTOG_RX
(
uöt8_t
 
bEpNum
)

402 
	`_ToggÀDTOG_RX
(
bEpNum
);

403 
	}
}

411 
	$ToggÀDTOG_TX
(
uöt8_t
 
bEpNum
)

413 
	`_ToggÀDTOG_TX
(
bEpNum
);

414 
	}
}

422 
	$CÀ¨DTOG_RX
(
uöt8_t
 
bEpNum
)

424 
	`_CÀ¨DTOG_RX
(
bEpNum
);

425 
	}
}

433 
	$CÀ¨DTOG_TX
(
uöt8_t
 
bEpNum
)

435 
	`_CÀ¨DTOG_TX
(
bEpNum
);

436 
	}
}

445 
	$SëEPAddªss
(
uöt8_t
 
bEpNum
, uöt8_à
bAddr
)

447 
	`_SëEPAddªss
(
bEpNum
, 
bAddr
);

448 
	}
}

456 
uöt8_t
 
	$GëEPAddªss
(
uöt8_t
 
bEpNum
)

458 (
	`_GëEPAddªss
(
bEpNum
));

459 
	}
}

468 
	$SëEPTxAddr
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wAddr
)

470 
	`_SëEPTxAddr
(
bEpNum
, 
wAddr
);

471 
	}
}

480 
	$SëEPRxAddr
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wAddr
)

482 
	`_SëEPRxAddr
(
bEpNum
, 
wAddr
);

483 
	}
}

491 
uöt16_t
 
	$GëEPTxAddr
(
uöt8_t
 
bEpNum
)

493 (
	`_GëEPTxAddr
(
bEpNum
));

494 
	}
}

502 
uöt16_t
 
	$GëEPRxAddr
(
uöt8_t
 
bEpNum
)

504 (
	`_GëEPRxAddr
(
bEpNum
));

505 
	}
}

514 
	$SëEPTxCou¡
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wCou¡
)

516 
	`_SëEPTxCou¡
(
bEpNum
, 
wCou¡
);

517 
	}
}

526 
	$SëEPCou¡RxReg
(
uöt32_t
 *
pdwReg
, 
uöt16_t
 
wCou¡
)

528 
	`_SëEPCou¡RxReg
(
dwReg
, 
wCou¡
);

529 
	}
}

538 
	$SëEPRxCou¡
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wCou¡
)

540 
	`_SëEPRxCou¡
(
bEpNum
, 
wCou¡
);

541 
	}
}

549 
uöt16_t
 
	$GëEPTxCou¡
(
uöt8_t
 
bEpNum
)

551 (
	`_GëEPTxCou¡
(
bEpNum
));

552 
	}
}

560 
uöt16_t
 
	$GëEPRxCou¡
(
uöt8_t
 
bEpNum
)

562 (
	`_GëEPRxCou¡
(
bEpNum
));

563 
	}
}

573 
	$SëEPDblBuffAddr
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wBuf0Addr
, uöt16_à
wBuf1Addr
)

575 
	`_SëEPDblBuffAddr
(
bEpNum
, 
wBuf0Addr
, 
wBuf1Addr
);

576 
	}
}

585 
	$SëEPDblBuf0Addr
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wBuf0Addr
)

587 
	`_SëEPDblBuf0Addr
(
bEpNum
, 
wBuf0Addr
);

588 
	}
}

597 
	$SëEPDblBuf1Addr
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wBuf1Addr
)

599 
	`_SëEPDblBuf1Addr
(
bEpNum
, 
wBuf1Addr
);

600 
	}
}

608 
uöt16_t
 
	$GëEPDblBuf0Addr
(
uöt8_t
 
bEpNum
)

610 (
	`_GëEPDblBuf0Addr
(
bEpNum
));

611 
	}
}

619 
uöt16_t
 
	$GëEPDblBuf1Addr
(
uöt8_t
 
bEpNum
)

621 (
	`_GëEPDblBuf1Addr
(
bEpNum
));

622 
	}
}

631 
	$SëEPDblBuffCou¡
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
, 
uöt16_t
 
wCou¡
)

633 
	`_SëEPDblBuffCou¡
(
bEpNum
, 
bDú
, 
wCou¡
);

634 
	}
}

643 
	$SëEPDblBuf0Cou¡
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
, 
uöt16_t
 
wCou¡
)

645 
	`_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
);

646 
	}
}

655 
	$SëEPDblBuf1Cou¡
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
, 
uöt16_t
 
wCou¡
)

657 
	`_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
);

658 
	}
}

667 
uöt16_t
 
	$GëEPDblBuf0Cou¡
(
uöt8_t
 
bEpNum
)

669 (
	`_GëEPDblBuf0Cou¡
(
bEpNum
));

670 
	}
}

679 
uöt16_t
 
	$GëEPDblBuf1Cou¡
(
uöt8_t
 
bEpNum
)

681 (
	`_GëEPDblBuf1Cou¡
(
bEpNum
));

682 
	}
}

691 
EP_DBUF_DIR
 
	$GëEPDblBufDú
(
uöt8_t
 
bEpNum
)

693 i‡((
uöt16_t
)(*
	`_pEPRxCou¡
(
bEpNum
) & 0xFC00) != 0)

694 (
EP_DBUF_OUT
);

695 i‡(((
uöt16_t
)(*
	`_pEPTxCou¡
(
bEpNum
)) & 0x03FF) != 0)

696 (
EP_DBUF_IN
);

698 (
EP_DBUF_ERR
);

699 
	}
}

708 
	$FªeU£rBuf„r
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
)

710 i‡(
bDú
 =
EP_DBUF_OUT
)

712 
	`_ToggÀDTOG_TX
(
bEpNum
);

714 i‡(
bDú
 =
EP_DBUF_IN
)

716 
	`_ToggÀDTOG_RX
(
bEpNum
);

718 
	}
}

727 
uöt16_t
 
	$ToW‹d
(
uöt8_t
 
bh
, uöt8_à
bl
)

729 
uöt16_t
 
wRë
;

730 
wRë
 = (
uöt16_t
)
bl
 | ((uöt16_t)
bh
 << 8);

731 (
wRë
);

732 
	}
}

740 
uöt16_t
 
	$ByãSw≠
(
uöt16_t
 
wSwW
)

742 
uöt8_t
 
bTemp
;

743 
uöt16_t
 
wRë
;

744 
bTemp
 = (
uöt8_t
)(
wSwW
 & 0xff);

745 
wRë
 = (
wSwW
 >> 8Ë| ((
uöt16_t
)
bTemp
 << 8);

746 (
wRë
);

747 
	}
}

	@libstm/STM32_USB-FS-Device_Lib/src/usb_sil.c

18 
	~"usb_lib.h
"

35 
uöt32_t
 
	$USB_SIL_Inô
()

37 #i‚de‡
STM32F10X_CL


41 
	`_SëISTR
(0);

42 
wI¡îru±_Mask
 = 
IMR_MSK
;

44 
	`_SëCNTR
(
wI¡îru±_Mask
);

49 
	`OTG_DEV_Inô
();

54 
	}
}

66 
uöt32_t
 
	$USB_SIL_Wrôe
(
uöt8_t
 
bEpAddr
, uöt8_t* 
pBuf„rPoöãr
, 
uöt32_t
 
wBuf„rSize
)

68 #i‚de‡
STM32F10X_CL


71 
	`U£rToPMABuf„rC›y
(
pBuf„rPoöãr
, 
	`GëEPTxAddr
(
bEpAddr
 & 0x7F), 
wBuf„rSize
);

74 
	`SëEPTxCou¡
((
bEpAddr
 & 0x7F), 
wBuf„rSize
);

79 
	`PCD_EP_Wrôe
 (
bEpAddr
, 
pBuf„rPoöãr
, 
wBuf„rSize
);

84 
	}
}

95 
uöt32_t
 
	$USB_SIL_Ród
(
uöt8_t
 
bEpAddr
, uöt8_t* 
pBuf„rPoöãr
)

97 
uöt32_t
 
D©aLígth
 = 0;

99 #i‚de‡
STM32F10X_CL


102 
D©aLígth
 = 
	`GëEPRxCou¡
(
bEpAddr
 & 0x7F);

105 
	`PMAToU£rBuf„rC›y
(
pBuf„rPoöãr
, 
	`GëEPRxAddr
(
bEpAddr
 & 0x7F), 
D©aLígth
);

109 
USB_OTG_EP
 *
ï
;

112 
ï
 = 
	`PCD_GëOutEP
(
bEpAddr
);

115 
D©aLígth
 = 
ï
->
x„r_Àn
;

118 
	`PCD_EP_Ród
 (
bEpAddr
, 
pBuf„rPoöãr
, 
D©aLígth
);

123  
D©aLígth
;

124 
	}
}

	@libstm/STM32_USB_Device_Library/Class/audio/inc/usbd_audio_core.h

24 #i‚de‡
__USB_AUDIO_CORE_H_


25 
	#__USB_AUDIO_CORE_H_


	)

27 
	~"usbd_i‹eq.h
"

28 
	~"usbd_ªq.h
"

29 
	~"usbd_desc.h
"

49 
	#AUDIO_OUT_PACKET
 (
uöt32_t
)(((
USBD_AUDIO_FREQ
 * 2 * 2Ë/1000))

	)

53 
	#OUT_PACKET_NUM
 4

	)

55 
	#TOTAL_OUT_BUF_SIZE
 ((
uöt32_t
)(
AUDIO_OUT_PACKET
 * 
OUT_PACKET_NUM
))

	)

57 
	#AUDIO_CONFIG_DESC_SIZE
 109

	)

58 
	#AUDIO_INTERFACE_DESC_SIZE
 9

	)

59 
	#USB_AUDIO_DESC_SIZ
 0x09

	)

60 
	#AUDIO_STANDARD_ENDPOINT_DESC_SIZE
 0x09

	)

61 
	#AUDIO_STREAMING_ENDPOINT_DESC_SIZE
 0x07

	)

63 
	#AUDIO_DESCRIPTOR_TYPE
 0x21

	)

64 
	#USB_DEVICE_CLASS_AUDIO
 0x01

	)

65 
	#AUDIO_SUBCLASS_AUDIOCONTROL
 0x01

	)

66 
	#AUDIO_SUBCLASS_AUDIOSTREAMING
 0x02

	)

67 
	#AUDIO_PROTOCOL_UNDEFINED
 0x00

	)

68 
	#AUDIO_STREAMING_GENERAL
 0x01

	)

69 
	#AUDIO_STREAMING_FORMAT_TYPE
 0x02

	)

72 
	#AUDIO_INTERFACE_DESCRIPTOR_TYPE
 0x24

	)

73 
	#AUDIO_ENDPOINT_DESCRIPTOR_TYPE
 0x25

	)

76 
	#AUDIO_CONTROL_HEADER
 0x01

	)

77 
	#AUDIO_CONTROL_INPUT_TERMINAL
 0x02

	)

78 
	#AUDIO_CONTROL_OUTPUT_TERMINAL
 0x03

	)

79 
	#AUDIO_CONTROL_FEATURE_UNIT
 0x06

	)

81 
	#AUDIO_INPUT_TERMINAL_DESC_SIZE
 0x0C

	)

82 
	#AUDIO_OUTPUT_TERMINAL_DESC_SIZE
 0x09

	)

83 
	#AUDIO_STREAMING_INTERFACE_DESC_SIZE
 0x07

	)

85 
	#AUDIO_CONTROL_MUTE
 0x0001

	)

87 
	#AUDIO_FORMAT_TYPE_I
 0x01

	)

88 
	#AUDIO_FORMAT_TYPE_III
 0x03

	)

90 
	#USB_ENDPOINT_TYPE_ISOCHRONOUS
 0x01

	)

91 
	#AUDIO_ENDPOINT_GENERAL
 0x01

	)

93 
	#AUDIO_REQ_GET_CUR
 0x81

	)

94 
	#AUDIO_REQ_SET_CUR
 0x01

	)

96 
	#AUDIO_OUT_STREAMING_CTRL
 0x02

	)

106 
	s_Audio_F›s


108 
uöt8_t
 (*
Inô
Ë(
uöt32_t
 
	mAudioFªq
, uöt32_à
	mVﬁume
, uöt32_à
	m›ti⁄s
);

109 
uöt8_t
 (*
DeInô
Ë(
uöt32_t
 
	m›ti⁄s
);

110 
uöt8_t
 (*
AudioCmd
Ë(uöt8_t* 
	mpbuf
, 
uöt32_t
 
	msize
, uöt8_à
	mcmd
);

111 
uöt8_t
 (*
VﬁumeCé
Ë(uöt8_à
	mvﬁ
);

112 
uöt8_t
 (*
MuãCé
Ë(uöt8_à
	mcmd
);

113 
uöt8_t
 (*
PîiodicTC
Ë(uöt8_à
	mcmd
);

114 
uöt8_t
 (*
GëSèã
) ();

115 }
	tAUDIO_FOPS_Ty≥Def
;

125 
	#AUDIO_PACKET_SZE
(
‰q
Ë(
uöt8_t
)(((frq * 2 * 2)/1000) & 0xFF), \

126 (
uöt8_t
)((((
‰q
 * 2 * 2)/1000Ë>> 8Ë& 0xFF)

	)

127 
	#SAMPLE_FREQ
(
‰q
Ë(
uöt8_t
)(‰q), (uöt8_t)((‰q >> 8)), (uöt8_t)((‰q >> 16))

	)

136 
USBD_Cœss_cb_Ty≥Def
 
AUDIO_cb
;

	@libstm/STM32_USB_Device_Library/Class/audio/inc/usbd_audio_out_if.h

24 #i‚de‡
__USB_AUDIO_OUT_IF_H_


25 
	#__USB_AUDIO_OUT_IF_H_


	)

27 #ifde‡
STM32F2XX


28 
	~"°m322xg_usb_audio_codec.h
"

29 #ñi‡
deföed
(
STM32F10X_CL
)

30 
	~"°m3210c_usb_audio_codec.h
"

49 
	mAUDIO_CMD_PLAY
 = 1,

50 
	mAUDIO_CMD_PAUSE
,

51 
	mAUDIO_CMD_STOP
,

52 }
	tAUDIO_CMD_Ty≥Def
;

55 
	#AUDIO_MUTE
 0x01

	)

56 
	#AUDIO_UNMUTE
 0x00

	)

59 
	#AUDIO_OK
 0x00

	)

60 
	#AUDIO_FAIL
 0xFF

	)

63 
	#AUDIO_STATE_INACTIVE
 0x00

	)

64 
	#AUDIO_STATE_ACTIVE
 0x01

	)

65 
	#AUDIO_STATE_PLAYING
 0x02

	)

66 
	#AUDIO_STATE_PAUSED
 0x03

	)

67 
	#AUDIO_STATE_STOPPED
 0x04

	)

68 
	#AUDIO_STATE_ERROR
 0x05

	)

95 
AUDIO_FOPS_Ty≥Def
 
AUDIO_OUT_f›s
;

	@libstm/STM32_USB_Device_Library/Class/audio/src/usbd_audio_core.c

75 
	~"usbd_audio_c‹e.h
"

76 
	~"usbd_audio_out_if.h
"

119 
uöt8_t
 
usbd_audio_Inô
 (*
pdev
, uöt8_à
cfgidx
);

120 
uöt8_t
 
usbd_audio_DeInô
 (*
pdev
, uöt8_à
cfgidx
);

121 
uöt8_t
 
usbd_audio_Sëup
 (*
pdev
, 
USB_SETUP_REQ
 *
ªq
);

122 
uöt8_t
 
usbd_audio_EP0_RxRódy
(*
pdev
);

123 
uöt8_t
 
usbd_audio_D©aIn
 (*
pdev
, uöt8_à
ïnum
);

124 
uöt8_t
 
usbd_audio_D©aOut
 (*
pdev
, uöt8_à
ïnum
);

125 
uöt8_t
 
usbd_audio_SOF
 (*
pdev
);

126 
uöt8_t
 
usbd_audio_OUT_In˝…
 (*
pdev
);

131 
AUDIO_Req_GëCuºít
(*
pdev
, 
USB_SETUP_REQ
 *
ªq
);

132 
AUDIO_Req_SëCuºít
(*
pdev
, 
USB_SETUP_REQ
 *
ªq
);

133 
uöt8_t
 *
USBD_audio_GëCfgDesc
 (uöt8_à
•ìd
, 
uöt16_t
 *
Àngth
);

142 
uöt8_t
 
	gIsocOutBuff
 [
TOTAL_OUT_BUF_SIZE
 * 2];

143 
uöt8_t
* 
	gIsocOutWrPå
 = 
IsocOutBuff
;

144 
uöt8_t
* 
	gIsocOutRdPå
 = 
IsocOutBuff
;

147 
uöt8_t
 
	gAudioCé
[64];

148 
uöt8_t
 
	gAudioCéCmd
 = 0;

149 
uöt32_t
 
	gAudioCéLí
 = 0;

150 
uöt8_t
 
	gAudioCéUnô
 = 0;

152 
uöt32_t
 
	gPœyFœg
 = 0;

154 
__IO
 
uöt32_t
 
	gusbd_audio_A…Së
 = 0;

155 
uöt8_t
 
	gusbd_audio_CfgDesc
[
AUDIO_CONFIG_DESC_SIZE
];

158 
USBD_Cœss_cb_Ty≥Def
 
	gAUDIO_cb
 =

160 
usbd_audio_Inô
,

161 
usbd_audio_DeInô
,

162 
usbd_audio_Sëup
,

163 
NULL
,

164 
usbd_audio_EP0_RxRódy
,

165 
usbd_audio_D©aIn
,

166 
usbd_audio_D©aOut
,

167 
usbd_audio_SOF
,

168 
NULL
,

169 
usbd_audio_OUT_In˝…
,

170 
USBD_audio_GëCfgDesc
,

171 #ifde‡
USB_OTG_HS_CORE


172 
USBD_audio_GëCfgDesc
,

177 
uöt8_t
 
	gusbd_audio_CfgDesc
[
AUDIO_CONFIG_DESC_SIZE
] =

181 
USB_CONFIGURATION_DESCRIPTOR_TYPE
,

182 
LOBYTE
(
AUDIO_CONFIG_DESC_SIZE
),

183 
HIBYTE
(
AUDIO_CONFIG_DESC_SIZE
),

192 
AUDIO_INTERFACE_DESC_SIZE
,

193 
USB_INTERFACE_DESCRIPTOR_TYPE
,

197 
USB_DEVICE_CLASS_AUDIO
,

198 
AUDIO_SUBCLASS_AUDIOCONTROL
,

199 
AUDIO_PROTOCOL_UNDEFINED
,

204 
AUDIO_INTERFACE_DESC_SIZE
,

205 
AUDIO_INTERFACE_DESCRIPTOR_TYPE
,

206 
AUDIO_CONTROL_HEADER
,

216 
AUDIO_INPUT_TERMINAL_DESC_SIZE
,

217 
AUDIO_INTERFACE_DESCRIPTOR_TYPE
,

218 
AUDIO_CONTROL_INPUT_TERMINAL
,

232 
AUDIO_INTERFACE_DESCRIPTOR_TYPE
,

233 
AUDIO_CONTROL_FEATURE_UNIT
,

234 
AUDIO_OUT_STREAMING_CTRL
,

237 
AUDIO_CONTROL_MUTE
,

244 
AUDIO_INTERFACE_DESCRIPTOR_TYPE
,

245 
AUDIO_CONTROL_OUTPUT_TERMINAL
,

256 
AUDIO_INTERFACE_DESC_SIZE
,

257 
USB_INTERFACE_DESCRIPTOR_TYPE
,

261 
USB_DEVICE_CLASS_AUDIO
,

262 
AUDIO_SUBCLASS_AUDIOSTREAMING
,

263 
AUDIO_PROTOCOL_UNDEFINED
,

269 
AUDIO_INTERFACE_DESC_SIZE
,

270 
USB_INTERFACE_DESCRIPTOR_TYPE
,

274 
USB_DEVICE_CLASS_AUDIO
,

275 
AUDIO_SUBCLASS_AUDIOSTREAMING
,

276 
AUDIO_PROTOCOL_UNDEFINED
,

281 
AUDIO_STREAMING_INTERFACE_DESC_SIZE
,

282 
AUDIO_INTERFACE_DESCRIPTOR_TYPE
,

283 
AUDIO_STREAMING_GENERAL
,

292 
AUDIO_INTERFACE_DESCRIPTOR_TYPE
,

293 
AUDIO_STREAMING_FORMAT_TYPE
,

294 
AUDIO_FORMAT_TYPE_III
,

299 
SAMPLE_FREQ
(
USBD_AUDIO_FREQ
),

303 
AUDIO_STANDARD_ENDPOINT_DESC_SIZE
,

304 
USB_ENDPOINT_DESCRIPTOR_TYPE
,

305 
AUDIO_OUT_EP
,

306 
USB_ENDPOINT_TYPE_ISOCHRONOUS
,

307 
AUDIO_PACKET_SZE
(
USBD_AUDIO_FREQ
),

314 
AUDIO_STREAMING_ENDPOINT_DESC_SIZE
,

315 
AUDIO_ENDPOINT_DESCRIPTOR_TYPE
,

316 
AUDIO_ENDPOINT_GENERAL
,

339 
uöt8_t
 
	$usbd_audio_Inô
 (*
pdev
,

340 
uöt8_t
 
cfgidx
)

343 
	`DCD_EP_O≥n
(
pdev
,

344 
AUDIO_OUT_EP
,

345 
AUDIO_OUT_PACKET
,

346 
USB_OTG_EP_ISOC
);

349 i‡(
AUDIO_OUT_f›s
.
	`Inô
(
USBD_AUDIO_FREQ
, 
DEFAULT_VOLUME
, 0Ë!
USBD_OK
)

351  
USBD_FAIL
;

355 
	`DCD_EP_Pª∑ªRx
(
pdev
,

356 
AUDIO_OUT_EP
,

357 (
uöt8_t
*)
IsocOutBuff
,

358 
AUDIO_OUT_PACKET
);

360  
USBD_OK
;

361 
	}
}

370 
uöt8_t
 
	$usbd_audio_DeInô
 (*
pdev
,

371 
uöt8_t
 
cfgidx
)

373 
	`DCD_EP_Clo£
 (
pdev
 , 
AUDIO_OUT_EP
);

376 i‡(
AUDIO_OUT_f›s
.
	`DeInô
(0Ë!
USBD_OK
)

378  
USBD_FAIL
;

381  
USBD_OK
;

382 
	}
}

391 
uöt8_t
 
	$usbd_audio_Sëup
 (*
pdev
,

392 
USB_SETUP_REQ
 *
ªq
)

394 
uöt16_t
 
Àn
;

395 
uöt8_t
 *
pbuf
;

397 
ªq
->
bmReque°
 & 
USB_REQ_TYPE_MASK
)

400 
USB_REQ_TYPE_CLASS
 :

401 
ªq
->
bReque°
)

403 
AUDIO_REQ_GET_CUR
:

404 
	`AUDIO_Req_GëCuºít
(
pdev
, 
ªq
);

407 
AUDIO_REQ_SET_CUR
:

408 
	`AUDIO_Req_SëCuºít
(
pdev
, 
ªq
);

412 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

413  
USBD_FAIL
;

418 
USB_REQ_TYPE_STANDARD
:

419 
ªq
->
bReque°
)

421 
USB_REQ_GET_DESCRIPTOR
:

422 if–(
ªq
->
wVÆue
 >> 8Ë=
AUDIO_DESCRIPTOR_TYPE
)

424 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


425 
pbuf
 = 
usbd_audio_Desc
;

427 
pbuf
 = 
usbd_audio_CfgDesc
 + 18;

429 
Àn
 = 
	`MIN
(
USB_AUDIO_DESC_SIZ
 , 
ªq
->
wLígth
);

432 
	`USBD_CéSídD©a
 (
pdev
,

433 
pbuf
,

434 
Àn
);

437 
USB_REQ_GET_INTERFACE
 :

438 
	`USBD_CéSídD©a
 (
pdev
,

439 (
uöt8_t
 *)&
usbd_audio_A…Së
,

443 
USB_REQ_SET_INTERFACE
 :

444 i‡((
uöt8_t
)(
ªq
->
wVÆue
Ë< 
AUDIO_TOTAL_IF_NUM
)

446 
usbd_audio_A…Së
 = (
uöt8_t
)(
ªq
->
wVÆue
);

451 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

456  
USBD_OK
;

457 
	}
}

465 
uöt8_t
 
	$usbd_audio_EP0_RxRódy
 (*
pdev
)

468 i‡(
AudioCéCmd
 =
AUDIO_REQ_SET_CUR
)

471 i‡(
AudioCéUnô
 =
AUDIO_OUT_STREAMING_CTRL
)

474 
AUDIO_OUT_f›s
.
	`MuãCé
(
AudioCé
[0]);

477 
AudioCéCmd
 = 0;

478 
AudioCéLí
 = 0;

482  
USBD_OK
;

483 
	}
}

492 
uöt8_t
 
	$usbd_audio_D©aIn
 (*
pdev
, 
uöt8_t
 
ïnum
)

494  
USBD_OK
;

495 
	}
}

504 
uöt8_t
 
	$usbd_audio_D©aOut
 (*
pdev
, 
uöt8_t
 
ïnum
)

506 i‡(
ïnum
 =
AUDIO_OUT_EP
)

509 i‡(
IsocOutWrPå
 >(
IsocOutBuff
 + (
AUDIO_OUT_PACKET
 * 
OUT_PACKET_NUM
)))

511 
IsocOutWrPå
 = 
IsocOutBuff
;

515 
IsocOutWrPå
 +
AUDIO_OUT_PACKET
;

519 ((
USB_OTG_CORE_HANDLE
*)
pdev
)->
dev
.
out_ï
[
ïnum
].
eví_odd_‰ame
 =

520 (((
USB_OTG_CORE_HANDLE
*)
pdev
)->
dev
.
out_ï
[
ïnum
].
eví_odd_‰ame
)? 0:1;

523 
	`DCD_EP_Pª∑ªRx
(
pdev
,

524 
AUDIO_OUT_EP
,

525 (
uöt8_t
*)(
IsocOutWrPå
),

526 
AUDIO_OUT_PACKET
);

529 i‡((
PœyFœg
 =0Ë&& (
IsocOutWrPå
 >(
IsocOutBuff
 + ((
AUDIO_OUT_PACKET
 * 
OUT_PACKET_NUM
) / 2))))

532 
PœyFœg
 = 1;

536  
USBD_OK
;

537 
	}
}

546 
uöt8_t
 
	$usbd_audio_SOF
 (*
pdev
)

551 i‡(
PœyFœg
)

554 
AUDIO_OUT_f›s
.
	`AudioCmd
((
uöt8_t
*)(
IsocOutRdPå
),

555 
AUDIO_OUT_PACKET
,

556 
AUDIO_CMD_PLAY
);

559 i‡(
IsocOutRdPå
 >(
IsocOutBuff
 + (
AUDIO_OUT_PACKET
 * 
OUT_PACKET_NUM
)))

561 
IsocOutRdPå
 = 
IsocOutBuff
;

565 
IsocOutRdPå
 +
AUDIO_OUT_PACKET
;

569 i‡(
IsocOutRdPå
 =
IsocOutWrPå
)

572 
AUDIO_OUT_f›s
.
	`AudioCmd
((
uöt8_t
*)(
IsocOutBuff
),

573 
AUDIO_OUT_PACKET
,

574 
AUDIO_CMD_PAUSE
);

577 
PœyFœg
 = 0;

580 
IsocOutRdPå
 = 
IsocOutBuff
;

581 
IsocOutWrPå
 = 
IsocOutBuff
;

585  
USBD_OK
;

586 
	}
}

594 
uöt8_t
 
	$usbd_audio_OUT_In˝…
 (*
pdev
)

596  
USBD_OK
;

597 
	}
}

609 
	$AUDIO_Req_GëCuºít
(*
pdev
, 
USB_SETUP_REQ
 *
ªq
)

612 
	`USBD_CéSídD©a
 (
pdev
,

613 
AudioCé
,

614 
ªq
->
wLígth
);

615 
	}
}

624 
	$AUDIO_Req_SëCuºít
(*
pdev
, 
USB_SETUP_REQ
 *
ªq
)

626 i‡(
ªq
->
wLígth
)

629 
	`USBD_CéPª∑ªRx
 (
pdev
,

630 
AudioCé
,

631 
ªq
->
wLígth
);

635 
AudioCéCmd
 = 
AUDIO_REQ_SET_CUR
;

636 
AudioCéLí
 = 
ªq
->
wLígth
;

637 
AudioCéUnô
 = 
	`HIBYTE
(
ªq
->
wIndex
);

639 
	}
}

648 
uöt8_t
 *
	$USBD_audio_GëCfgDesc
 (
uöt8_t
 
•ìd
, 
uöt16_t
 *
Àngth
)

650 *
Àngth
 =  (
usbd_audio_CfgDesc
);

651  
usbd_audio_CfgDesc
;

652 
	}
}

	@libstm/STM32_USB_Device_Library/Class/audio/src/usbd_audio_out_if.c

23 
	~"usbd_audio_c‹e.h
"

24 
	~"usbd_audio_out_if.h
"

66 
uöt8_t
 
Inô
 (
uöt32_t
 
AudioFªq
, uöt32_à
Vﬁume
, uöt32_à
›ti⁄s
);

67 
uöt8_t
 
DeInô
 (
uöt32_t
 
›ti⁄s
);

68 
uöt8_t
 
AudioCmd
 (uöt8_t* 
pbuf
, 
uöt32_t
 
size
, uöt8_à
cmd
);

69 
uöt8_t
 
VﬁumeCé
 (uöt8_à
vﬁ
);

70 
uöt8_t
 
MuãCé
 (uöt8_à
cmd
);

71 
uöt8_t
 
PîiodicTC
 (uöt8_à
cmd
);

72 
uöt8_t
 
GëSèã
 ();

81 
AUDIO_FOPS_Ty≥Def
 
	gAUDIO_OUT_f›s
 =

83 
Inô
,

84 
DeInô
,

85 
AudioCmd
,

86 
VﬁumeCé
,

87 
MuãCé
,

88 
PîiodicTC
,

89 
GëSèã


92 
uöt8_t
 
	gAudioSèã
 = 
AUDIO_STATE_INACTIVE
;

110 
uöt8_t
 
	$Inô
 (
uöt32_t
 
AudioFªq
,

111 
uöt32_t
 
Vﬁume
,

112 
uöt32_t
 
›ti⁄s
)

114 
uöt32_t
 
Inôülized
 = 0;

117 i‡(
Inôülized
 == 0)

120 i‡(
	`EVAL_AUDIO_Inô
(
OUTPUT_DEVICE_AUTO
, 
Vﬁume
, 
AudioFªq
) != 0)

122 
AudioSèã
 = 
AUDIO_STATE_ERROR
;

123  
AUDIO_FAIL
;

127 
Inôülized
 = 1;

131 
AudioSèã
 = 
AUDIO_STATE_ACTIVE
;

133  
AUDIO_OK
;

134 
	}
}

142 
uöt8_t
 
	$DeInô
 (
uöt32_t
 
›ti⁄s
)

145 
AudioSèã
 = 
AUDIO_STATE_INACTIVE
;

147  
AUDIO_OK
;

148 
	}
}

159 
uöt8_t
 
	$AudioCmd
(
uöt8_t
* 
pbuf
,

160 
uöt32_t
 
size
,

161 
uöt8_t
 
cmd
)

164 i‡((
AudioSèã
 =
AUDIO_STATE_INACTIVE
Ë|| (AudioSèã =
AUDIO_STATE_ERROR
))

166 
AudioSèã
 = 
AUDIO_STATE_ERROR
;

167  
AUDIO_FAIL
;

170 
cmd
)

173 
AUDIO_CMD_PLAY
:

175 i‡((
AudioSèã
 =
AUDIO_STATE_ACTIVE
) || \

176 (
AudioSèã
 =
AUDIO_STATE_STOPPED
) || \

177 (
AudioSèã
 =
AUDIO_STATE_PLAYING
))

179 
	`Audio_MAL_Pœy
((
uöt32_t
)
pbuf
, (
size
/2));

180 
AudioSèã
 = 
AUDIO_STATE_PLAYING
;

181  
AUDIO_OK
;

184 i‡(
AudioSèã
 =
AUDIO_STATE_PAUSED
)

186 i‡(
	`EVAL_AUDIO_Pau£Resume
(
AUDIO_RESUME
, (
uöt32_t
)
pbuf
, (
size
/2)) != 0)

188 
AudioSèã
 = 
AUDIO_STATE_ERROR
;

189  
AUDIO_FAIL
;

193 
AudioSèã
 = 
AUDIO_STATE_PLAYING
;

194  
AUDIO_OK
;

199  
AUDIO_FAIL
;

203 
AUDIO_CMD_STOP
:

204 i‡(
AudioSèã
 !
AUDIO_STATE_PLAYING
)

207  
AUDIO_FAIL
;

209 i‡(
	`EVAL_AUDIO_St›
(
CODEC_PDWN_SW
) != 0)

211 
AudioSèã
 = 
AUDIO_STATE_ERROR
;

212  
AUDIO_FAIL
;

216 
AudioSèã
 = 
AUDIO_STATE_STOPPED
;

217  
AUDIO_OK
;

221 
AUDIO_CMD_PAUSE
:

222 i‡(
AudioSèã
 !
AUDIO_STATE_PLAYING
)

225  
AUDIO_FAIL
;

227 i‡(
	`EVAL_AUDIO_Pau£Resume
(
AUDIO_PAUSE
, (
uöt32_t
)
pbuf
, (
size
/2)) != 0)

229 
AudioSèã
 = 
AUDIO_STATE_ERROR
;

230  
AUDIO_FAIL
;

234 
AudioSèã
 = 
AUDIO_STATE_PAUSED
;

235  
AUDIO_OK
;

240  
AUDIO_FAIL
;

242 
	}
}

250 
uöt8_t
 
	$VﬁumeCé
 (
uöt8_t
 
vﬁ
)

253 i‡(
	`EVAL_AUDIO_VﬁumeCé
(
vﬁ
) != 0)

255 
AudioSèã
 = 
AUDIO_STATE_ERROR
;

256  
AUDIO_FAIL
;

259  
AUDIO_OK
;

260 
	}
}

268 
uöt8_t
 
	$MuãCé
 (
uöt8_t
 
cmd
)

271 i‡(
	`EVAL_AUDIO_Muã
(
cmd
) != 0)

273 
AudioSèã
 = 
AUDIO_STATE_ERROR
;

274  
AUDIO_FAIL
;

277  
AUDIO_OK
;

278 
	}
}

287 
uöt8_t
 
	$PîiodicTC
 (
uöt8_t
 
cmd
)

291  
AUDIO_OK
;

292 
	}
}

301 
uöt8_t
 
	$GëSèã
 ()

303  
AudioSèã
;

304 
	}
}

	@libstm/STM32_USB_Device_Library/Class/cdc/inc/usbd_cdc_core.h

24 #i‚de‡
__USB_CDC_CORE_H_


25 
	#__USB_CDC_CORE_H_


	)

27 
	~"usbd_i‹eq.h
"

42 
	#USB_CDC_CONFIG_DESC_SIZ
 (67)

	)

43 
	#USB_CDC_DESC_SIZ
 (67-9)

	)

45 
	#CDC_DESCRIPTOR_TYPE
 0x21

	)

47 
	#DEVICE_CLASS_CDC
 0x02

	)

48 
	#DEVICE_SUBCLASS_CDC
 0x00

	)

51 
	#USB_DEVICE_DESCRIPTOR_TYPE
 0x01

	)

52 
	#USB_CONFIGURATION_DESCRIPTOR_TYPE
 0x02

	)

53 
	#USB_STRING_DESCRIPTOR_TYPE
 0x03

	)

54 
	#USB_INTERFACE_DESCRIPTOR_TYPE
 0x04

	)

55 
	#USB_ENDPOINT_DESCRIPTOR_TYPE
 0x05

	)

57 
	#STANDARD_ENDPOINT_DESC_SIZE
 0x09

	)

59 
	#CDC_DATA_IN_PACKET_SIZE
 *(
uöt16_t
 *)(((
USB_OTG_CORE_HANDLE
 *)
pdev
)->
dev
.
pC⁄fig_des¸ùt‹
 + 57)

	)

61 
	#CDC_DATA_OUT_PACKET_SIZE
 *(
uöt16_t
 *)(((
USB_OTG_CORE_HANDLE
 *)
pdev
)->
dev
.
pC⁄fig_des¸ùt‹
 + 64)

	)

70 
	#SEND_ENCAPSULATED_COMMAND
 0x00

	)

71 
	#GET_ENCAPSULATED_RESPONSE
 0x01

	)

72 
	#SET_COMM_FEATURE
 0x02

	)

73 
	#GET_COMM_FEATURE
 0x03

	)

74 
	#CLEAR_COMM_FEATURE
 0x04

	)

75 
	#SET_LINE_CODING
 0x20

	)

76 
	#GET_LINE_CODING
 0x21

	)

77 
	#SET_CONTROL_LINE_STATE
 0x22

	)

78 
	#SEND_BREAK
 0x23

	)

79 
	#NO_CMD
 0xFF

	)

89 
	s_CDC_IF_PROP


91 
uöt16_t
 (*
pIf_Inô
) ();

92 
uöt16_t
 (*
pIf_DeInô
) ();

93 
uöt16_t
 (*
pIf_Cål
Ë(
uöt32_t
 
	mCmd
, 
uöt8_t
* 
	mBuf
, uöt32_à
	mLí
);

94 
uöt16_t
 (*
pIf_D©aTx
Ë(
uöt8_t
* 
	mBuf
, 
uöt32_t
 
	mLí
);

95 
uöt16_t
 (*
pIf_D©aRx
Ë(
uöt8_t
* 
	mBuf
, 
uöt32_t
 
	mLí
);

97 
	tCDC_IF_Pr›_Ty≥Def
;

116 
USBD_Cœss_cb_Ty≥Def
 
USBD_CDC_cb
;

	@libstm/STM32_USB_Device_Library/Class/cdc/inc/usbd_cdc_if_template.h

23 #i‚de‡
__USBD_CDC_IF_TEMPLATE_H


24 
	#__USBD_CDC_IF_TEMPLATE_H


	)

27 #ifde‡
STM32F2XX


28 
	~"°m32f2xx.h
"

29 #ñi‡
deföed
(
STM32F10X_CL
)

30 
	~"°m32f10x.h
"

33 
	~"usbd_c⁄f.h
"

34 
	~"usbd_cdc_c‹e.h
"

39 
CDC_IF_Pr›_Ty≥Def
 
TEMPLATE_f›s
;

	@libstm/STM32_USB_Device_Library/Class/cdc/src/usbd_cdc_core.c

61 
	~"usbd_cdc_c‹e.h
"

62 
	~"usbd_desc.h
"

63 
	~"usbd_ªq.h
"

107 
uöt8_t
 
usbd_cdc_Inô
 (*
pdev
, uöt8_à
cfgidx
);

108 
uöt8_t
 
usbd_cdc_DeInô
 (*
pdev
, uöt8_à
cfgidx
);

109 
uöt8_t
 
usbd_cdc_Sëup
 (*
pdev
, 
USB_SETUP_REQ
 *
ªq
);

110 
uöt8_t
 
usbd_cdc_EP0_RxRódy
 (*
pdev
);

111 
uöt8_t
 
usbd_cdc_D©aIn
 (*
pdev
, uöt8_à
ïnum
);

112 
uöt8_t
 
usbd_cdc_D©aOut
 (*
pdev
, uöt8_à
ïnum
);

113 
uöt8_t
 
usbd_cdc_SOF
 (*
pdev
);

118 
H™dÀ_USBAsynchX„r
 (*
pdev
);

119 
uöt8_t
 *
USBD_cdc_GëCfgDesc
 (uöt8_à
•ìd
, 
uöt16_t
 *
Àngth
);

120 #ifde‡
USE_USB_OTG_HS


121 
uöt8_t
 *
USBD_cdc_GëOthîCfgDesc
 (uöt8_à
•ìd
, 
uöt16_t
 *
Àngth
);

130 
CDC_IF_Pr›_Ty≥Def
 
APP_FOPS
;

131 
uöt8_t
 
USBD_Devi˚Desc
 [
USB_SIZ_DEVICE_DESC
];

133 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


134 #i‡
deföed
 ( 
__ICCARM__
 )

135 #¥agm®
d©a_Æignmít
=4

138 
__ALIGN_BEGIN
 
uöt8_t
 
	gusbd_cdc_CfgDesc
 [
USB_CDC_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 ;

140 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


141 #i‡
deföed
 ( 
__ICCARM__
 )

142 #¥agm®
d©a_Æignmít
=4

145 
__ALIGN_BEGIN
 
uöt8_t
 
	gusbd_cdc_OthîCfgDesc
 [
USB_CDC_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 ;

147 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


148 #i‡
deföed
 ( 
__ICCARM__
 )

149 #¥agm®
d©a_Æignmít
=4

152 
__ALIGN_BEGIN
 
__IO
 
uöt32_t
 
usbd_cdc_A…Së
 
	g__ALIGN_END
 = 0;

154 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


155 #i‡
deföed
 ( 
__ICCARM__
 )

156 #¥agm®
d©a_Æignmít
=4

159 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSB_Rx_Buf„r
 [
CDC_DATA_MAX_PACKET_SIZE
] 
	g__ALIGN_END
 ;

161 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


162 #i‡
deföed
 ( 
__ICCARM__
 )

163 #¥agm®
d©a_Æignmít
=4

166 
__ALIGN_BEGIN
 
uöt8_t
 
	gAPP_Rx_Buf„r
 [
APP_RX_DATA_SIZE
] 
	g__ALIGN_END
 ;

169 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


170 #i‡
deföed
 ( 
__ICCARM__
 )

171 #¥agm®
d©a_Æignmít
=4

174 
__ALIGN_BEGIN
 
uöt8_t
 
	gCmdBuff
[
CDC_CMD_PACKET_SZE
] 
	g__ALIGN_END
 ;

176 
uöt32_t
 
	gAPP_Rx_±r_ö
 = 0;

177 
uöt32_t
 
	gAPP_Rx_±r_out
 = 0;

178 
uöt32_t
 
	gAPP_Rx_Àngth
 = 0;

180 
uöt8_t
 
	gUSB_Tx_Sèã
 = 0;

182 
uöt32_t
 
	gcdcCmd
 = 0xFF;

183 
uöt32_t
 
	gcdcLí
 = 0;

186 
USBD_Cœss_cb_Ty≥Def
 
	gUSBD_CDC_cb
 =

188 
usbd_cdc_Inô
,

189 
usbd_cdc_DeInô
,

190 
usbd_cdc_Sëup
,

191 
NULL
,

192 
usbd_cdc_EP0_RxRódy
,

193 
usbd_cdc_D©aIn
,

194 
usbd_cdc_D©aOut
,

195 
usbd_cdc_SOF
,

196 
NULL
,

197 
NULL
,

198 
USBD_cdc_GëCfgDesc
,

199 #ifde‡
USE_USB_OTG_HS


200 
USBD_cdc_GëOthîCfgDesc
,

204 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


205 #i‡
deföed
 ( 
__ICCARM__
 )

206 #¥agm®
d©a_Æignmít
=4

210 
__ALIGN_BEGIN
 
uöt8_t
 
	gusbd_cdc_CfgDesc
[
USB_CDC_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 =

214 
USB_CONFIGURATION_DESCRIPTOR_TYPE
,

215 
USB_CDC_CONFIG_DESC_SIZ
,

227 
USB_INTERFACE_DESCRIPTOR_TYPE
,

266 
USB_ENDPOINT_DESCRIPTOR_TYPE
,

267 
CDC_CMD_EP
,

269 
LOBYTE
(
CDC_CMD_PACKET_SZE
),

270 
HIBYTE
(
CDC_CMD_PACKET_SZE
),

271 #ifde‡
USE_USB_OTG_HS


281 
USB_INTERFACE_DESCRIPTOR_TYPE
,

292 
USB_ENDPOINT_DESCRIPTOR_TYPE
,

293 
CDC_OUT_EP
,

295 
LOBYTE
(
CDC_DATA_MAX_PACKET_SIZE
),

296 
HIBYTE
(
CDC_DATA_MAX_PACKET_SIZE
),

301 
USB_ENDPOINT_DESCRIPTOR_TYPE
,

302 
CDC_IN_EP
,

304 
LOBYTE
(
CDC_DATA_MAX_PACKET_SIZE
),

305 
HIBYTE
(
CDC_DATA_MAX_PACKET_SIZE
),

309 #ifde‡
USE_USB_OTG_HS


310 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


311 #i‡
deföed
 ( 
__ICCARM__
 )

312 #¥agm®
d©a_Æignmít
=4

315 
__ALIGN_BEGIN
 
uöt8_t
 
	gusbd_cdc_OthîCfgDesc
[
USB_CDC_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 =

318 
USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
,

319 
USB_CDC_CONFIG_DESC_SIZ
,

329 
USB_INTERFACE_DESCRIPTOR_TYPE
,

368 
USB_ENDPOINT_DESCRIPTOR_TYPE
,

369 
CDC_CMD_EP
,

371 
LOBYTE
(
CDC_CMD_PACKET_SZE
),

372 
HIBYTE
(
CDC_CMD_PACKET_SZE
),

379 
USB_INTERFACE_DESCRIPTOR_TYPE
,

390 
USB_ENDPOINT_DESCRIPTOR_TYPE
,

391 
CDC_OUT_EP
,

399 
USB_ENDPOINT_DESCRIPTOR_TYPE
,

400 
CDC_IN_EP
,

423 
uöt8_t
 
	$usbd_cdc_Inô
 (*
pdev
,

424 
uöt8_t
 
cfgidx
)

426 
uöt8_t
 *
pbuf
;

428 
	`DCD_EP_O≥n
(
pdev
,

429 
CDC_IN_EP
,

430 
CDC_DATA_IN_PACKET_SIZE
,

431 
USB_OTG_EP_BULK
);

434 
	`DCD_EP_O≥n
(
pdev
,

435 
CDC_OUT_EP
,

436 
CDC_DATA_OUT_PACKET_SIZE
,

437 
USB_OTG_EP_BULK
);

440 
	`DCD_EP_O≥n
(
pdev
,

441 
CDC_CMD_EP
,

442 
CDC_CMD_PACKET_SZE
,

443 
USB_OTG_EP_INT
);

445 
pbuf
 = (
uöt8_t
 *)
USBD_Devi˚Desc
;

446 
pbuf
[4] = 
DEVICE_CLASS_CDC
;

447 
pbuf
[5] = 
DEVICE_SUBCLASS_CDC
;

451 
APP_FOPS
.
	`pIf_Inô
();

455 
	`DCD_EP_Pª∑ªRx
(
pdev
,

456 
CDC_OUT_EP
,

457 (
uöt8_t
*)(
USB_Rx_Buf„r
),

458 
CDC_DATA_OUT_PACKET_SIZE
);

460  
USBD_OK
;

461 
	}
}

470 
uöt8_t
 
	$usbd_cdc_DeInô
 (*
pdev
,

471 
uöt8_t
 
cfgidx
)

474 
	`DCD_EP_Clo£
(
pdev
,

475 
CDC_IN_EP
);

478 
	`DCD_EP_Clo£
(
pdev
,

479 
CDC_OUT_EP
);

482 
	`DCD_EP_Clo£
(
pdev
,

483 
CDC_CMD_EP
);

486 
APP_FOPS
.
	`pIf_DeInô
();

488  
USBD_OK
;

489 
	}
}

498 
uöt8_t
 
	$usbd_cdc_Sëup
 (*
pdev
,

499 
USB_SETUP_REQ
 *
ªq
)

501 
uöt16_t
 
Àn
;

502 
uöt8_t
 *
pbuf
;

504 
ªq
->
bmReque°
 & 
USB_REQ_TYPE_MASK
)

507 
USB_REQ_TYPE_CLASS
 :

509 i‡(
ªq
->
wLígth
)

512 i‡(
ªq
->
bmReque°
 & 0x80)

515 
APP_FOPS
.
	`pIf_Cål
(
ªq
->
bReque°
, 
CmdBuff
,Ñeq->
wLígth
);

518 
	`USBD_CéSídD©a
 (
pdev
,

519 
CmdBuff
,

520 
ªq
->
wLígth
);

525 
cdcCmd
 = 
ªq
->
bReque°
;

526 
cdcLí
 = 
ªq
->
wLígth
;

531 
	`USBD_CéPª∑ªRx
 (
pdev
,

532 
CmdBuff
,

533 
ªq
->
wLígth
);

539 
APP_FOPS
.
	`pIf_Cål
(
ªq
->
bReque°
, 
NULL
, 0);

542  
USBD_OK
;

545 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

546  
USBD_FAIL
;

551 
USB_REQ_TYPE_STANDARD
:

552 
ªq
->
bReque°
)

554 
USB_REQ_GET_DESCRIPTOR
:

555 if–(
ªq
->
wVÆue
 >> 8Ë=
CDC_DESCRIPTOR_TYPE
)

557 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


558 
pbuf
 = 
usbd_cdc_Desc
;

560 
pbuf
 = 
usbd_cdc_CfgDesc
 + 9 + (9 * 
USBD_ITF_MAX_NUM
);

562 
Àn
 = 
	`MIN
(
USB_CDC_DESC_SIZ
 , 
ªq
->
wLígth
);

565 
	`USBD_CéSídD©a
 (
pdev
,

566 
pbuf
,

567 
Àn
);

570 
USB_REQ_GET_INTERFACE
 :

571 
	`USBD_CéSídD©a
 (
pdev
,

572 (
uöt8_t
 *)&
usbd_cdc_A…Së
,

576 
USB_REQ_SET_INTERFACE
 :

577 i‡((
uöt8_t
)(
ªq
->
wVÆue
Ë< 
USBD_ITF_MAX_NUM
)

579 
usbd_cdc_A…Së
 = (
uöt8_t
)(
ªq
->
wVÆue
);

584 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

589  
USBD_OK
;

590 
	}
}

598 
uöt8_t
 
	$usbd_cdc_EP0_RxRódy
 (*
pdev
)

600 i‡(
cdcCmd
 !
NO_CMD
)

603 
APP_FOPS
.
	`pIf_Cål
(
cdcCmd
, 
CmdBuff
, 
cdcLí
);

606 
cdcCmd
 = 
NO_CMD
;

609  
USBD_OK
;

610 
	}
}

619 
uöt8_t
 
	$usbd_cdc_D©aIn
 (*
pdev
, 
uöt8_t
 
ïnum
)

621 
uöt16_t
 
USB_Tx_±r
;

622 
uöt16_t
 
USB_Tx_Àngth
;

624 i‡(
USB_Tx_Sèã
 == 1)

626 i‡(
APP_Rx_Àngth
 == 0)

628 
USB_Tx_Sèã
 = 0;

632 i‡(
APP_Rx_Àngth
 > 
CDC_DATA_IN_PACKET_SIZE
){

633 
USB_Tx_±r
 = 
APP_Rx_±r_out
;

634 
USB_Tx_Àngth
 = 
CDC_DATA_IN_PACKET_SIZE
;

636 
APP_Rx_±r_out
 +
CDC_DATA_IN_PACKET_SIZE
;

637 
APP_Rx_Àngth
 -
CDC_DATA_IN_PACKET_SIZE
;

641 
USB_Tx_±r
 = 
APP_Rx_±r_out
;

642 
USB_Tx_Àngth
 = 
APP_Rx_Àngth
;

644 
APP_Rx_±r_out
 +
APP_Rx_Àngth
;

645 
APP_Rx_Àngth
 = 0;

649 
	`DCD_EP_Tx
 (
pdev
,

650 
CDC_IN_EP
,

651 (
uöt8_t
*)&
APP_Rx_Buf„r
[
USB_Tx_±r
],

652 
USB_Tx_Àngth
);

656  
USBD_OK
;

657 
	}
}

666 
uöt8_t
 
	$usbd_cdc_D©aOut
 (*
pdev
, 
uöt8_t
 
ïnum
)

668 
uöt16_t
 
USB_Rx_C¡
;

671 
USB_Rx_C¡
 = ((
USB_OTG_CORE_HANDLE
*)
pdev
)->
dev
.
out_ï
[
ïnum
].
x„r_cou¡
;

675 
APP_FOPS
.
	`pIf_D©aRx
(
USB_Rx_Buf„r
, 
USB_Rx_C¡
);

678 
	`DCD_EP_Pª∑ªRx
(
pdev
,

679 
CDC_OUT_EP
,

680 (
uöt8_t
*)(
USB_Rx_Buf„r
),

681 
CDC_DATA_OUT_PACKET_SIZE
);

683  
USBD_OK
;

684 
	}
}

693 
uöt8_t
 
	$usbd_cdc_SOF
 (*
pdev
)

695 
uöt32_t
 
FømeCou¡
 = 0;

697 i‡(
FømeCou¡
++ =
CDC_IN_FRAME_INTERVAL
)

700 
FømeCou¡
 = 0;

703 
	`H™dÀ_USBAsynchX„r
(
pdev
);

706  
USBD_OK
;

707 
	}
}

715 
	$H™dÀ_USBAsynchX„r
 (*
pdev
)

717 
uöt16_t
 
USB_Tx_±r
;

718 
uöt16_t
 
USB_Tx_Àngth
;

720 if(
USB_Tx_Sèã
 != 1)

722 i‡(
APP_Rx_±r_out
 =
APP_RX_DATA_SIZE
)

724 
APP_Rx_±r_out
 = 0;

727 if(
APP_Rx_±r_out
 =
APP_Rx_±r_ö
)

729 
USB_Tx_Sèã
 = 0;

733 if(
APP_Rx_±r_out
 > 
APP_Rx_±r_ö
)

735 
APP_Rx_Àngth
 = 
APP_RX_DATA_SIZE
 - 
APP_Rx_±r_out
;

740 
APP_Rx_Àngth
 = 
APP_Rx_±r_ö
 - 
APP_Rx_±r_out
;

743 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


744 
APP_Rx_Àngth
 &= ~0x03;

747 i‡(
APP_Rx_Àngth
 > 
CDC_DATA_IN_PACKET_SIZE
)

749 
USB_Tx_±r
 = 
APP_Rx_±r_out
;

750 
USB_Tx_Àngth
 = 
CDC_DATA_IN_PACKET_SIZE
;

752 
APP_Rx_±r_out
 +
CDC_DATA_IN_PACKET_SIZE
;

753 
APP_Rx_Àngth
 -
CDC_DATA_IN_PACKET_SIZE
;

757 
USB_Tx_±r
 = 
APP_Rx_±r_out
;

758 
USB_Tx_Àngth
 = 
APP_Rx_Àngth
;

760 
APP_Rx_±r_out
 +
APP_Rx_Àngth
;

761 
APP_Rx_Àngth
 = 0;

763 
USB_Tx_Sèã
 = 1;

765 
	`DCD_EP_Tx
 (
pdev
,

766 
CDC_IN_EP
,

767 (
uöt8_t
*)&
APP_Rx_Buf„r
[
USB_Tx_±r
],

768 
USB_Tx_Àngth
);

771 
	}
}

780 
uöt8_t
 *
	$USBD_cdc_GëCfgDesc
 (
uöt8_t
 
•ìd
, 
uöt16_t
 *
Àngth
)

782 *
Àngth
 =  (
usbd_cdc_CfgDesc
);

783  
usbd_cdc_CfgDesc
;

784 
	}
}

793 #ifde‡
USE_USB_OTG_HS


794 
uöt8_t
 *
	$USBD_cdc_GëOthîCfgDesc
 (
uöt8_t
 
•ìd
, 
uöt16_t
 *
Àngth
)

796 *
Àngth
 =  (
usbd_cdc_OthîCfgDesc
);

797  
usbd_cdc_OthîCfgDesc
;

798 
	}
}

	@libstm/STM32_USB_Device_Library/Class/cdc/src/usbd_cdc_if_template.c

22 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


23 #¥agm®
d©a_Æignmít
 = 4

27 
	~"usbd_cdc_if_ãm∂©e.h
"

28 
	~"°m32_evÆ.h
"

36 
uöt8_t
 
APP_Rx_Buf„r
 [];

39 
uöt32_t
 
APP_Rx_±r_ö
;

44 
uöt16_t
 
TEMPLATE_Inô
 ();

45 
uöt16_t
 
TEMPLATE_DeInô
 ();

46 
uöt16_t
 
TEMPLATE_Cål
 (
uöt32_t
 
Cmd
, 
uöt8_t
* 
Buf
, uöt32_à
Lí
);

47 
uöt16_t
 
TEMPLATE_D©aTx
 (
uöt8_t
* 
Buf
, 
uöt32_t
 
Lí
);

48 
uöt16_t
 
TEMPLATE_D©aRx
 (
uöt8_t
* 
Buf
, 
uöt32_t
 
Lí
);

50 
CDC_IF_Pr›_Ty≥Def
 
	gTEMPLATE_f›s
 =

52 
TEMPLATE_Inô
,

53 
TEMPLATE_DeInô
,

54 
TEMPLATE_Cål
,

55 
TEMPLATE_D©aTx
,

56 
TEMPLATE_D©aRx


67 
uöt16_t
 
	$TEMPLATE_Inô
()

72  
USBD_OK
;

73 
	}
}

81 
uöt16_t
 
	$TEMPLATE_DeInô
()

86  
USBD_OK
;

87 
	}
}

98 
uöt16_t
 
	$TEMPLATE_Cål
 (
uöt32_t
 
Cmd
, 
uöt8_t
* 
Buf
, uöt32_à
Lí
)

100 
Cmd
)

102 
SEND_ENCAPSULATED_COMMAND
:

106 
GET_ENCAPSULATED_RESPONSE
:

110 
SET_COMM_FEATURE
:

114 
GET_COMM_FEATURE
:

118 
CLEAR_COMM_FEATURE
:

122 
SET_LINE_CODING
:

126 
GET_LINE_CODING
:

130 
SET_CONTROL_LINE_STATE
:

134 
SEND_BREAK
:

142  
USBD_OK
;

143 
	}
}

153 
uöt16_t
 
	$TEMPLATE_D©aTx
 (
uöt8_t
* 
Buf
, 
uöt32_t
 
Lí
)

157 
i
 = 0; i < 
Lí
; i++)

163 
APP_Rx_±r_ö
++;

166 if(
APP_Rx_±r_ö
 =
APP_RX_DATA_SIZE
)

168 
APP_Rx_±r_ö
 = 0;

171  
USBD_OK
;

172 
	}
}

189 
uöt16_t
 
	$TEMPLATE_D©aRx
 (
uöt8_t
* 
Buf
, 
uöt32_t
 
Lí
)

191 
uöt32_t
 
i
;

194 
i
 = 0; i < 
Lí
; i++)

199  
USBD_OK
;

200 
	}
}

	@libstm/STM32_USB_Device_Library/Class/dfu/inc/usbd_dfu_core.h

24 #i‚de‡
__USB_DFU_CORE_H_


25 
	#__USB_DFU_CORE_H_


	)

27 
	~"usbd_i‹eq.h
"

28 
	~"usbd_dfu_mÆ.h
"

43 
	#USB_DFU_CONFIG_DESC_SIZ
 (18 + (9 * 
USBD_ITF_MAX_NUM
))

	)

44 
	#USB_DFU_DESC_SIZ
 9

	)

46 
	#DFU_DESCRIPTOR_TYPE
 0x21

	)

60 
	#STATE_≠pIDLE
 0

	)

61 
	#STATE_≠pDETACH
 1

	)

62 
	#STATE_dfuIDLE
 2

	)

63 
	#STATE_dfuDNLOAD_SYNC
 3

	)

64 
	#STATE_dfuDNBUSY
 4

	)

65 
	#STATE_dfuDNLOAD_IDLE
 5

	)

66 
	#STATE_dfuMANIFEST_SYNC
 6

	)

67 
	#STATE_dfuMANIFEST
 7

	)

68 
	#STATE_dfuMANIFEST_WAIT_RESET
 8

	)

69 
	#STATE_dfuUPLOAD_IDLE
 9

	)

70 
	#STATE_dfuERROR
 10

	)

76 
	#STATUS_OK
 0x00

	)

77 
	#STATUS_ERRTARGET
 0x01

	)

78 
	#STATUS_ERRFILE
 0x02

	)

79 
	#STATUS_ERRWRITE
 0x03

	)

80 
	#STATUS_ERRERASE
 0x04

	)

81 
	#STATUS_ERRCHECK_ERASED
 0x05

	)

82 
	#STATUS_ERRPROG
 0x06

	)

83 
	#STATUS_ERRVERIFY
 0x07

	)

84 
	#STATUS_ERRADDRESS
 0x08

	)

85 
	#STATUS_ERRNOTDONE
 0x09

	)

86 
	#STATUS_ERRFIRMWARE
 0x0A

	)

87 
	#STATUS_ERRVENDOR
 0x0B

	)

88 
	#STATUS_ERRUSBR
 0x0C

	)

89 
	#STATUS_ERRPOR
 0x0D

	)

90 
	#STATUS_ERRUNKNOWN
 0x0E

	)

91 
	#STATUS_ERRSTALLEDPKT
 0x0F

	)

97 
	#M™i„°_com∂ëe
 0x00

	)

98 
	#M™i„°_In_Progªss
 0x01

	)

105 
	#CMD_GETCOMMANDS
 0x00

	)

106 
	#CMD_SETADDRESSPOINTER
 0x21

	)

107 
	#CMD_ERASE
 0x41

	)

113 
	#DFU_DETACH_MASK
 (
uöt8_t
)(1 << 4)

	)

126 
	e_DFU_REQUESTS
 {

127 
	mDFU_DETACH
 = 0,

128 
	mDFU_DNLOAD
 = 1,

129 
	mDFU_UPLOAD
,

130 
	mDFU_GETSTATUS
,

131 
	mDFU_CLRSTATUS
,

132 
	mDFU_GETSTATE
,

133 
	mDFU_ABORT


134 } 
	tDFU_REQUESTS
;

136 (*
	tpFun˘i⁄
)();

147 
	#USBD_DFU_IF_DESC
(
n
) 0x09, \

148 
USB_INTERFACE_DESCRIPTOR_TYPE
, \

150 (
n
), \

155 
USBD_IDX_INTERFACE_STR
 + (
n
) + 1 \

156 

	)

166 
USBD_Cœss_cb_Ty≥Def
 
DFU_cb
;

	@libstm/STM32_USB_Device_Library/Class/dfu/inc/usbd_dfu_mal.h

23 #i‚de‡
__DFU_MAL_H


24 
	#__DFU_MAL_H


	)

27 #ifde‡
STM32F2XX


28 
	~"°m32f2xx.h
"

29 #ñi‡
deföed
(
STM32F10X_CL
)

30 
	~"°m32f10x.h
"

33 
	~"usbd_c⁄f.h
"

34 
	~"usbd_dfu_c‹e.h
"

37 
	s_DFU_MAL_PROP


39 c⁄° 
uöt8_t
* 
	mpSåDesc
;

40 
uöt16_t
 (*
pMAL_Inô
) ();

41 
uöt16_t
 (*
pMAL_DeInô
) ();

42 
uöt16_t
 (*
pMAL_Eø£
Ë(
uöt32_t
 
	mAdd
);

43 
uöt16_t
 (*
pMAL_Wrôe
Ë(
uöt32_t
 
	mAdd
, uöt32_à
	mLí
);

44 
	muöt8_t
 *(*
	mpMAL_Ród
Ë(
uöt32_t
 
	mAdd
, uöt32_à
	mLí
);

45 
uöt16_t
 (*
pMAL_CheckAdd
Ë(
uöt32_t
 
	mAdd
);

46 c⁄° 
uöt32_t
 
	mEø£Timög
;

47 c⁄° 
uöt32_t
 
	mWrôeTimög
;

49 
	tDFU_MAL_Pr›_Ty≥Def
;

53 
	#MAL_OK
 0

	)

54 
	#MAL_FAIL
 1

	)

57 
	#_1°_BYTE
(
x
Ë(
uöt8_t
)((x)&0xFFË

	)

58 
	#_2nd_BYTE
(
x
Ë(
uöt8_t
)(((x)&0xFF00)>>8Ë

	)

59 
	#_3rd_BYTE
(
x
Ë(
uöt8_t
)(((x)&0xFF0000)>>16Ë

	)

60 
	#_4th_BYTE
(
x
Ë(
uöt8_t
)(((x)&0xFF000000)>>24Ë

	)

63 
	#SET_POLLING_TIMING
(
x
Ë
buf„r
[1] = 
	`_1°_BYTE
(x);\

64 
buf„r
[2] = 
	`_2nd_BYTE
(
x
);\

65 
buf„r
[3] = 
	`_3rd_BYTE
(
x
);

	)

69 
uöt16_t
 
MAL_Inô
 ();

70 
uöt16_t
 
MAL_DeInô
 ();

71 
uöt16_t
 
MAL_Eø£
 (
uöt32_t
 
Se˘‹Addªss
);

72 
uöt16_t
 
MAL_Wrôe
 (
uöt32_t
 
Se˘‹Addªss
, uöt32_à
D©aLígth
);

73 
uöt8_t
 *
MAL_Ród
 (
uöt32_t
 
Se˘‹Addªss
, uöt32_à
D©aLígth
);

74 
uöt16_t
 
MAL_GëSètus
(
uöt32_t
 
Se˘‹Addªss
 ,
uöt8_t
 
Cmd
, uöt8_à*
buf„r
);

76 
uöt8_t
 
MAL_Buf„r
[
XFERSIZE
];

	@libstm/STM32_USB_Device_Library/Class/dfu/inc/usbd_flash_if.h

23 #i‚de‡
__FLASH_IF_MAL_H


24 
	#__FLASH_IF_MAL_H


	)

27 
	~"usbd_dfu_mÆ.h
"

31 
	#FLASH_START_ADD
 0x08000000

	)

33 #ifde‡
STM32F2XX


34 
	#FLASH_END_ADD
 0x08100000

	)

35 
	#FLASH_IF_STRING
 "@I¡î«»Fœsh /0x08000000/03*016Ka,01*016Kg,01*064Kg,07*128Kg"

	)

36 #ñi‡
deföed
(
STM32F10X_CL
)

37 
	#FLASH_END_ADD
 0x08040000

	)

38 
	#FLASH_IF_STRING
 "@I¡î«»Fœsh /0x08000000/06*002Ka,122*002Kg"

	)

42 
DFU_MAL_Pr›_Ty≥Def
 
DFU_Fœsh_cb
;

	@libstm/STM32_USB_Device_Library/Class/dfu/inc/usbd_mem_if_template.h

23 #i‚de‡
__MEM_IF_MAL_H


24 
	#__MEM_IF_MAL_H


	)

27 #ifde‡
STM32F2XX


28 
	~"°m32f2xx.h
"

30 
	~"usbd_dfu_mÆ.h
"

34 
	#MEM_START_ADD
 0x00000000

	)

35 
	#MEM_END_ADD
 (
uöt32_t
)(
MEM_START_ADD
 + (5 * 1024)Ë

	)

37 
	#MEM_IF_STRING
 "@Dummy Mem‹y /0x00000000/01*002Kg,03*001Kg"

	)

39 
DFU_MAL_Pr›_Ty≥Def
 
DFU_Mem_cb
;

	@libstm/STM32_USB_Device_Library/Class/dfu/inc/usbd_otp_if.h

23 #i‚de‡
__OTP_IF_MAL_H


24 
	#__OTP_IF_MAL_H


	)

27 
	~"usbd_dfu_mÆ.h
"

31 
	#OTP_START_ADD
 0x1FFF7800

	)

32 
	#OTP_END_ADD
 (
uöt32_t
)(
OTP_START_ADD
 + 528)

	)

34 
	#OTP_IF_STRING
 "@OTP Aª® /0x1FFF7800/01*512 g,01*016 g"

	)

36 
DFU_MAL_Pr›_Ty≥Def
 
DFU_Oç_cb
;

	@libstm/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_core.c

59 
	~"usbd_dfu_c‹e.h
"

60 
	~"usbd_desc.h
"

61 
	~"usbd_ªq.h
"

62 
	~"usb_b•.h
"

106 
uöt8_t
 
usbd_dfu_Inô
 (*
pdev
,

107 
uöt8_t
 
cfgidx
);

109 
uöt8_t
 
usbd_dfu_DeInô
 (*
pdev
,

110 
uöt8_t
 
cfgidx
);

112 
uöt8_t
 
usbd_dfu_Sëup
 (*
pdev
,

113 
USB_SETUP_REQ
 *
ªq
);

115 
uöt8_t
 
EP0_TxSít
 (*
pdev
);

117 
uöt8_t
 
EP0_RxRódy
 (*
pdev
);

120 
uöt8_t
 *
USBD_DFU_GëCfgDesc
 (uöt8_à
•ìd
,

121 
uöt16_t
 *
Àngth
);

124 #ifde‡
USB_OTG_HS_CORE


125 
uöt8_t
 *
USBD_DFU_GëOthîCfgDesc
 (uöt8_à
•ìd
,

126 
uöt16_t
 *
Àngth
);

129 
uöt8_t
* 
USBD_DFU_GëU§SåögDesc
 (uöt8_à
•ìd
,

130 
uöt8_t
 
ödex
 ,

131 
uöt16_t
 *
Àngth
);

136 
DFU_Req_DETACH
 (*
pdev
,

137 
USB_SETUP_REQ
 *
ªq
);

139 
DFU_Req_DNLOAD
 (*
pdev
,

140 
USB_SETUP_REQ
 *
ªq
);

142 
DFU_Req_UPLOAD
 (*
pdev
,

143 
USB_SETUP_REQ
 *
ªq
);

145 
DFU_Req_GETSTATUS
 (*
pdev
);

147 
DFU_Req_CLRSTATUS
 (*
pdev
);

149 
DFU_Req_GETSTATE
 (*
pdev
);

151 
DFU_Req_ABORT
 (*
pdev
);

153 
DFU_LóveDFUMode
 (*
pdev
);

162 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


163 #i‡
deföed
 ( 
__ICCARM__
 )

164 #¥agm®
d©a_Æignmít
=4

167 
__ALIGN_BEGIN
 
uöt8_t
 
	gusbd_dfu_CfgDesc
[
USB_DFU_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 ;

170 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


171 #i‡
deföed
 ( 
__ICCARM__
 )

172 #¥agm®
d©a_Æignmít
=4

175 
__ALIGN_BEGIN
 
uöt8_t
 
	gusbd_dfu_OthîCfgDesc
[
USB_DFU_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 ;

179 c⁄° 
uöt8_t
* 
usbd_dfu_SåögDesc
[];

182 
uöt8_t
 
	gDevi˚Sèã
;

183 
uöt8_t
 
	gDevi˚Sètus
[6];

184 
uöt32_t
 
	gM™i„°_Sèã
 = 
M™i„°_com∂ëe
;

186 
uöt32_t
 
	gwBlockNum
 = 0, 
	gwÀngth
 = 0;

187 
uöt32_t
 
	gPoöãr
 = 
APP_DEFAULT_ADD
;

188 
__IO
 
uöt32_t
 
	gusbd_dfu_A…Së
 = 0;

190 
uöt8_t
 
MAL_Buf„r
[];

193 
USBD_Cœss_cb_Ty≥Def
 
	gDFU_cb
 =

195 
usbd_dfu_Inô
,

196 
usbd_dfu_DeInô
,

197 
usbd_dfu_Sëup
,

198 
EP0_TxSít
,

199 
EP0_RxRódy
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
USBD_DFU_GëCfgDesc
,

206 #ifde‡
USB_OTG_HS_CORE


207 
USBD_DFU_GëOthîCfgDesc
,

209 
USBD_DFU_GëU§SåögDesc
,

212 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


213 #i‡
deföed
 ( 
__ICCARM__
 )

214 #¥agm®
d©a_Æignmít
=4

218 
__ALIGN_BEGIN
 
uöt8_t
 
	gusbd_dfu_CfgDesc
[
USB_DFU_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 =

221 
USB_CONFIGURATION_DESCRIPTOR_TYPE
,

222 
USB_DFU_CONFIG_DESC_SIZ
,

233 
USBD_DFU_IF_DESC
(0),

235 #i‡(
USBD_ITF_MAX_NUM
 > 1)

237 
USBD_DFU_IF_DESC
(1),

240 #i‡(
USBD_ITF_MAX_NUM
 > 2)

242 
USBD_DFU_IF_DESC
(2),

245 #i‡(
USBD_ITF_MAX_NUM
 > 3)

247 
USBD_DFU_IF_DESC
(3),

250 #i‡(
USBD_ITF_MAX_NUM
 > 4)

252 
USBD_DFU_IF_DESC
(4),

255 #i‡(
USBD_ITF_MAX_NUM
 > 5)

257 
USBD_DFU_IF_DESC
(5),

260 #i‡(
USBD_ITF_MAX_NUM
 > 6)

266 
DFU_DESCRIPTOR_TYPE
,

278 
TRANSFER_SIZE_BYTES
(
XFERSIZE
),

285 #ifde‡
USE_USB_OTG_HS


286 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


287 #i‡
deföed
 ( 
__ICCARM__
 )

288 #¥agm®
d©a_Æignmít
=4

292 
__ALIGN_BEGIN
 
uöt8_t
 
	gusbd_dfu_OthîCfgDesc
[
USB_DFU_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 =

295 
USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
,

296 
USB_DFU_CONFIG_DESC_SIZ
,

307 
USBD_DFU_IF_DESC
(0),

309 #i‡(
USBD_ITF_MAX_NUM
 > 1)

311 
USBD_DFU_IF_DESC
(1),

314 #i‡(
USBD_ITF_MAX_NUM
 > 2)

316 
USBD_DFU_IF_DESC
(2),

319 #i‡(
USBD_ITF_MAX_NUM
 > 3)

321 
USBD_DFU_IF_DESC
(3),

324 #i‡(
USBD_ITF_MAX_NUM
 > 4)

326 
USBD_DFU_IF_DESC
(4),

329 #i‡(
USBD_ITF_MAX_NUM
 > 5)

331 
USBD_DFU_IF_DESC
(5),

334 #i‡(
USBD_ITF_MAX_NUM
 > 6)

340 
DFU_DESCRIPTOR_TYPE
,

352 
TRANSFER_SIZE_BYTES
(
XFERSIZE
),

360 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


361 #i‡
deföed
 ( 
__ICCARM__
 )

362 #¥agm®
d©a_Æignmít
=4

365 
__ALIGN_BEGIN
 
uöt8_t
 
	gusbd_dfu_Desc
[
USB_DFU_DESC_SIZ
] 
	g__ALIGN_END
 =

368 
DFU_DESCRIPTOR_TYPE
,

380 
TRANSFER_SIZE_BYTES
(
XFERSIZE
),

401 
uöt8_t
 
	$usbd_dfu_Inô
 (*
pdev
,

402 
uöt8_t
 
cfgidx
)

405 
	`MAL_Inô
();

408 
Devi˚Sèã
 = 
STATE_dfuIDLE
;

409 
Devi˚Sètus
[0] = 
STATUS_OK
;

410 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

412  
USBD_OK
;

413 
	}
}

422 
uöt8_t
 
	$usbd_dfu_DeInô
 (*
pdev
,

423 
uöt8_t
 
cfgidx
)

426 
Devi˚Sèã
 = 
STATE_dfuIDLE
;

427 
Devi˚Sètus
[0] = 
STATUS_OK
;

428 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

429 
wBlockNum
 = 0;

430 
wÀngth
 = 0;

433 
	`MAL_DeInô
();

435  
USBD_OK
;

436 
	}
}

445 
uöt8_t
 
	$usbd_dfu_Sëup
 (*
pdev
,

446 
USB_SETUP_REQ
 *
ªq
)

448 
uöt16_t
 
Àn
 = 0;

449 
uöt8_t
 *
pbuf
 = 
NULL
;

451 
ªq
->
bmReque°
 & 
USB_REQ_TYPE_MASK
)

454 
USB_REQ_TYPE_CLASS
 :

455 
ªq
->
bReque°
)

457 
DFU_DNLOAD
:

458 
	`DFU_Req_DNLOAD
(
pdev
, 
ªq
);

461 
DFU_UPLOAD
:

462 
	`DFU_Req_UPLOAD
(
pdev
, 
ªq
);

465 
DFU_GETSTATUS
:

466 
	`DFU_Req_GETSTATUS
(
pdev
);

469 
DFU_CLRSTATUS
:

470 
	`DFU_Req_CLRSTATUS
(
pdev
);

473 
DFU_GETSTATE
:

474 
	`DFU_Req_GETSTATE
(
pdev
);

477 
DFU_ABORT
:

478 
	`DFU_Req_ABORT
(
pdev
);

481 
DFU_DETACH
:

482 
	`DFU_Req_DETACH
(
pdev
, 
ªq
);

486 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

487  
USBD_FAIL
;

492 
USB_REQ_TYPE_STANDARD
:

493 
ªq
->
bReque°
)

495 
USB_REQ_GET_DESCRIPTOR
:

496 if–(
ªq
->
wVÆue
 >> 8Ë=
DFU_DESCRIPTOR_TYPE
)

498 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


499 
pbuf
 = 
usbd_dfu_Desc
;

501 
pbuf
 = 
usbd_dfu_CfgDesc
 + 9 + (9 * 
USBD_ITF_MAX_NUM
);

503 
Àn
 = 
	`MIN
(
USB_DFU_DESC_SIZ
 , 
ªq
->
wLígth
);

506 
	`USBD_CéSídD©a
 (
pdev
,

507 
pbuf
,

508 
Àn
);

511 
USB_REQ_GET_INTERFACE
 :

512 
	`USBD_CéSídD©a
 (
pdev
,

513 (
uöt8_t
 *)&
usbd_dfu_A…Së
,

517 
USB_REQ_SET_INTERFACE
 :

518 i‡((
uöt8_t
)(
ªq
->
wVÆue
Ë< 
USBD_ITF_MAX_NUM
)

520 
usbd_dfu_A…Së
 = (
uöt8_t
)(
ªq
->
wVÆue
);

525 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

530  
USBD_OK
;

531 
	}
}

539 
uöt8_t
 
	$EP0_TxSít
 (*
pdev
)

541 
uöt32_t
 
Addr
;

542 
USB_SETUP_REQ
 
ªq
;

544 i‡(
Devi˚Sèã
 =
STATE_dfuDNBUSY
)

547 i‡(
wBlockNum
 == 0)

549 i‡((
MAL_Buf„r
[0] =
CMD_GETCOMMANDS
Ë&& (
wÀngth
 == 1))

551 i‡(–
MAL_Buf„r
[0] =
CMD_SETADDRESSPOINTER
 ) && (
wÀngth
 == 5))

553 
Poöãr
 = 
MAL_Buf„r
[1];

554 
Poöãr
 +
MAL_Buf„r
[2] << 8;

555 
Poöãr
 +
MAL_Buf„r
[3] << 16;

556 
Poöãr
 +
MAL_Buf„r
[4] << 24;

558 i‡(–
MAL_Buf„r
[0] =
CMD_ERASE
 ) && (
wÀngth
 == 5))

560 
Poöãr
 = 
MAL_Buf„r
[1];

561 
Poöãr
 +
MAL_Buf„r
[2] << 8;

562 
Poöãr
 +
MAL_Buf„r
[3] << 16;

563 
Poöãr
 +
MAL_Buf„r
[4] << 24;

564 
	`MAL_Eø£
(
Poöãr
);

569 
wÀngth
 = 0;

570 
wBlockNum
 = 0;

572 
ªq
.
bmReque°
 = 0;

573 
ªq
.
wLígth
 = 1;

574 
	`USBD_CéEº‹
 (
pdev
, &
ªq
);

578 i‡(
wBlockNum
 > 1)

581 
Addr
 = ((
wBlockNum
 - 2Ë* 
XFERSIZE
Ë+ 
Poöãr
;

584 
	`MAL_Wrôe
(
Addr
, 
wÀngth
);

587 
wÀngth
 = 0;

588 
wBlockNum
 = 0;

591 
Devi˚Sèã
 = 
STATE_dfuDNLOAD_SYNC
;

592 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

593 
Devi˚Sètus
[1] = 0;

594 
Devi˚Sètus
[2] = 0;

595 
Devi˚Sètus
[3] = 0;

596  
USBD_OK
;

598 i‡(
Devi˚Sèã
 =
STATE_dfuMANIFEST
)

601 
	`DFU_LóveDFUMode
(
pdev
);

604  
USBD_OK
;

605 
	}
}

613 
uöt8_t
 
	$EP0_RxRódy
 (*
pdev
)

615  
USBD_OK
;

616 
	}
}

629 
	$DFU_Req_DETACH
(*
pdev
, 
USB_SETUP_REQ
 *
ªq
)

631 i‡(
Devi˚Sèã
 =
STATE_dfuIDLE
 || Devi˚Sèã =
STATE_dfuDNLOAD_SYNC


632 || 
Devi˚Sèã
 =
STATE_dfuDNLOAD_IDLE
 || Devi˚Sèã =
STATE_dfuMANIFEST_SYNC


633 || 
Devi˚Sèã
 =
STATE_dfuUPLOAD_IDLE
 )

636 
Devi˚Sèã
 = 
STATE_dfuIDLE
;

637 
Devi˚Sètus
[0] = 
STATUS_OK
;

638 
Devi˚Sètus
[1] = 0;

639 
Devi˚Sètus
[2] = 0;

640 
Devi˚Sètus
[3] = 0;

641 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

642 
Devi˚Sètus
[5] = 0;

643 
wBlockNum
 = 0;

644 
wÀngth
 = 0;

648 i‡((
usbd_dfu_CfgDesc
[12 + (9 * 
USBD_ITF_MAX_NUM
)]Ë& 
DFU_DETACH_MASK
)

651 
	`DCD_DevDisc⁄√˘
 (
pdev
);

652 
	`DCD_DevC⁄√˘
 (
pdev
);

657 
	`USB_OTG_BSP_mDñay
 (
ªq
->
wVÆue
);

659 
	}
}

668 
	$DFU_Req_DNLOAD
(*
pdev
, 
USB_SETUP_REQ
 *
ªq
)

671 i‡(
ªq
->
wLígth
 > 0)

673 i‡((
Devi˚Sèã
 =
STATE_dfuIDLE
Ë|| (Devi˚Sèã =
STATE_dfuDNLOAD_IDLE
))

676 
wBlockNum
 = 
ªq
->
wVÆue
;

677 
wÀngth
 = 
ªq
->
wLígth
;

680 
Devi˚Sèã
 = 
STATE_dfuDNLOAD_SYNC
;

681 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

684 
	`USBD_CéPª∑ªRx
 (
pdev
,

685 (
uöt8_t
*)
MAL_Buf„r
,

686 
wÀngth
);

692 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

699 i‡(
Devi˚Sèã
 =
STATE_dfuDNLOAD_IDLE
 || Devi˚Sèã =
STATE_dfuIDLE
 )

701 
M™i„°_Sèã
 = 
M™i„°_In_Progªss
;

702 
Devi˚Sèã
 = 
STATE_dfuMANIFEST_SYNC
;

703 
Devi˚Sètus
[1] = 0;

704 
Devi˚Sètus
[2] = 0;

705 
Devi˚Sètus
[3] = 0;

706 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

711 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

714 
	}
}

723 
	$DFU_Req_UPLOAD
(*
pdev
, 
USB_SETUP_REQ
 *
ªq
)

725 
uöt8_t
 *
Phy_Addr
 = 
NULL
;

726 
uöt32_t
 
Addr
 = 0;

729 i‡(
ªq
->
wLígth
 > 0)

731 i‡((
Devi˚Sèã
 =
STATE_dfuIDLE
Ë|| (Devi˚Sèã =
STATE_dfuUPLOAD_IDLE
))

734 
wBlockNum
 = 
ªq
->
wVÆue
;

735 
wÀngth
 = 
ªq
->
wLígth
;

738 i‡(
wBlockNum
 == 0)

741 
Devi˚Sèã
 = (
wÀngth
 > 3)? 
STATE_dfuIDLE
:
STATE_dfuUPLOAD_IDLE
;

742 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

743 
Devi˚Sètus
[1] = 0;

744 
Devi˚Sètus
[2] = 0;

745 
Devi˚Sètus
[3] = 0;

748 
MAL_Buf„r
[0] = 
CMD_GETCOMMANDS
;

749 
MAL_Buf„r
[1] = 
CMD_SETADDRESSPOINTER
;

750 
MAL_Buf„r
[2] = 
CMD_ERASE
;

753 
	`USBD_CéSídD©a
 (
pdev
,

754 (
uöt8_t
 *)(&(
MAL_Buf„r
[0])),

757 i‡(
wBlockNum
 > 1)

759 
Devi˚Sèã
 = 
STATE_dfuUPLOAD_IDLE
 ;

760 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

761 
Devi˚Sètus
[1] = 0;

762 
Devi˚Sètus
[2] = 0;

763 
Devi˚Sètus
[3] = 0;

764 
Addr
 = ((
wBlockNum
 - 2Ë* 
XFERSIZE
Ë+ 
Poöãr
;

767 
Phy_Addr
 = 
	`MAL_Ród
(
Addr
, 
wÀngth
);

770 
	`USBD_CéSídD©a
 (
pdev
,

771 
Phy_Addr
,

772 
wÀngth
);

776 
Devi˚Sèã
 = 
STATUS_ERRSTALLEDPKT
;

777 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

778 
Devi˚Sètus
[1] = 0;

779 
Devi˚Sètus
[2] = 0;

780 
Devi˚Sètus
[3] = 0;

783 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

789 
wÀngth
 = 0;

790 
wBlockNum
 = 0;

792 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

798 
Devi˚Sèã
 = 
STATE_dfuIDLE
;

799 
Devi˚Sètus
[1] = 0;

800 
Devi˚Sètus
[2] = 0;

801 
Devi˚Sètus
[3] = 0;

802 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

804 
	}
}

812 
	$DFU_Req_GETSTATUS
(*
pdev
)

814 
Devi˚Sèã
)

816 
STATE_dfuDNLOAD_SYNC
:

817 i‡(
wÀngth
 != 0)

819 
Devi˚Sèã
 = 
STATE_dfuDNBUSY
;

820 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

821 i‡((
wBlockNum
 =0Ë&& (
MAL_Buf„r
[0] =
CMD_ERASE
))

823 
	`MAL_GëSètus
(
Poöãr
, 0, 
Devi˚Sètus
);

827 
	`MAL_GëSètus
(
Poöãr
, 1, 
Devi˚Sètus
);

832 
Devi˚Sèã
 = 
STATE_dfuDNLOAD_IDLE
;

833 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

834 
Devi˚Sètus
[1] = 0;

835 
Devi˚Sètus
[2] = 0;

836 
Devi˚Sètus
[3] = 0;

840 
STATE_dfuMANIFEST_SYNC
 :

841 i‡(
M™i„°_Sèã
 =
M™i„°_In_Progªss
)

843 
Devi˚Sèã
 = 
STATE_dfuMANIFEST
;

844 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

845 
Devi˚Sètus
[1] = 1;

846 
Devi˚Sètus
[2] = 0;

847 
Devi˚Sètus
[3] = 0;

850 i‡((
M™i„°_Sèã
 =
M™i„°_com∂ëe
) && \

851 ((
usbd_dfu_CfgDesc
[(11 + (9 * 
USBD_ITF_MAX_NUM
))]) & 0x04))

853 
Devi˚Sèã
 = 
STATE_dfuIDLE
;

854 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

855 
Devi˚Sètus
[1] = 0;

856 
Devi˚Sètus
[2] = 0;

857 
Devi˚Sètus
[3] = 0;

867 
	`USBD_CéSídD©a
 (
pdev
,

868 (
uöt8_t
 *)(&(
Devi˚Sètus
[0])),

870 
	}
}

878 
	$DFU_Req_CLRSTATUS
(*
pdev
)

880 i‡(
Devi˚Sèã
 =
STATE_dfuERROR
)

882 
Devi˚Sèã
 = 
STATE_dfuIDLE
;

883 
Devi˚Sètus
[0] = 
STATUS_OK
;

884 
Devi˚Sètus
[1] = 0;

885 
Devi˚Sètus
[2] = 0;

886 
Devi˚Sètus
[3] = 0;

887 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

888 
Devi˚Sètus
[5] = 0;

892 
Devi˚Sèã
 = 
STATE_dfuERROR
;

893 
Devi˚Sètus
[0] = 
STATUS_ERRUNKNOWN
;

894 
Devi˚Sètus
[1] = 0;

895 
Devi˚Sètus
[2] = 0;

896 
Devi˚Sètus
[3] = 0;

897 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

898 
Devi˚Sètus
[5] = 0;

900 
	}
}

908 
	$DFU_Req_GETSTATE
(*
pdev
)

911 
	`USBD_CéSídD©a
 (
pdev
,

912 &
Devi˚Sèã
,

914 
	}
}

922 
	$DFU_Req_ABORT
(*
pdev
)

924 i‡(
Devi˚Sèã
 =
STATE_dfuIDLE
 || Devi˚Sèã =
STATE_dfuDNLOAD_SYNC


925 || 
Devi˚Sèã
 =
STATE_dfuDNLOAD_IDLE
 || Devi˚Sèã =
STATE_dfuMANIFEST_SYNC


926 || 
Devi˚Sèã
 =
STATE_dfuUPLOAD_IDLE
 )

928 
Devi˚Sèã
 = 
STATE_dfuIDLE
;

929 
Devi˚Sètus
[0] = 
STATUS_OK
;

930 
Devi˚Sètus
[1] = 0;

931 
Devi˚Sètus
[2] = 0;

932 
Devi˚Sètus
[3] = 0;

933 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

934 
Devi˚Sètus
[5] = 0;

935 
wBlockNum
 = 0;

936 
wÀngth
 = 0;

938 
	}
}

947 
	$DFU_LóveDFUMode
(*
pdev
)

949 
M™i„°_Sèã
 = 
M™i„°_com∂ëe
;

951 i‡((
usbd_dfu_CfgDesc
[(11 + (9 * 
USBD_ITF_MAX_NUM
))]) & 0x04)

953 
Devi˚Sèã
 = 
STATE_dfuMANIFEST_SYNC
;

954 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

955 
Devi˚Sètus
[1] = 0;

956 
Devi˚Sètus
[2] = 0;

957 
Devi˚Sètus
[3] = 0;

962 
Devi˚Sèã
 = 
STATE_dfuMANIFEST_WAIT_RESET
;

963 
Devi˚Sètus
[4] = 
Devi˚Sèã
;

964 
Devi˚Sètus
[1] = 0;

965 
Devi˚Sètus
[2] = 0;

966 
Devi˚Sètus
[3] = 0;

969 
	`DCD_DevDisc⁄√˘
 (
pdev
);

972 
	`MAL_DeInô
();

975 
	`NVIC_Sy°emRe£t
();

980 
	}
}

989 
uöt8_t
 *
	$USBD_DFU_GëCfgDesc
 (
uöt8_t
 
•ìd
, 
uöt16_t
 *
Àngth
)

991 *
Àngth
 =  (
usbd_dfu_CfgDesc
);

992  
usbd_dfu_CfgDesc
;

993 
	}
}

995 #ifde‡
USB_OTG_HS_CORE


1003 
uöt8_t
 *
	$USBD_DFU_GëOthîCfgDesc
 (
uöt8_t
 
•ìd
, 
uöt16_t
 *
Àngth
)

1005 *
Àngth
 =  (
usbd_dfu_OthîCfgDesc
);

1006  
usbd_dfu_OthîCfgDesc
;

1007 
	}
}

1018 
uöt8_t
* 
	$USBD_DFU_GëU§SåögDesc
 (
uöt8_t
 
•ìd
, uöt8_à
ödex
 , 
uöt16_t
 *
Àngth
)

1021 i‡(
ödex
 <(
USBD_IDX_INTERFACE_STR
 + 
USBD_ITF_MAX_NUM
))

1025 
	`USBD_GëSåög
 ((
uöt8_t
 *)
usbd_dfu_SåögDesc
[
ödex
 - 
USBD_IDX_INTERFACE_STR
 - 1], 
USBD_SåDesc
, 
Àngth
);

1026  
USBD_SåDesc
;

1031  
NULL
;

1033 
	}
}

	@libstm/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c

23 
	~"usbd_dfu_mÆ.h
"

25 
	~"usbd_Êash_if.h
"

27 #ifde‡
DFU_MAL_SUPPORT_OTP


28 
	~"usbd_Ÿp_if.h
"

31 #ifde‡
DFU_MAL_SUPPORT_MEM


32 
	~"usbd_mem_if_ãm∂©e.h
"

45 
DFU_MAL_Pr›_Ty≥Def
* 
	gtMALTab
[
MAX_USED_MEDIA
] = {

46 &
DFU_Fœsh_cb


47 #ifde‡
DFU_MAL_SUPPORT_OTP


48 , &
DFU_Oç_cb


50 #ifde‡
DFU_MAL_SUPPORT_MEM


51 , &
DFU_Mem_cb


55 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


56 #i‡
deföed
 ( 
__ICCARM__
 )

57 #¥agm®
d©a_Æignmít
=4

61 
__ALIGN_BEGIN
 c⁄° 
uöt8_t
* 
	gusbd_dfu_SåögDesc
[
MAX_USED_MEDIA
] 
	g__ALIGN_END
 = {

62 
FLASH_IF_STRING


63 #ifde‡
DFU_MAL_SUPPORT_OTP


64 , 
OTP_IF_STRING


66 #ifde‡
DFU_MAL_SUPPORT_MEM


67 , 
MEM_IF_STRING


71 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


72 #i‡
deföed
 ( 
__ICCARM__
 )

73 #¥agm®
d©a_Æignmít
=4

77 
__ALIGN_BEGIN
 
uöt8_t
 
	gMAL_Buf„r
[
XFERSIZE
] 
	g__ALIGN_END
 ;

80 
uöt8_t
 
MAL_CheckAdd
 (
uöt32_t
 
Add
);

89 
uöt16_t
 
	$MAL_Inô
()

91 
uöt32_t
 
memIdx
 = 0;

94 
memIdx
 = 0; memIdx < 
MAX_USED_MEDIA
; memIdx++)

97 i‡(
tMALTab
[
memIdx
]->
pMAL_Inô
 !
NULL
)

99 
tMALTab
[
memIdx
]->
	`pMAL_Inô
();

103  
MAL_OK
;

104 
	}
}

112 
uöt16_t
 
	$MAL_DeInô
()

114 
uöt32_t
 
memIdx
 = 0;

117 
memIdx
 = 0; memIdx < 
MAX_USED_MEDIA
; memIdx++)

120 i‡(
tMALTab
[
memIdx
]->
pMAL_DeInô
 !
NULL
)

122 
tMALTab
[
memIdx
]->
	`pMAL_DeInô
();

126  
MAL_OK
;

127 
	}
}

135 
uöt16_t
 
	$MAL_Eø£
(
uöt32_t
 
Add
)

137 
uöt32_t
 
memIdx
 = 
	`MAL_CheckAdd
(
Add
);

140 i‡(
	`DFU_MAL_IS_PROTECTED_AREA
(
Add
))

142  
MAL_FAIL
;

145 i‡(
memIdx
 < 
MAX_USED_MEDIA
)

148 i‡(
tMALTab
[
memIdx
]->
pMAL_Eø£
 !
NULL
)

150  
tMALTab
[
memIdx
]->
	`pMAL_Eø£
(
Add
);

154  
MAL_FAIL
;

159  
MAL_FAIL
;

161 
	}
}

170 
uöt16_t
 
	$MAL_Wrôe
 (
uöt32_t
 
Add
, uöt32_à
Lí
)

172 
uöt32_t
 
memIdx
 = 
	`MAL_CheckAdd
(
Add
);

175 i‡(
	`DFU_MAL_IS_PROTECTED_AREA
(
Add
))

177  
MAL_FAIL
;

180 i‡(
memIdx
 < 
MAX_USED_MEDIA
)

183 i‡(
tMALTab
[
memIdx
]->
pMAL_Wrôe
 !
NULL
)

185  
tMALTab
[
memIdx
]->
	`pMAL_Wrôe
(
Add
, 
Lí
);

189  
MAL_FAIL
;

194  
MAL_FAIL
;

196 
	}
}

205 
uöt8_t
 *
	$MAL_Ród
 (
uöt32_t
 
Add
, uöt32_à
Lí
)

207 
uöt32_t
 
memIdx
 = 
	`MAL_CheckAdd
(
Add
);

209 i‡(
memIdx
 < 
MAX_USED_MEDIA
)

212 i‡(
tMALTab
[
memIdx
]->
pMAL_Ród
 !
NULL
)

214  
tMALTab
[
memIdx
]->
	`pMAL_Ród
(
Add
, 
Lí
);

218  
MAL_Buf„r
;

223  
MAL_Buf„r
;

225 
	}
}

235 
uöt16_t
 
	$MAL_GëSètus
(
uöt32_t
 
Add
 , 
uöt8_t
 
Cmd
, uöt8_à*
buf„r
)

237 
uöt32_t
 
memIdx
 = 
	`MAL_CheckAdd
(
Add
);

239 i‡(
memIdx
 < 
MAX_USED_MEDIA
)

241 i‡(
Cmd
 & 0x01)

243 
	`SET_POLLING_TIMING
(
tMALTab
[
memIdx
]->
Eø£Timög
);

247 
	`SET_POLLING_TIMING
(
tMALTab
[
memIdx
]->
WrôeTimög
);

250  
MAL_OK
;

254  
MAL_FAIL
;

256 
	}
}

264 
uöt8_t
 
	$MAL_CheckAdd
(
uöt32_t
 
Add
)

266 
uöt32_t
 
memIdx
 = 0;

269 
memIdx
 = 0; memIdx < 
MAX_USED_MEDIA
; memIdx++)

272 i‡(
tMALTab
[
memIdx
]->
	`pMAL_CheckAdd
(
Add
Ë=
MAL_OK
)

274  
memIdx
;

278  (
MAX_USED_MEDIA
);

279 
	}
}

	@libstm/STM32_USB_Device_Library/Class/dfu/src/usbd_flash_if.c

23 
	~"usbd_Êash_if.h
"

24 
	~"usbd_dfu_mÆ.h
"

31 
uöt16_t
 
FLASH_If_Inô
();

32 
uöt16_t
 
FLASH_If_Eø£
 (
uöt32_t
 
Add
);

33 
uöt16_t
 
FLASH_If_Wrôe
 (
uöt32_t
 
Add
, uöt32_à
Lí
);

34 
uöt8_t
 *
FLASH_If_Ród
 (
uöt32_t
 
Add
, uöt32_à
Lí
);

35 
uöt16_t
 
FLASH_If_DeInô
();

36 
uöt16_t
 
FLASH_If_CheckAdd
(
uöt32_t
 
Add
);

40 
DFU_MAL_Pr›_Ty≥Def
 
	gDFU_Fœsh_cb
 =

42 
FLASH_IF_STRING
,

43 
FLASH_If_Inô
,

44 
FLASH_If_DeInô
,

45 
FLASH_If_Eø£
,

46 
FLASH_If_Wrôe
,

47 
FLASH_If_Ród
,

48 
FLASH_If_CheckAdd
,

61 
uöt16_t
 
	$FLASH_If_Inô
()

64 
	`FLASH_U∆ock
();

66  
MAL_OK
;

67 
	}
}

75 
uöt16_t
 
	$FLASH_If_DeInô
()

78 
	`FLASH_Lock
();

80  
MAL_OK
;

81 
	}
}

90 
uöt16_t
 
	$FLASH_If_Eø£
(
uöt32_t
 
Add
)

92 #ifde‡
STM32F2XX


94 i‡(
Add
 < 0x08004000)

96 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_0
, 
VﬁègeR™ge_3
);

98 i‡(
Add
 < 0x08008000)

100 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_1
, 
VﬁègeR™ge_3
);

102 i‡(
Add
 < 0x0800C000)

104 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_2
, 
VﬁègeR™ge_3
);

106 i‡(
Add
 < 0x08010000)

108 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_3
, 
VﬁègeR™ge_3
);

110 i‡(
Add
 < 0x08020000)

112 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_4
, 
VﬁègeR™ge_3
);

114 i‡(
Add
 < 0x08040000)

116 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_5
, 
VﬁègeR™ge_3
);

118 i‡(
Add
 < 0x08060000)

120 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_6
, 
VﬁègeR™ge_3
);

122 i‡(
Add
 < 0x08080000)

124 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_7
, 
VﬁègeR™ge_3
);

126 i‡(
Add
 < 0x080A0000)

128 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_8
, 
VﬁègeR™ge_3
);

130 i‡(
Add
 < 0x080C0000)

132 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_9
, 
VﬁègeR™ge_3
);

134 i‡(
Add
 < 0x080E0000)

136 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_10
, 
VﬁègeR™ge_3
);

138 i‡(
Add
 < 0x08100000)

140 
	`FLASH_Eø£Se˘‹
(
FLASH_Se˘‹_11
, 
VﬁègeR™ge_3
);

144  
MAL_FAIL
;

146 #ñi‡
	`deföed
(
STM32F10X_CL
)

148 
	`FLASH_Eø£Page
(
Add
);

151  
MAL_OK
;

152 
	}
}

161 
uöt16_t
 
	$FLASH_If_Wrôe
(
uöt32_t
 
Add
, uöt32_à
Lí
)

163 
uöt32_t
 
idx
 = 0;

165 i‡(
Lí
 & 0x3)

167 
idx
 = 
Lí
; idx < ((Len & 0xFFFC) + 4); idx++)

169 
MAL_Buf„r
[
idx
] = 0xFF;

174 
idx
 = 0; idx < 
Lí
; idx = idx + 4)

176 
	`FLASH_ProgømW‹d
(
Add
, *(
uöt32_t
 *)(
MAL_Buf„r
 + 
idx
));

177 
Add
 += 4;

179  
MAL_OK
;

180 
	}
}

189 
uöt8_t
 *
	$FLASH_If_Ród
 (
uöt32_t
 
Add
, uöt32_à
Lí
)

191 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


192 
uöt32_t
 
idx
 = 0;

193 
idx
 = 0; idx < 
Lí
; idx += 4)

195 *(
uöt32_t
*)(
MAL_Buf„r
 + 
idx
Ë*(uöt32_à*)(
Add
 + idx);

197  (
uöt8_t
*)(
MAL_Buf„r
);

199  (
uöt8_t
 *)(
Add
);

201 
	}
}

210 
uöt16_t
 
	$FLASH_If_CheckAdd
(
uöt32_t
 
Add
)

212 i‡((
Add
 >
FLASH_START_ADD
Ë&& (Add < 
FLASH_END_ADD
))

214  
MAL_OK
;

218  
MAL_FAIL
;

220 
	}
}

	@libstm/STM32_USB_Device_Library/Class/dfu/src/usbd_mem_if_template.c

25 
	~"usbd_mem_if_ãm∂©e.h
"

26 
	~"usbd_dfu_mÆ.h
"

33 
uöt16_t
 
MEM_If_Inô
();

34 
uöt16_t
 
MEM_If_Eø£
 (
uöt32_t
 
Add
);

35 
uöt16_t
 
MEM_If_Wrôe
 (
uöt32_t
 
Add
, uöt32_à
Lí
);

36 
uöt8_t
 *
MEM_If_Ród
 (
uöt32_t
 
Add
, uöt32_à
Lí
);

37 
uöt16_t
 
MEM_If_DeInô
();

38 
uöt16_t
 
MEM_If_CheckAdd
(
uöt32_t
 
Add
);

42 
DFU_MAL_Pr›_Ty≥Def
 
	gDFU_Mem_cb
 =

44 
MEM_IF_STRING
,

45 
MEM_If_Inô
,

46 
MEM_If_DeInô
,

47 
MEM_If_Eø£
,

48 
MEM_If_Wrôe
,

49 
MEM_If_Ród
,

50 
MEM_If_CheckAdd
,

63 
uöt16_t
 
	$MEM_If_Inô
()

65  
MAL_OK
;

66 
	}
}

74 
uöt16_t
 
	$MEM_If_DeInô
()

76  
MAL_OK
;

77 
	}
}

85 
uöt16_t
 
	$MEM_If_Eø£
(
uöt32_t
 
Add
)

87  
MAL_OK
;

88 
	}
}

97 
uöt16_t
 
	$MEM_If_Wrôe
(
uöt32_t
 
Add
, uöt32_à
Lí
)

99  
MAL_OK
;

100 
	}
}

109 
uöt8_t
 *
	$MEM_If_Ród
 (
uöt32_t
 
Add
, uöt32_à
Lí
)

112  (
uöt8_t
*)(
MAL_Buf„r
);

113 
	}
}

122 
uöt16_t
 
	$MEM_If_CheckAdd
(
uöt32_t
 
Add
)

124 i‡((
Add
 >
MEM_START_ADD
Ë&& (Add < 
MEM_END_ADD
))

126  
MAL_OK
;

130  
MAL_FAIL
;

132 
	}
}

	@libstm/STM32_USB_Device_Library/Class/dfu/src/usbd_otp_if.c

23 
	~"usbd_Ÿp_if.h
"

24 
	~"usbd_dfu_mÆ.h
"

31 
uöt16_t
 
OTP_If_Wrôe
 (
uöt32_t
 
Add
, uöt32_à
Lí
);

32 
uöt8_t
 *
OTP_If_Ród
 (
uöt32_t
 
Add
, uöt32_à
Lí
);

33 
uöt16_t
 
OTP_If_DeInô
();

34 
uöt16_t
 
OTP_If_CheckAdd
(
uöt32_t
 
Add
);

38 
DFU_MAL_Pr›_Ty≥Def
 
	gDFU_Oç_cb
 =

40 
OTP_IF_STRING
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
OTP_If_Wrôe
,

45 
OTP_If_Ród
,

46 
OTP_If_CheckAdd
,

60 
uöt16_t
 
	$OTP_If_Wrôe
(
uöt32_t
 
Add
, uöt32_à
Lí
)

62 
uöt32_t
 
idx
 = 0;

64 i‡(
Lí
 & 0x3)

66 
idx
 = 
Lí
; idx < ((Len & 0xFFFC) + 4); idx++)

68 
MAL_Buf„r
[
idx
] = 0xFF;

73 
idx
 = 0; idx < 
Lí
; idx = idx + 4)

75 
	`FLASH_ProgømW‹d
(
Add
, *(
uöt32_t
 *)(
MAL_Buf„r
 + 
idx
));

76 
Add
 += 4;

78  
MAL_OK
;

79 
	}
}

88 
uöt8_t
 *
	$OTP_If_Ród
 (
uöt32_t
 
Add
, uöt32_à
Lí
)

90 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


91 
uöt32_t
 
idx
 = 0;

92 
idx
 = 0; idx < 
Lí
; idx += 4)

94 *(
uöt32_t
*)(
MAL_Buf„r
 + 
idx
Ë*(uöt32_à*)(
Add
 + idx);

96  (
uöt8_t
*)(
MAL_Buf„r
);

98  (
uöt8_t
*)(
Add
);

100 
	}
}

109 
uöt16_t
 
	$OTP_If_CheckAdd
(
uöt32_t
 
Add
)

111 i‡((
Add
 >
OTP_START_ADD
Ë&& (Add < 
OTP_END_ADD
))

113  
MAL_OK
;

117  
MAL_FAIL
;

119 
	}
}

	@libstm/STM32_USB_Device_Library/Class/hid/inc/usbd_hid_core.h

24 #i‚de‡
__USB_HID_CORE_H_


25 
	#__USB_HID_CORE_H_


	)

27 
	~"usbd_i‹eq.h
"

42 
	#USB_HID_CONFIG_DESC_SIZ
 34

	)

43 
	#USB_HID_DESC_SIZ
 9

	)

44 
	#HID_MOUSE_REPORT_DESC_SIZE
 74

	)

46 
	#HID_DESCRIPTOR_TYPE
 0x21

	)

47 
	#HID_REPORT_DESC
 0x22

	)

50 
	#HID_REQ_SET_PROTOCOL
 0x0B

	)

51 
	#HID_REQ_GET_PROTOCOL
 0x03

	)

53 
	#HID_REQ_SET_IDLE
 0x0A

	)

54 
	#HID_REQ_GET_IDLE
 0x02

	)

56 
	#HID_REQ_SET_REPORT
 0x09

	)

57 
	#HID_REQ_GET_REPORT
 0x01

	)

86 
USBD_Cœss_cb_Ty≥Def
 
USBD_HID_cb
;

94 
uöt8_t
 
USBD_HID_SídRï‹t
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

95 
uöt8_t
 *
ªp‹t
,

96 
uöt16_t
 
Àn
);

	@libstm/STM32_USB_Device_Library/Class/hid/src/usbd_hid_core.c

44 
	~"usbd_hid_c‹e.h
"

45 
	~"usbd_desc.h
"

46 
	~"usbd_ªq.h
"

91 
uöt8_t
 
USBD_HID_Inô
 (*
pdev
,

92 
uöt8_t
 
cfgidx
);

94 
uöt8_t
 
USBD_HID_DeInô
 (*
pdev
,

95 
uöt8_t
 
cfgidx
);

97 
uöt8_t
 
USBD_HID_Sëup
 (*
pdev
,

98 
USB_SETUP_REQ
 *
ªq
);

100 
uöt8_t
 *
USBD_HID_GëCfgDesc
 (uöt8_à
•ìd
, 
uöt16_t
 *
Àngth
);

102 
uöt8_t
 
USBD_HID_D©aIn
 (*
pdev
, uöt8_à
ïnum
);

111 
USBD_Cœss_cb_Ty≥Def
 
	gUSBD_HID_cb
 =

113 
USBD_HID_Inô
,

114 
USBD_HID_DeInô
,

115 
USBD_HID_Sëup
,

116 
NULL
,

117 
NULL
,

118 
USBD_HID_D©aIn
,

119 
NULL
,

120 
NULL
,

121 
NULL
,

122 
NULL
,

123 
USBD_HID_GëCfgDesc
,

124 #ifde‡
USB_OTG_HS_CORE


125 
USBD_HID_GëCfgDesc
,

129 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


130 #i‡
deföed
 ( 
__ICCARM__
 )

131 #¥agm®
d©a_Æignmít
=4

134 
__ALIGN_BEGIN
 
uöt32_t
 
USBD_HID_A…Së
 
	g__ALIGN_END
 = 0;

136 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


137 #i‡
deföed
 ( 
__ICCARM__
 )

138 #¥agm®
d©a_Æignmít
=4

141 
__ALIGN_BEGIN
 
uöt32_t
 
USBD_HID_PrŸocﬁ
 
	g__ALIGN_END
 = 0;

143 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


144 #i‡
deföed
 ( 
__ICCARM__
 )

145 #¥agm®
d©a_Æignmít
=4

148 
__ALIGN_BEGIN
 
uöt32_t
 
USBD_HID_IdÀSèã
 
	g__ALIGN_END
 = 0;

150 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


151 #i‡
deföed
 ( 
__ICCARM__
 )

152 #¥agm®
d©a_Æignmít
=4

156 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBD_HID_CfgDesc
[
USB_HID_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 =

159 
USB_CONFIGURATION_DESCRIPTOR_TYPE
,

160 
USB_HID_CONFIG_DESC_SIZ
,

173 
USB_INTERFACE_DESCRIPTOR_TYPE
,

184 
HID_DESCRIPTOR_TYPE
,

190 
HID_MOUSE_REPORT_DESC_SIZE
,

195 
USB_ENDPOINT_DESCRIPTOR_TYPE
,

197 
HID_IN_EP
,

199 
HID_IN_PACKET
,

205 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


206 #i‡
deföed
 ( 
__ICCARM__
 )

207 #¥agm®
d©a_Æignmít
=4

210 
__ALIGN_BEGIN
 
uöt8_t
 
	gHID_MOUSE_Rï‹tDesc
[
HID_MOUSE_REPORT_DESC_SIZE
] 
	g__ALIGN_END
 =

275 
uöt8_t
 
	$USBD_HID_Inô
 (*
pdev
,

276 
uöt8_t
 
cfgidx
)

280 
	`DCD_EP_O≥n
(
pdev
,

281 
HID_IN_EP
,

282 
HID_IN_PACKET
,

283 
USB_OTG_EP_INT
);

286 
	`DCD_EP_O≥n
(
pdev
,

287 
HID_OUT_EP
,

288 
HID_OUT_PACKET
,

289 
USB_OTG_EP_INT
);

291  
USBD_OK
;

292 
	}
}

301 
uöt8_t
 
	$USBD_HID_DeInô
 (*
pdev
,

302 
uöt8_t
 
cfgidx
)

305 
	`DCD_EP_Clo£
 (
pdev
 , 
HID_IN_EP
);

306 
	`DCD_EP_Clo£
 (
pdev
 , 
HID_OUT_EP
);

309  
USBD_OK
;

310 
	}
}

319 
uöt8_t
 
	$USBD_HID_Sëup
 (*
pdev
,

320 
USB_SETUP_REQ
 *
ªq
)

322 
uöt16_t
 
Àn
 = 0;

323 
uöt8_t
 *
pbuf
 = 
NULL
;

325 
ªq
->
bmReque°
 & 
USB_REQ_TYPE_MASK
)

327 
USB_REQ_TYPE_CLASS
 :

328 
ªq
->
bReque°
)

332 
HID_REQ_SET_PROTOCOL
:

333 
USBD_HID_PrŸocﬁ
 = (
uöt8_t
)(
ªq
->
wVÆue
);

336 
HID_REQ_GET_PROTOCOL
:

337 
	`USBD_CéSídD©a
 (
pdev
,

338 (
uöt8_t
 *)&
USBD_HID_PrŸocﬁ
,

342 
HID_REQ_SET_IDLE
:

343 
USBD_HID_IdÀSèã
 = (
uöt8_t
)(
ªq
->
wVÆue
 >> 8);

346 
HID_REQ_GET_IDLE
:

347 
	`USBD_CéSídD©a
 (
pdev
,

348 (
uöt8_t
 *)&
USBD_HID_IdÀSèã
,

353 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

354  
USBD_FAIL
;

358 
USB_REQ_TYPE_STANDARD
:

359 
ªq
->
bReque°
)

361 
USB_REQ_GET_DESCRIPTOR
:

362 if–
ªq
->
wVÆue
 >> 8 =
HID_REPORT_DESC
)

364 
Àn
 = 
	`MIN
(
HID_MOUSE_REPORT_DESC_SIZE
 , 
ªq
->
wLígth
);

365 
pbuf
 = 
HID_MOUSE_Rï‹tDesc
;

367 if–
ªq
->
wVÆue
 >> 8 =
HID_DESCRIPTOR_TYPE
)

373 
pbuf
 = 
USBD_HID_CfgDesc
 + 0x12;

375 
Àn
 = 
	`MIN
(
USB_HID_DESC_SIZ
 , 
ªq
->
wLígth
);

378 
	`USBD_CéSídD©a
 (
pdev
,

379 
pbuf
,

380 
Àn
);

384 
USB_REQ_GET_INTERFACE
 :

385 
	`USBD_CéSídD©a
 (
pdev
,

386 (
uöt8_t
 *)&
USBD_HID_A…Së
,

390 
USB_REQ_SET_INTERFACE
 :

391 
USBD_HID_A…Së
 = (
uöt8_t
)(
ªq
->
wVÆue
);

395  
USBD_OK
;

396 
	}
}

405 
uöt8_t
 
	$USBD_HID_SídRï‹t
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

406 
uöt8_t
 *
ªp‹t
,

407 
uöt16_t
 
Àn
)

409 i‡(
pdev
->
dev
.
devi˚_°©us
 =
USB_OTG_CONFIGURED
 )

411 
	`DCD_EP_Tx
 (
pdev
, 
HID_IN_EP
, 
ªp‹t
, 
Àn
);

413  
USBD_OK
;

414 
	}
}

423 
uöt8_t
 *
	$USBD_HID_GëCfgDesc
 (
uöt8_t
 
•ìd
, 
uöt16_t
 *
Àngth
)

425 *
Àngth
 =  (
USBD_HID_CfgDesc
);

426  
USBD_HID_CfgDesc
;

427 
	}
}

436 
uöt8_t
 
	$USBD_HID_D©aIn
 (*
pdev
,

437 
uöt8_t
 
ïnum
)

442 
	`DCD_EP_Flush
(
pdev
, 
HID_IN_EP
);

443  
USBD_OK
;

444 
	}
}

	@libstm/STM32_USB_Device_Library/Class/msc/inc/usbd_msc_bot.h

24 
	~"usbd_c‹e.h
"

27 #i‚de‡
__USBD_MSC_BOT_H


28 
	#__USBD_MSC_BOT_H


	)

43 
	#BOT_IDLE
 0

	)

44 
	#BOT_DATA_OUT
 1

	)

45 
	#BOT_DATA_IN
 2

	)

46 
	#BOT_LAST_DATA_IN
 3

	)

47 
	#BOT_SEND_DATA
 4

	)

49 
	#BOT_CBW_SIGNATURE
 0x43425355

	)

50 
	#BOT_CSW_SIGNATURE
 0x53425355

	)

51 
	#BOT_CBW_LENGTH
 31

	)

52 
	#BOT_CSW_LENGTH
 13

	)

55 
	#CSW_CMD_PASSED
 0x00

	)

56 
	#CSW_CMD_FAILED
 0x01

	)

57 
	#CSW_PHASE_ERROR
 0x02

	)

60 
	#BOT_STATE_NORMAL
 0

	)

61 
	#BOT_STATE_RECOVERY
 1

	)

62 
	#BOT_STATE_ERROR
 2

	)

65 
	#DIR_IN
 0

	)

66 
	#DIR_OUT
 1

	)

67 
	#BOTH_DIR
 2

	)

77 
	s_MSC_BOT_CBW


79 
uöt32_t
 
	mdSig«tuª
;

80 
uöt32_t
 
	mdTag
;

81 
uöt32_t
 
	mdD©aLígth
;

82 
uöt8_t
 
	mbmFœgs
;

83 
uöt8_t
 
	mbLUN
;

84 
uöt8_t
 
	mbCBLígth
;

85 
uöt8_t
 
	mCB
[16];

87 
	tMSC_BOT_CBW_Ty≥Def
;

90 
	s_MSC_BOT_CSW


92 
uöt32_t
 
	mdSig«tuª
;

93 
uöt32_t
 
	mdTag
;

94 
uöt32_t
 
	mdD©aResidue
;

95 
uöt8_t
 
	mbSètus
;

97 
	tMSC_BOT_CSW_Ty≥Def
;

108 
uöt8_t
 
MSC_BOT_D©a
[];

109 
uöt16_t
 
MSC_BOT_D©aLí
;

110 
uöt8_t
 
MSC_BOT_Sèã
;

111 
uöt8_t
 
MSC_BOT_Bur°Mode
;

112 
MSC_BOT_CBW_Ty≥Def
 
MSC_BOT_cbw
;

113 
MSC_BOT_CSW_Ty≥Def
 
MSC_BOT_csw
;

120 
MSC_BOT_Inô
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

121 
MSC_BOT_Re£t
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

122 
MSC_BOT_DeInô
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

123 
MSC_BOT_D©aIn
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

124 
uöt8_t
 
ïnum
);

126 
MSC_BOT_D©aOut
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

127 
uöt8_t
 
ïnum
);

129 
MSC_BOT_SídCSW
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

130 
uöt8_t
 
CSW_Sètus
);

132 
MSC_BOT_C∂CÃFótuª
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

133 
uöt8_t
 
ïnum
);

	@libstm/STM32_USB_Device_Library/Class/msc/inc/usbd_msc_core.h

23 #i‚de‡
_USB_MSC_CORE_H_


24 
	#_USB_MSC_CORE_H_


	)

26 
	~"usbd_i‹eq.h
"

43 
	#BOT_GET_MAX_LUN
 0xFE

	)

44 
	#BOT_RESET
 0xFF

	)

45 
	#USB_MSC_CONFIG_DESC_SIZ
 32

	)

47 
	#MSC_EPIN_SIZE
 *(
uöt16_t
 *)(((
USB_OTG_CORE_HANDLE
 *)
pdev
)->
dev
.
pC⁄fig_des¸ùt‹
 + 22)

	)

49 
	#MSC_EPOUT_SIZE
 *(
uöt16_t
 *)(((
USB_OTG_CORE_HANDLE
 *)
pdev
)->
dev
.
pC⁄fig_des¸ùt‹
 + 29)

	)

59 
USBD_Cœss_cb_Ty≥Def
 
USBD_MSC_cb
;

	@libstm/STM32_USB_Device_Library/Class/msc/inc/usbd_msc_data.h

24 #i‚de‡
_USBD_MSC_DATA_H_


25 
	#_USBD_MSC_DATA_H_


	)

28 
	~"usbd_c⁄f.h
"

42 
	#MODE_SENSE6_LEN
 8

	)

43 
	#MODE_SENSE10_LEN
 8

	)

44 
	#LENGTH_INQUIRY_PAGE00
 7

	)

45 
	#LENGTH_FORMAT_CAPACITIES
 20

	)

72 c⁄° 
uöt8_t
 
MSC_Page00_Inquúy_D©a
[];

73 c⁄° 
uöt8_t
 
MSC_Mode_Sí£6_d©a
[];

74 c⁄° 
uöt8_t
 
MSC_Mode_Sí£10_d©a
[] ;

	@libstm/STM32_USB_Device_Library/Class/msc/inc/usbd_msc_mem.h

24 #i‚de‡
__USBD_MEM_H


25 
	#__USBD_MEM_H


	)

27 
	~"usbd_def.h
"

42 
	#USBD_STD_INQUIRY_LENGTH
 36

	)

52 
	s_USBD_STORAGE


54 
öt8_t
 (* 
Inô
Ë(
uöt8_t
 
	mlun
);

55 
öt8_t
 (* 
GëC≠acôy
Ë(
uöt8_t
 
	mlun
, 
uöt32_t
 *
	mblock_num
, uöt32_à*
	mblock_size
);

56 
öt8_t
 (* 
IsRódy
Ë(
uöt8_t
 
	mlun
);

57 
öt8_t
 (* 
IsWrôePrŸe˘ed
Ë(
uöt8_t
 
	mlun
);

58 
öt8_t
 (* 
Ród
Ë(
uöt8_t
 
	mlun
, uöt8_à*
	mbuf
, 
uöt32_t
 
	mblk_addr
, 
uöt16_t
 
	mblk_Àn
);

59 
öt8_t
 (* 
Wrôe
)(
uöt8_t
 
	mlun
, uöt8_à*
	mbuf
, 
uöt32_t
 
	mblk_addr
, 
uöt16_t
 
	mblk_Àn
);

60 
öt8_t
 (* 
GëMaxLun
)();

61 
öt8_t
 *
	mpInquúy
;

63 }
	tUSBD_STORAGE_cb_Ty≥Def
;

89 
USBD_STORAGE_cb_Ty≥Def
 *
USBD_STORAGE_f›s
;

	@libstm/STM32_USB_Device_Library/Class/msc/inc/usbd_msc_scsi.h

23 #i‚de‡
__USBD_MSC_SCSI_H


24 
	#__USBD_MSC_SCSI_H


	)

27 
	~"usbd_def.h
"

42 
	#SENSE_LIST_DEEPTH
 4

	)

45 
	#SCSI_FORMAT_UNIT
 0x04

	)

46 
	#SCSI_INQUIRY
 0x12

	)

47 
	#SCSI_MODE_SELECT6
 0x15

	)

48 
	#SCSI_MODE_SELECT10
 0x55

	)

49 
	#SCSI_MODE_SENSE6
 0x1A

	)

50 
	#SCSI_MODE_SENSE10
 0x5A

	)

51 
	#SCSI_ALLOW_MEDIUM_REMOVAL
 0x1E

	)

52 
	#SCSI_READ6
 0x08

	)

53 
	#SCSI_READ10
 0x28

	)

54 
	#SCSI_READ12
 0xA8

	)

55 
	#SCSI_READ16
 0x88

	)

57 
	#SCSI_READ_CAPACITY10
 0x25

	)

58 
	#SCSI_READ_CAPACITY16
 0x9E

	)

60 
	#SCSI_REQUEST_SENSE
 0x03

	)

61 
	#SCSI_START_STOP_UNIT
 0x1B

	)

62 
	#SCSI_TEST_UNIT_READY
 0x00

	)

63 
	#SCSI_WRITE6
 0x0A

	)

64 
	#SCSI_WRITE10
 0x2A

	)

65 
	#SCSI_WRITE12
 0xAA

	)

66 
	#SCSI_WRITE16
 0x8A

	)

68 
	#SCSI_VERIFY10
 0x2F

	)

69 
	#SCSI_VERIFY12
 0xAF

	)

70 
	#SCSI_VERIFY16
 0x8F

	)

72 
	#SCSI_SEND_DIAGNOSTIC
 0x1D

	)

73 
	#SCSI_READ_FORMAT_CAPACITIES
 0x23

	)

75 
	#NO_SENSE
 0

	)

76 
	#RECOVERED_ERROR
 1

	)

77 
	#NOT_READY
 2

	)

78 
	#MEDIUM_ERROR
 3

	)

79 
	#HARDWARE_ERROR
 4

	)

80 
	#ILLEGAL_REQUEST
 5

	)

81 
	#UNIT_ATTENTION
 6

	)

82 
	#DATA_PROTECT
 7

	)

83 
	#BLANK_CHECK
 8

	)

84 
	#VENDOR_SPECIFIC
 9

	)

85 
	#COPY_ABORTED
 10

	)

86 
	#ABORTED_COMMAND
 11

	)

87 
	#VOLUME_OVERFLOW
 13

	)

88 
	#MISCOMPARE
 14

	)

91 
	#INVALID_CDB
 0x20

	)

92 
	#INVALID_FIELED_IN_COMMAND
 0x24

	)

93 
	#PARAMETER_LIST_LENGTH_ERROR
 0x1A

	)

94 
	#INVALID_FIELD_IN_PARAMETER_LIST
 0x26

	)

95 
	#ADDRESS_OUT_OF_RANGE
 0x21

	)

96 
	#MEDIUM_NOT_PRESENT
 0x3A

	)

97 
	#MEDIUM_HAVE_CHANGED
 0x28

	)

98 
	#WRITE_PROTECTED
 0x27

	)

99 
	#UNRECOVERED_READ_ERROR
 0x11

	)

100 
	#WRITE_FAULT
 0x03

	)

102 
	#READ_FORMAT_CAPACITY_DATA_LEN
 0x0C

	)

103 
	#READ_CAPACITY10_DATA_LEN
 0x08

	)

104 
	#MODE_SENSE10_DATA_LEN
 0x08

	)

105 
	#MODE_SENSE6_DATA_LEN
 0x04

	)

106 
	#REQUEST_SENSE_DATA_LEN
 0x12

	)

107 
	#STANDARD_INQUIRY_DATA_LEN
 0x24

	)

108 
	#BLKVFY
 0x04

	)

110 
uöt8_t
 
Page00_Inquúy_D©a
[];

111 
uöt8_t
 
Sènd¨d_Inquúy_D©a
[];

112 
uöt8_t
 
Sènd¨d_Inquúy_D©a2
[];

113 
uöt8_t
 
Mode_Sí£6_d©a
[];

114 
uöt8_t
 
Mode_Sí£10_d©a
[];

115 
uöt8_t
 
Scsi_Sí£_D©a
[];

116 
uöt8_t
 
RódC≠acôy10_D©a
[];

117 
uöt8_t
 
RódF‹m©C≠acôy_D©a
 [];

127 
	s_SENSE_ITEM
 {

128 
	mSkey
;

130 
	s_ASCs
 {

131 
	mASC
;

132 
	mASCQ
;

133 }
	mb
;

134 
	mASC
;

135 *
	mpD©a
;

136 } 
	mw
;

137 } 
	tSCSI_Sí£_Ty≥Def
;

153 
SCSI_Sí£_Ty≥Def
 
SCSI_Sí£
 [
SENSE_LIST_DEEPTH
];

154 
uöt8_t
 
SCSI_Sí£_Hód
;

155 
uöt8_t
 
SCSI_Sí£_Taû
;

163 
öt8_t
 
SCSI_Pro˚ssCmd
(
USB_OTG_CORE_HANDLE
 *
pdev
,

164 
uöt8_t
 
lun
,

165 
uöt8_t
 *
cmd
);

167 
SCSI_Sí£Code
(
uöt8_t
 
lun
,

168 
uöt8_t
 
sKey
,

169 
uöt8_t
 
ASC
);

	@libstm/STM32_USB_Device_Library/Class/msc/src/usbd_msc_bot.c

23 
	~"usbd_msc_bŸ.h
"

24 
	~"usbd_msc_scsi.h
"

25 
	~"usbd_i‹eq.h
"

26 
	~"usbd_msc_mem.h
"

65 
uöt16_t
 
	gMSC_BOT_D©aLí
;

66 
uöt8_t
 
	gMSC_BOT_Sèã
;

67 
uöt8_t
 
	gMSC_BOT_Sètus
;

69 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


70 #i‡
deföed
 ( 
__ICCARM__
 )

71 #¥agm®
d©a_Æignmít
=4

74 
__ALIGN_BEGIN
 
uöt8_t
 
	gMSC_BOT_D©a
[
MSC_MEDIA_PACKET
] 
	g__ALIGN_END
 ;

76 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


77 #i‡
deföed
 ( 
__ICCARM__
 )

78 #¥agm®
d©a_Æignmít
=4

81 
__ALIGN_BEGIN
 
MSC_BOT_CBW_Ty≥Def
 
MSC_BOT_cbw
 
	g__ALIGN_END
 ;

83 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


84 #i‡
deföed
 ( 
__ICCARM__
 )

85 #¥agm®
d©a_Æignmít
=4

88 
__ALIGN_BEGIN
 
MSC_BOT_CSW_Ty≥Def
 
MSC_BOT_csw
 
	g__ALIGN_END
 ;

97 
MSC_BOT_CBW_Decode
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

99 
MSC_BOT_SídD©a
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

100 
uöt8_t
* 
pbuf
,

101 
uöt16_t
 
Àn
);

103 
MSC_BOT_Ab‹t
(
USB_OTG_CORE_HANDLE
 *
pdev
);

121 
	$MSC_BOT_Inô
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

123 
MSC_BOT_Sèã
 = 
BOT_IDLE
;

124 
MSC_BOT_Sètus
 = 
BOT_STATE_NORMAL
;

125 
USBD_STORAGE_f›s
->
	`Inô
(0);

127 
	`DCD_EP_Flush
(
pdev
, 
MSC_OUT_EP
);

128 
	`DCD_EP_Flush
(
pdev
, 
MSC_IN_EP
);

130 
	`DCD_EP_Pª∑ªRx
 (
pdev
,

131 
MSC_OUT_EP
,

132 (
uöt8_t
 *)&
MSC_BOT_cbw
,

133 
BOT_CBW_LENGTH
);

134 
	}
}

142 
	$MSC_BOT_Re£t
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

144 
MSC_BOT_Sèã
 = 
BOT_IDLE
;

145 
MSC_BOT_Sètus
 = 
BOT_STATE_RECOVERY
;

147 
	`DCD_EP_Pª∑ªRx
 (
pdev
,

148 
MSC_OUT_EP
,

149 (
uöt8_t
 *)&
MSC_BOT_cbw
,

150 
BOT_CBW_LENGTH
);

151 
	}
}

159 
	$MSC_BOT_DeInô
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

161 
MSC_BOT_Sèã
 = 
BOT_IDLE
;

162 
	}
}

171 
	$MSC_BOT_D©aIn
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

172 
uöt8_t
 
ïnum
)

175 
MSC_BOT_Sèã
)

177 
BOT_DATA_IN
:

178 if(
	`SCSI_Pro˚ssCmd
(
pdev
,

179 
MSC_BOT_cbw
.
bLUN
,

180 &
MSC_BOT_cbw
.
CB
[0]) < 0)

182 
	`MSC_BOT_SídCSW
 (
pdev
, 
CSW_CMD_FAILED
);

186 
BOT_SEND_DATA
:

187 
BOT_LAST_DATA_IN
:

188 
	`MSC_BOT_SídCSW
 (
pdev
, 
CSW_CMD_PASSED
);

195 
	}
}

203 
	$MSC_BOT_D©aOut
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

204 
uöt8_t
 
ïnum
)

206 
MSC_BOT_Sèã
)

208 
BOT_IDLE
:

209 
	`MSC_BOT_CBW_Decode
(
pdev
);

212 
BOT_DATA_OUT
:

214 if(
	`SCSI_Pro˚ssCmd
(
pdev
,

215 
MSC_BOT_cbw
.
bLUN
,

216 &
MSC_BOT_cbw
.
CB
[0]) < 0)

218 
	`MSC_BOT_SídCSW
 (
pdev
, 
CSW_CMD_FAILED
);

227 
	}
}

235 
	$MSC_BOT_CBW_Decode
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

238 
MSC_BOT_csw
.
dTag
 = 
MSC_BOT_cbw
.dTag;

239 
MSC_BOT_csw
.
dD©aResidue
 = 
MSC_BOT_cbw
.
dD©aLígth
;

241 i‡((
	`USBD_GëRxCou¡
 (
pdev
 ,
MSC_OUT_EP
Ë!
BOT_CBW_LENGTH
) ||

242 (
MSC_BOT_cbw
.
dSig«tuª
 !
BOT_CBW_SIGNATURE
)||

243 (
MSC_BOT_cbw
.
bLUN
 > 1) ||

244 (
MSC_BOT_cbw
.
bCBLígth
 < 1) ||

245 (
MSC_BOT_cbw
.
bCBLígth
 > 16))

248 
	`SCSI_Sí£Code
(
MSC_BOT_cbw
.
bLUN
,

249 
ILLEGAL_REQUEST
,

250 
INVALID_CDB
);

251 
MSC_BOT_Sètus
 = 
BOT_STATE_ERROR
;

252 
	`MSC_BOT_Ab‹t
(
pdev
);

257 if(
	`SCSI_Pro˚ssCmd
(
pdev
,

258 
MSC_BOT_cbw
.
bLUN
,

259 &
MSC_BOT_cbw
.
CB
[0]) < 0)

261 
	`MSC_BOT_Ab‹t
(
pdev
);

264 i‡((
MSC_BOT_Sèã
 !
BOT_DATA_IN
) &&

265 (
MSC_BOT_Sèã
 !
BOT_DATA_OUT
) &&

266 (
MSC_BOT_Sèã
 !
BOT_LAST_DATA_IN
))

268 i‡(
MSC_BOT_D©aLí
 > 0)

270 
	`MSC_BOT_SídD©a
(
pdev
,

271 
MSC_BOT_D©a
,

272 
MSC_BOT_D©aLí
);

274 i‡(
MSC_BOT_D©aLí
 == 0)

276 
	`MSC_BOT_SídCSW
 (
pdev
,

277 
CSW_CMD_PASSED
);

281 
	}
}

291 
	$MSC_BOT_SídD©a
(
USB_OTG_CORE_HANDLE
 *
pdev
,

292 
uöt8_t
* 
buf
,

293 
uöt16_t
 
Àn
)

296 
Àn
 = 
	`MIN
 (
MSC_BOT_cbw
.
dD©aLígth
,Üen);

297 
MSC_BOT_csw
.
dD©aResidue
 -
Àn
;

298 
MSC_BOT_csw
.
bSètus
 = 
CSW_CMD_PASSED
;

299 
MSC_BOT_Sèã
 = 
BOT_SEND_DATA
;

301 
	`DCD_EP_Tx
 (
pdev
, 
MSC_IN_EP
, 
buf
, 
Àn
);

302 
	}
}

311 
	$MSC_BOT_SídCSW
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

312 
uöt8_t
 
CSW_Sètus
)

314 
MSC_BOT_csw
.
dSig«tuª
 = 
BOT_CSW_SIGNATURE
;

315 
MSC_BOT_csw
.
bSètus
 = 
CSW_Sètus
;

316 
MSC_BOT_Sèã
 = 
BOT_IDLE
;

318 
	`DCD_EP_Tx
 (
pdev
,

319 
MSC_IN_EP
,

320 (
uöt8_t
 *)&
MSC_BOT_csw
,

321 
BOT_CSW_LENGTH
);

324 
	`DCD_EP_Pª∑ªRx
 (
pdev
,

325 
MSC_OUT_EP
,

326 (
uöt8_t
 *)&
MSC_BOT_cbw
,

327 
BOT_CBW_LENGTH
);

329 
	}
}

338 
	$MSC_BOT_Ab‹t
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

341 i‡((
MSC_BOT_cbw
.
bmFœgs
 == 0) &&

342 (
MSC_BOT_cbw
.
dD©aLígth
 != 0) &&

343 (
MSC_BOT_Sètus
 =
BOT_STATE_NORMAL
) )

345 
	`DCD_EP_SèŒ
(
pdev
, 
MSC_OUT_EP
 );

347 
	`DCD_EP_SèŒ
(
pdev
, 
MSC_IN_EP
);

349 if(
MSC_BOT_Sètus
 =
BOT_STATE_ERROR
)

351 
	`DCD_EP_Pª∑ªRx
 (
pdev
,

352 
MSC_OUT_EP
,

353 (
uöt8_t
 *)&
MSC_BOT_cbw
,

354 
BOT_CBW_LENGTH
);

356 
	}
}

366 
	$MSC_BOT_C∂CÃFótuª
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
ïnum
)

368 if(
MSC_BOT_Sètus
 =
BOT_STATE_ERROR
 )

370 
	`DCD_EP_SèŒ
(
pdev
, 
MSC_IN_EP
);

371 
MSC_BOT_Sètus
 = 
BOT_STATE_NORMAL
;

373 if(((
ïnum
 & 0x80Ë=0x80Ë&& ( 
MSC_BOT_Sètus
 !
BOT_STATE_RECOVERY
))

375 
	`MSC_BOT_SídCSW
 (
pdev
, 
CSW_CMD_FAILED
);

378 
	}
}

	@libstm/STM32_USB_Device_Library/Class/msc/src/usbd_msc_core.c

38 
	~"usbd_msc_mem.h
"

39 
	~"usbd_msc_c‹e.h
"

40 
	~"usbd_msc_bŸ.h
"

41 
	~"usbd_ªq.h
"

82 
uöt8_t
 
USBD_MSC_Inô
 (*
pdev
,

83 
uöt8_t
 
cfgidx
);

85 
uöt8_t
 
USBD_MSC_DeInô
 (*
pdev
,

86 
uöt8_t
 
cfgidx
);

88 
uöt8_t
 
USBD_MSC_Sëup
 (*
pdev
,

89 
USB_SETUP_REQ
 *
ªq
);

91 
uöt8_t
 
USBD_MSC_D©aIn
 (*
pdev
,

92 
uöt8_t
 
ïnum
);

95 
uöt8_t
 
USBD_MSC_D©aOut
 (*
pdev
,

96 
uöt8_t
 
ïnum
);

98 
uöt8_t
 *
USBD_MSC_GëCfgDesc
 (uöt8_à
•ìd
,

99 
uöt16_t
 *
Àngth
);

101 #ifde‡
USB_OTG_HS_CORE


102 
uöt8_t
 *
USBD_MSC_GëOthîCfgDesc
 (uöt8_à
•ìd
,

103 
uöt16_t
 *
Àngth
);

107 
uöt8_t
 
	gUSBD_MSC_CfgDesc
[
USB_MSC_CONFIG_DESC_SIZ
];

122 
USBD_Cœss_cb_Ty≥Def
 
	gUSBD_MSC_cb
 =

124 
USBD_MSC_Inô
,

125 
USBD_MSC_DeInô
,

126 
USBD_MSC_Sëup
,

127 
NULL
,

128 
NULL
,

129 
USBD_MSC_D©aIn
,

130 
USBD_MSC_D©aOut
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
USBD_MSC_GëCfgDesc
,

135 #ifde‡
USB_OTG_HS_CORE


136 
USBD_MSC_GëOthîCfgDesc
,

140 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


141 #i‡
deföed
 ( 
__ICCARM__
 )

142 #¥agm®
d©a_Æignmít
=4

147 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBD_MSC_CfgDesc
[
USB_MSC_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 =

151 
USB_DESC_TYPE_CONFIGURATION
,

152 
USB_MSC_CONFIG_DESC_SIZ
,

174 
MSC_IN_EP
,

176 
LOBYTE
(
MSC_MAX_PACKET
),

177 
HIBYTE
(
MSC_MAX_PACKET
),

182 
MSC_OUT_EP
,

184 
LOBYTE
(
MSC_MAX_PACKET
),

185 
HIBYTE
(
MSC_MAX_PACKET
),

188 #ifde‡
USB_OTG_HS_CORE


189 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


190 #i‡
deföed
 ( 
__ICCARM__
 )

191 #¥agm®
d©a_Æignmít
=4

194 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBD_MSC_OthîCfgDesc
[
USB_MSC_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 =

198 
USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
,

199 
USB_MSC_CONFIG_DESC_SIZ
,

221 
MSC_IN_EP
,

229 
MSC_OUT_EP
,

237 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


238 #i‡
deföed
 ( 
__ICCARM__
 )

239 #¥agm®
d©a_Æignmít
=4

242 
__ALIGN_BEGIN
 
uöt8_t
 
USBD_MSC_MaxLun
 
	g__ALIGN_END
 = 0;

244 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


245 #i‡
deföed
 ( 
__ICCARM__
 )

246 #¥agm®
d©a_Æignmít
=4

249 
__ALIGN_BEGIN
 
uöt8_t
 
USBD_MSC_A…Së
 
	g__ALIGN_END
 = 0;

267 
uöt8_t
 
	$USBD_MSC_Inô
 (*
pdev
,

268 
uöt8_t
 
cfgidx
)

270 
	`USBD_MSC_DeInô
(
pdev
 , 
cfgidx
 );

273 
	`DCD_EP_O≥n
(
pdev
,

274 
MSC_IN_EP
,

275 
MSC_EPIN_SIZE
,

276 
USB_OTG_EP_BULK
);

279 
	`DCD_EP_O≥n
(
pdev
,

280 
MSC_OUT_EP
,

281 
MSC_EPOUT_SIZE
,

282 
USB_OTG_EP_BULK
);

285 
	`MSC_BOT_Inô
(
pdev
);

287  
USBD_OK
;

288 
	}
}

297 
uöt8_t
 
	$USBD_MSC_DeInô
 (*
pdev
,

298 
uöt8_t
 
cfgidx
)

301 
	`DCD_EP_Clo£
 (
pdev
 , 
MSC_IN_EP
);

302 
	`DCD_EP_Clo£
 (
pdev
 , 
MSC_OUT_EP
);

305 
	`MSC_BOT_DeInô
(
pdev
);

306  
USBD_OK
;

307 
	}
}

315 
uöt8_t
 
	$USBD_MSC_Sëup
 (*
pdev
, 
USB_SETUP_REQ
 *
ªq
)

318 
ªq
->
bmReque°
 & 
USB_REQ_TYPE_MASK
)

322 
USB_REQ_TYPE_CLASS
 :

323 
ªq
->
bReque°
)

325 
BOT_GET_MAX_LUN
 :

327 if((
ªq
->
wVÆue
 == 0) &&

328 (
ªq
->
wLígth
 == 1) &&

329 ((
ªq
->
bmReque°
 & 0x80) == 0x80))

331 
USBD_MSC_MaxLun
 = 
USBD_STORAGE_f›s
->
	`GëMaxLun
();

332 if(
USBD_MSC_MaxLun
 > 0)

334 
	`USBD_CéSídD©a
 (
pdev
,

335 &
USBD_MSC_MaxLun
,

340 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

341  
USBD_FAIL
;

347 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

348  
USBD_FAIL
;

352 
BOT_RESET
 :

353 if((
ªq
->
wVÆue
 == 0) &&

354 (
ªq
->
wLígth
 == 0) &&

355 ((
ªq
->
bmReque°
 & 0x80) != 0x80))

357 
	`MSC_BOT_Re£t
(
pdev
);

361 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

362  
USBD_FAIL
;

367 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

368  
USBD_FAIL
;

372 
USB_REQ_TYPE_STANDARD
:

373 
ªq
->
bReque°
)

375 
USB_REQ_GET_INTERFACE
 :

376 
	`USBD_CéSídD©a
 (
pdev
,

377 &
USBD_MSC_A…Së
,

381 
USB_REQ_SET_INTERFACE
 :

382 
USBD_MSC_A…Së
 = (
uöt8_t
)(
ªq
->
wVÆue
);

385 
USB_REQ_CLEAR_FEATURE
:

388 
	`DCD_EP_Flush
(
pdev
, (
uöt8_t
)
ªq
->
wIndex
);

391 
	`DCD_EP_Clo£
 (
pdev
 , (
uöt8_t
)
ªq
->
wIndex
);

392 if((((
uöt8_t
)
ªq
->
wIndex
) & 0x80) == 0x80)

394 
	`DCD_EP_O≥n
(
pdev
,

395 ((
uöt8_t
)
ªq
->
wIndex
),

396 
MSC_EPIN_SIZE
,

397 
USB_OTG_EP_BULK
);

401 
	`DCD_EP_O≥n
(
pdev
,

402 ((
uöt8_t
)
ªq
->
wIndex
),

403 
MSC_EPOUT_SIZE
,

404 
USB_OTG_EP_BULK
);

408 
	`MSC_BOT_C∂CÃFótuª
(
pdev
, (
uöt8_t
)
ªq
->
wIndex
);

417  
USBD_OK
;

418 
	}
}

427 
uöt8_t
 
	$USBD_MSC_D©aIn
 (*
pdev
,

428 
uöt8_t
 
ïnum
)

430 
	`MSC_BOT_D©aIn
(
pdev
 , 
ïnum
);

431  
USBD_OK
;

432 
	}
}

441 
uöt8_t
 
	$USBD_MSC_D©aOut
 (*
pdev
,

442 
uöt8_t
 
ïnum
)

444 
	`MSC_BOT_D©aOut
(
pdev
 , 
ïnum
);

445  
USBD_OK
;

446 
	}
}

455 
uöt8_t
 *
	$USBD_MSC_GëCfgDesc
 (
uöt8_t
 
•ìd
, 
uöt16_t
 *
Àngth
)

457 *
Àngth
 =  (
USBD_MSC_CfgDesc
);

458  
USBD_MSC_CfgDesc
;

459 
	}
}

468 #ifde‡
USB_OTG_HS_CORE


469 
uöt8_t
 *
	$USBD_MSC_GëOthîCfgDesc
 (
uöt8_t
 
•ìd
,

470 
uöt16_t
 *
Àngth
)

472 *
Àngth
 =  (
USBD_MSC_OthîCfgDesc
);

473  
USBD_MSC_OthîCfgDesc
;

474 
	}
}

	@libstm/STM32_USB_Device_Library/Class/msc/src/usbd_msc_data.c

23 
	~"usbd_msc_d©a.h
"

66 c⁄° 
uöt8_t
 
	gMSC_Page00_Inquúy_D©a
[] = {

70 (
LENGTH_INQUIRY_PAGE00
 - 4),

76 c⁄° 
uöt8_t
 
	gMSC_Mode_Sí£6_d©a
[] = {

87 c⁄° 
uöt8_t
 
	gMSC_Mode_Sí£10_d©a
[] = {

	@libstm/STM32_USB_Device_Library/Class/msc/src/usbd_msc_scsi.c

23 
	~"usbd_msc_bŸ.h
"

24 
	~"usbd_msc_scsi.h
"

25 
	~"usbd_msc_mem.h
"

26 
	~"usbd_msc_d©a.h
"

69 
SCSI_Sí£_Ty≥Def
 
	gSCSI_Sí£
 [
SENSE_LIST_DEEPTH
];

70 
uöt8_t
 
	gSCSI_Sí£_Hód
;

71 
uöt8_t
 
	gSCSI_Sí£_Taû
;

73 
uöt32_t
 
	gSCSI_blk_size
;

74 
uöt32_t
 
	gSCSI_blk_nbr
;

76 
uöt32_t
 
	gSCSI_blk_addr
;

77 
uöt32_t
 
	gSCSI_blk_Àn
;

79 
USB_OTG_CORE_HANDLE
 *
	gcdev
;

88 
öt8_t
 
SCSI_Te°UnôRódy
(
uöt8_t
 
lun
, uöt8_à*
∑øms
);

89 
öt8_t
 
SCSI_Inquúy
(
uöt8_t
 
lun
, uöt8_à*
∑øms
);

90 
öt8_t
 
SCSI_RódF‹m©C≠acôy
(
uöt8_t
 
lun
, uöt8_à*
∑øms
);

91 
öt8_t
 
SCSI_RódC≠acôy10
(
uöt8_t
 
lun
, uöt8_à*
∑øms
);

92 
öt8_t
 
SCSI_Reque°Sí£
 (
uöt8_t
 
lun
, uöt8_à*
∑øms
);

93 
öt8_t
 
SCSI_SèπSt›Unô
(
uöt8_t
 
lun
, uöt8_à*
∑øms
);

94 
öt8_t
 
SCSI_ModeSí£6
 (
uöt8_t
 
lun
, uöt8_à*
∑øms
);

95 
öt8_t
 
SCSI_ModeSí£10
 (
uöt8_t
 
lun
, uöt8_à*
∑øms
);

96 
öt8_t
 
SCSI_Wrôe10
(
uöt8_t
 
lun
 , uöt8_à*
∑øms
);

97 
öt8_t
 
SCSI_Ród10
(
uöt8_t
 
lun
 , uöt8_à*
∑øms
);

98 
öt8_t
 
SCSI_Vîify10
(
uöt8_t
 
lun
, uöt8_à*
∑øms
);

99 
öt8_t
 
SCSI_CheckAddªssR™ge
 (
uöt8_t
 
lun
 ,

100 
uöt32_t
 
blk_off£t
 ,

101 
uöt16_t
 
blk_nbr
);

102 
öt8_t
 
SCSI_Pro˚ssRód
 (
uöt8_t
 
lun
);

104 
öt8_t
 
SCSI_Pro˚ssWrôe
 (
uöt8_t
 
lun
);

123 
öt8_t
 
	$SCSI_Pro˚ssCmd
(
USB_OTG_CORE_HANDLE
 *
pdev
,

124 
uöt8_t
 
lun
,

125 
uöt8_t
 *
∑øms
)

127 
cdev
 = 
pdev
;

129 
∑øms
[0])

131 
SCSI_TEST_UNIT_READY
:

132  
	`SCSI_Te°UnôRódy
(
lun
, 
∑øms
);

134 
SCSI_REQUEST_SENSE
:

135  
	`SCSI_Reque°Sí£
 (
lun
, 
∑øms
);

136 
SCSI_INQUIRY
:

137  
	`SCSI_Inquúy
(
lun
, 
∑øms
);

139 
SCSI_START_STOP_UNIT
:

140  
	`SCSI_SèπSt›Unô
(
lun
, 
∑øms
);

142 
SCSI_ALLOW_MEDIUM_REMOVAL
:

143  
	`SCSI_SèπSt›Unô
(
lun
, 
∑øms
);

145 
SCSI_MODE_SENSE6
:

146  
	`SCSI_ModeSí£6
 (
lun
, 
∑øms
);

148 
SCSI_MODE_SENSE10
:

149  
	`SCSI_ModeSí£10
 (
lun
, 
∑øms
);

151 
SCSI_READ_FORMAT_CAPACITIES
:

152  
	`SCSI_RódF‹m©C≠acôy
(
lun
, 
∑øms
);

154 
SCSI_READ_CAPACITY10
:

155  
	`SCSI_RódC≠acôy10
(
lun
, 
∑øms
);

157 
SCSI_READ10
:

158  
	`SCSI_Ród10
(
lun
, 
∑øms
);

160 
SCSI_WRITE10
:

161  
	`SCSI_Wrôe10
(
lun
, 
∑øms
);

163 
SCSI_VERIFY10
:

164  
	`SCSI_Vîify10
(
lun
, 
∑øms
);

167 
	`SCSI_Sí£Code
(
lun
,

168 
ILLEGAL_REQUEST
,

169 
INVALID_CDB
);

172 
	}
}

182 
öt8_t
 
	$SCSI_Te°UnôRódy
(
uöt8_t
 
lun
, uöt8_à*
∑øms
)

186 i‡(
MSC_BOT_cbw
.
dD©aLígth
 != 0)

188 
	`SCSI_Sí£Code
(
MSC_BOT_cbw
.
bLUN
,

189 
ILLEGAL_REQUEST
,

190 
INVALID_CDB
);

194 if(
USBD_STORAGE_f›s
->
	`IsRódy
(
lun
) !=0 )

196 
	`SCSI_Sí£Code
(
lun
,

197 
NOT_READY
,

198 
MEDIUM_NOT_PRESENT
);

201 
MSC_BOT_D©aLí
 = 0;

203 
	}
}

212 
öt8_t
 
	$SCSI_Inquúy
(
uöt8_t
 
lun
, uöt8_à*
∑øms
)

214 
uöt8_t
* 
pPage
;

215 
uöt16_t
 
Àn
;

217 i‡(
∑øms
[1] & 0x01)

219 
pPage
 = (
uöt8_t
 *)
MSC_Page00_Inquúy_D©a
;

220 
Àn
 = 
LENGTH_INQUIRY_PAGE00
;

225 
pPage
 = (
uöt8_t
 *)&
USBD_STORAGE_f›s
->
pInquúy
[
lun
 * 
USBD_STD_INQUIRY_LENGTH
];

226 
Àn
 = 
pPage
[4] + 5;

228 i‡(
∑øms
[4] <
Àn
)

230 
Àn
 = 
∑øms
[4];

233 
MSC_BOT_D©aLí
 = 
Àn
;

235 
Àn
)

237 
Àn
--;

238 
MSC_BOT_D©a
[
Àn
] = 
pPage
[len];

241 
	}
}

250 
öt8_t
 
	$SCSI_RódC≠acôy10
(
uöt8_t
 
lun
, uöt8_à*
∑øms
)

253 if(
USBD_STORAGE_f›s
->
	`GëC≠acôy
(
lun
, &
SCSI_blk_nbr
, &
SCSI_blk_size
) != 0)

255 
	`SCSI_Sí£Code
(
lun
,

256 
NOT_READY
,

257 
MEDIUM_NOT_PRESENT
);

263 
MSC_BOT_D©a
[0] = (
uöt8_t
)(
SCSI_blk_nbr
 - 1 >> 24);

264 
MSC_BOT_D©a
[1] = (
uöt8_t
)(
SCSI_blk_nbr
 - 1 >> 16);

265 
MSC_BOT_D©a
[2] = (
uöt8_t
)(
SCSI_blk_nbr
 - 1 >> 8);

266 
MSC_BOT_D©a
[3] = (
uöt8_t
)(
SCSI_blk_nbr
 - 1);

268 
MSC_BOT_D©a
[4] = (
uöt8_t
)(
SCSI_blk_size
 >> 24);

269 
MSC_BOT_D©a
[5] = (
uöt8_t
)(
SCSI_blk_size
 >> 16);

270 
MSC_BOT_D©a
[6] = (
uöt8_t
)(
SCSI_blk_size
 >> 8);

271 
MSC_BOT_D©a
[7] = (
uöt8_t
)(
SCSI_blk_size
);

273 
MSC_BOT_D©aLí
 = 8;

276 
	}
}

284 
öt8_t
 
	$SCSI_RódF‹m©C≠acôy
(
uöt8_t
 
lun
, uöt8_à*
∑øms
)

287 
uöt32_t
 
blk_size
;

288 
uöt32_t
 
blk_nbr
;

289 
uöt16_t
 
i
;

291 
i
=0 ; i < 12 ; i++)

293 
MSC_BOT_D©a
[
i
] = 0;

296 if(
USBD_STORAGE_f›s
->
	`GëC≠acôy
(
lun
, &
blk_nbr
, &
blk_size
) != 0)

298 
	`SCSI_Sí£Code
(
lun
,

299 
NOT_READY
,

300 
MEDIUM_NOT_PRESENT
);

305 
MSC_BOT_D©a
[3] = 0x08;

306 
MSC_BOT_D©a
[4] = (
uöt8_t
)(
blk_nbr
 - 1 >> 24);

307 
MSC_BOT_D©a
[5] = (
uöt8_t
)(
blk_nbr
 - 1 >> 16);

308 
MSC_BOT_D©a
[6] = (
uöt8_t
)(
blk_nbr
 - 1 >> 8);

309 
MSC_BOT_D©a
[7] = (
uöt8_t
)(
blk_nbr
 - 1);

311 
MSC_BOT_D©a
[8] = 0x02;

312 
MSC_BOT_D©a
[9] = (
uöt8_t
)(
blk_size
 >> 16);

313 
MSC_BOT_D©a
[10] = (
uöt8_t
)(
blk_size
 >> 8);

314 
MSC_BOT_D©a
[11] = (
uöt8_t
)(
blk_size
);

316 
MSC_BOT_D©aLí
 = 12;

319 
	}
}

327 
öt8_t
 
	$SCSI_ModeSí£6
 (
uöt8_t
 
lun
, uöt8_à*
∑øms
)

330 
uöt16_t
 
Àn
 = 8 ;

331 
MSC_BOT_D©aLí
 = 
Àn
;

333 
Àn
)

335 
Àn
--;

336 
MSC_BOT_D©a
[
Àn
] = 
MSC_Mode_Sí£6_d©a
[len];

339 
	}
}

348 
öt8_t
 
	$SCSI_ModeSí£10
 (
uöt8_t
 
lun
, uöt8_à*
∑øms
)

350 
uöt16_t
 
Àn
 = 8;

352 
MSC_BOT_D©aLí
 = 
Àn
;

354 
Àn
)

356 
Àn
--;

357 
MSC_BOT_D©a
[
Àn
] = 
MSC_Mode_Sí£10_d©a
[len];

360 
	}
}

370 
öt8_t
 
	$SCSI_Reque°Sí£
 (
uöt8_t
 
lun
, uöt8_à*
∑øms
)

372 
uöt8_t
 
i
;

374 
i
=0 ; i < 
REQUEST_SENSE_DATA_LEN
 ; i++)

376 
MSC_BOT_D©a
[
i
] = 0;

379 
MSC_BOT_D©a
[0] = 0x70;

380 
MSC_BOT_D©a
[7] = 
REQUEST_SENSE_DATA_LEN
 - 6;

382 if((
SCSI_Sí£_Hód
 !
SCSI_Sí£_Taû
)) {

384 
MSC_BOT_D©a
[2] = 
SCSI_Sí£
[
SCSI_Sí£_Hód
].
Skey
;

385 
MSC_BOT_D©a
[12] = 
SCSI_Sí£
[
SCSI_Sí£_Hód
].
w
.
b
.
ASCQ
;

386 
MSC_BOT_D©a
[13] = 
SCSI_Sí£
[
SCSI_Sí£_Hód
].
w
.
b
.
ASC
;

387 
SCSI_Sí£_Hód
++;

389 i‡(
SCSI_Sí£_Hód
 =
SENSE_LIST_DEEPTH
)

391 
SCSI_Sí£_Hód
 = 0;

394 
MSC_BOT_D©aLí
 = 
REQUEST_SENSE_DATA_LEN
;

396 i‡(
∑øms
[4] <
REQUEST_SENSE_DATA_LEN
)

398 
MSC_BOT_D©aLí
 = 
∑øms
[4];

401 
	}
}

412 
	$SCSI_Sí£Code
(
uöt8_t
 
lun
, uöt8_à
sKey
, uöt8_à
ASC
)

414 
SCSI_Sí£
[
SCSI_Sí£_Taû
].
Skey
 = 
sKey
;

415 
SCSI_Sí£
[
SCSI_Sí£_Taû
].
w
.
ASC
 = ASC << 8;

416 
SCSI_Sí£_Taû
++;

417 i‡(
SCSI_Sí£_Taû
 =
SENSE_LIST_DEEPTH
)

419 
SCSI_Sí£_Taû
 = 0;

421 
	}
}

429 
öt8_t
 
	$SCSI_SèπSt›Unô
(
uöt8_t
 
lun
, uöt8_à*
∑øms
)

431 
MSC_BOT_D©aLí
 = 0;

433 
	}
}

442 
öt8_t
 
	$SCSI_Ród10
(
uöt8_t
 
lun
 , uöt8_à*
∑øms
)

444 if(
MSC_BOT_Sèã
 =
BOT_IDLE
)

449 i‡((
MSC_BOT_cbw
.
bmFœgs
 & 0x80) != 0x80)

451 
	`SCSI_Sí£Code
(
MSC_BOT_cbw
.
bLUN
,

452 
ILLEGAL_REQUEST
,

453 
INVALID_CDB
);

457 if(
USBD_STORAGE_f›s
->
	`IsRódy
(
lun
) !=0 )

459 
	`SCSI_Sí£Code
(
lun
,

460 
NOT_READY
,

461 
MEDIUM_NOT_PRESENT
);

465 
SCSI_blk_addr
 = (
∑øms
[2] << 24) | \

466 (
∑øms
[3] << 16) | \

467 (
∑øms
[4] << 8) | \

468 
∑øms
[5];

470 
SCSI_blk_Àn
 = (
∑øms
[7] << 8) | \

471 
∑øms
[8];

475 if–
	`SCSI_CheckAddªssR™ge
(
lun
, 
SCSI_blk_addr
, 
SCSI_blk_Àn
) < 0)

480 
MSC_BOT_Sèã
 = 
BOT_DATA_IN
;

481 
SCSI_blk_addr
 *
SCSI_blk_size
;

482 
SCSI_blk_Àn
 *
SCSI_blk_size
;

485 i‡(
MSC_BOT_cbw
.
dD©aLígth
 !
SCSI_blk_Àn
)

487 
	`SCSI_Sí£Code
(
MSC_BOT_cbw
.
bLUN
,

488 
ILLEGAL_REQUEST
,

489 
INVALID_CDB
);

493 
MSC_BOT_D©aLí
 = 
MSC_MEDIA_PACKET
;

495  
	`SCSI_Pro˚ssRód
(
lun
);

496 
	}
}

506 
öt8_t
 
	$SCSI_Wrôe10
 (
uöt8_t
 
lun
 , uöt8_à*
∑øms
)

508 i‡(
MSC_BOT_Sèã
 =
BOT_IDLE
)

513 i‡((
MSC_BOT_cbw
.
bmFœgs
 & 0x80) == 0x80)

515 
	`SCSI_Sí£Code
(
MSC_BOT_cbw
.
bLUN
,

516 
ILLEGAL_REQUEST
,

517 
INVALID_CDB
);

522 if(
USBD_STORAGE_f›s
->
	`IsRódy
(
lun
) !=0 )

524 
	`SCSI_Sí£Code
(
lun
,

525 
NOT_READY
,

526 
MEDIUM_NOT_PRESENT
);

531 if(
USBD_STORAGE_f›s
->
	`IsWrôePrŸe˘ed
(
lun
) !=0 )

533 
	`SCSI_Sí£Code
(
lun
,

534 
NOT_READY
,

535 
WRITE_PROTECTED
);

540 
SCSI_blk_addr
 = (
∑øms
[2] << 24) | \

541 (
∑øms
[3] << 16) | \

542 (
∑øms
[4] << 8) | \

543 
∑øms
[5];

544 
SCSI_blk_Àn
 = (
∑øms
[7] << 8) | \

545 
∑øms
[8];

548 if(
	`SCSI_CheckAddªssR™ge
(
lun
, 
SCSI_blk_addr
, 
SCSI_blk_Àn
) < 0)

553 
SCSI_blk_addr
 *
SCSI_blk_size
;

554 
SCSI_blk_Àn
 *
SCSI_blk_size
;

557 i‡(
MSC_BOT_cbw
.
dD©aLígth
 !
SCSI_blk_Àn
)

559 
	`SCSI_Sí£Code
(
MSC_BOT_cbw
.
bLUN
,

560 
ILLEGAL_REQUEST
,

561 
INVALID_CDB
);

566 
MSC_BOT_Sèã
 = 
BOT_DATA_OUT
;

567 
	`DCD_EP_Pª∑ªRx
 (
cdev
,

568 
MSC_OUT_EP
,

569 
MSC_BOT_D©a
,

570 
	`MIN
 (
SCSI_blk_Àn
, 
MSC_MEDIA_PACKET
));

574  
	`SCSI_Pro˚ssWrôe
(
lun
);

577 
	}
}

588 
öt8_t
 
	$SCSI_Vîify10
(
uöt8_t
 
lun
 , uöt8_à*
∑øms
){

589 i‡((
∑øms
[1]& 0x02) == 0x02)

591 
	`SCSI_Sí£Code
 (
lun
, 
ILLEGAL_REQUEST
, 
INVALID_FIELED_IN_COMMAND
);

595 if(
	`SCSI_CheckAddªssR™ge
(
lun
, 
SCSI_blk_addr
, 
SCSI_blk_Àn
) < 0)

599 
MSC_BOT_D©aLí
 = 0;

601 
	}
}

611 
öt8_t
 
	$SCSI_CheckAddªssR™ge
 (
uöt8_t
 
lun
 , 
uöt32_t
 
blk_off£t
 , 
uöt16_t
 
blk_nbr
)

614 i‡((
blk_off£t
 + 
blk_nbr
Ë> 
SCSI_blk_nbr
 )

616 
	`SCSI_Sí£Code
(
lun
, 
ILLEGAL_REQUEST
, 
ADDRESS_OUT_OF_RANGE
);

620 
	}
}

628 
öt8_t
 
	$SCSI_Pro˚ssRód
 (
uöt8_t
 
lun
)

630 
uöt32_t
 
Àn
;

632 
Àn
 = 
	`MIN
(
SCSI_blk_Àn
 , 
MSC_MEDIA_PACKET
);

634 if–
USBD_STORAGE_f›s
->
	`Ród
(
lun
 ,

635 
MSC_BOT_D©a
,

636 
SCSI_blk_addr
 / 
SCSI_blk_size
,

637 
Àn
 / 
SCSI_blk_size
) < 0)

640 
	`SCSI_Sí£Code
(
lun
, 
HARDWARE_ERROR
, 
UNRECOVERED_READ_ERROR
);

645 
	`DCD_EP_Tx
 (
cdev
,

646 
MSC_IN_EP
,

647 
MSC_BOT_D©a
,

648 
Àn
);

651 
SCSI_blk_addr
 +
Àn
;

652 
SCSI_blk_Àn
 -
Àn
;

655 
MSC_BOT_csw
.
dD©aResidue
 -
Àn
;

657 i‡(
SCSI_blk_Àn
 == 0)

659 
MSC_BOT_Sèã
 = 
BOT_LAST_DATA_IN
;

662 
	}
}

671 
öt8_t
 
	$SCSI_Pro˚ssWrôe
 (
uöt8_t
 
lun
)

673 
uöt32_t
 
Àn
;

675 
Àn
 = 
	`MIN
(
SCSI_blk_Àn
 , 
MSC_MEDIA_PACKET
);

677 if(
USBD_STORAGE_f›s
->
	`Wrôe
(
lun
 ,

678 
MSC_BOT_D©a
,

679 
SCSI_blk_addr
 / 
SCSI_blk_size
,

680 
Àn
 / 
SCSI_blk_size
) < 0)

682 
	`SCSI_Sí£Code
(
lun
, 
HARDWARE_ERROR
, 
WRITE_FAULT
);

687 
SCSI_blk_addr
 +
Àn
;

688 
SCSI_blk_Àn
 -
Àn
;

691 
MSC_BOT_csw
.
dD©aResidue
 -
Àn
;

693 i‡(
SCSI_blk_Àn
 == 0)

695 
	`MSC_BOT_SídCSW
 (
cdev
, 
CSW_CMD_PASSED
);

700 
	`DCD_EP_Pª∑ªRx
 (
cdev
,

701 
MSC_OUT_EP
,

702 
MSC_BOT_D©a
,

703 
	`MIN
 (
SCSI_blk_Àn
, 
MSC_MEDIA_PACKET
));

707 
	}
}

	@libstm/STM32_USB_Device_Library/Class/msc/src/usbd_storage_template.c

24 
	~"usbd_msc_mem.h
"

34 
	#STORAGE_LUN_NBR
 1

	)

36 
öt8_t
 
STORAGE_Inô
 (
uöt8_t
 
lun
);

38 
öt8_t
 
STORAGE_GëC≠acôy
 (
uöt8_t
 
lun
,

39 
uöt32_t
 *
block_num
,

40 
uöt16_t
 *
block_size
);

42 
öt8_t
 
STORAGE_IsRódy
 (
uöt8_t
 
lun
);

44 
öt8_t
 
STORAGE_IsWrôePrŸe˘ed
 (
uöt8_t
 
lun
);

46 
öt8_t
 
STORAGE_Ród
 (
uöt8_t
 
lun
,

47 
uöt8_t
 *
buf
,

48 
uöt32_t
 
blk_addr
,

49 
uöt16_t
 
blk_Àn
);

51 
öt8_t
 
STORAGE_Wrôe
 (
uöt8_t
 
lun
,

52 
uöt8_t
 *
buf
,

53 
uöt32_t
 
blk_addr
,

54 
uöt16_t
 
blk_Àn
);

56 
öt8_t
 
STORAGE_GëMaxLun
 ();

59 c⁄° 
öt8_t
 
	gSTORAGE_Inquúyd©a
[] = {

66 (
USBD_STD_INQUIRY_LENGTH
 - 5),

76 
USBD_STORAGE_cb_Ty≥Def
 
	gUSBD_MICRO_SDIO_f›s
 =

78 
STORAGE_Inô
,

79 
STORAGE_GëC≠acôy
,

80 
STORAGE_IsRódy
,

81 
STORAGE_IsWrôePrŸe˘ed
,

82 
STORAGE_Ród
,

83 
STORAGE_Wrôe
,

84 
STORAGE_GëMaxLun
,

85 
STORAGE_Inquúyd©a
,

89 
USBD_STORAGE_cb_Ty≥Def
 *
	gUSBD_STORAGE_f›s
 = &
USBD_MICRO_SDIO_f›s
;

97 
öt8_t
 
	$STORAGE_Inô
 (
uöt8_t
 
lun
)

100 
	}
}

109 
öt8_t
 
	$STORAGE_GëC≠acôy
 (
uöt8_t
 
lun
, 
uöt32_t
 *
block_num
, 
uöt16_t
 *
block_size
)

112 
	}
}

121 
öt8_t
 
	$STORAGE_IsRódy
 (
uöt8_t
 
lun
)

124 
	}
}

133 
öt8_t
 
	$STORAGE_IsWrôePrŸe˘ed
 (
uöt8_t
 
lun
)

136 
	}
}

145 
öt8_t
 
	$STORAGE_Ród
 (
uöt8_t
 
lun
,

146 
uöt8_t
 *
buf
,

147 
uöt32_t
 
blk_addr
,

148 
uöt16_t
 
blk_Àn
)

151 
	}
}

159 
öt8_t
 
	$STORAGE_Wrôe
 (
uöt8_t
 
lun
,

160 
uöt8_t
 *
buf
,

161 
uöt32_t
 
blk_addr
,

162 
uöt16_t
 
blk_Àn
)

165 
	}
}

173 
öt8_t
 
	$STORAGE_GëMaxLun
 ()

175  (
STORAGE_LUN_NBR
 - 1);

176 
	}
}

	@libstm/STM32_USB_Device_Library/Core/inc/usbd_conf_template.h

23 #i‚de‡
__USBD_CONF__H__


24 
	#__USBD_CONF__H__


	)

27 
	~"°m32f2xx.h
"

34 
	#USE_USB_OTG_HS


	)

36 
	#USBD_CFG_MAX_NUM
 1

	)

37 
	#USB_MAX_STR_DESC_SIZ
 64

	)

38 
	#USBD_EP0_MAX_PACKET_SIZE
 64

	)

	@libstm/STM32_USB_Device_Library/Core/inc/usbd_core.h

23 #i‚de‡
__USBD_CORE_H


24 
	#__USBD_CORE_H


	)

27 
	~"usb_dcd.h
"

28 
	~"usbd_def.h
"

29 
	~"usbd_c⁄f.h
"

46 
	mUSBD_OK
 = 0,

47 
	mUSBD_BUSY
,

48 
	mUSBD_FAIL
,

49 }
	tUSBD_Sètus
;

85 
USBD_Inô
(
USB_OTG_CORE_HANDLE
 *
pdev
,

86 
USB_OTG_CORE_ID_Ty≥Def
 
c‹eID
,

87 
USBD_DEVICE
 *
pDevi˚
,

88 
USBD_Cœss_cb_Ty≥Def
 *
˛ass_cb
,

89 
USBD_U§_cb_Ty≥Def
 *
u§_cb
);

91 
USBD_Sètus
 
USBD_DeInô
(
USB_OTG_CORE_HANDLE
 *
pdev
);

93 
USBD_Sètus
 
USBD_CÃCfg
(
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
cfgidx
);

95 
USBD_Sètus
 
USBD_SëCfg
(
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
cfgidx
);

	@libstm/STM32_USB_Device_Library/Core/inc/usbd_def.h

24 #i‚de‡
__USBD_DEF_H


25 
	#__USBD_DEF_H


	)

27 
	~"usbd_c⁄f.h
"

42 #i‚de‡
NULL


43 
	#NULL
 0

	)

46 
	#USB_LEN_DEV_QUALIFIER_DESC
 0x0A

	)

47 
	#USB_LEN_DEV_DESC
 0x12

	)

48 
	#USB_LEN_CFG_DESC
 0x09

	)

49 
	#USB_LEN_IF_DESC
 0x09

	)

50 
	#USB_LEN_EP_DESC
 0x07

	)

51 
	#USB_LEN_OTG_DESC
 0x03

	)

53 
	#USBD_IDX_LANGID_STR
 0x00

	)

54 
	#USBD_IDX_MFC_STR
 0x01

	)

55 
	#USBD_IDX_PRODUCT_STR
 0x02

	)

56 
	#USBD_IDX_SERIAL_STR
 0x03

	)

57 
	#USBD_IDX_CONFIG_STR
 0x04

	)

58 
	#USBD_IDX_INTERFACE_STR
 0x05

	)

60 
	#USB_REQ_TYPE_STANDARD
 0x00

	)

61 
	#USB_REQ_TYPE_CLASS
 0x20

	)

62 
	#USB_REQ_TYPE_VENDOR
 0x40

	)

63 
	#USB_REQ_TYPE_MASK
 0x60

	)

65 
	#USB_REQ_RECIPIENT_DEVICE
 0x00

	)

66 
	#USB_REQ_RECIPIENT_INTERFACE
 0x01

	)

67 
	#USB_REQ_RECIPIENT_ENDPOINT
 0x02

	)

68 
	#USB_REQ_RECIPIENT_MASK
 0x03

	)

70 
	#USB_REQ_GET_STATUS
 0x00

	)

71 
	#USB_REQ_CLEAR_FEATURE
 0x01

	)

72 
	#USB_REQ_SET_FEATURE
 0x03

	)

73 
	#USB_REQ_SET_ADDRESS
 0x05

	)

74 
	#USB_REQ_GET_DESCRIPTOR
 0x06

	)

75 
	#USB_REQ_SET_DESCRIPTOR
 0x07

	)

76 
	#USB_REQ_GET_CONFIGURATION
 0x08

	)

77 
	#USB_REQ_SET_CONFIGURATION
 0x09

	)

78 
	#USB_REQ_GET_INTERFACE
 0x0A

	)

79 
	#USB_REQ_SET_INTERFACE
 0x0B

	)

80 
	#USB_REQ_SYNCH_FRAME
 0x0C

	)

82 
	#USB_DESC_TYPE_DEVICE
 1

	)

83 
	#USB_DESC_TYPE_CONFIGURATION
 2

	)

84 
	#USB_DESC_TYPE_STRING
 3

	)

85 
	#USB_DESC_TYPE_INTERFACE
 4

	)

86 
	#USB_DESC_TYPE_ENDPOINT
 5

	)

87 
	#USB_DESC_TYPE_DEVICE_QUALIFIER
 6

	)

88 
	#USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
 7

	)

91 
	#USB_CONFIG_REMOTE_WAKEUP
 2

	)

92 
	#USB_CONFIG_SELF_POWERED
 1

	)

94 
	#USB_FEATURE_EP_HALT
 0

	)

95 
	#USB_FEATURE_REMOTE_WAKEUP
 1

	)

96 
	#USB_FEATURE_TEST_MODE
 2

	)

115 
	#SWAPBYTE
(
addr
Ë(((
uöt16_t
)(*((
uöt8_t
 *)(addr)))) + \

116 (((
uöt16_t
)(*(((
uöt8_t
 *)(
addr
)Ë+ 1))Ë<< 8))

	)

118 
	#LOBYTE
(
x
Ë((
uöt8_t
)(x & 0x00FF))

	)

119 
	#HIBYTE
(
x
Ë((
uöt8_t
)((x & 0xFF00Ë>>8))

	)

	@libstm/STM32_USB_Device_Library/Core/inc/usbd_ioreq.h

24 #i‚de‡
__USBD_IOREQ_H_


25 
	#__USBD_IOREQ_H_


	)

28 
	~"usbd_def.h
"

29 
	~"usbd_c‹e.h
"

79 
USBD_Sètus
 
USBD_CéSídD©a
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

80 
uöt8_t
 *
buf
,

81 
uöt16_t
 
Àn
);

83 
USBD_Sètus
 
USBD_CéC⁄töueSídD©a
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

84 
uöt8_t
 *
pbuf
,

85 
uöt16_t
 
Àn
);

87 
USBD_Sètus
 
USBD_CéPª∑ªRx
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

88 
uöt8_t
 *
pbuf
,

89 
uöt16_t
 
Àn
);

91 
USBD_Sètus
 
USBD_CéC⁄töueRx
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

92 
uöt8_t
 *
pbuf
,

93 
uöt16_t
 
Àn
);

95 
USBD_Sètus
 
USBD_CéSídSètus
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

97 
USBD_Sètus
 
USBD_CéRe˚iveSètus
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

99 
uöt16_t
 
USBD_GëRxCou¡
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

100 
uöt8_t
 
ïnum
);

	@libstm/STM32_USB_Device_Library/Core/inc/usbd_req.h

24 #i‚de‡
__USB_REQUEST_H_


25 
	#__USB_REQUEST_H_


	)

28 
	~"usbd_def.h
"

29 
	~"usbd_c‹e.h
"

30 
	~"usbd_c⁄f.h
"

77 
USBD_Sètus
 
USBD_StdDevReq
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
USB_SETUP_REQ
 *
ªq
);

78 
USBD_Sètus
 
USBD_StdItfReq
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
USB_SETUP_REQ
 *
ªq
);

79 
USBD_Sètus
 
USBD_StdEPReq
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
USB_SETUP_REQ
 *
ªq
);

80 
USBD_P¨£SëupReque°
–
USB_OTG_CORE_HANDLE
 *
pdev
,

81 
USB_SETUP_REQ
 *
ªq
);

83 
USBD_CéEº‹
–
USB_OTG_CORE_HANDLE
 *
pdev
,

84 
USB_SETUP_REQ
 *
ªq
);

86 
USBD_GëSåög
(
uöt8_t
 *
desc
, uöt8_à*
unicode
, 
uöt16_t
 *
Àn
);

	@libstm/STM32_USB_Device_Library/Core/inc/usbd_usr.h

23 #i‚de‡
__USBD_USR_H__


24 
	#__USBD_USR_H__


	)

27 
	~"usbd_c‹e.h
"

48 
USBD_U§_cb_Ty≥Def
 
USR_cb
;

49 
USBD_U§_cb_Ty≥Def
 
USR_FS_cb
;

50 
USBD_U§_cb_Ty≥Def
 
USR_HS_cb
;

79 
USBD_USR_Inô
();

80 
USBD_USR_Devi˚Re£t
 (
uöt8_t
 
•ìd
);

81 
USBD_USR_Devi˚C⁄figuªd
 ();

82 
USBD_USR_Devi˚Su•íded
();

83 
USBD_USR_Devi˚Resumed
();

85 
USBD_USR_Devi˚C⁄√˘ed
();

86 
USBD_USR_Devi˚Disc⁄√˘ed
();

88 
USBD_USR_FS_Inô
();

89 
USBD_USR_FS_Devi˚Re£t
 (
uöt8_t
 
•ìd
);

90 
USBD_USR_FS_Devi˚C⁄figuªd
 ();

91 
USBD_USR_FS_Devi˚Su•íded
();

92 
USBD_USR_FS_Devi˚Resumed
();

94 
USBD_USR_FS_Devi˚C⁄√˘ed
();

95 
USBD_USR_FS_Devi˚Disc⁄√˘ed
();

97 
USBD_USR_HS_Inô
();

98 
USBD_USR_HS_Devi˚Re£t
 (
uöt8_t
 
•ìd
);

99 
USBD_USR_HS_Devi˚C⁄figuªd
 ();

100 
USBD_USR_HS_Devi˚Su•íded
();

101 
USBD_USR_HS_Devi˚Resumed
();

103 
USBD_USR_HS_Devi˚C⁄√˘ed
();

104 
USBD_USR_HS_Devi˚Disc⁄√˘ed
();

	@libstm/STM32_USB_Device_Library/Core/src/usbd_core.c

23 
	~"usbd_c‹e.h
"

24 
	~"usbd_ªq.h
"

25 
	~"usbd_i‹eq.h
"

26 
	~"usb_dcd_öt.h
"

27 
	~"usb_b•.h
"

69 
uöt8_t
 
USBD_SëupSège
(
USB_OTG_CORE_HANDLE
 *
pdev
);

70 
uöt8_t
 
USBD_D©aOutSège
(
USB_OTG_CORE_HANDLE
 *
pdev
 , uöt8_à
ïnum
);

71 
uöt8_t
 
USBD_D©aInSège
(
USB_OTG_CORE_HANDLE
 *
pdev
 , uöt8_à
ïnum
);

72 
uöt8_t
 
USBD_SOF
(
USB_OTG_CORE_HANDLE
 *
pdev
);

73 
uöt8_t
 
USBD_Re£t
(
USB_OTG_CORE_HANDLE
 *
pdev
);

74 
uöt8_t
 
USBD_Su•íd
(
USB_OTG_CORE_HANDLE
 *
pdev
);

75 
uöt8_t
 
USBD_Resume
(
USB_OTG_CORE_HANDLE
 *
pdev
);

76 #ifde‡
VBUS_SENSING_ENABLED


77 
uöt8_t
 
USBD_DevC⁄√˘ed
(
USB_OTG_CORE_HANDLE
 *
pdev
);

78 
uöt8_t
 
USBD_DevDisc⁄√˘ed
(
USB_OTG_CORE_HANDLE
 *
pdev
);

80 
uöt8_t
 
USBD_IsoINIncom∂ëe
(
USB_OTG_CORE_HANDLE
 *
pdev
);

81 
uöt8_t
 
USBD_IsoOUTIncom∂ëe
(
USB_OTG_CORE_HANDLE
 *
pdev
);

92 
USBD_DCD_INT_cb_Ty≥Def
 
	gUSBD_DCD_INT_cb
 =

94 
USBD_D©aOutSège
,

95 
USBD_D©aInSège
,

96 
USBD_SëupSège
,

97 
USBD_SOF
,

98 
USBD_Re£t
,

99 
USBD_Su•íd
,

100 
USBD_Resume
,

101 
USBD_IsoINIncom∂ëe
,

102 
USBD_IsoOUTIncom∂ëe
,

103 #ifde‡
VBUS_SENSING_ENABLED


104 
USBD_DevC⁄√˘ed
,

105 
USBD_DevDisc⁄√˘ed
,

109 
USBD_DCD_INT_cb_Ty≥Def
 *
	gUSBD_DCD_INT_f›s
 = &
USBD_DCD_INT_cb
;

127 
	$USBD_Inô
(
USB_OTG_CORE_HANDLE
 *
pdev
,

128 
USB_OTG_CORE_ID_Ty≥Def
 
c‹eID
,

129 
USBD_DEVICE
 *
pDevi˚
,

130 
USBD_Cœss_cb_Ty≥Def
 *
˛ass_cb
,

131 
USBD_U§_cb_Ty≥Def
 *
u§_cb
)

134 
	`USB_OTG_BSP_Inô
(
pdev
);

136 
	`USBD_DeInô
(
pdev
);

139 
pdev
->
dev
.
˛ass_cb
 = class_cb;

140 
pdev
->
dev
.
u§_cb
 = usr_cb;

141 
pdev
->
dev
.
u§_devi˚
 = 
pDevi˚
;

144 
	`DCD_Inô
(
pdev
 , 
c‹eID
);

147 
pdev
->
dev
.
u§_cb
->
	`Inô
();

150 
	`USB_OTG_BSP_E«bÀI¡îru±
(
pdev
);

151 
	}
}

159 
USBD_Sètus
 
	$USBD_DeInô
(
USB_OTG_CORE_HANDLE
 *
pdev
)

163  
USBD_OK
;

164 
	}
}

172 
uöt8_t
 
	$USBD_SëupSège
(
USB_OTG_CORE_HANDLE
 *
pdev
)

174 
USB_SETUP_REQ
 
ªq
;

176 
	`USBD_P¨£SëupReque°
(
pdev
 , &
ªq
);

178 
ªq
.
bmReque°
 & 0x1F)

180 
USB_REQ_RECIPIENT_DEVICE
:

181 
	`USBD_StdDevReq
 (
pdev
, &
ªq
);

184 
USB_REQ_RECIPIENT_INTERFACE
:

185 
	`USBD_StdItfReq
(
pdev
, &
ªq
);

188 
USB_REQ_RECIPIENT_ENDPOINT
:

189 
	`USBD_StdEPReq
(
pdev
, &
ªq
);

193 
	`DCD_EP_SèŒ
(
pdev
 , 
ªq
.
bmReque°
 & 0x80);

196  
USBD_OK
;

197 
	}
}

206 
uöt8_t
 
	$USBD_D©aOutSège
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
ïnum
)

208 
USB_OTG_EP
 *
ï
;

210 if(
ïnum
 == 0)

212 
ï
 = &
pdev
->
dev
.
out_ï
[0];

213 i‡–
pdev
->
dev
.
devi˚_°©e
 =
USB_OTG_EP0_DATA_OUT
)

215 if(
ï
->
ªm_d©a_Àn
 >Ép->
max∑ckë
)

217 
ï
->
ªm_d©a_Àn
 -ï->
max∑ckë
;

219 if(
pdev
->
cfg
.
dma_íabÀ
 == 1)

222 
ï
->
x„r_buff
 +ï->
max∑ckë
;

224 
	`USBD_CéC⁄töueRx
 (
pdev
,

225 
ï
->
x„r_buff
,

226 
	`MIN
(
ï
->
ªm_d©a_Àn
 ,ï->
max∑ckë
));

230 if((
pdev
->
dev
.
˛ass_cb
->
EP0_RxRódy
 !
NULL
)&&

231 (
pdev
->
dev
.
devi˚_°©us
 =
USB_OTG_CONFIGURED
))

233 
pdev
->
dev
.
˛ass_cb
->
	`EP0_RxRódy
(pdev);

235 
	`USBD_CéSídSètus
(
pdev
);

239 if((
pdev
->
dev
.
˛ass_cb
->
D©aOut
 !
NULL
)&&

240 (
pdev
->
dev
.
devi˚_°©us
 =
USB_OTG_CONFIGURED
))

242 
pdev
->
dev
.
˛ass_cb
->
	`D©aOut
’dev, 
ïnum
);

244  
USBD_OK
;

245 
	}
}

254 
uöt8_t
 
	$USBD_D©aInSège
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
ïnum
)

256 
USB_OTG_EP
 *
ï
;

258 if(
ïnum
 == 0)

260 
ï
 = &
pdev
->
dev
.
ö_ï
[0];

261 i‡–
pdev
->
dev
.
devi˚_°©e
 =
USB_OTG_EP0_DATA_IN
)

263 if(
ï
->
ªm_d©a_Àn
 >Ép->
max∑ckë
)

265 
ï
->
ªm_d©a_Àn
 -ï->
max∑ckë
;

266 if(
pdev
->
cfg
.
dma_íabÀ
 == 1)

269 
ï
->
x„r_buff
 +ï->
max∑ckë
;

271 
	`USBD_CéC⁄töueSídD©a
 (
pdev
,

272 
ï
->
x„r_buff
,

273 
ï
->
ªm_d©a_Àn
);

277 if((
ï
->
tŸÆ_d©a_Àn
 %Ép->
max∑ckë
 == 0) &&

278 (
ï
->
tŸÆ_d©a_Àn
 >ï->
max∑ckë
) &&

279 (
ï
->
tŸÆ_d©a_Àn
 <Ép->
˘l_d©a_Àn
 ))

282 
	`USBD_CéC⁄töueSídD©a
(
pdev
 , 
NULL
, 0);

283 
ï
->
˘l_d©a_Àn
 = 0;

287 if((
pdev
->
dev
.
˛ass_cb
->
EP0_TxSít
 !
NULL
)&&

288 (
pdev
->
dev
.
devi˚_°©us
 =
USB_OTG_CONFIGURED
))

290 
pdev
->
dev
.
˛ass_cb
->
	`EP0_TxSít
(pdev);

292 
	`USBD_CéRe˚iveSètus
(
pdev
);

297 if((
pdev
->
dev
.
˛ass_cb
->
D©aIn
 !
NULL
)&&

298 (
pdev
->
dev
.
devi˚_°©us
 =
USB_OTG_CONFIGURED
))

300 
pdev
->
dev
.
˛ass_cb
->
	`D©aIn
’dev, 
ïnum
);

302  
USBD_OK
;

303 
	}
}

312 
uöt8_t
 
	$USBD_Re£t
(
USB_OTG_CORE_HANDLE
 *
pdev
)

315 
	`DCD_EP_O≥n
(
pdev
,

317 
USB_OTG_MAX_EP0_SIZE
,

318 
EP_TYPE_CTRL
);

321 
	`DCD_EP_O≥n
(
pdev
,

323 
USB_OTG_MAX_EP0_SIZE
,

324 
EP_TYPE_CTRL
);

327 
pdev
->
dev
.
devi˚_°©us
 = 
USB_OTG_DEFAULT
;

328 
pdev
->
dev
.
u§_cb
->
	`Devi˚Re£t
’dev->
cfg
.
•ìd
);

330  
USBD_OK
;

331 
	}
}

340 
uöt8_t
 
	$USBD_Resume
(
USB_OTG_CORE_HANDLE
 *
pdev
)

343 
pdev
->
dev
.
u§_cb
->
	`Devi˚Resumed
();

344 
pdev
->
dev
.
devi˚_°©us
 = 
USB_OTG_CONFIGURED
;

345  
USBD_OK
;

346 
	}
}

356 
uöt8_t
 
	$USBD_Su•íd
(
USB_OTG_CORE_HANDLE
 *
pdev
)

359 
pdev
->
dev
.
devi˚_°©us
 = 
USB_OTG_SUSPENDED
;

361 
pdev
->
dev
.
u§_cb
->
	`Devi˚Su•íded
();

362  
USBD_OK
;

363 
	}
}

373 
uöt8_t
 
	$USBD_SOF
(
USB_OTG_CORE_HANDLE
 *
pdev
)

375 if(
pdev
->
dev
.
˛ass_cb
->
SOF
)

377 
pdev
->
dev
.
˛ass_cb
->
	`SOF
(pdev);

379  
USBD_OK
;

380 
	}
}

389 
USBD_Sètus
 
	$USBD_SëCfg
(
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
cfgidx
)

391 
pdev
->
dev
.
˛ass_cb
->
	`Inô
’dev, 
cfgidx
);

394 
pdev
->
dev
.
u§_cb
->
	`Devi˚C⁄figuªd
();

395  
USBD_OK
;

396 
	}
}

405 
USBD_Sètus
 
	$USBD_CÃCfg
(
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
cfgidx
)

407 
pdev
->
dev
.
˛ass_cb
->
	`DeInô
’dev, 
cfgidx
);

408  
USBD_OK
;

409 
	}
}

417 
uöt8_t
 
	$USBD_IsoINIncom∂ëe
(
USB_OTG_CORE_HANDLE
 *
pdev
)

419 
pdev
->
dev
.
˛ass_cb
->
	`IsoINIncom∂ëe
(pdev);

420  
USBD_OK
;

421 
	}
}

429 
uöt8_t
 
	$USBD_IsoOUTIncom∂ëe
(
USB_OTG_CORE_HANDLE
 *
pdev
)

431 
pdev
->
dev
.
˛ass_cb
->
	`IsoOUTIncom∂ëe
(pdev);

432  
USBD_OK
;

433 
	}
}

435 #ifde‡
VBUS_SENSING_ENABLED


442 
uöt8_t
 
	$USBD_DevC⁄√˘ed
(
USB_OTG_CORE_HANDLE
 *
pdev
)

444 
pdev
->
dev
.
u§_cb
->
	`Devi˚C⁄√˘ed
();

445  
USBD_OK
;

446 
	}
}

454 
uöt8_t
 
	$USBD_DevDisc⁄√˘ed
(
USB_OTG_CORE_HANDLE
 *
pdev
)

456 
pdev
->
dev
.
u§_cb
->
	`Devi˚Disc⁄√˘ed
();

457 
pdev
->
dev
.
˛ass_cb
->
	`DeInô
(pdev, 0);

458  
USBD_OK
;

459 
	}
}

	@libstm/STM32_USB_Device_Library/Core/src/usbd_ioreq.c

23 
	~"usbd_i‹eq.h
"

88 
USBD_Sètus
 
	$USBD_CéSídD©a
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

89 
uöt8_t
 *
pbuf
,

90 
uöt16_t
 
Àn
)

92 
USBD_Sètus
 
ªt
 = 
USBD_OK
;

94 
pdev
->
dev
.
ö_ï
[0].
tŸÆ_d©a_Àn
 = 
Àn
;

95 
pdev
->
dev
.
ö_ï
[0].
ªm_d©a_Àn
 = 
Àn
;

96 
pdev
->
dev
.
devi˚_°©e
 = 
USB_OTG_EP0_DATA_IN
;

98 
	`DCD_EP_Tx
 (
pdev
, 0, 
pbuf
, 
Àn
);

100  
ªt
;

101 
	}
}

111 
USBD_Sètus
 
	$USBD_CéC⁄töueSídD©a
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

112 
uöt8_t
 *
pbuf
,

113 
uöt16_t
 
Àn
)

115 
USBD_Sètus
 
ªt
 = 
USBD_OK
;

117 
	`DCD_EP_Tx
 (
pdev
, 0, 
pbuf
, 
Àn
);

120  
ªt
;

121 
	}
}

131 
USBD_Sètus
 
	$USBD_CéPª∑ªRx
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

132 
uöt8_t
 *
pbuf
,

133 
uöt16_t
 
Àn
)

135 
USBD_Sètus
 
ªt
 = 
USBD_OK
;

137 
pdev
->
dev
.
out_ï
[0].
tŸÆ_d©a_Àn
 = 
Àn
;

138 
pdev
->
dev
.
out_ï
[0].
ªm_d©a_Àn
 = 
Àn
;

139 
pdev
->
dev
.
devi˚_°©e
 = 
USB_OTG_EP0_DATA_OUT
;

141 
	`DCD_EP_Pª∑ªRx
 (
pdev
,

143 
pbuf
,

144 
Àn
);

147  
ªt
;

148 
	}
}

158 
USBD_Sètus
 
	$USBD_CéC⁄töueRx
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

159 
uöt8_t
 *
pbuf
,

160 
uöt16_t
 
Àn
)

162 
USBD_Sètus
 
ªt
 = 
USBD_OK
;

164 
	`DCD_EP_Pª∑ªRx
 (
pdev
,

166 
pbuf
,

167 
Àn
);

168  
ªt
;

169 
	}
}

176 
USBD_Sètus
 
	$USBD_CéSídSètus
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

178 
USBD_Sètus
 
ªt
 = 
USBD_OK
;

179 
pdev
->
dev
.
devi˚_°©e
 = 
USB_OTG_EP0_STATUS_IN
;

180 
	`DCD_EP_Tx
 (
pdev
,

182 
NULL
,

185 
	`USB_OTG_EP0_OutSèπ
(
pdev
);

187  
ªt
;

188 
	}
}

196 
USBD_Sètus
 
	$USBD_CéRe˚iveSètus
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

198 
USBD_Sètus
 
ªt
 = 
USBD_OK
;

199 
pdev
->
dev
.
devi˚_°©e
 = 
USB_OTG_EP0_STATUS_OUT
;

200 
	`DCD_EP_Pª∑ªRx
 ( 
pdev
,

202 
NULL
,

205 
	`USB_OTG_EP0_OutSèπ
(
pdev
);

207  
ªt
;

208 
	}
}

218 
uöt16_t
 
	$USBD_GëRxCou¡
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
ïnum
)

220  
pdev
->
dev
.
out_ï
[
ïnum
].
x„r_cou¡
;

221 
	}
}

	@libstm/STM32_USB_Device_Library/Core/src/usbd_req.c

23 
	~"usbd_ªq.h
"

24 
	~"usbd_i‹eq.h
"

25 
	~"usbd_desc.h
"

67 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


68 #i‡
deföed
 ( 
__ICCARM__
 )

69 #¥agm®
d©a_Æignmít
=4

72 
__ALIGN_BEGIN
 
uöt32_t
 
USBD_ï_°©us
 
	g__ALIGN_END
 = 0;

74 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


75 #i‡
deföed
 ( 
__ICCARM__
 )

76 #¥agm®
d©a_Æignmít
=4

79 
__ALIGN_BEGIN
 
uöt32_t
 
USBD_deÁu…_cfg
 
	g__ALIGN_END
 = 0;

81 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


82 #i‡
deföed
 ( 
__ICCARM__
 )

83 #¥agm®
d©a_Æignmít
=4

86 
__ALIGN_BEGIN
 
uöt32_t
 
USBD_cfg_°©us
 
	g__ALIGN_END
 = 0;

88 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


89 #i‡
deföed
 ( 
__ICCARM__
 )

90 #¥agm®
d©a_Æignmít
=4

93 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBD_SåDesc
[
USB_MAX_STR_DESC_SIZ
] 
	g__ALIGN_END
 ;

102 
USBD_GëDes¸ùt‹
(
USB_OTG_CORE_HANDLE
 *
pdev
,

103 
USB_SETUP_REQ
 *
ªq
);

105 
USBD_SëAddªss
(
USB_OTG_CORE_HANDLE
 *
pdev
,

106 
USB_SETUP_REQ
 *
ªq
);

108 
USBD_SëC⁄fig
(
USB_OTG_CORE_HANDLE
 *
pdev
,

109 
USB_SETUP_REQ
 *
ªq
);

111 
USBD_GëC⁄fig
(
USB_OTG_CORE_HANDLE
 *
pdev
,

112 
USB_SETUP_REQ
 *
ªq
);

114 
USBD_GëSètus
(
USB_OTG_CORE_HANDLE
 *
pdev
,

115 
USB_SETUP_REQ
 *
ªq
);

117 
USBD_SëFótuª
(
USB_OTG_CORE_HANDLE
 *
pdev
,

118 
USB_SETUP_REQ
 *
ªq
);

120 
USBD_CÃFótuª
(
USB_OTG_CORE_HANDLE
 *
pdev
,

121 
USB_SETUP_REQ
 *
ªq
);

123 
uöt8_t
 
USBD_GëLí
(uöt8_à*
buf
);

141 
USBD_Sètus
 
	$USBD_StdDevReq
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
USB_SETUP_REQ
 *
ªq
)

143 
USBD_Sètus
 
ªt
 = 
USBD_OK
;

145 
ªq
->
bReque°
)

147 
USB_REQ_GET_DESCRIPTOR
:

149 
	`USBD_GëDes¸ùt‹
 (
pdev
, 
ªq
) ;

152 
USB_REQ_SET_ADDRESS
:

153 
	`USBD_SëAddªss
(
pdev
, 
ªq
);

156 
USB_REQ_SET_CONFIGURATION
:

157 
	`USBD_SëC⁄fig
 (
pdev
 , 
ªq
);

160 
USB_REQ_GET_CONFIGURATION
:

161 
	`USBD_GëC⁄fig
 (
pdev
 , 
ªq
);

164 
USB_REQ_GET_STATUS
:

165 
	`USBD_GëSètus
 (
pdev
 , 
ªq
);

169 
USB_REQ_SET_FEATURE
:

170 
	`USBD_SëFótuª
 (
pdev
 , 
ªq
);

173 
USB_REQ_CLEAR_FEATURE
:

174 
	`USBD_CÃFótuª
 (
pdev
 , 
ªq
);

178 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

182  
ªt
;

183 
	}
}

192 
USBD_Sètus
 
	$USBD_StdItfReq
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
USB_SETUP_REQ
 *
ªq
)

194 
USBD_Sètus
 
ªt
 = 
USBD_OK
;

196 
pdev
->
dev
.
devi˚_°©us
)

198 
USB_OTG_CONFIGURED
:

200 i‡(
	`LOBYTE
(
ªq
->
wIndex
Ë<
USBD_ITF_MAX_NUM
)

202 
pdev
->
dev
.
˛ass_cb
->
	`Sëup
 (pdev, 
ªq
);

204 if((
ªq
->
wLígth
 =0)&& (
ªt
 =
USBD_OK
))

206 
	`USBD_CéSídSètus
(
pdev
);

211 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

216 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

219  
ªt
;

220 
	}
}

229 
USBD_Sètus
 
	$USBD_StdEPReq
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
USB_SETUP_REQ
 *
ªq
)

232 
uöt8_t
 
ï_addr
;

233 
USBD_Sètus
 
ªt
 = 
USBD_OK
;

235 
ï_addr
 = 
	`LOBYTE
(
ªq
->
wIndex
);

237 
ªq
->
bReque°
)

240 
USB_REQ_SET_FEATURE
 :

242 
pdev
->
dev
.
devi˚_°©us
)

244 
USB_OTG_ADDRESSED
:

245 i‡((
ï_addr
 != 0x00) && (ep_addr != 0x80))

247 
	`DCD_EP_SèŒ
(
pdev
 , 
ï_addr
);

251 
USB_OTG_CONFIGURED
:

252 i‡(
ªq
->
wVÆue
 =
USB_FEATURE_EP_HALT
)

254 i‡((
ï_addr
 != 0x00) && (ep_addr != 0x80))

256 
	`DCD_EP_SèŒ
(
pdev
 , 
ï_addr
);

260 
pdev
->
dev
.
˛ass_cb
->
	`Sëup
 (pdev, 
ªq
);

261 
	`USBD_CéSídSètus
(
pdev
);

266 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

271 
USB_REQ_CLEAR_FEATURE
 :

273 
pdev
->
dev
.
devi˚_°©us
)

275 
USB_OTG_ADDRESSED
:

276 i‡((
ï_addr
 != 0x00) && (ep_addr != 0x80))

278 
	`DCD_EP_SèŒ
(
pdev
 , 
ï_addr
);

282 
USB_OTG_CONFIGURED
:

283 i‡(
ªq
->
wVÆue
 =
USB_FEATURE_EP_HALT
)

285 i‡((
ï_addr
 != 0x00) && (ep_addr != 0x80))

287 
	`DCD_EP_CÃSèŒ
(
pdev
 , 
ï_addr
);

288 
pdev
->
dev
.
˛ass_cb
->
	`Sëup
 (pdev, 
ªq
);

290 
	`USBD_CéSídSètus
(
pdev
);

295 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

300 
USB_REQ_GET_STATUS
:

301 
pdev
->
dev
.
devi˚_°©us
)

303 
USB_OTG_ADDRESSED
:

304 i‡((
ï_addr
 != 0x00) && (ep_addr != 0x80))

306 
	`DCD_EP_SèŒ
(
pdev
 , 
ï_addr
);

310 
USB_OTG_CONFIGURED
:

313 i‡((
ï_addr
 & 0x80)== 0x80)

315 if(
pdev
->
dev
.
ö_ï
[
ï_addr
 & 0x7F].
is_°Æl
)

317 
USBD_ï_°©us
 = 0x0001;

321 
USBD_ï_°©us
 = 0x0000;

324 i‡((
ï_addr
 & 0x80)== 0x00)

326 if(
pdev
->
dev
.
out_ï
[
ï_addr
].
is_°Æl
)

328 
USBD_ï_°©us
 = 0x0001;

333 
USBD_ï_°©us
 = 0x0000;

336 
	`USBD_CéSídD©a
 (
pdev
,

337 (
uöt8_t
 *)&
USBD_ï_°©us
,

342 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

350  
ªt
;

351 
	}
}

359 
	$USBD_GëDes¸ùt‹
(
USB_OTG_CORE_HANDLE
 *
pdev
,

360 
USB_SETUP_REQ
 *
ªq
)

362 
uöt16_t
 
Àn
;

363 
uöt8_t
 *
pbuf
;

365 
ªq
->
wVÆue
 >> 8)

367 
USB_DESC_TYPE_DEVICE
:

368 
pbuf
 = 
pdev
->
dev
.
u§_devi˚
->
	`GëDevi˚Des¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

369 i‡((
ªq
->
wLígth
 =64Ë||–
pdev
->
dev
.
devi˚_°©us
 =
USB_OTG_DEFAULT
))

371 
Àn
 = 8;

375 
USB_DESC_TYPE_CONFIGURATION
:

376 
pbuf
 = (
uöt8_t
 *)
pdev
->
dev
.
˛ass_cb
->
	`GëC⁄figDes¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

377 #ifde‡
USB_OTG_HS_CORE


378 if((
pdev
->
cfg
.
•ìd
 =
USB_OTG_SPEED_FULL
 )&&

379 (
pdev
->
cfg
.
phy_ôÁ˚
 =
USB_OTG_ULPI_PHY
))

381 
pbuf
 = (
uöt8_t
 *)
pdev
->
dev
.
˛ass_cb
->
	`GëOthîC⁄figDes¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

384 
pbuf
[1] = 
USB_DESC_TYPE_CONFIGURATION
;

385 
pdev
->
dev
.
pC⁄fig_des¸ùt‹
 = 
pbuf
;

388 
USB_DESC_TYPE_STRING
:

389 (
uöt8_t
)(
ªq
->
wVÆue
))

391 
USBD_IDX_LANGID_STR
:

392 
pbuf
 = 
pdev
->
dev
.
u§_devi˚
->
	`GëL™gIDSåDes¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

395 
USBD_IDX_MFC_STR
:

396 
pbuf
 = 
pdev
->
dev
.
u§_devi˚
->
	`GëM™uÁ˘uªrSåDes¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

399 
USBD_IDX_PRODUCT_STR
:

400 
pbuf
 = 
pdev
->
dev
.
u§_devi˚
->
	`GëProdu˘SåDes¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

403 
USBD_IDX_SERIAL_STR
:

404 
pbuf
 = 
pdev
->
dev
.
u§_devi˚
->
	`GëSîülSåDes¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

407 
USBD_IDX_CONFIG_STR
:

408 
pbuf
 = 
pdev
->
dev
.
u§_devi˚
->
	`GëC⁄figuøti⁄SåDes¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

411 
USBD_IDX_INTERFACE_STR
:

412 
pbuf
 = 
pdev
->
dev
.
u§_devi˚
->
	`GëI¡îÁ˚SåDes¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

416 #ifde‡
USB_SUPPORT_USER_STRING_DESC


417 
pbuf
 = 
pdev
->
dev
.
˛ass_cb
->
	`GëU§SåDes¸ùt‹
’dev->
cfg
.
•ìd
, (
ªq
->
wVÆue
Ë, &
Àn
);

420 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

425 
USB_DESC_TYPE_DEVICE_QUALIFIER
:

426 #ifde‡
USB_OTG_HS_CORE


427 if(
pdev
->
cfg
.
•ìd
 =
USB_OTG_SPEED_HIGH
 )

430 
pbuf
 = (
uöt8_t
 *)
pdev
->
dev
.
˛ass_cb
->
	`GëC⁄figDes¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

432 
USBD_Devi˚QuÆifõrDesc
[4]
pbuf
[14];

433 
USBD_Devi˚QuÆifõrDesc
[5]
pbuf
[15];

434 
USBD_Devi˚QuÆifõrDesc
[6]
pbuf
[16];

436 
pbuf
 = 
USBD_Devi˚QuÆifõrDesc
;

437 
Àn
 = 
USB_LEN_DEV_QUALIFIER_DESC
;

442 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

446 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

450 
USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
:

451 #ifde‡
USB_OTG_HS_CORE


453 if(
pdev
->
cfg
.
•ìd
 =
USB_OTG_SPEED_HIGH
 )

455 
pbuf
 = (
uöt8_t
 *)
pdev
->
dev
.
˛ass_cb
->
	`GëOthîC⁄figDes¸ùt‹
’dev->
cfg
.
•ìd
, &
Àn
);

456 
pbuf
[1] = 
USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
;

461 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

465 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

471 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

475 if((
Àn
 !0)&& (
ªq
->
wLígth
 != 0))

478 
Àn
 = 
	`MIN
÷í , 
ªq
->
wLígth
);

480 
	`USBD_CéSídD©a
 (
pdev
,

481 
pbuf
,

482 
Àn
);

485 
	}
}

494 
	$USBD_SëAddªss
(
USB_OTG_CORE_HANDLE
 *
pdev
,

495 
USB_SETUP_REQ
 *
ªq
)

497 
uöt8_t
 
dev_addr
;

499 i‡((
ªq
->
wIndex
 =0Ë&& (ªq->
wLígth
 == 0))

501 
dev_addr
 = (
uöt8_t
)(
ªq
->
wVÆue
) & 0x7F;

503 i‡(
pdev
->
dev
.
devi˚_°©us
 =
USB_OTG_CONFIGURED
)

505 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

509 
pdev
->
dev
.
devi˚_addªss
 = 
dev_addr
;

510 
	`DCD_EP_SëAddªss
(
pdev
, 
dev_addr
);

511 
	`USBD_CéSídSètus
(
pdev
);

513 i‡(
dev_addr
 != 0)

515 
pdev
->
dev
.
devi˚_°©us
 = 
USB_OTG_ADDRESSED
;

519 
pdev
->
dev
.
devi˚_°©us
 = 
USB_OTG_DEFAULT
;

525 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

527 
	}
}

536 
	$USBD_SëC⁄fig
(
USB_OTG_CORE_HANDLE
 *
pdev
,

537 
USB_SETUP_REQ
 *
ªq
)

540 
uöt8_t
 
cfgidx
;

542 
cfgidx
 = (
uöt8_t
)(
ªq
->
wVÆue
);

544 i‡(
cfgidx
 > 
USBD_CFG_MAX_NUM
 )

546 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

550 
pdev
->
dev
.
devi˚_°©us
)

552 
USB_OTG_ADDRESSED
:

553 i‡(
cfgidx
)

555 
pdev
->
dev
.
devi˚_c⁄fig
 = 
cfgidx
;

556 
pdev
->
dev
.
devi˚_°©us
 = 
USB_OTG_CONFIGURED
;

557 
	`USBD_SëCfg
(
pdev
 , 
cfgidx
);

558 
	`USBD_CéSídSètus
(
pdev
);

562 
	`USBD_CéSídSètus
(
pdev
);

566 
USB_OTG_CONFIGURED
:

567 i‡(
cfgidx
 == 0)

569 
pdev
->
dev
.
devi˚_°©us
 = 
USB_OTG_ADDRESSED
;

570 
pdev
->
dev
.
devi˚_c⁄fig
 = 
cfgidx
;

571 
	`USBD_CÃCfg
(
pdev
 , 
cfgidx
);

572 
	`USBD_CéSídSètus
(
pdev
);

575 i‡(
cfgidx
 !
pdev
->
dev
.
devi˚_c⁄fig
)

578 
	`USBD_CÃCfg
(
pdev
 ,Ödev->
dev
.
devi˚_c⁄fig
);

581 
pdev
->
dev
.
devi˚_c⁄fig
 = 
cfgidx
;

582 
	`USBD_SëCfg
(
pdev
 , 
cfgidx
);

583 
	`USBD_CéSídSètus
(
pdev
);

587 
	`USBD_CéSídSètus
(
pdev
);

592 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

596 
	}
}

605 
	$USBD_GëC⁄fig
(
USB_OTG_CORE_HANDLE
 *
pdev
,

606 
USB_SETUP_REQ
 *
ªq
)

609 i‡(
ªq
->
wLígth
 != 1)

611 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

615 
pdev
->
dev
.
devi˚_°©us
 )

617 
USB_OTG_ADDRESSED
:

619 
	`USBD_CéSídD©a
 (
pdev
,

620 (
uöt8_t
 *)&
USBD_deÁu…_cfg
,

624 
USB_OTG_CONFIGURED
:

626 
	`USBD_CéSídD©a
 (
pdev
,

627 &
pdev
->
dev
.
devi˚_c⁄fig
,

632 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

636 
	}
}

645 
	$USBD_GëSètus
(
USB_OTG_CORE_HANDLE
 *
pdev
,

646 
USB_SETUP_REQ
 *
ªq
)

649 
pdev
->
dev
.
devi˚_°©us
)

651 
USB_OTG_ADDRESSED
:

652 
USB_OTG_CONFIGURED
:

654 i‡(
pdev
->
dev
.
DevRemŸeWakeup
)

656 
USBD_cfg_°©us
 = 
USB_CONFIG_SELF_POWERED
 | 
USB_CONFIG_REMOTE_WAKEUP
;

660 
USBD_cfg_°©us
 = 
USB_CONFIG_SELF_POWERED
;

663 
	`USBD_CéSídD©a
 (
pdev
,

664 (
uöt8_t
 *)&
USBD_cfg_°©us
,

669 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

672 
	}
}

682 
	$USBD_SëFótuª
(
USB_OTG_CORE_HANDLE
 *
pdev
,

683 
USB_SETUP_REQ
 *
ªq
)

686 
USB_OTG_DCTL_Ty≥Def
 
d˘l
;

687 
uöt8_t
 
ã°_mode
 = 0;

689 i‡(
ªq
->
wVÆue
 =
USB_FEATURE_REMOTE_WAKEUP
)

691 
pdev
->
dev
.
DevRemŸeWakeup
 = 1;

692 
pdev
->
dev
.
˛ass_cb
->
	`Sëup
 (pdev, 
ªq
);

693 
	`USBD_CéSídSètus
(
pdev
);

696 i‡((
ªq
->
wVÆue
 =
USB_FEATURE_TEST_MODE
) &&

697 ((
ªq
->
wIndex
 & 0xFF) == 0))

699 
d˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
);

701 
ã°_mode
 = 
ªq
->
wIndex
 >> 8;

702 
ã°_mode
)

705 
d˘l
.
b
.
t°˘l
 = 1;

709 
d˘l
.
b
.
t°˘l
 = 2;

713 
d˘l
.
b
.
t°˘l
 = 3;

717 
d˘l
.
b
.
t°˘l
 = 4;

721 
d˘l
.
b
.
t°˘l
 = 5;

724 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
, 
d˘l
.
d32
);

725 
	`USBD_CéSídSètus
(
pdev
);

728 
	}
}

738 
	$USBD_CÃFótuª
(
USB_OTG_CORE_HANDLE
 *
pdev
,

739 
USB_SETUP_REQ
 *
ªq
)

741 
pdev
->
dev
.
devi˚_°©us
)

743 
USB_OTG_ADDRESSED
:

744 
USB_OTG_CONFIGURED
:

745 i‡(
ªq
->
wVÆue
 =
USB_FEATURE_REMOTE_WAKEUP
)

747 
pdev
->
dev
.
DevRemŸeWakeup
 = 0;

748 
pdev
->
dev
.
˛ass_cb
->
	`Sëup
 (pdev, 
ªq
);

749 
	`USBD_CéSídSètus
(
pdev
);

754 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

757 
	}
}

767 
	$USBD_P¨£SëupReque°
–
USB_OTG_CORE_HANDLE
 *
pdev
,

768 
USB_SETUP_REQ
 *
ªq
)

770 
ªq
->
bmReque°
 = *(
uöt8_t
 *Ë(
pdev
->
dev
.
£tup_∑ckë
);

771 
ªq
->
bReque°
 = *(
uöt8_t
 *Ë(
pdev
->
dev
.
£tup_∑ckë
 + 1);

772 
ªq
->
wVÆue
 = 
	`SWAPBYTE
 (
pdev
->
dev
.
£tup_∑ckë
 + 2);

773 
ªq
->
wIndex
 = 
	`SWAPBYTE
 (
pdev
->
dev
.
£tup_∑ckë
 + 4);

774 
ªq
->
wLígth
 = 
	`SWAPBYTE
 (
pdev
->
dev
.
£tup_∑ckë
 + 6);

776 
pdev
->
dev
.
ö_ï
[0].
˘l_d©a_Àn
 = 
ªq
->
wLígth
 ;

777 
pdev
->
dev
.
devi˚_°©e
 = 
USB_OTG_EP0_SETUP
;

778 
	}
}

788 
	$USBD_CéEº‹
–
USB_OTG_CORE_HANDLE
 *
pdev
,

789 
USB_SETUP_REQ
 *
ªq
)

791 if((
ªq
->
bmReque°
 & 0x80) == 0x80)

793 
	`DCD_EP_SèŒ
(
pdev
 , 0x80);

797 if(
ªq
->
wLígth
 == 0)

799 
	`DCD_EP_SèŒ
(
pdev
 , 0x80);

803 
	`DCD_EP_SèŒ
(
pdev
 , 0);

806 
	`USB_OTG_EP0_OutSèπ
(
pdev
);

807 
	}
}

818 
	$USBD_GëSåög
(
uöt8_t
 *
desc
, uöt8_à*
unicode
, 
uöt16_t
 *
Àn
)

820 
uöt8_t
 
idx
 = 0;

822 i‡(
desc
 !
NULL
)

824 *
Àn
 = 
	`USBD_GëLí
(
desc
) * 2 + 2;

825 
unicode
[
idx
++] = *
Àn
;

826 
unicode
[
idx
++] = 
USB_DESC_TYPE_STRING
;

828 *
desc
 !
NULL
)

830 
unicode
[
idx
++] = *
desc
++;

831 
unicode
[
idx
++] = 0x00;

834 
	}
}

842 
uöt8_t
 
	$USBD_GëLí
(
uöt8_t
 *
buf
)

844 
uöt8_t
 
Àn
 = 0;

846 *
buf
 !
NULL
)

848 
Àn
++;

849 
buf
++;

852  
Àn
;

853 
	}
}

	@libstm/STM32_USB_HOST_Library/Class/HID/inc/usbh_hid_core.h

23 #i‚de‡
__USBH_HID_CORE_H


24 
	#__USBH_HID_CORE_H


	)

27 
	~"usbh_c‹e.h
"

28 
	~"usbh_°dªq.h
"

29 
	~"usb_b•.h
"

30 
	~"usbh_i‹eq.h
"

31 
	~"usbh_hcs.h
"

59 
	mHID_IDLE
= 0,

60 
	mHID_SEND_DATA
,

61 
	mHID_BUSY
,

62 
	mHID_GET_DATA
,

63 
	mHID_POLL
,

64 
	mHID_ERROR
,

66 
	tHID_Sèã
;

70 
	mHID_REQ_IDLE
 = 0,

71 
	mHID_REQ_GET_REPORT_DESC
,

72 
	mHID_REQ_GET_HID_DESC
,

73 
	mHID_REQ_SET_IDLE
,

74 
	mHID_REQ_SET_PROTOCOL
,

75 
	mHID_REQ_SET_REPORT
,

78 
	tHID_CéSèã
;

80 
	sHID_cb


82 (*
	mInô
) ();

83 (*
	mDecode
Ë(
uöt8_t
 *
	md©a
);

85 } 
	tHID_cb_Ty≥Def
;

87 
	s_HID_Rï‹t


89 
uöt8_t
 
	mRï‹tID
;

90 
uöt8_t
 
	mRï‹tTy≥
;

91 
uöt16_t
 
	mUßgePage
;

92 
uöt32_t
 
	mUßge
[2];

93 
uöt32_t
 
	mNbrUßge
;

94 
uöt32_t
 
	mUßgeMö
;

95 
uöt32_t
 
	mUßgeMax
;

96 
öt32_t
 
	mLogMö
;

97 
öt32_t
 
	mLogMax
;

98 
öt32_t
 
	mPhyMö
;

99 
öt32_t
 
	mPhyMax
;

100 
öt32_t
 
	mUnôExp
;

101 
uöt32_t
 
	mUnô
;

102 
uöt32_t
 
	mRï‹tSize
;

103 
uöt32_t
 
	mRï‹tC¡
;

104 
uöt32_t
 
	mFœg
;

105 
uöt32_t
 
	mPhyUßge
;

106 
uöt32_t
 
	mAµUßge
;

107 
uöt32_t
 
	mLogUßge
;

109 
	tHID_Rï‹t_Ty≥Def
;

112 
	s_HID_Pro˚ss


114 
uöt8_t
 
	mbuff
[64];

115 
uöt8_t
 
	mhc_num_ö
;

116 
uöt8_t
 
	mhc_num_out
;

117 
HID_Sèã
 
	m°©e
;

118 
uöt8_t
 
	mHIDI¡OutEp
;

119 
uöt8_t
 
	mHIDI¡InEp
;

120 
HID_CéSèã
 
	m˘l_°©e
;

121 
uöt16_t
 
	mÀngth
;

122 
uöt8_t
 
	mï_addr
;

123 
uöt16_t
 
	mpﬁl
;

124 
__IO
 
uöt16_t
 
	mtimî
;

125 
HID_cb_Ty≥Def
 *
	mcb
;

127 
	tHID_Machöe_Ty≥Def
;

137 
	#USB_HID_REQ_GET_REPORT
 0x01

	)

138 
	#USB_HID_GET_IDLE
 0x02

	)

139 
	#USB_HID_GET_PROTOCOL
 0x03

	)

140 
	#USB_HID_SET_REPORT
 0x09

	)

141 
	#USB_HID_SET_IDLE
 0x0A

	)

142 
	#USB_HID_SET_PROTOCOL
 0x0B

	)

157 
USBH_Cœss_cb_Ty≥Def
 
HID_cb
;

166 
USBH_Sètus
 
USBH_Së_Rï‹t
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

167 
USBH_HOST
 *
pho°
,

168 
uöt8_t
 
ªp‹tTy≥
,

169 
uöt8_t
 
ªp‹tId
,

170 
uöt8_t
 
ªp‹tLí
,

171 
uöt8_t
* 
ªp‹tBuff
);

	@libstm/STM32_USB_HOST_Library/Class/HID/inc/usbh_hid_keybd.h

23 #i‚de‡
__USBH_HID_KEYBD_H


24 
	#__USBH_HID_KEYBD_H


	)

27 
	~"usb_c⁄f.h
"

28 
	~"usbh_hid_c‹e.h
"

61 
	#AZERTY_KEYBOARD


	)

63 
	#KBD_LEFT_CTRL
 0x01

	)

64 
	#KBD_LEFT_SHIFT
 0x02

	)

65 
	#KBD_LEFT_ALT
 0x04

	)

66 
	#KBD_LEFT_GUI
 0x08

	)

67 
	#KBD_RIGHT_CTRL
 0x10

	)

68 
	#KBD_RIGHT_SHIFT
 0x20

	)

69 
	#KBD_RIGHT_ALT
 0x40

	)

70 
	#KBD_RIGHT_GUI
 0x80

	)

72 
	#KBR_MAX_NBR_PRESSED
 6

	)

89 
HID_cb_Ty≥Def
 
HID_KEYBRD_cb
;

97 
USR_KEYBRD_Inô
 ();

98 
USR_KEYBRD_Pro˚ssD©a
 (
uöt8_t
 
pbuf
);

	@libstm/STM32_USB_HOST_Library/Class/HID/inc/usbh_hid_mouse.h

24 #i‚de‡
__USBH_HID_MOUSE_H


25 
	#__USBH_HID_MOUSE_H


	)

28 
	~"usbh_hid_c‹e.h
"

51 
	s_HID_MOUSE_D©a


53 
uöt8_t
 
	mx
;

54 
uöt8_t
 
	my
;

55 
uöt8_t
 
	mz
;

56 
uöt8_t
 
	mbuâ⁄
;

58 
	tHID_MOUSE_D©a_Ty≥Def
;

82 
HID_cb_Ty≥Def
 
HID_MOUSE_cb
;

83 
HID_MOUSE_D©a_Ty≥Def
 
HID_MOUSE_D©a
;

91 
USR_MOUSE_Inô
 ();

92 
USR_MOUSE_Pro˚ssD©a
 (
HID_MOUSE_D©a_Ty≥Def
 *
d©a
);

	@libstm/STM32_USB_HOST_Library/Class/HID/src/usbh_hid_core.c

37 
	~"usbh_hid_c‹e.h
"

38 
	~"usbh_hid_mou£.h
"

39 
	~"usbh_hid_keybd.h
"

85 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


86 #i‡
deföed
 ( 
__ICCARM__
 )

87 #¥agm®
d©a_Æignmít
=4

90 
__ALIGN_BEGIN
 
HID_Machöe_Ty≥Def
 
HID_Machöe
 
	g__ALIGN_END
 ;

92 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


93 #i‡
deföed
 ( 
__ICCARM__
 )

94 #¥agm®
d©a_Æignmít
=4

97 
__ALIGN_BEGIN
 
HID_Rï‹t_Ty≥Def
 
HID_Rï‹t
 
	g__ALIGN_END
 ;

99 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


100 #i‡
deföed
 ( 
__ICCARM__
 )

101 #¥agm®
d©a_Æignmít
=4

104 
__ALIGN_BEGIN
 
USB_Sëup_Ty≥Def
 
HID_Sëup
 
	g__ALIGN_END
 ;

106 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


107 #i‡
deföed
 ( 
__ICCARM__
 )

108 #¥agm®
d©a_Æignmít
=4

111 
__ALIGN_BEGIN
 
USBH_HIDDesc_Ty≥Def
 
HID_Desc
 
	g__ALIGN_END
 ;

113 
__IO
 
uöt8_t
 
	gÊag
 = 0;

123 
USBH_Sètus
 
USBH_HID_I¡îÁ˚Inô
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

124 *
pho°
);

126 
USBH_P¨£HIDDesc
 (
USBH_HIDDesc_Ty≥Def
 *
desc
, 
uöt8_t
 *
buf
);

128 
USBH_HID_I¡îÁ˚DeInô
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

129 *
pho°
);

131 
USBH_Sètus
 
USBH_HID_H™dÀ
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

132 *
pho°
);

134 
USBH_Sètus
 
USBH_HID_CœssReque°
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

135 *
pho°
);

137 
USBH_Sètus
 
USBH_Gë_HID_Rï‹tDes¸ùt‹
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

138 
USBH_HOST
 *
pho°
,

139 
uöt16_t
 
Àngth
);

141 
USBH_Sètus
 
USBH_Gë_HID_Des¸ùt‹
 (
USB_OTG_CORE_HANDLE
 *
pdev
,\

142 
USBH_HOST
 *
pho°
,

143 
uöt16_t
 
Àngth
);

145 
USBH_Sètus
 
USBH_Së_IdÀ
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

146 
USBH_HOST
 *
pho°
,

147 
uöt8_t
 
duøti⁄
,

148 
uöt8_t
 
ªp‹tId
);

150 
USBH_Sètus
 
USBH_Së_PrŸocﬁ
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

151 
USBH_HOST
 *
pho°
,

152 
uöt8_t
 
¥Ÿocﬁ
);

155 
USBH_Cœss_cb_Ty≥Def
 
	gHID_cb
 =

157 
USBH_HID_I¡îÁ˚Inô
,

158 
USBH_HID_I¡îÁ˚DeInô
,

159 
USBH_HID_CœssReque°
,

160 
USBH_HID_H™dÀ


178 
USBH_Sètus
 
	$USBH_HID_I¡îÁ˚Inô
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

179 *
pho°
)

181 
uöt8_t
 
maxEP
;

182 
USBH_HOST
 *
µho°
 = 
pho°
;

184 
uöt8_t
 
num
 =0;

185 
USBH_Sètus
 
°©us
 = 
USBH_BUSY
 ;

186 
HID_Machöe
.
°©e
 = 
HID_ERROR
;

189 if(
µho°
->
devi˚_¥›
.
Itf_Desc
[0].
bI¡îÁ˚SubCœss
 =
HID_BOOT_CODE
)

192 if(
µho°
->
devi˚_¥›
.
Itf_Desc
[0].
bI¡îÁ˚PrŸocﬁ
 =
HID_KEYBRD_BOOT_CODE
)

194 
HID_Machöe
.
cb
 = &
HID_KEYBRD_cb
;

196 if(
µho°
->
devi˚_¥›
.
Itf_Desc
[0].
bI¡îÁ˚PrŸocﬁ
 =
HID_MOUSE_BOOT_CODE
)

198 
HID_Machöe
.
cb
 = &
HID_MOUSE_cb
;

201 
HID_Machöe
.
°©e
 = 
HID_IDLE
;

202 
HID_Machöe
.
˘l_°©e
 = 
HID_REQ_IDLE
;

203 
HID_Machöe
.
ï_addr
 = 
µho°
->
devi˚_¥›
.
Ep_Desc
[0][0].
bEndpoötAddªss
;

204 
HID_Machöe
.
Àngth
 = 
µho°
->
devi˚_¥›
.
Ep_Desc
[0][0].
wMaxPackëSize
;

205 
HID_Machöe
.
pﬁl
 = 
µho°
->
devi˚_¥›
.
Ep_Desc
[0][0].
bI¡îvÆ
 ;

210 
maxEP
 = ( (
µho°
->
devi˚_¥›
.
Itf_Desc
[0].
bNumEndpoöts
 <
USBH_MAX_NUM_ENDPOINTS
) ?

211 
µho°
->
devi˚_¥›
.
Itf_Desc
[0].
bNumEndpoöts
 :

212 
USBH_MAX_NUM_ENDPOINTS
);

216 
num
=0;Çum < 
maxEP
;Çum++)

218 if(
µho°
->
devi˚_¥›
.
Ep_Desc
[0][
num
].
bEndpoötAddªss
 & 0x80)

220 
HID_Machöe
.
HIDI¡InEp
 = (
µho°
->
devi˚_¥›
.
Ep_Desc
[0][
num
].
bEndpoötAddªss
);

221 
HID_Machöe
.
hc_num_ö
 =\

222 
	`USBH_AŒoc_Ch™√l
(
pdev
,

223 
µho°
->
devi˚_¥›
.
Ep_Desc
[0][
num
].
bEndpoötAddªss
);

226 
	`USBH_O≥n_Ch™√l
 (
pdev
,

227 
HID_Machöe
.
hc_num_ö
,

228 
µho°
->
devi˚_¥›
.
addªss
,

229 
µho°
->
devi˚_¥›
.
•ìd
,

230 
EP_TYPE_INTR
,

231 
HID_Machöe
.
Àngth
);

235 
HID_Machöe
.
HIDI¡OutEp
 = (
µho°
->
devi˚_¥›
.
Ep_Desc
[0][
num
].
bEndpoötAddªss
);

236 
HID_Machöe
.
hc_num_out
 =\

237 
	`USBH_AŒoc_Ch™√l
(
pdev
,

238 
µho°
->
devi˚_¥›
.
Ep_Desc
[0][
num
].
bEndpoötAddªss
);

241 
	`USBH_O≥n_Ch™√l
 (
pdev
,

242 
HID_Machöe
.
hc_num_out
,

243 
µho°
->
devi˚_¥›
.
addªss
,

244 
µho°
->
devi˚_¥›
.
•ìd
,

245 
EP_TYPE_INTR
,

246 
HID_Machöe
.
Àngth
);

251 
Êag
 =0;

252 
°©us
 = 
USBH_OK
;

256 
µho°
->
u§_cb
->
	`USBH_USR_Devi˚NŸSuµ‹ãd
();

259  
°©us
;

261 
	}
}

272 
	$USBH_HID_I¡îÁ˚DeInô
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

273 *
pho°
)

277 if(
HID_Machöe
.
hc_num_ö
 != 0x00)

279 
	`USB_OTG_HC_HÆt
(
pdev
, 
HID_Machöe
.
hc_num_ö
);

280 
	`USBH_Fªe_Ch™√l
 (
pdev
, 
HID_Machöe
.
hc_num_ö
);

281 
HID_Machöe
.
hc_num_ö
 = 0;

284 if(
HID_Machöe
.
hc_num_out
 != 0x00)

286 
	`USB_OTG_HC_HÆt
(
pdev
, 
HID_Machöe
.
hc_num_out
);

287 
	`USBH_Fªe_Ch™√l
 (
pdev
, 
HID_Machöe
.
hc_num_out
);

288 
HID_Machöe
.
hc_num_out
 = 0;

291 
Êag
 = 0;

292 
	}
}

302 
USBH_Sètus
 
	$USBH_HID_CœssReque°
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

303 *
pho°
)

305 
USBH_HOST
 *
µho°
 = 
pho°
;

307 
USBH_Sètus
 
°©us
 = 
USBH_BUSY
;

308 
USBH_Sètus
 
˛assReqSètus
 = 
USBH_BUSY
;

312 
HID_Machöe
.
˘l_°©e
)

314 
HID_IDLE
:

315 
HID_REQ_GET_HID_DESC
:

318 i‡(
	`USBH_Gë_HID_Des¸ùt‹
 (
pdev
, 
µho°
, 
USB_HID_DESC_SIZE
)=
USBH_OK
)

321 
	`USBH_P¨£HIDDesc
(&
HID_Desc
, 
pdev
->
ho°
.
Rx_Buf„r
);

322 
HID_Machöe
.
˘l_°©e
 = 
HID_REQ_GET_REPORT_DESC
;

326 
HID_REQ_GET_REPORT_DESC
:

330 i‡(
	`USBH_Gë_HID_Rï‹tDes¸ùt‹
(
pdev
 , 
µho°
, 
HID_Desc
.
wIãmLígth
Ë=
USBH_OK
)

332 
HID_Machöe
.
˘l_°©e
 = 
HID_REQ_SET_IDLE
;

337 
HID_REQ_SET_IDLE
:

339 
˛assReqSètus
 = 
	`USBH_Së_IdÀ
 (
pdev
, 
µho°
, 0, 0);

342 i‡(
˛assReqSètus
 =
USBH_OK
)

344 
HID_Machöe
.
˘l_°©e
 = 
HID_REQ_SET_PROTOCOL
;

346 if(
˛assReqSètus
 =
USBH_NOT_SUPPORTED
)

348 
HID_Machöe
.
˘l_°©e
 = 
HID_REQ_SET_PROTOCOL
;

352 
HID_REQ_SET_PROTOCOL
:

354 i‡(
	`USBH_Së_PrŸocﬁ
 (
pdev
 ,
µho°
, 0Ë=
USBH_OK
)

356 
HID_Machöe
.
˘l_°©e
 = 
HID_REQ_IDLE
;

359 
°©us
 = 
USBH_OK
;

367  
°©us
;

368 
	}
}

378 
USBH_Sètus
 
	$USBH_HID_H™dÀ
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

379 *
pho°
)

381 
USBH_HOST
 *
µho°
 = 
pho°
;

382 
USBH_Sètus
 
°©us
 = 
USBH_OK
;

384 
HID_Machöe
.
°©e
)

387 
HID_IDLE
:

388 
HID_Machöe
.
cb
->
	`Inô
();

389 
HID_Machöe
.
°©e
 = 
HID_GET_DATA
;

392 
HID_GET_DATA
:

395 
	`USB_OTG_IsEvíFøme
(
pdev
Ë=
FALSE
);

397 
	`USBH_I¡îru±Re˚iveD©a
(
pdev
,

398 
HID_Machöe
.
buff
,

399 
HID_Machöe
.
Àngth
,

400 
HID_Machöe
.
hc_num_ö
);

401 
Êag
 = 1;

403 
HID_Machöe
.
°©e
 = 
HID_POLL
;

404 
HID_Machöe
.
timî
 = 
	`HCD_GëCuºítFøme
(
pdev
);

407 
HID_POLL
:

408 if(–
	`HCD_GëCuºítFøme
(
pdev
Ë- 
HID_Machöe
.
timî
Ë>HID_Machöe.
pﬁl
)

410 
HID_Machöe
.
°©e
 = 
HID_GET_DATA
;

412 if(
	`HCD_GëURB_Sèã
(
pdev
 , 
HID_Machöe
.
hc_num_ö
Ë=
URB_DONE
)

414 if(
Êag
 == 1)

416 
Êag
 = 0;

417 
HID_Machöe
.
cb
->
	`Decode
(HID_Machöe.
buff
);

420 if(
	`HCD_GëURB_Sèã
(
pdev
, 
HID_Machöe
.
hc_num_ö
Ë=
URB_STALL
)

424 if–(
	`USBH_CÃFótuª
(
pdev
,

425 
µho°
,

426 
HID_Machöe
.
ï_addr
,

427 
HID_Machöe
.
hc_num_ö
)Ë=
USBH_OK
)

430 
HID_Machöe
.
°©e
 = 
HID_GET_DATA
;

440  
°©us
;

441 
	}
}

452 
USBH_Sètus
 
	$USBH_Gë_HID_Rï‹tDes¸ùt‹
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

453 
USBH_HOST
 *
pho°
,

454 
uöt16_t
 
Àngth
)

457 
USBH_Sètus
 
°©us
;

459 
°©us
 = 
	`USBH_GëDes¸ùt‹
(
pdev
,

460 
pho°
,

461 
USB_REQ_RECIPIENT_INTERFACE


462 | 
USB_REQ_TYPE_STANDARD
,

463 
USB_DESC_HID_REPORT
,

464 
pdev
->
ho°
.
Rx_Buf„r
,

465 
Àngth
);

474  
°©us
;

475 
	}
}

485 
USBH_Sètus
 
	$USBH_Gë_HID_Des¸ùt‹
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

486 
USBH_HOST
 *
pho°
,

487 
uöt16_t
 
Àngth
)

490 
USBH_Sètus
 
°©us
;

492 
°©us
 = 
	`USBH_GëDes¸ùt‹
(
pdev
,

493 
pho°
,

494 
USB_REQ_RECIPIENT_INTERFACE


495 | 
USB_REQ_TYPE_STANDARD
,

496 
USB_DESC_HID
,

497 
pdev
->
ho°
.
Rx_Buf„r
,

498 
Àngth
);

500  
°©us
;

501 
	}
}

511 
USBH_Sètus
 
	$USBH_Së_IdÀ
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

512 
USBH_HOST
 *
pho°
,

513 
uöt8_t
 
duøti⁄
,

514 
uöt8_t
 
ªp‹tId
)

517 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bmReque°Ty≥
 = 
USB_H2D
 | 
USB_REQ_RECIPIENT_INTERFACE
 |\

518 
USB_REQ_TYPE_CLASS
;

521 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bReque°
 = 
USB_HID_SET_IDLE
;

522 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wVÆue
.
w
 = (
duøti⁄
 << 8 ) | 
ªp‹tId
;

524 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wIndex
.
w
 = 0;

525 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wLígth
.
w
 = 0;

527  
	`USBH_CéReq
(
pdev
, 
pho°
, 0 , 0 );

528 
	}
}

541 
USBH_Sètus
 
	$USBH_Së_Rï‹t
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

542 
USBH_HOST
 *
pho°
,

543 
uöt8_t
 
ªp‹tTy≥
,

544 
uöt8_t
 
ªp‹tId
,

545 
uöt8_t
 
ªp‹tLí
,

546 
uöt8_t
* 
ªp‹tBuff
)

549 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bmReque°Ty≥
 = 
USB_H2D
 | 
USB_REQ_RECIPIENT_INTERFACE
 |\

550 
USB_REQ_TYPE_CLASS
;

553 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bReque°
 = 
USB_HID_SET_REPORT
;

554 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wVÆue
.
w
 = (
ªp‹tTy≥
 << 8 ) | 
ªp‹tId
;

556 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wIndex
.
w
 = 0;

557 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wLígth
.
w
 = 
ªp‹tLí
;

559  
	`USBH_CéReq
(
pdev
, 
pho°
, 
ªp‹tBuff
 , 
ªp‹tLí
 );

560 
	}
}

570 
USBH_Sètus
 
	$USBH_Së_PrŸocﬁ
(
USB_OTG_CORE_HANDLE
 *
pdev
,

571 
USBH_HOST
 *
pho°
,

572 
uöt8_t
 
¥Ÿocﬁ
)

576 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bmReque°Ty≥
 = 
USB_H2D
 | 
USB_REQ_RECIPIENT_INTERFACE
 |\

577 
USB_REQ_TYPE_CLASS
;

580 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bReque°
 = 
USB_HID_SET_PROTOCOL
;

582 if(
¥Ÿocﬁ
 != 0)

585 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wVÆue
.
w
 = 0;

590 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wVÆue
.
w
 = 1;

593 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wIndex
.
w
 = 0;

594 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wLígth
.
w
 = 0;

596  
	`USBH_CéReq
(
pdev
, 
pho°
, 0 , 0 );

598 
	}
}

606 
	$USBH_P¨£HIDDesc
 (
USBH_HIDDesc_Ty≥Def
 *
desc
, 
uöt8_t
 *
buf
)

609 
desc
->
bLígth
 = *(
uöt8_t
 *Ë(
buf
 + 0);

610 
desc
->
bDes¸ùt‹Ty≥
 = *(
uöt8_t
 *Ë(
buf
 + 1);

611 
desc
->
bcdHID
 = 
	`LE16
 (
buf
 + 2);

612 
desc
->
bCou¡ryCode
 = *(
uöt8_t
 *Ë(
buf
 + 4);

613 
desc
->
bNumDes¸ùt‹s
 = *(
uöt8_t
 *Ë(
buf
 + 5);

614 
desc
->
bRï‹tDes¸ùt‹Ty≥
 = *(
uöt8_t
 *Ë(
buf
 + 6);

615 
desc
->
wIãmLígth
 = 
	`LE16
 (
buf
 + 7);

617 
	}
}

	@libstm/STM32_USB_HOST_Library/Class/HID/src/usbh_hid_keybd.c

26 
	~"usbh_hid_keybd.h
"

71 
KEYBRD_Inô
 ();

72 
KEYBRD_Decode
(
uöt8_t
 *
d©a
);

78 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


79 #i‡
deföed
 (
__CC_ARM
)

80 
	$__Æign
(4)

81 #ñi‡
	`deföed
 ( 
__ICCARM__
 )

82 #¥agm®
d©a_Æignmít
=4

83 #ñi‡
	`deföed
 (
__GNUC__
)

84 #¥agm®
	`∑ck
(4)

85 #ñi‡
	`deföed
 (
__TASKING__
)

86 
	$__Æign
(4)

93 
HID_cb_Ty≥Def
 
HID_KEYBRD_cb
=

95 
KEYBRD_Inô
,

96 
KEYBRD_Decode


97 
	}
};

105 c⁄° 
uöt8_t
 
	gHID_KEYBRD_Codes
[] = {

137 #ifde‡
QWERTY_KEYBOARD


138 c⁄° 
öt8_t
 
	gHID_KEYBRD_Key
[] = {

159 c⁄° 
öt8_t
 
	gHID_KEYBRD_Shi·Key
[] = {

175 c⁄° 
öt8_t
 
	gHID_KEYBRD_Key
[] = {

189 c⁄° 
öt8_t
 
	gHID_KEYBRD_Shi·Key
[] = {

219 
	$KEYBRD_Inô
 ()

222 
	`USR_KEYBRD_Inô
();

223 
	}
}

232 
	$KEYBRD_Decode
(
uöt8_t
 *
pbuf
)

234 
uöt8_t
 
shi·
;

235 
uöt8_t
 
keys
[
KBR_MAX_NBR_PRESSED
];

236 
uöt8_t
 
keys_√w
[
KBR_MAX_NBR_PRESSED
];

237 
uöt8_t
 
keys_œ°
[
KBR_MAX_NBR_PRESSED
];

238 
uöt8_t
 
key_√we°
;

239 
uöt8_t
 
nbr_keys
;

240 
uöt8_t
 
nbr_keys_√w
;

241 
uöt8_t
 
nbr_keys_œ°
;

242 
uöt8_t
 
ix
;

243 
uöt8_t
 
jx
;

244 
uöt8_t
 
îr‹
;

245 
uöt8_t
 
ouçut
;

247 
nbr_keys
 = 0;

248 
nbr_keys_√w
 = 0;

249 
nbr_keys_œ°
 = 0;

250 
key_√we°
 = 0x00;

254 i‡((
pbuf
[0] =
KBD_LEFT_SHIFT
Ë|| (pbuf[0] =
KBD_RIGHT_SHIFT
)) {

255 
shi·
 = 
TRUE
;

257 
shi·
 = 
FALSE
;

260 
îr‹
 = 
FALSE
;

263 
ix
 = 2; ix < 2 + 
KBR_MAX_NBR_PRESSED
; ix++) {

264 i‡((
pbuf
[
ix
] == 0x01) ||

265 (
pbuf
[
ix
] == 0x02) ||

266 (
pbuf
[
ix
] == 0x03)) {

267 
îr‹
 = 
TRUE
;

271 i‡(
îr‹
 =
TRUE
) {

275 
nbr_keys
 = 0;

276 
nbr_keys_√w
 = 0;

277 
ix
 = 2; ix < 2 + 
KBR_MAX_NBR_PRESSED
; ix++) {

278 i‡(
pbuf
[
ix
] != 0) {

279 
keys
[
nbr_keys
] = 
pbuf
[
ix
];

280 
nbr_keys
++;

281 
jx
 = 0; jx < 
nbr_keys_œ°
; jx++) {

282 i‡(
pbuf
[
ix
] =
keys_œ°
[
jx
]) {

287 i‡(
jx
 =
nbr_keys_œ°
) {

288 
keys_√w
[
nbr_keys_√w
] = 
pbuf
[
ix
];

289 
nbr_keys_√w
++;

294 i‡(
nbr_keys_√w
 == 1) {

295 
key_√we°
 = 
keys_√w
[0];

297 i‡(
shi·
 =
TRUE
) {

298 
ouçut
 = 
HID_KEYBRD_Shi·Key
[
HID_KEYBRD_Codes
[
key_√we°
]];

300 
ouçut
 = 
HID_KEYBRD_Key
[
HID_KEYBRD_Codes
[
key_√we°
]];

304 
	`USR_KEYBRD_Pro˚ssD©a
(
ouçut
);

306 
key_√we°
 = 0x00;

310 
nbr_keys_œ°
 = 
nbr_keys
;

311 
ix
 = 0; ix < 
KBR_MAX_NBR_PRESSED
; ix++) {

312 
keys_œ°
[
ix
] = 
keys
[ix];

314 
	}
}

	@libstm/STM32_USB_HOST_Library/Class/HID/src/usbh_hid_mouse.c

23 
	~"usbh_hid_mou£.h
"

69 
MOUSE_Inô
 ();

70 
MOUSE_Decode
(
uöt8_t
 *
d©a
);

79 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


80 #i‡
deföed
 (
__CC_ARM
)

81 
	$__Æign
(4)

82 #ñi‡
	`deföed
 ( 
__ICCARM__
 )

83 #¥agm®
d©a_Æignmít
=4

84 #ñi‡
	`deföed
 (
__GNUC__
)

85 #¥agm®
	`∑ck
(4)

86 #ñi‡
	`deföed
 (
__TASKING__
)

87 
	$__Æign
(4)

92 
HID_MOUSE_D©a_Ty≥Def
 
HID_MOUSE_D©a
;

93 
HID_cb_Ty≥Def
 
HID_MOUSE_cb
 =

95 
MOUSE_Inô
,

96 
MOUSE_Decode
,

97 
	}
};

113 
	$MOUSE_Inô
 ( )

116 
	`USR_MOUSE_Inô
();

117 
	}
}

125 
	$MOUSE_Decode
(
uöt8_t
 *
d©a
)

127 
HID_MOUSE_D©a
.
buâ⁄
 = 
d©a
[0];

129 
HID_MOUSE_D©a
.
x
 = 
d©a
[1];

130 
HID_MOUSE_D©a
.
y
 = 
d©a
[2];

132 
	`USR_MOUSE_Pro˚ssD©a
(&
HID_MOUSE_D©a
);

134 
	}
}

	@libstm/STM32_USB_HOST_Library/Class/MSC/inc/usbh_msc_bot.h

23 #i‚de‡
__USBH_MSC_BOT_H__


24 
	#__USBH_MSC_BOT_H__


	)

27 
	~"usbh_°dªq.h
"

52 
	u_USBH_CBW_Block


54 
	s__CBW


56 
uöt32_t
 
	mCBWSig«tuª
;

57 
uöt32_t
 
	mCBWTag
;

58 
uöt32_t
 
	mCBWTøns„rLígth
;

59 
uöt8_t
 
	mCBWFœgs
;

60 
uöt8_t
 
	mCBWLUN
;

61 
uöt8_t
 
	mCBWLígth
;

62 
uöt8_t
 
	mCBWCB
[16];

63 }
	mfõld
;

64 
uöt8_t
 
	mCBWAºay
[31];

65 }
	tHo°CBWPkt_Ty≥Def
;

69 
	mUSBH_MSC_BOT_INIT_STATE
 = 0,

70 
	mUSBH_MSC_BOT_RESET
,

71 
	mUSBH_MSC_GET_MAX_LUN
,

72 
	mUSBH_MSC_TEST_UNIT_READY
,

73 
	mUSBH_MSC_READ_CAPACITY10
,

74 
	mUSBH_MSC_MODE_SENSE6
,

75 
	mUSBH_MSC_REQUEST_SENSE
,

76 
	mUSBH_MSC_BOT_USB_TRANSFERS
,

77 
	mUSBH_MSC_DEFAULT_APPLI_STATE
,

78 
	mUSBH_MSC_CTRL_ERROR_STATE
,

79 
	mUSBH_MSC_UNRECOVERED_STATE


81 
	tMSCSèã
;

84 
	s_BOTX„r


86 
uöt8_t
 
	mMSCSèã
;

87 
uöt8_t
 
	mMSCSèãBkp
;

88 
uöt8_t
 
	mMSCSèãCuºít
;

89 
uöt8_t
 
	mCmdSèãMachöe
;

90 
uöt8_t
 
	mBOTSèã
;

91 
uöt8_t
 
	mBOTSèãBkp
;

92 
uöt8_t
* 
	mpRxTxBuff
;

93 
uöt16_t
 
	mD©aLígth
;

94 
uöt8_t
 
	mBOTX„rEº‹Cou¡
;

95 
uöt8_t
 
	mBOTX„rSètus
;

96 } 
	tUSBH_BOTX„r_Ty≥Def
;

99 
	u_USBH_CSW_Block


101 
	s__CSW


103 
uöt32_t
 
	mCSWSig«tuª
;

104 
uöt32_t
 
	mCSWTag
;

105 
uöt32_t
 
	mCSWD©aResidue
;

106 
uöt8_t
 
	mCSWSètus
;

107 }
	mfõld
;

108 
uöt8_t
 
	mCSWAºay
[13];

109 }
	tHo°CSWPkt_Ty≥Def
;

120 
	#USBH_MSC_SEND_CBW
 1

	)

121 
	#USBH_MSC_SENT_CBW
 2

	)

122 
	#USBH_MSC_BOT_DATAIN_STATE
 3

	)

123 
	#USBH_MSC_BOT_DATAOUT_STATE
 4

	)

124 
	#USBH_MSC_RECEIVE_CSW_STATE
 5

	)

125 
	#USBH_MSC_DECODE_CSW
 6

	)

126 
	#USBH_MSC_BOT_ERROR_IN
 7

	)

127 
	#USBH_MSC_BOT_ERROR_OUT
 8

	)

130 
	#USBH_MSC_BOT_CBW_SIGNATURE
 0x43425355

	)

131 
	#USBH_MSC_BOT_CBW_TAG
 0x20304050

	)

132 
	#USBH_MSC_BOT_CSW_SIGNATURE
 0x53425355

	)

133 
	#USBH_MSC_CSW_DATA_LENGTH
 0x000D

	)

134 
	#USBH_MSC_BOT_CBW_PACKET_LENGTH
 31

	)

135 
	#USBH_MSC_CSW_LENGTH
 13

	)

136 
	#USBH_MSC_CSW_MAX_LENGTH
 63

	)

139 
	#USBH_MSC_CSW_CMD_PASSED
 0x00

	)

140 
	#USBH_MSC_CSW_CMD_FAILED
 0x01

	)

141 
	#USBH_MSC_CSW_PHASE_ERROR
 0x02

	)

143 
	#USBH_MSC_SEND_CSW_DISABLE
 0

	)

144 
	#USBH_MSC_SEND_CSW_ENABLE
 1

	)

146 
	#USBH_MSC_DIR_IN
 0

	)

147 
	#USBH_MSC_DIR_OUT
 1

	)

148 
	#USBH_MSC_BOTH_DIR
 2

	)

151 
	#USBH_MSC_PAGE_LENGTH
 512

	)

154 
	#CBW_CB_LENGTH
 16

	)

155 
	#CBW_LENGTH
 10

	)

156 
	#CBW_LENGTH_TEST_UNIT_READY
 6

	)

158 
	#USB_REQ_BOT_RESET
 0xFF

	)

159 
	#USB_REQ_GET_MAX_LUN
 0xFE

	)

161 
	#MAX_BULK_STALL_COUNT_LIMIT
 0x04

	)

180 
USBH_BOTX„r_Ty≥Def
 
USBH_MSC_BOTX„rP¨am
;

181 
Ho°CBWPkt_Ty≥Def
 
USBH_MSC_CBWD©a
;

182 
Ho°CSWPkt_Ty≥Def
 
USBH_MSC_CSWD©a
;

190 
USBH_MSC_H™dÀBOTX„r
(
USB_OTG_CORE_HANDLE
 *
pdev
,

191 
USBH_HOST
 *
pho°
);

192 
uöt8_t
 
USBH_MSC_DecodeCSW
(
USB_OTG_CORE_HANDLE
 *
pdev
,

193 
USBH_HOST
 *
pho°
);

194 
USBH_MSC_Inô
(
USB_OTG_CORE_HANDLE
 *
pdev
);

195 
USBH_Sètus
 
USBH_MSC_BOT_Ab‹t
(
USB_OTG_CORE_HANDLE
 *
pdev
,

196 
USBH_HOST
 *
pho°
,

197 
uöt8_t
 
dúe˘i⁄
);

	@libstm/STM32_USB_HOST_Library/Class/MSC/inc/usbh_msc_core.h

23 #i‚de‡
__USBH_MSC_CORE_H


24 
	#__USBH_MSC_CORE_H


	)

27 
	~"usbh_c‹e.h
"

28 
	~"usbh_°dªq.h
"

29 
	~"usb_b•.h
"

30 
	~"usbh_i‹eq.h
"

31 
	~"usbh_hcs.h
"

32 
	~"usbh_msc_c‹e.h
"

33 
	~"usbh_msc_scsi.h
"

34 
	~"usbh_msc_bŸ.h
"

60 
	s_MSC_Pro˚ss


62 
uöt8_t
 
	mhc_num_ö
;

63 
uöt8_t
 
	mhc_num_out
;

64 
uöt8_t
 
	mMSBulkOutEp
;

65 
uöt8_t
 
	mMSBulkInEp
;

66 
uöt16_t
 
	mMSBulkInEpSize
;

67 
uöt16_t
 
	mMSBulkOutEpSize
;

68 
uöt8_t
 
	mbuff
[
USBH_MSC_MPS_SIZE
];

69 
uöt8_t
 
	mmaxLun
;

71 
	tMSC_Machöe_Ty≥Def
;

84 
	#USB_REQ_BOT_RESET
 0xFF

	)

85 
	#USB_REQ_GET_MAX_LUN
 0xFE

	)

102 
USBH_Cœss_cb_Ty≥Def
 
USBH_MSC_cb
;

103 
MSC_Machöe_Ty≥Def
 
MSC_Machöe
;

104 
uöt8_t
 
MSCEº‹Cou¡
;

	@libstm/STM32_USB_HOST_Library/Class/MSC/inc/usbh_msc_scsi.h

23 #i‚de‡
__USBH_MSC_SCSI_H__


24 
	#__USBH_MSC_SCSI_H__


	)

27 
	~"usbh_°dªq.h
"

52 
	mUSBH_MSC_OK
 = 0,

53 
	mUSBH_MSC_FAIL
 = 1,

54 
	mUSBH_MSC_PHASE_ERROR
 = 2,

55 
	mUSBH_MSC_BUSY
 = 3

56 }
	tUSBH_MSC_Sètus_Ty≥Def
;

59 
	mCMD_UNINITIALIZED_STATE
 =0,

60 
	mCMD_SEND_STATE
,

61 
	mCMD_WAIT_STATUS


62 } 
	tCMD_STATES_Ty≥Def
;

66 
	s__MassSt‹ageP¨amëî


68 
uöt32_t
 
	mMSC≠acôy
;

69 
uöt32_t
 
	mMSSí£Key
;

70 
uöt16_t
 
	mMSPageLígth
;

71 
uöt8_t
 
	mMSBulkOutEp
;

72 
uöt8_t
 
	mMSBulkInEp
;

73 
uöt8_t
 
	mMSWrôePrŸe˘
;

74 } 
	tMassSt‹ageP¨amëî_Ty≥Def
;

87 
	#OPCODE_TEST_UNIT_READY
 0X00

	)

88 
	#OPCODE_READ_CAPACITY10
 0x25

	)

89 
	#OPCODE_MODE_SENSE6
 0x1A

	)

90 
	#OPCODE_READ10
 0x28

	)

91 
	#OPCODE_WRITE10
 0x2A

	)

92 
	#OPCODE_REQUEST_SENSE
 0x03

	)

94 
	#DESC_REQUEST_SENSE
 0X00

	)

95 
	#ALLOCATION_LENGTH_REQUEST_SENSE
 63

	)

96 
	#XFER_LEN_READ_CAPACITY10
 8

	)

97 
	#XFER_LEN_MODE_SENSE6
 63

	)

99 
	#MASK_MODE_SENSE_WRITE_PROTECT
 0x80

	)

100 
	#MODE_SENSE_PAGE_CONTROL_FIELD
 0x00

	)

101 
	#MODE_SENSE_PAGE_CODE
 0x3F

	)

102 
	#DISK_WRITE_PROTECTED
 0x01

	)

117 
MassSt‹ageP¨amëî_Ty≥Def
 
USBH_MSC_P¨am
;

125 
uöt8_t
 
USBH_MSC_Te°UnôRódy
(
USB_OTG_CORE_HANDLE
 *
pdev
);

126 
uöt8_t
 
USBH_MSC_RódC≠acôy10
(
USB_OTG_CORE_HANDLE
 *
pdev
);

127 
uöt8_t
 
USBH_MSC_ModeSí£6
(
USB_OTG_CORE_HANDLE
 *
pdev
);

128 
uöt8_t
 
USBH_MSC_Reque°Sí£
(
USB_OTG_CORE_HANDLE
 *
pdev
);

129 
uöt8_t
 
USBH_MSC_Wrôe10
(
USB_OTG_CORE_HANDLE
 *
pdev
,

130 
uöt8_t
 *,

131 
uöt32_t
 ,

132 
uöt32_t
 );

133 
uöt8_t
 
USBH_MSC_Ród10
(
USB_OTG_CORE_HANDLE
 *
pdev
,

134 
uöt8_t
 *,

135 
uöt32_t
 ,

136 
uöt32_t
 );

137 
USBH_MSC_SèãMachöe
(
USB_OTG_CORE_HANDLE
 *
pdev
);

	@libstm/STM32_USB_HOST_Library/Class/MSC/src/usbh_msc_bot.c

23 
	~"usbh_msc_c‹e.h
"

24 
	~"usbh_msc_scsi.h
"

25 
	~"usbh_msc_bŸ.h
"

26 
	~"usbh_i‹eq.h
"

27 
	~"usbh_def.h
"

28 
	~"usb_hcd_öt.h
"

75 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


76 #i‡
deföed
 ( 
__ICCARM__
 )

77 #¥agm®
d©a_Æignmít
=4

80 
__ALIGN_BEGIN
 
Ho°CBWPkt_Ty≥Def
 
USBH_MSC_CBWD©a
 
	g__ALIGN_END
 ;

82 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


83 #i‡
deföed
 ( 
__ICCARM__
 )

84 #¥agm®
d©a_Æignmít
=4

87 
__ALIGN_BEGIN
 
Ho°CSWPkt_Ty≥Def
 
USBH_MSC_CSWD©a
 
	g__ALIGN_END
 ;

90 
uöt32_t
 
	gBOTSèŒEº‹Cou¡
;

108 
USBH_BOTX„r_Ty≥Def
 
	gUSBH_MSC_BOTX„rP¨am
;

125 
	$USBH_MSC_Inô
(
USB_OTG_CORE_HANDLE
 *
pdev
 )

127 if(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

129 
USBH_MSC_CBWD©a
.
fõld
.
CBWSig«tuª
 = 
USBH_MSC_BOT_CBW_SIGNATURE
;

130 
USBH_MSC_CBWD©a
.
fõld
.
CBWTag
 = 
USBH_MSC_BOT_CBW_TAG
;

131 
USBH_MSC_CBWD©a
.
fõld
.
CBWLUN
 = 0;

132 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

135 
BOTSèŒEº‹Cou¡
 = 0;

136 
MSCEº‹Cou¡
 = 0;

137 
	}
}

147 
	$USBH_MSC_H™dÀBOTX„r
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,
USBH_HOST
 *
pho°
)

149 
uöt8_t
 
x„rDúe˘i⁄
, 
ödex
;

150 
uöt32_t
 
ªmaöögD©aLígth
;

151 
uöt8_t
 *
d©≠oöãr
;

152 
uöt8_t
 
îr‹_dúe˘i⁄
;

153 
USBH_Sètus
 
°©us
;

155 
URB_STATE
 
URB_Sètus
 = 
URB_IDLE
;

157 if(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

160 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
)

162 
USBH_MSC_SEND_CBW
:

164 
	`USBH_BulkSídD©a
 (
pdev
,

165 &
USBH_MSC_CBWD©a
.
CBWAºay
[0],

166 
USBH_MSC_BOT_CBW_PACKET_LENGTH
 ,

167 
MSC_Machöe
.
hc_num_out
);

169 
USBH_MSC_BOTX„rP¨am
.
BOTSèãBkp
 = 
USBH_MSC_SEND_CBW
;

170 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_SENT_CBW
;

174 
USBH_MSC_SENT_CBW
:

175 
URB_Sètus
 = 
	`HCD_GëURB_Sèã
(
pdev
 , 
MSC_Machöe
.
hc_num_out
);

177 if(
URB_Sètus
 =
URB_DONE
)

179 
BOTSèŒEº‹Cou¡
 = 0;

180 
USBH_MSC_BOTX„rP¨am
.
BOTSèãBkp
 = 
USBH_MSC_SENT_CBW
;

183 
x„rDúe˘i⁄
 = (
USBH_MSC_CBWD©a
.
fõld
.
CBWFœgs
 & 
USB_REQ_DIR_MASK
);

185 i‡–
USBH_MSC_CBWD©a
.
fõld
.
CBWTøns„rLígth
 != 0 )

187 
ªmaöögD©aLígth
 = 
USBH_MSC_CBWD©a
.
fõld
.
CBWTøns„rLígth
 ;

188 
d©≠oöãr
 = 
USBH_MSC_BOTX„rP¨am
.
pRxTxBuff
;

191 i‡(
x„rDúe˘i⁄
 =
USB_D2H
)

194 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_BOT_DATAIN_STATE
;

199 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_BOT_DATAOUT_STATE
;

205 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_RECEIVE_CSW_STATE
;

209 if(
URB_Sètus
 =
URB_NOTREADY
)

211 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = USBH_MSC_BOTX„rP¨am.
BOTSèãBkp
;

213 if(
URB_Sètus
 =
URB_STALL
)

215 
îr‹_dúe˘i⁄
 = 
USBH_MSC_DIR_OUT
;

216 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_BOT_ERROR_OUT
;

220 
USBH_MSC_BOT_DATAIN_STATE
:

222 
URB_Sètus
 = 
	`HCD_GëURB_Sèã
(
pdev
 , 
MSC_Machöe
.
hc_num_ö
);

224 if((
URB_Sètus
 =
URB_DONE
Ë||(
USBH_MSC_BOTX„rP¨am
.
BOTSèãBkp
 !
USBH_MSC_BOT_DATAIN_STATE
))

226 
BOTSèŒEº‹Cou¡
 = 0;

227 
USBH_MSC_BOTX„rP¨am
.
BOTSèãBkp
 = 
USBH_MSC_BOT_DATAIN_STATE
;

229 if(
ªmaöögD©aLígth
 > 
USBH_MSC_MPS_SIZE
)

231 
	`USBH_BulkRe˚iveD©a
 (
pdev
,

232 
d©≠oöãr
,

233 
USBH_MSC_MPS_SIZE
 ,

234 
MSC_Machöe
.
hc_num_ö
);

236 
ªmaöögD©aLígth
 -
USBH_MSC_MPS_SIZE
;

237 
d©≠oöãr
 = d©≠oöã∏+ 
USBH_MSC_MPS_SIZE
;

239 i‡–
ªmaöögD©aLígth
 == 0)

242 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_RECEIVE_CSW_STATE
;

246 
	`USBH_BulkRe˚iveD©a
 (
pdev
,

247 
d©≠oöãr
,

248 
ªmaöögD©aLígth
 ,

249 
MSC_Machöe
.
hc_num_ö
);

251 
ªmaöögD©aLígth
 = 0;

254 if(
URB_Sètus
 =
URB_STALL
)

258 
îr‹_dúe˘i⁄
 = 
USBH_MSC_DIR_IN
;

259 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_BOT_ERROR_IN
;

271 
USBH_MSC_BOTX„rP¨am
.
BOTSèãBkp
 = 
USBH_MSC_RECEIVE_CSW_STATE
;

277 
USBH_MSC_BOT_DATAOUT_STATE
:

279 
URB_Sètus
 = 
	`HCD_GëURB_Sèã
(
pdev
 , 
MSC_Machöe
.
hc_num_out
);

280 if(
URB_Sètus
 =
URB_DONE
)

282 
BOTSèŒEº‹Cou¡
 = 0;

283 
USBH_MSC_BOTX„rP¨am
.
BOTSèãBkp
 = 
USBH_MSC_BOT_DATAOUT_STATE
;

284 if(
ªmaöögD©aLígth
 > 
USBH_MSC_MPS_SIZE
)

286 
	`USBH_BulkSídD©a
 (
pdev
,

287 
d©≠oöãr
,

288 
USBH_MSC_MPS_SIZE
 ,

289 
MSC_Machöe
.
hc_num_out
);

290 
d©≠oöãr
 = d©≠oöã∏+ 
USBH_MSC_MPS_SIZE
;

291 
ªmaöögD©aLígth
 =ÑemaöögD©aLígth - 
USBH_MSC_MPS_SIZE
;

293 i‡–
ªmaöögD©aLígth
 == 0)

296 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_RECEIVE_CSW_STATE
;

300 
	`USBH_BulkSídD©a
 (
pdev
,

301 
d©≠oöãr
,

302 
ªmaöögD©aLígth
 ,

303 
MSC_Machöe
.
hc_num_out
);

305 
ªmaöögD©aLígth
 = 0;

309 if(
URB_Sètus
 =
URB_NOTREADY
)

311 
	`USBH_BulkSídD©a
 (
pdev
,

312 (
d©≠oöãr
 - 
USBH_MSC_MPS_SIZE
),

313 
USBH_MSC_MPS_SIZE
 ,

314 
MSC_Machöe
.
hc_num_out
);

317 if(
URB_Sètus
 =
URB_STALL
)

319 
îr‹_dúe˘i⁄
 = 
USBH_MSC_DIR_OUT
;

320 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_BOT_ERROR_OUT
;

335 
USBH_MSC_BOTX„rP¨am
.
BOTSèãBkp
 = 
USBH_MSC_RECEIVE_CSW_STATE
;

340 
USBH_MSC_RECEIVE_CSW_STATE
:

345 
USBH_MSC_BOTX„rP¨am
.
BOTSèãBkp
 = 
USBH_MSC_RECEIVE_CSW_STATE
;

347 
USBH_MSC_BOTX„rP¨am
.
pRxTxBuff
 = 
USBH_MSC_CSWD©a
.
CSWAºay
;

348 
USBH_MSC_BOTX„rP¨am
.
D©aLígth
 = 
USBH_MSC_CSW_MAX_LENGTH
;

350 
ödex
 = 
USBH_MSC_CSW_LENGTH
; index != 0; index--)

352 
USBH_MSC_CSWD©a
.
CSWAºay
[
ödex
] = 0;

355 
USBH_MSC_CSWD©a
.
CSWAºay
[0] = 0;

357 
	`USBH_BulkRe˚iveD©a
 (
pdev
,

358 
USBH_MSC_BOTX„rP¨am
.
pRxTxBuff
,

359 
USBH_MSC_CSW_MAX_LENGTH
 ,

360 
MSC_Machöe
.
hc_num_ö
);

361 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_DECODE_CSW
;

365 
USBH_MSC_DECODE_CSW
:

366 
URB_Sètus
 = 
	`HCD_GëURB_Sèã
(
pdev
 , 
MSC_Machöe
.
hc_num_ö
);

368 if(
URB_Sètus
 =
URB_DONE
)

370 
BOTSèŒEº‹Cou¡
 = 0;

371 
USBH_MSC_BOTX„rP¨am
.
BOTSèãBkp
 = 
USBH_MSC_RECEIVE_CSW_STATE
;

373 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = USBH_MSC_BOTX„rP¨am.
MSCSèãCuºít
 ;

375 
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 = 
	`USBH_MSC_DecodeCSW
(
pdev
 , 
pho°
);

377 if(
URB_Sètus
 =
URB_STALL
)

379 
îr‹_dúe˘i⁄
 = 
USBH_MSC_DIR_IN
;

380 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_BOT_ERROR_IN
;

384 
USBH_MSC_BOT_ERROR_IN
:

385 
°©us
 = 
	`USBH_MSC_BOT_Ab‹t
(
pdev
, 
pho°
, 
USBH_MSC_DIR_IN
);

386 i‡(
°©us
 =
USBH_OK
)

389 i‡(
îr‹_dúe˘i⁄
 =
USBH_MSC_BOTH_DIR
)

391 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_BOT_ERROR_OUT
;

397 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = USBH_MSC_BOTX„rP¨am.
BOTSèãBkp
;

400 i‡(
°©us
 =
USBH_UNRECOVERED_ERROR
)

403 
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 = 
USBH_MSC_PHASE_ERROR
;

407 
USBH_MSC_BOT_ERROR_OUT
:

408 
°©us
 = 
	`USBH_MSC_BOT_Ab‹t
(
pdev
, 
pho°
, 
USBH_MSC_DIR_OUT
);

409 i‡–
°©us
 =
USBH_OK
)

411 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = USBH_MSC_BOTX„rP¨am.
BOTSèãBkp
;

413 i‡(
°©us
 =
USBH_UNRECOVERED_ERROR
)

416 
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 = 
USBH_MSC_PHASE_ERROR
;

424 
	}
}

432 
USBH_Sètus
 
	$USBH_MSC_BOT_Ab‹t
(
USB_OTG_CORE_HANDLE
 *
pdev
,

433 
USBH_HOST
 *
pho°
,

434 
uöt8_t
 
dúe˘i⁄
)

436 
USBH_Sètus
 
°©us
;

438 
°©us
 = 
USBH_BUSY
;

440 
dúe˘i⁄
)

442 
USBH_MSC_DIR_IN
 :

444 
°©us
 = 
	`USBH_CÃFótuª
(
pdev
,

445 
pho°
,

446 
MSC_Machöe
.
MSBulkInEp
,

447 
MSC_Machöe
.
hc_num_ö
);

451 
USBH_MSC_DIR_OUT
 :

453 
°©us
 = 
	`USBH_CÃFótuª
(
pdev
,

454 
pho°
,

455 
MSC_Machöe
.
MSBulkOutEp
,

456 
MSC_Machöe
.
hc_num_out
);

463 
BOTSèŒEº‹Cou¡
++;

464 i‡(
BOTSèŒEº‹Cou¡
 > 
MAX_BULK_STALL_COUNT_LIMIT
 )

466 
°©us
 = 
USBH_UNRECOVERED_ERROR
;

469  
°©us
;

470 
	}
}

487 
uöt8_t
 
	$USBH_MSC_DecodeCSW
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USBH_HOST
 *
pho°
)

489 
uöt8_t
 
°©us
;

490 
uöt32_t
 
d©aX„rCou¡
 = 0;

491 
°©us
 = 
USBH_MSC_FAIL
;

493 if(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

496 
d©aX„rCou¡
 = 
	`HCD_GëX„rC¡
(
pdev
, 
MSC_Machöe
.
hc_num_ö
);

498 if(
d©aX„rCou¡
 !
USBH_MSC_CSW_LENGTH
)

510 
°©us
 = 
USBH_MSC_PHASE_ERROR
;

516 if(
USBH_MSC_CSWD©a
.
fõld
.
CSWSig«tuª
 =
USBH_MSC_BOT_CSW_SIGNATURE
)

519 if(
USBH_MSC_CSWD©a
.
fõld
.
CSWTag
 =
USBH_MSC_CBWD©a
.fõld.
CBWTag
)

524 if(
USBH_MSC_CSWD©a
.
fõld
.
CSWSètus
 =
USBH_MSC_OK
)

546 
°©us
 = 
USBH_MSC_OK
;

548 if(
USBH_MSC_CSWD©a
.
fõld
.
CSWSètus
 =
USBH_MSC_FAIL
)

550 
°©us
 = 
USBH_MSC_FAIL
;

553 if(
USBH_MSC_CSWD©a
.
fõld
.
CSWSètus
 =
USBH_MSC_PHASE_ERROR
)

571 
°©us
 = 
USBH_MSC_PHASE_ERROR
;

580 
°©us
 = 
USBH_MSC_PHASE_ERROR
;

585 
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 = 
°©us
;

586  
°©us
;

587 
	}
}

	@libstm/STM32_USB_HOST_Library/Class/MSC/src/usbh_msc_core.c

35 
	~"usbh_msc_c‹e.h
"

36 
	~"usbh_msc_scsi.h
"

37 
	~"usbh_msc_bŸ.h
"

38 
	~"usbh_c‹e.h
"

69 
	#USBH_MSC_ERROR_RETRY_LIMIT
 10

	)

85 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


86 #i‡
deföed
 ( 
__ICCARM__
 )

87 #¥agm®
d©a_Æignmít
=4

90 
__ALIGN_BEGIN
 
MSC_Machöe_Ty≥Def
 
MSC_Machöe
 
	g__ALIGN_END
 ;

92 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


93 #i‡
deföed
 ( 
__ICCARM__
 )

94 #¥agm®
d©a_Æignmít
=4

97 
__ALIGN_BEGIN
 
USB_Sëup_Ty≥Def
 
MSC_Sëup
 
	g__ALIGN_END
 ;

98 
uöt8_t
 
	gMSCEº‹Cou¡
 = 0;

110 
USBH_Sètus
 
USBH_MSC_I¡îÁ˚Inô
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

111 *
pho°
);

113 
USBH_MSC_I¡îÁ˚DeInô
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

114 *
pho°
);

116 
USBH_Sètus
 
USBH_MSC_H™dÀ
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

117 *
pho°
);

119 
USBH_Sètus
 
USBH_MSC_CœssReque°
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

120 *
pho°
);

122 
USBH_Sètus
 
USBH_MSC_BOTRe£t
(
USB_OTG_CORE_HANDLE
 *
pdev
,

123 
USBH_HOST
 *
pho°
);

124 
USBH_Sètus
 
USBH_MSC_GETMaxLUN
(
USB_OTG_CORE_HANDLE
 *
pdev
,

125 
USBH_HOST
 *
pho°
);

128 
USBH_Cœss_cb_Ty≥Def
 
	gUSBH_MSC_cb
 =

130 
USBH_MSC_I¡îÁ˚Inô
,

131 
USBH_MSC_I¡îÁ˚DeInô
,

132 
USBH_MSC_CœssReque°
,

133 
USBH_MSC_H™dÀ
,

136 
USBH_MSC_Eº‹H™dÀ
(
uöt8_t
 
°©us
);

164 
USBH_Sètus
 
	$USBH_MSC_I¡îÁ˚Inô
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

165 *
pho°
)

167 
USBH_HOST
 *
µho°
 = 
pho°
;

169 if((
µho°
->
devi˚_¥›
.
Itf_Desc
[0].
bI¡îÁ˚Cœss
 =
MSC_CLASS
) && \

170 (
µho°
->
devi˚_¥›
.
Itf_Desc
[0].
bI¡îÁ˚PrŸocﬁ
 =
MSC_PROTOCOL
))

172 if(
µho°
->
devi˚_¥›
.
Ep_Desc
[0][0].
bEndpoötAddªss
 & 0x80)

174 
MSC_Machöe
.
MSBulkInEp
 = (
µho°
->
devi˚_¥›
.
Ep_Desc
[0][0].
bEndpoötAddªss
);

175 
MSC_Machöe
.
MSBulkInEpSize
 = 
µho°
->
devi˚_¥›
.
Ep_Desc
[0][0].
wMaxPackëSize
;

179 
MSC_Machöe
.
MSBulkOutEp
 = (
µho°
->
devi˚_¥›
.
Ep_Desc
[0][0].
bEndpoötAddªss
);

180 
MSC_Machöe
.
MSBulkOutEpSize
 = 
µho°
->
devi˚_¥›
.
Ep_Desc
[0] [0].
wMaxPackëSize
;

183 if(
µho°
->
devi˚_¥›
.
Ep_Desc
[0][1].
bEndpoötAddªss
 & 0x80)

185 
MSC_Machöe
.
MSBulkInEp
 = (
µho°
->
devi˚_¥›
.
Ep_Desc
[0][1].
bEndpoötAddªss
);

186 
MSC_Machöe
.
MSBulkInEpSize
 = 
µho°
->
devi˚_¥›
.
Ep_Desc
[0][1].
wMaxPackëSize
;

190 
MSC_Machöe
.
MSBulkOutEp
 = (
µho°
->
devi˚_¥›
.
Ep_Desc
[0][1].
bEndpoötAddªss
);

191 
MSC_Machöe
.
MSBulkOutEpSize
 = 
µho°
->
devi˚_¥›
.
Ep_Desc
[0][1].
wMaxPackëSize
;

194 
MSC_Machöe
.
hc_num_out
 = 
	`USBH_AŒoc_Ch™√l
(
pdev
,

195 
MSC_Machöe
.
MSBulkOutEp
);

196 
MSC_Machöe
.
hc_num_ö
 = 
	`USBH_AŒoc_Ch™√l
(
pdev
,

197 
MSC_Machöe
.
MSBulkInEp
);

200 
	`USBH_O≥n_Ch™√l
 (
pdev
,

201 
MSC_Machöe
.
hc_num_out
,

202 
µho°
->
devi˚_¥›
.
addªss
,

203 
µho°
->
devi˚_¥›
.
•ìd
,

204 
EP_TYPE_BULK
,

205 
MSC_Machöe
.
MSBulkOutEpSize
);

207 
	`USBH_O≥n_Ch™√l
 (
pdev
,

208 
MSC_Machöe
.
hc_num_ö
,

209 
µho°
->
devi˚_¥›
.
addªss
,

210 
µho°
->
devi˚_¥›
.
•ìd
,

211 
EP_TYPE_BULK
,

212 
MSC_Machöe
.
MSBulkInEpSize
);

218 
µho°
->
u§_cb
->
	`USBH_USR_Devi˚NŸSuµ‹ãd
();

221  
USBH_OK
 ;

223 
	}
}

233 
	$USBH_MSC_I¡îÁ˚DeInô
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

234 *
pho°
)

236 i‡–
MSC_Machöe
.
hc_num_out
)

238 
	`USB_OTG_HC_HÆt
(
pdev
, 
MSC_Machöe
.
hc_num_out
);

239 
	`USBH_Fªe_Ch™√l
 (
pdev
, 
MSC_Machöe
.
hc_num_out
);

240 
MSC_Machöe
.
hc_num_out
 = 0;

243 i‡–
MSC_Machöe
.
hc_num_ö
)

245 
	`USB_OTG_HC_HÆt
(
pdev
, 
MSC_Machöe
.
hc_num_ö
);

246 
	`USBH_Fªe_Ch™√l
 (
pdev
, 
MSC_Machöe
.
hc_num_ö
);

247 
MSC_Machöe
.
hc_num_ö
 = 0;

249 
	}
}

259 
USBH_Sètus
 
	$USBH_MSC_CœssReque°
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

260 *
pho°
)

263 
USBH_Sètus
 
°©us
 = 
USBH_OK
 ;

264 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_BOT_INIT_STATE
;

266  
°©us
;

267 
	}
}

278 
USBH_Sètus
 
	$USBH_MSC_H™dÀ
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

279 *
pho°
)

281 
USBH_HOST
 *
µho°
 = 
pho°
;

283 
USBH_Sètus
 
°©us
 = 
USBH_BUSY
;

284 
uöt8_t
 
mscSètus
 = 
USBH_MSC_BUSY
;

285 
uöt8_t
 
≠∂iSètus
 = 0;

287 
uöt8_t
 
maxLunEx˚ed
 = 
FALSE
;

290 if(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

292 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
)

294 
USBH_MSC_BOT_INIT_STATE
:

295 
	`USBH_MSC_Inô
(
pdev
);

296 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_BOT_RESET
;

299 
USBH_MSC_BOT_RESET
:

301 
°©us
 = 
	`USBH_MSC_BOTRe£t
(
pdev
, 
pho°
);

302 if(
°©us
 =
USBH_OK
 )

304 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_GET_MAX_LUN
;

307 if(
°©us
 =
USBH_NOT_SUPPORTED
 )

311 
USBH_MSC_BOTX„rP¨am
.
MSCSèãBkp
 = 
USBH_MSC_GET_MAX_LUN
;

314 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_CTRL_ERROR_STATE
;

318 
USBH_MSC_GET_MAX_LUN
:

320 
°©us
 = 
	`USBH_MSC_GETMaxLUN
(
pdev
, 
pho°
);

322 if(
°©us
 =
USBH_OK
 )

324 
MSC_Machöe
.
maxLun
 = *(MSC_Machöe.
buff
) ;

327 if((
MSC_Machöe
.
maxLun
 > 0Ë&& (
maxLunEx˚ed
 =
FALSE
))

329 
maxLunEx˚ed
 = 
TRUE
;

330 
µho°
->
u§_cb
->
	`USBH_USR_Devi˚NŸSuµ‹ãd
();

334 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_TEST_UNIT_READY
;

337 if(
°©us
 =
USBH_NOT_SUPPORTED
 )

341 
USBH_MSC_BOTX„rP¨am
.
MSCSèãBkp
 = 
USBH_MSC_TEST_UNIT_READY
;

344 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_CTRL_ERROR_STATE
;

348 
USBH_MSC_CTRL_ERROR_STATE
:

350 
°©us
 = 
	`USBH_CÃFótuª
(
pdev
,

351 
pho°
,

353 
µho°
->
C⁄åﬁ
.
hc_num_out
);

354 if(
°©us
 =
USBH_OK
 )

357 
MSC_Machöe
.
maxLun
 = 0;

359 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = USBH_MSC_BOTX„rP¨am.
MSCSèãBkp
;

363 
USBH_MSC_TEST_UNIT_READY
:

365 
mscSètus
 = 
	`USBH_MSC_Te°UnôRódy
(
pdev
);

367 if(
mscSètus
 =
USBH_MSC_OK
 )

369 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_READ_CAPACITY10
;

370 
MSCEº‹Cou¡
 = 0;

371 
°©us
 = 
USBH_OK
;

375 
	`USBH_MSC_Eº‹H™dÀ
(
mscSètus
);

379 
USBH_MSC_READ_CAPACITY10
:

381 
mscSètus
 = 
	`USBH_MSC_RódC≠acôy10
(
pdev
);

382 if(
mscSètus
 =
USBH_MSC_OK
 )

384 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_MODE_SENSE6
;

385 
MSCEº‹Cou¡
 = 0;

386 
°©us
 = 
USBH_OK
;

390 
	`USBH_MSC_Eº‹H™dÀ
(
mscSètus
);

394 
USBH_MSC_MODE_SENSE6
:

396 
mscSètus
 = 
	`USBH_MSC_ModeSí£6
(
pdev
);

397 if(
mscSètus
 =
USBH_MSC_OK
 )

399 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_DEFAULT_APPLI_STATE
;

400 
MSCEº‹Cou¡
 = 0;

401 
°©us
 = 
USBH_OK
;

405 
	`USBH_MSC_Eº‹H™dÀ
(
mscSètus
);

409 
USBH_MSC_REQUEST_SENSE
:

411 
mscSètus
 = 
	`USBH_MSC_Reque°Sí£
(
pdev
);

412 if(
mscSètus
 =
USBH_MSC_OK
 )

414 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = USBH_MSC_BOTX„rP¨am.
MSCSèãBkp
;

415 
°©us
 = 
USBH_OK
;

419 
	`USBH_MSC_Eº‹H™dÀ
(
mscSètus
);

423 
USBH_MSC_BOT_USB_TRANSFERS
:

425 
	`USBH_MSC_H™dÀBOTX„r
(
pdev
 , 
pho°
);

428 
USBH_MSC_DEFAULT_APPLI_STATE
:

430 
≠∂iSètus
 = 
µho°
->
u§_cb
->
	`USBH_USR_MSC_Aµliˇti⁄
();

431 if(
≠∂iSètus
 == 0)

433 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_DEFAULT_APPLI_STATE
;

435 i‡(
≠∂iSètus
 == 1)

438 
°©us
 = 
USBH_APPLY_DEINIT
;

442 
USBH_MSC_UNRECOVERED_STATE
:

444 
°©us
 = 
USBH_UNRECOVERED_ERROR
;

453  
°©us
;

454 
	}
}

466 
USBH_Sètus
 
	$USBH_MSC_BOTRe£t
(
USB_OTG_CORE_HANDLE
 *
pdev
,

467 
USBH_HOST
 *
pho°
)

470 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bmReque°Ty≥
 = 
USB_H2D
 | 
USB_REQ_TYPE_CLASS
 | \

471 
USB_REQ_RECIPIENT_INTERFACE
;

473 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bReque°
 = 
USB_REQ_BOT_RESET
;

474 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wVÆue
.
w
 = 0;

475 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wIndex
.
w
 = 0;

476 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wLígth
.
w
 = 0;

478  
	`USBH_CéReq
(
pdev
, 
pho°
, 0 , 0 );

479 
	}
}

490 
USBH_Sètus
 
	$USBH_MSC_GETMaxLUN
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USBH_HOST
 *
pho°
)

492 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bmReque°Ty≥
 = 
USB_D2H
 | 
USB_REQ_TYPE_CLASS
 | \

493 
USB_REQ_RECIPIENT_INTERFACE
;

495 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bReque°
 = 
USB_REQ_GET_MAX_LUN
;

496 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wVÆue
.
w
 = 0;

497 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wIndex
.
w
 = 0;

498 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wLígth
.
w
 = 1;

500  
	`USBH_CéReq
(
pdev
, 
pho°
, 
MSC_Machöe
.
buff
 , 1 );

501 
	}
}

511 
	$USBH_MSC_Eº‹H™dÀ
(
uöt8_t
 
°©us
)

513 if(
°©us
 =
USBH_MSC_FAIL
)

515 
MSCEº‹Cou¡
++;

516 if(
MSCEº‹Cou¡
 < 
USBH_MSC_ERROR_RETRY_LIMIT
)

519 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_REQUEST_SENSE
;

520 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

525 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_UNRECOVERED_STATE
;

528 if(
°©us
 =
USBH_MSC_PHASE_ERROR
)

531 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_UNRECOVERED_STATE
;

533 if(
°©us
 =
USBH_MSC_BUSY
)

537 
	}
}

	@libstm/STM32_USB_HOST_Library/Class/MSC/src/usbh_msc_fatfs.c

2 
	~"usb_c⁄f.h
"

3 
	~"diskio.h
"

4 
	~"usbh_msc_c‹e.h
"

11 vﬁ©ûê
DSTATUS
 
	gSèt
 = 
STA_NOINIT
;

13 
USB_OTG_CORE_HANDLE
 
USB_OTG_C‹e
;

14 
USBH_HOST
 
USB_Ho°
;

20 
DSTATUS
 
	$disk_öôülize
 (

21 
BYTE
 
drv


25 if(
	`HCD_IsDevi˚C⁄√˘ed
(&
USB_OTG_C‹e
))

27 
Sèt
 &~
STA_NOINIT
;

30  
Sèt
;

33 
	}
}

41 
DSTATUS
 
	$disk_°©us
 (

42 
BYTE
 
drv


45 i‡(
drv
Ë 
STA_NOINIT
;

46  
Sèt
;

47 
	}
}

55 
DRESULT
 
	$disk_ªad
 (

56 
BYTE
 
drv
,

57 
BYTE
 *
buff
,

58 
DWORD
 
£˘‹
,

59 
BYTE
 
cou¡


62 
BYTE
 
°©us
 = 
USBH_MSC_OK
;

64 i‡(
drv
 || !
cou¡
Ë 
RES_PARERR
;

65 i‡(
Sèt
 & 
STA_NOINIT
Ë 
RES_NOTRDY
;

68 if(
	`HCD_IsDevi˚C⁄√˘ed
(&
USB_OTG_C‹e
))

73 
°©us
 = 
	`USBH_MSC_Ród10
(&
USB_OTG_C‹e
, 
buff
,
£˘‹
,512);

74 
	`USBH_MSC_H™dÀBOTX„r
(&
USB_OTG_C‹e
 ,&
USB_Ho°
);

76 if(!
	`HCD_IsDevi˚C⁄√˘ed
(&
USB_OTG_C‹e
))

78  
RES_ERROR
;

81 
°©us
 =
USBH_MSC_BUSY
 );

84 if(
°©us
 =
USBH_MSC_OK
)

85  
RES_OK
;

86  
RES_ERROR
;

88 
	}
}

96 #i‡
_READONLY
 == 0

97 
DRESULT
 
	$disk_wrôe
 (

98 
BYTE
 
drv
,

99 c⁄° 
BYTE
 *
buff
,

100 
DWORD
 
£˘‹
,

101 
BYTE
 
cou¡


104 
BYTE
 
°©us
 = 
USBH_MSC_OK
;

105 i‡(
drv
 || !
cou¡
Ë 
RES_PARERR
;

106 i‡(
Sèt
 & 
STA_NOINIT
Ë 
RES_NOTRDY
;

107 i‡(
Sèt
 & 
STA_PROTECT
Ë 
RES_WRPRT
;

110 if(
	`HCD_IsDevi˚C⁄√˘ed
(&
USB_OTG_C‹e
))

114 
°©us
 = 
	`USBH_MSC_Wrôe10
(&
USB_OTG_C‹e
,(
BYTE
*)
buff
,
£˘‹
,512);

115 
	`USBH_MSC_H™dÀBOTX„r
(&
USB_OTG_C‹e
, &
USB_Ho°
);

117 if(!
	`HCD_IsDevi˚C⁄√˘ed
(&
USB_OTG_C‹e
))

119  
RES_ERROR
;

123 
°©us
 =
USBH_MSC_BUSY
 );

127 if(
°©us
 =
USBH_MSC_OK
)

128  
RES_OK
;

129  
RES_ERROR
;

130 
	}
}

139 #i‡
_USE_IOCTL
 != 0

140 
DRESULT
 
	$disk_io˘l
 (

141 
BYTE
 
drv
,

142 
BYTE
 
˘æ
,

143 *
buff


146 
DRESULT
 
ªs
 = 
RES_OK
;

148 i‡(
drv
Ë 
RES_PARERR
;

150 
ªs
 = 
RES_ERROR
;

152 i‡(
Sèt
 & 
STA_NOINIT
Ë 
RES_NOTRDY
;

154 
˘æ
) {

155 
CTRL_SYNC
 :

157 
ªs
 = 
RES_OK
;

160 
GET_SECTOR_COUNT
 :

162 *(
DWORD
*)
buff
 = (DWORDË
USBH_MSC_P¨am
.
MSC≠acôy
;

163 
ªs
 = 
RES_OK
;

166 
GET_SECTOR_SIZE
 :

167 *(
WORD
*)
buff
 = 512;

168 
ªs
 = 
RES_OK
;

171 
GET_BLOCK_SIZE
 :

173 *(
DWORD
*)
buff
 = 512;

179 
ªs
 = 
RES_PARERR
;

184  
ªs
;

185 
	}
}

	@libstm/STM32_USB_HOST_Library/Class/MSC/src/usbh_msc_scsi.c

23 
	~"usbh_msc_c‹e.h
"

24 
	~"usbh_msc_scsi.h
"

25 
	~"usbh_msc_bŸ.h
"

26 
	~"usbh_i‹eq.h
"

27 
	~"usbh_def.h
"

52 
MassSt‹ageP¨amëî_Ty≥Def
 
	gUSBH_MSC_P¨am
;

76 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


77 #i‡
deföed
 ( 
__ICCARM__
 )

78 #¥agm®
d©a_Æignmít
=4

81 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBH_D©aInBuf„r
[512] 
	g__ALIGN_END
 ;

83 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


84 #i‡
deföed
 ( 
__ICCARM__
 )

85 #¥agm®
d©a_Æignmít
=4

88 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBH_D©aOutBuf„r
[512] 
	g__ALIGN_END
 ;

125 
uöt8_t
 
	$USBH_MSC_Te°UnôRódy
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

127 
uöt8_t
 
ödex
;

128 
USBH_MSC_Sètus_Ty≥Def
 
°©us
 = 
USBH_MSC_BUSY
;

130 if(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

132 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
)

134 
CMD_SEND_STATE
:

136 
USBH_MSC_CBWD©a
.
fõld
.
CBWTøns„rLígth
 = 0;

137 
USBH_MSC_CBWD©a
.
fõld
.
CBWFœgs
 = 
USB_EP_DIR_OUT
;

138 
USBH_MSC_CBWD©a
.
fõld
.
CBWLígth
 = 
CBW_LENGTH_TEST_UNIT_READY
;

139 
USBH_MSC_BOTX„rP¨am
.
pRxTxBuff
 = 
USBH_MSC_CSWD©a
.
CSWAºay
;

140 
USBH_MSC_BOTX„rP¨am
.
D©aLígth
 = 
USBH_MSC_CSW_MAX_LENGTH
;

141 
USBH_MSC_BOTX„rP¨am
.
MSCSèãCuºít
 = 
USBH_MSC_TEST_UNIT_READY
;

143 
ödex
 = 
CBW_CB_LENGTH
; index != 0; index--)

145 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[
ödex
] = 0x00;

148 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[0] = 
OPCODE_TEST_UNIT_READY
;

149 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_SEND_CBW
;

152 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_BOT_USB_TRANSFERS
;

153 
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 = 
USBH_MSC_BUSY
;

154 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_WAIT_STATUS
;

156 
°©us
 = 
USBH_MSC_BUSY
;

159 
CMD_WAIT_STATUS
:

160 if(
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_OK
)

163 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

165 
°©us
 = 
USBH_MSC_OK
;

167 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_FAIL
 )

170 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

171 
°©us
 = 
USBH_MSC_FAIL
;

174 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_PHASE_ERROR
 )

177 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

178 
°©us
 = 
USBH_MSC_PHASE_ERROR
;

186  
°©us
;

187 
	}
}

197 
uöt8_t
 
	$USBH_MSC_RódC≠acôy10
(
USB_OTG_CORE_HANDLE
 *
pdev
)

199 
uöt8_t
 
ödex
;

200 
USBH_MSC_Sètus_Ty≥Def
 
°©us
 = 
USBH_MSC_BUSY
;

202 if(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

204 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
)

206 
CMD_SEND_STATE
:

208 
USBH_MSC_CBWD©a
.
fõld
.
CBWTøns„rLígth
 = 
XFER_LEN_READ_CAPACITY10
;

209 
USBH_MSC_CBWD©a
.
fõld
.
CBWFœgs
 = 
USB_EP_DIR_IN
;

210 
USBH_MSC_CBWD©a
.
fõld
.
CBWLígth
 = 
CBW_LENGTH
;

212 
USBH_MSC_BOTX„rP¨am
.
pRxTxBuff
 = 
USBH_D©aInBuf„r
;

213 
USBH_MSC_BOTX„rP¨am
.
MSCSèãCuºít
 = 
USBH_MSC_READ_CAPACITY10
;

215 
ödex
 = 
CBW_CB_LENGTH
; index != 0; index--)

217 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[
ödex
] = 0x00;

220 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[0] = 
OPCODE_READ_CAPACITY10
;

221 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_SEND_CBW
;

225 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_BOT_USB_TRANSFERS
;

226 
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 = 
USBH_MSC_BUSY
;

227 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_WAIT_STATUS
;

229 
°©us
 = 
USBH_MSC_BUSY
;

232 
CMD_WAIT_STATUS
:

233 if(
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_OK
)

236 (((
uöt8_t
*)&
USBH_MSC_P¨am
.
MSC≠acôy
 )[3]Ë
USBH_D©aInBuf„r
[0];

237 (((
uöt8_t
*)&
USBH_MSC_P¨am
.
MSC≠acôy
 )[2]Ë
USBH_D©aInBuf„r
[1];

238 (((
uöt8_t
*)&
USBH_MSC_P¨am
.
MSC≠acôy
 )[1]Ë
USBH_D©aInBuf„r
[2];

239 (((
uöt8_t
*)&
USBH_MSC_P¨am
.
MSC≠acôy
 )[0]Ë
USBH_D©aInBuf„r
[3];

242 (((
uöt8_t
*)&
USBH_MSC_P¨am
.
MSPageLígth
 )[1]Ë
USBH_D©aInBuf„r
[6];

243 (((
uöt8_t
*)&
USBH_MSC_P¨am
.
MSPageLígth
 )[0]Ë
USBH_D©aInBuf„r
[7];

246 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

247 
°©us
 = 
USBH_MSC_OK
;

249 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_FAIL
 )

252 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

253 
°©us
 = 
USBH_MSC_FAIL
;

255 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_PHASE_ERROR
 )

258 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

259 
°©us
 = 
USBH_MSC_PHASE_ERROR
;

272  
°©us
;

273 
	}
}

283 
uöt8_t
 
	$USBH_MSC_ModeSí£6
(
USB_OTG_CORE_HANDLE
 *
pdev
)

285 
uöt8_t
 
ödex
;

286 
USBH_MSC_Sètus_Ty≥Def
 
°©us
 = 
USBH_MSC_BUSY
;

288 if(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

290 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
)

292 
CMD_SEND_STATE
:

294 
USBH_MSC_CBWD©a
.
fõld
.
CBWTøns„rLígth
 = 
XFER_LEN_MODE_SENSE6
;

295 
USBH_MSC_CBWD©a
.
fõld
.
CBWFœgs
 = 
USB_EP_DIR_IN
;

296 
USBH_MSC_CBWD©a
.
fõld
.
CBWLígth
 = 
CBW_LENGTH
;

298 
USBH_MSC_BOTX„rP¨am
.
pRxTxBuff
 = 
USBH_D©aInBuf„r
;

299 
USBH_MSC_BOTX„rP¨am
.
MSCSèãCuºít
 = 
USBH_MSC_MODE_SENSE6
;

301 
ödex
 = 
CBW_CB_LENGTH
; index != 0; index--)

303 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[
ödex
] = 0x00;

306 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[0] = 
OPCODE_MODE_SENSE6
;

307 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[2] = 
MODE_SENSE_PAGE_CONTROL_FIELD
 | \

308 
MODE_SENSE_PAGE_CODE
;

310 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[4] = 
XFER_LEN_MODE_SENSE6
;

312 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_SEND_CBW
;

316 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_BOT_USB_TRANSFERS
;

317 
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 = 
USBH_MSC_BUSY
;

318 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_WAIT_STATUS
;

320 
°©us
 = 
USBH_MSC_BUSY
;

323 
CMD_WAIT_STATUS
:

324 if(
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_OK
)

329 i‡–
USBH_D©aInBuf„r
[2] & 
MASK_MODE_SENSE_WRITE_PROTECT
)

331 
USBH_MSC_P¨am
.
MSWrôePrŸe˘
 = 
DISK_WRITE_PROTECTED
;

335 
USBH_MSC_P¨am
.
MSWrôePrŸe˘
 = 0;

339 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

340 
°©us
 = 
USBH_MSC_OK
;

342 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_FAIL
 )

345 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

346 
°©us
 = 
USBH_MSC_FAIL
;

348 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_PHASE_ERROR
 )

351 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

352 
°©us
 = 
USBH_MSC_PHASE_ERROR
;

365  
°©us
;

366 
	}
}

375 
uöt8_t
 
	$USBH_MSC_Reque°Sí£
(
USB_OTG_CORE_HANDLE
 *
pdev
)

377 
USBH_MSC_Sètus_Ty≥Def
 
°©us
 = 
USBH_MSC_BUSY
;

379 
uöt8_t
 
ödex
;

382 if(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

384 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
)

386 
CMD_SEND_STATE
:

389 
USBH_MSC_CBWD©a
.
fõld
.
CBWTøns„rLígth
 = \

390 
ALLOCATION_LENGTH_REQUEST_SENSE
;

391 
USBH_MSC_CBWD©a
.
fõld
.
CBWFœgs
 = 
USB_EP_DIR_IN
;

392 
USBH_MSC_CBWD©a
.
fõld
.
CBWLígth
 = 
CBW_LENGTH
;

394 
USBH_MSC_BOTX„rP¨am
.
pRxTxBuff
 = 
USBH_D©aInBuf„r
;

395 
USBH_MSC_BOTX„rP¨am
.
MSCSèãBkp
 = USBH_MSC_BOTX„rP¨am.
MSCSèãCuºít
;

396 
USBH_MSC_BOTX„rP¨am
.
MSCSèãCuºít
 = 
USBH_MSC_REQUEST_SENSE
;

399 
ödex
 = 
CBW_CB_LENGTH
; index != 0; index--)

401 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[
ödex
] = 0x00;

404 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[0] = 
OPCODE_REQUEST_SENSE
;

405 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[1] = 
DESC_REQUEST_SENSE
;

406 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[4] = 
ALLOCATION_LENGTH_REQUEST_SENSE
;

408 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_SEND_CBW
;

411 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_BOT_USB_TRANSFERS
;

412 
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 = 
USBH_MSC_BUSY
;

413 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_WAIT_STATUS
;

415 
°©us
 = 
USBH_MSC_BUSY
;

419 
CMD_WAIT_STATUS
:

421 if(
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_OK
)

424 (((
uöt8_t
*)&
USBH_MSC_P¨am
.
MSSí£Key
 )[3]Ë
USBH_D©aInBuf„r
[0];

425 (((
uöt8_t
*)&
USBH_MSC_P¨am
.
MSSí£Key
 )[2]Ë
USBH_D©aInBuf„r
[1];

426 (((
uöt8_t
*)&
USBH_MSC_P¨am
.
MSSí£Key
 )[1]Ë
USBH_D©aInBuf„r
[2];

427 (((
uöt8_t
*)&
USBH_MSC_P¨am
.
MSSí£Key
 )[0]Ë
USBH_D©aInBuf„r
[3];

430 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

431 
°©us
 = 
USBH_MSC_OK
;

433 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_FAIL
 )

436 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

437 
°©us
 = 
USBH_MSC_FAIL
;

440 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_PHASE_ERROR
 )

443 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

444 
°©us
 = 
USBH_MSC_PHASE_ERROR
;

458  
°©us
;

459 
	}
}

471 
uöt8_t
 
	$USBH_MSC_Wrôe10
(
USB_OTG_CORE_HANDLE
 *
pdev
,

472 
uöt8_t
 *
d©aBuf„r
,

473 
uöt32_t
 
addªss
,

474 
uöt32_t
 
nbOfbyãs
)

476 
uöt8_t
 
ödex
;

477 
USBH_MSC_Sètus_Ty≥Def
 
°©us
 = 
USBH_MSC_BUSY
;

478 
uöt16_t
 
nbOfPages
;

480 if(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

482 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
)

484 
CMD_SEND_STATE
:

485 
USBH_MSC_CBWD©a
.
fõld
.
CBWTøns„rLígth
 = 
nbOfbyãs
;

486 
USBH_MSC_CBWD©a
.
fõld
.
CBWFœgs
 = 
USB_EP_DIR_OUT
;

487 
USBH_MSC_CBWD©a
.
fõld
.
CBWLígth
 = 
CBW_LENGTH
;

488 
USBH_MSC_BOTX„rP¨am
.
pRxTxBuff
 = 
d©aBuf„r
;

491 
ödex
 = 
CBW_CB_LENGTH
; index != 0; index--)

493 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[
ödex
] = 0x00;

496 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[0] = 
OPCODE_WRITE10
;

499 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[2] = (((
uöt8_t
*)&
addªss
)[3]) ;

500 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[3] = (((
uöt8_t
*)&
addªss
)[2]);

501 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[4] = (((
uöt8_t
*)&
addªss
)[1]);

502 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[5] = (((
uöt8_t
*)&
addªss
)[0]);

505 
nbOfPages
 = 
nbOfbyãs
/ 
USBH_MSC_PAGE_LENGTH
;

508 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[7] = (((
uöt8_t
 *)&
nbOfPages
)[1]) ;

509 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[8] = (((
uöt8_t
 *)&
nbOfPages
)[0]) ;

511 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_SEND_CBW
;

514 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_BOT_USB_TRANSFERS
;

515 
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 = 
USBH_MSC_BUSY
;

516 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_WAIT_STATUS
;

518 
°©us
 = 
USBH_MSC_BUSY
;

522 
CMD_WAIT_STATUS
:

523 if(
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_OK
)

526 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

527 
°©us
 = 
USBH_MSC_OK
;

529 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_FAIL
 )

532 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

535 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_PHASE_ERROR
 )

538 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

539 
°©us
 = 
USBH_MSC_PHASE_ERROR
;

547  
°©us
;

548 
	}
}

559 
uöt8_t
 
	$USBH_MSC_Ród10
(
USB_OTG_CORE_HANDLE
 *
pdev
,

560 
uöt8_t
 *
d©aBuf„r
,

561 
uöt32_t
 
addªss
,

562 
uöt32_t
 
nbOfbyãs
)

564 
uöt8_t
 
ödex
;

565 
USBH_MSC_Sètus_Ty≥Def
 
°©us
 = 
USBH_MSC_BUSY
;

566 
uöt16_t
 
nbOfPages
;

567 
°©us
 = 
USBH_MSC_BUSY
;

569 if(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

571 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
)

573 
CMD_SEND_STATE
:

575 
USBH_MSC_CBWD©a
.
fõld
.
CBWTøns„rLígth
 = 
nbOfbyãs
;

576 
USBH_MSC_CBWD©a
.
fõld
.
CBWFœgs
 = 
USB_EP_DIR_IN
;

577 
USBH_MSC_CBWD©a
.
fõld
.
CBWLígth
 = 
CBW_LENGTH
;

579 
USBH_MSC_BOTX„rP¨am
.
pRxTxBuff
 = 
d©aBuf„r
;

581 
ödex
 = 
CBW_CB_LENGTH
; index != 0; index--)

583 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[
ödex
] = 0x00;

586 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[0] = 
OPCODE_READ10
;

590 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[2] = (((
uöt8_t
*)&
addªss
)[3]);

591 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[3] = (((
uöt8_t
*)&
addªss
)[2]);

592 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[4] = (((
uöt8_t
*)&
addªss
)[1]);

593 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[5] = (((
uöt8_t
*)&
addªss
)[0]);

596 
nbOfPages
 = 
nbOfbyãs
/ 
USBH_MSC_PAGE_LENGTH
;

599 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[7] = (((
uöt8_t
 *)&
nbOfPages
)[1]) ;

600 
USBH_MSC_CBWD©a
.
fõld
.
CBWCB
[8] = (((
uöt8_t
 *)&
nbOfPages
)[0]) ;

603 
USBH_MSC_BOTX„rP¨am
.
BOTSèã
 = 
USBH_MSC_SEND_CBW
;

606 
USBH_MSC_BOTX„rP¨am
.
MSCSèã
 = 
USBH_MSC_BOT_USB_TRANSFERS
;

607 
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 = 
USBH_MSC_BUSY
;

608 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_WAIT_STATUS
;

610 
°©us
 = 
USBH_MSC_BUSY
;

614 
CMD_WAIT_STATUS
:

616 if((
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_OK
) && \

617 (
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
)))

620 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

621 
°©us
 = 
USBH_MSC_OK
;

623 i‡(–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_FAIL
 ) && \

624 (
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
)))

627 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

630 i‡–
USBH_MSC_BOTX„rP¨am
.
BOTX„rSètus
 =
USBH_MSC_PHASE_ERROR
 )

633 
USBH_MSC_BOTX„rP¨am
.
CmdSèãMachöe
 = 
CMD_SEND_STATE
;

634 
°©us
 = 
USBH_MSC_PHASE_ERROR
;

647  
°©us
;

648 
	}
}

	@libstm/STM32_USB_HOST_Library/Core/inc/usbh_conf_template.h

23 #i‚de‡
__USBH_CONF__H__


24 
	#__USBH_CONF__H__


	)

40 
	#USBH_MAX_NUM_ENDPOINTS
 2

	)

41 
	#USBH_MAX_NUM_INTERFACES
 2

	)

42 #ifde‡
USE_USB_OTG_FS


43 
	#USBH_MSC_MPS_SIZE
 0x40

	)

45 
	#USBH_MSC_MPS_SIZE
 0x200

	)

	@libstm/STM32_USB_HOST_Library/Core/inc/usbh_core.h

23 #i‚de‡
__USBH_CORE_H


24 
	#__USBH_CORE_H


	)

27 
	~"usb_hcd.h
"

28 
	~"usbh_def.h
"

29 
	~"usbh_c⁄f.h
"

49 
	#MSC_CLASS
 0x08

	)

50 
	#HID_CLASS
 0x03

	)

51 
	#MSC_PROTOCOL
 0x50

	)

52 
	#CBI_PROTOCOL
 0x01

	)

55 
	#USBH_MAX_ERROR_COUNT
 2

	)

56 
	#USBH_DEVICE_ADDRESS_DEFAULT
 0

	)

57 
	#USBH_DEVICE_ADDRESS
 1

	)

70 
	mUSBH_OK
 = 0,

71 
	mUSBH_BUSY
,

72 
	mUSBH_FAIL
,

73 
	mUSBH_NOT_SUPPORTED
,

74 
	mUSBH_UNRECOVERED_ERROR
,

75 
	mUSBH_ERROR_SPEED_UNKNOWN
,

76 
	mUSBH_APPLY_DEINIT


77 }
	tUSBH_Sètus
;

81 
	mHOST_IDLE
 =0,

82 
	mHOST_ISSUE_CORE_RESET
,

83 
	mHOST_DEV_ATTACHED
,

84 
	mHOST_DEV_DISCONNECTED
,

85 
	mHOST_ISSUE_RESET
,

86 
	mHOST_DETECT_DEVICE_SPEED
,

87 
	mHOST_ENUMERATION
,

88 
	mHOST_CLASS_REQUEST
,

89 
	mHOST_CLASS
,

90 
	mHOST_CTRL_XFER
,

91 
	mHOST_USR_INPUT
,

92 
	mHOST_SUSPENDED
,

93 
	mHOST_ERROR_STATE


94 }
	tHOST_Sèã
;

98 
	mENUM_IDLE
 = 0,

99 
	mENUM_GET_FULL_DEV_DESC
,

100 
	mENUM_SET_ADDR
,

101 
	mENUM_GET_CFG_DESC
,

102 
	mENUM_GET_FULL_CFG_DESC
,

103 
	mENUM_GET_MFC_STRING_DESC
,

104 
	mENUM_GET_PRODUCT_STRING_DESC
,

105 
	mENUM_GET_SERIALNUM_STRING_DESC
,

106 
	mENUM_SET_CONFIGURATION
,

107 
	mENUM_DEV_CONFIGURED


108 } 
	tENUM_Sèã
;

114 
	mCTRL_IDLE
 =0,

115 
	mCTRL_SETUP
,

116 
	mCTRL_SETUP_WAIT
,

117 
	mCTRL_DATA_IN
,

118 
	mCTRL_DATA_IN_WAIT
,

119 
	mCTRL_DATA_OUT
,

120 
	mCTRL_DATA_OUT_WAIT
,

121 
	mCTRL_STATUS_IN
,

122 
	mCTRL_STATUS_IN_WAIT
,

123 
	mCTRL_STATUS_OUT
,

124 
	mCTRL_STATUS_OUT_WAIT
,

125 
	mCTRL_ERROR


127 
	tCTRL_Sèã
;

130 
	mUSBH_USR_NO_RESP
 = 0,

131 
	mUSBH_USR_RESP_OK
 = 1,

133 
	tUSBH_USR_Sètus
;

137 
	mCMD_IDLE
 =0,

138 
	mCMD_SEND
,

139 
	mCMD_WAIT


140 } 
	tCMD_Sèã
;

144 
	s_Cål


146 
uöt8_t
 
	mhc_num_ö
;

147 
uöt8_t
 
	mhc_num_out
;

148 
uöt8_t
 
	mï0size
;

149 
uöt8_t
 *
	mbuff
;

150 
uöt16_t
 
	mÀngth
;

151 
uöt8_t
 
	mîr‹cou¡
;

152 
uöt16_t
 
	mtimî
;

153 
CTRL_STATUS
 
	m°©us
;

154 
USB_Sëup_Ty≥Def
 
	m£tup
;

155 
CTRL_Sèã
 
	m°©e
;

157 } 
	tUSBH_Cål_Ty≥Def
;

161 
	s_Devi˚Pr›


164 
uöt8_t
 
	maddªss
;

165 
uöt8_t
 
	m•ìd
;

166 
USBH_DevDesc_Ty≥Def
 
	mDev_Desc
;

167 
USBH_CfgDesc_Ty≥Def
 
	mCfg_Desc
;

168 
USBH_I¡îÁ˚Desc_Ty≥Def
 
	mItf_Desc
[
USBH_MAX_NUM_INTERFACES
];

169 
USBH_EpDesc_Ty≥Def
 
	mEp_Desc
[
USBH_MAX_NUM_INTERFACES
][
USBH_MAX_NUM_ENDPOINTS
];

170 
USBH_HIDDesc_Ty≥Def
 
	mHID_Desc
;

172 }
	tUSBH_Devi˚_Ty≥Def
;

174 
	s_USBH_Cœss_cb


176 
USBH_Sètus
 (*
Inô
)\

177 (
USB_OTG_CORE_HANDLE
 *
	mpdev
 , *
	mpho°
);

178 (*
	mDeInô
)\

179 (
USB_OTG_CORE_HANDLE
 *
	mpdev
 , *
	mpho°
);

180 
USBH_Sètus
 (*
Reque°s
)\

181 (
USB_OTG_CORE_HANDLE
 *
	mpdev
 , *
	mpho°
);

182 
USBH_Sètus
 (*
Machöe
)\

183 (
USB_OTG_CORE_HANDLE
 *
	mpdev
 , *
	mpho°
);

185 } 
	tUSBH_Cœss_cb_Ty≥Def
;

188 
	s_USBH_USR_PROP


190 (*
	mInô
)();

191 (*
	mDeInô
)();

192 (*
	mDevi˚Aâached
)();

193 (*
	mRe£tDevi˚
)();

194 (*
	mDevi˚Disc⁄√˘ed
)();

195 (*
	mOvîCuºítDëe˘ed
)();

196 (*
	mDevi˚S≥edDëe˘ed
)(
uöt8_t
 
	mDevi˚S≥ed
);

197 (*
	mDevi˚DescAvaûabÀ
)(*);

198 (*
	mDevi˚AddªssAssig√d
)();

199 (*
	mC⁄figuøti⁄DescAvaûabÀ
)(
	mUSBH_CfgDesc_Ty≥Def
 *,

200 
	mUSBH_I¡îÁ˚Desc_Ty≥Def
 *,

201 
	mUSBH_EpDesc_Ty≥Def
 *);

203 (*
	mM™uÁ˘uªrSåög
)(*);

204 (*
	mProdu˘Såög
)(*);

205 (*
	mSîülNumSåög
)(*);

206 (*
	mEnumî©i⁄D⁄e
)();

207 
USBH_USR_Sètus
 (*
U£rI≈ut
)();

208 (*
	mUSBH_USR_MSC_Aµliˇti⁄
) ();

209 (*
	mUSBH_USR_Devi˚NŸSuµ‹ãd
)();

210 (*
	mUƒecovîedEº‹
)();

213 
	tUSBH_U§_cb_Ty≥Def
;

215 
	s_Ho°_Ty≥Def


217 
HOST_Sèã
 
	mgSèã
;

218 
HOST_Sèã
 
	mgSèãBkp
;

219 
ENUM_Sèã
 
	mEnumSèã
;

220 
CMD_Sèã
 
	mReque°Sèã
;

221 
USBH_Cål_Ty≥Def
 
	mC⁄åﬁ
;

223 
USBH_Devi˚_Ty≥Def
 
	mdevi˚_¥›
;

225 
USBH_Cœss_cb_Ty≥Def
 *
	m˛ass_cb
;

226 
USBH_U§_cb_Ty≥Def
 *
	mu§_cb
;

229 } 
	tUSBH_HOST
, *
	tpUSBH_HOST
;

256 
USBH_Inô
(
USB_OTG_CORE_HANDLE
 *
pdev
,

257 
USB_OTG_CORE_ID_Ty≥Def
 
c‹eID
,

258 
USBH_HOST
 *
pho°
,

259 
USBH_Cœss_cb_Ty≥Def
 *
˛ass_cb
,

260 
USBH_U§_cb_Ty≥Def
 *
u§_cb
);

262 
USBH_Sètus
 
USBH_DeInô
(
USB_OTG_CORE_HANDLE
 *
pdev
,

263 
USBH_HOST
 *
pho°
);

264 
USBH_Pro˚ss
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

265 
USBH_HOST
 *
pho°
);

266 
USBH_Eº‹H™dÀ
(
USBH_HOST
 *
pho°
,

267 
USBH_Sètus
 
îrTy≥
);

	@libstm/STM32_USB_HOST_Library/Core/inc/usbh_def.h

34 #i‚de‡ 
USBH_DEF_H


35 
	#USBH_DEF_H


	)

37 #i‚de‡
USBH_NULL


38 
	#USBH_NULL
 ((*)0)

	)

41 #i‚de‡
FALSE


42 
	#FALSE
 0

	)

45 #i‚de‡
TRUE


46 
	#TRUE
 1

	)

50 
	#VÆBô
(
VAR
,
POS
Ë(VAR & (1 << POS))

	)

51 
	#SëBô
(
VAR
,
POS
Ë(VAR |(1 << POS))

	)

52 
	#CÃBô
(
VAR
,
POS
Ë(VAR &((1 << POS)^255))

	)

54 
	#LE16
(
addr
Ë(((
u16
)(*((
u8
 *)(addr))))\

55 + (((
u16
)(*(((
u8
 *)(
addr
)Ë+ 1))Ë<< 8))

	)

57 
	#USB_LEN_DESC_HDR
 0x02

	)

58 
	#USB_LEN_DEV_DESC
 0x12

	)

59 
	#USB_LEN_CFG_DESC
 0x09

	)

60 
	#USB_LEN_IF_DESC
 0x09

	)

61 
	#USB_LEN_EP_DESC
 0x07

	)

62 
	#USB_LEN_OTG_DESC
 0x03

	)

63 
	#USB_LEN_SETUP_PKT
 0x08

	)

66 
	#USB_REQ_DIR_MASK
 0x80

	)

67 
	#USB_H2D
 0x00

	)

68 
	#USB_D2H
 0x80

	)

71 
	#USB_REQ_TYPE_STANDARD
 0x00

	)

72 
	#USB_REQ_TYPE_CLASS
 0x20

	)

73 
	#USB_REQ_TYPE_VENDOR
 0x40

	)

74 
	#USB_REQ_TYPE_RESERVED
 0x60

	)

77 
	#USB_REQ_RECIPIENT_DEVICE
 0x00

	)

78 
	#USB_REQ_RECIPIENT_INTERFACE
 0x01

	)

79 
	#USB_REQ_RECIPIENT_ENDPOINT
 0x02

	)

80 
	#USB_REQ_RECIPIENT_OTHER
 0x03

	)

84 
	#USB_REQ_GET_STATUS
 0x00

	)

85 
	#USB_REQ_CLEAR_FEATURE
 0x01

	)

86 
	#USB_REQ_SET_FEATURE
 0x03

	)

87 
	#USB_REQ_SET_ADDRESS
 0x05

	)

88 
	#USB_REQ_GET_DESCRIPTOR
 0x06

	)

89 
	#USB_REQ_SET_DESCRIPTOR
 0x07

	)

90 
	#USB_REQ_GET_CONFIGURATION
 0x08

	)

91 
	#USB_REQ_SET_CONFIGURATION
 0x09

	)

92 
	#USB_REQ_GET_INTERFACE
 0x0A

	)

93 
	#USB_REQ_SET_INTERFACE
 0x0B

	)

94 
	#USB_REQ_SYNCH_FRAME
 0x0C

	)

97 
	#USB_DESC_TYPE_DEVICE
 1

	)

98 
	#USB_DESC_TYPE_CONFIGURATION
 2

	)

99 
	#USB_DESC_TYPE_STRING
 3

	)

100 
	#USB_DESC_TYPE_INTERFACE
 4

	)

101 
	#USB_DESC_TYPE_ENDPOINT
 5

	)

102 
	#USB_DESC_TYPE_DEVICE_QUALIFIER
 6

	)

103 
	#USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
 7

	)

104 
	#USB_DESC_TYPE_INTERFACE_POWER
 8

	)

105 
	#USB_DESC_TYPE_HID
 0x21

	)

106 
	#USB_DESC_TYPE_HID_REPORT
 0x22

	)

109 
	#USB_DEVICE_DESC_SIZE
 18

	)

110 
	#USB_CONFIGURATION_DESC_SIZE
 9

	)

111 
	#USB_HID_DESC_SIZE
 9

	)

112 
	#USB_INTERFACE_DESC_SIZE
 9

	)

113 
	#USB_ENDPOINT_DESC_SIZE
 7

	)

117 
	#USB_DESC_DEVICE
 ((
USB_DESC_TYPE_DEVICE
 << 8Ë& 0xFF00)

	)

118 
	#USB_DESC_CONFIGURATION
 ((
USB_DESC_TYPE_CONFIGURATION
 << 8Ë& 0xFF00)

	)

119 
	#USB_DESC_STRING
 ((
USB_DESC_TYPE_STRING
 << 8Ë& 0xFF00)

	)

120 
	#USB_DESC_INTERFACE
 ((
USB_DESC_TYPE_INTERFACE
 << 8Ë& 0xFF00)

	)

121 
	#USB_DESC_ENDPOINT
 ((
USB_DESC_TYPE_INTERFACE
 << 8Ë& 0xFF00)

	)

122 
	#USB_DESC_DEVICE_QUALIFIER
 ((
USB_DESC_TYPE_DEVICE_QUALIFIER
 << 8Ë& 0xFF00)

	)

123 
	#USB_DESC_OTHER_SPEED_CONFIGURATION
 ((
USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
 << 8Ë& 0xFF00)

	)

124 
	#USB_DESC_INTERFACE_POWER
 ((
USB_DESC_TYPE_INTERFACE_POWER
 << 8Ë& 0xFF00)

	)

125 
	#USB_DESC_HID_REPORT
 ((
USB_DESC_TYPE_HID_REPORT
 << 8Ë& 0xFF00)

	)

126 
	#USB_DESC_HID
 ((
USB_DESC_TYPE_HID
 << 8Ë& 0xFF00)

	)

129 
	#USB_EP_TYPE_CTRL
 0x00

	)

130 
	#USB_EP_TYPE_ISOC
 0x01

	)

131 
	#USB_EP_TYPE_BULK
 0x02

	)

132 
	#USB_EP_TYPE_INTR
 0x03

	)

134 
	#USB_EP_DIR_OUT
 0x00

	)

135 
	#USB_EP_DIR_IN
 0x80

	)

136 
	#USB_EP_DIR_MSK
 0x80

	)

139 
	#USB_MSC_CLASS
 0x08

	)

140 
	#USB_HID_CLASS
 0x03

	)

143 
	#HID_BOOT_CODE
 0x01

	)

144 
	#HID_KEYBRD_BOOT_CODE
 0x01

	)

145 
	#HID_MOUSE_BOOT_CODE
 0x02

	)

149 
	#DATA_STAGE_TIMEOUT
 5000

	)

150 
	#NODATA_STAGE_TIMEOUT
 50

	)

157 
	#USBH_CONFIGURATION_DESCRIPTOR_SIZE
 (
USB_CONFIGURATION_DESC_SIZE
 \

158 + 
USB_INTERFACE_DESC_SIZE
\

159 + (
USBH_MAX_NUM_ENDPOINTS
 * 
USB_ENDPOINT_DESC_SIZE
))

	)

162 
	#CONFIG_DESC_wTOTAL_LENGTH
 (
C⁄figuøti⁄Des¸ùt‹D©a
.
C⁄figDescfõld
.\

163 
C⁄figuøti⁄Des¸ùt‹
.
wTŸÆLígth
)

	)

169 
uöt16_t
 
	mw
;

170 
	sBW


172 
uöt8_t
 
	mmsb
;

173 
uöt8_t
 
	mlsb
;

175 
	mbw
;

177 
	tuöt16_t_uöt8_t
;

180 
	u_USB_Sëup


182 
uöt8_t
 
	md8
[8];

184 
	s_SëupPkt_Såuc


186 
uöt8_t
 
	mbmReque°Ty≥
;

187 
uöt8_t
 
	mbReque°
;

188 
uöt16_t_uöt8_t
 
	mwVÆue
;

189 
uöt16_t_uöt8_t
 
	mwIndex
;

190 
uöt16_t_uöt8_t
 
	mwLígth
;

191 } 
	mb
;

193 
	tUSB_Sëup_Ty≥Def
;

195 
	s_DescHódî


197 
uöt8_t
 
	mbLígth
;

198 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

200 
	tUSBH_DescHódî_t
;

202 
	s_Devi˚Des¸ùt‹


204 
uöt8_t
 
	mbLígth
;

205 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

206 
uöt16_t
 
	mbcdUSB
;

207 
uöt8_t
 
	mbDevi˚Cœss
;

208 
uöt8_t
 
	mbDevi˚SubCœss
;

209 
uöt8_t
 
	mbDevi˚PrŸocﬁ
;

213 
uöt8_t
 
	mbMaxPackëSize
;

214 
uöt16_t
 
	midVíd‹
;

215 
uöt16_t
 
	midProdu˘
;

216 
uöt16_t
 
	mbcdDevi˚
;

217 
uöt8_t
 
	miM™uÁ˘uªr
;

218 
uöt8_t
 
	miProdu˘
;

219 
uöt8_t
 
	miSîülNumbî
;

220 
uöt8_t
 
	mbNumC⁄figuøti⁄s
;

222 
	tUSBH_DevDesc_Ty≥Def
;

225 
	s_C⁄figuøti⁄Des¸ùt‹


227 
uöt8_t
 
	mbLígth
;

228 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

229 
uöt16_t
 
	mwTŸÆLígth
;

230 
uöt8_t
 
	mbNumI¡îÁ˚s
;

231 
uöt8_t
 
	mbC⁄figuøti⁄VÆue
;

232 
uöt8_t
 
	miC⁄figuøti⁄
;

233 
uöt8_t
 
	mbmAâribuãs
;

234 
uöt8_t
 
	mbMaxPowî
;

236 
	tUSBH_CfgDesc_Ty≥Def
;

239 
	s_HIDDes¸ùt‹


241 
uöt8_t
 
	mbLígth
;

242 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

243 
uöt16_t
 
	mbcdHID
;

244 
uöt8_t
 
	mbCou¡ryCode
;

245 
uöt8_t
 
	mbNumDes¸ùt‹s
;

246 
uöt8_t
 
	mbRï‹tDes¸ùt‹Ty≥
;

247 
uöt16_t
 
	mwIãmLígth
;

249 
	tUSBH_HIDDesc_Ty≥Def
;

252 
	s_I¡îÁ˚Des¸ùt‹


254 
uöt8_t
 
	mbLígth
;

255 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

256 
uöt8_t
 
	mbI¡îÁ˚Numbî
;

257 
uöt8_t
 
	mbA…î«ãSëtög
;

258 
uöt8_t
 
	mbNumEndpoöts
;

259 
uöt8_t
 
	mbI¡îÁ˚Cœss
;

260 
uöt8_t
 
	mbI¡îÁ˚SubCœss
;

261 
uöt8_t
 
	mbI¡îÁ˚PrŸocﬁ
;

262 
uöt8_t
 
	miI¡îÁ˚
;

265 
	tUSBH_I¡îÁ˚Desc_Ty≥Def
;

268 
	s_EndpoötDes¸ùt‹


270 
uöt8_t
 
	mbLígth
;

271 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

272 
uöt8_t
 
	mbEndpoötAddªss
;

273 
uöt8_t
 
	mbmAâribuãs
;

274 
uöt16_t
 
	mwMaxPackëSize
;

275 
uöt8_t
 
	mbI¡îvÆ
;

277 
	tUSBH_EpDesc_Ty≥Def
;

	@libstm/STM32_USB_HOST_Library/Core/inc/usbh_hcs.h

23 #i‚de‡
__USBH_HCS_H


24 
	#__USBH_HCS_H


	)

27 
	~"usbh_c‹e.h
"

47 
	#HC_MAX
 8

	)

49 
	#HC_OK
 0x0000

	)

50 
	#HC_USED
 0x8000

	)

51 
	#HC_ERROR
 0xFFFF

	)

52 
	#HC_USED_MASK
 0x7FFF

	)

83 
uöt8_t
 
USBH_AŒoc_Ch™√l
(
USB_OTG_CORE_HANDLE
 *
pdev
, uöt8_à
ï_addr
);

85 
uöt8_t
 
USBH_Fªe_Ch™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
, uöt8_à
idx
);

87 
uöt8_t
 
USBH_DeAŒoˇã_AŒCh™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

89 
uöt8_t
 
USBH_O≥n_Ch™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

90 
uöt8_t
 
ch_num
,

91 
uöt8_t
 
dev_addªss
,

92 
uöt8_t
 
•ìd
,

93 
uöt8_t
 
ï_ty≥
,

94 
uöt16_t
 
mps
);

96 
uöt8_t
 
USBH_Modify_Ch™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

97 
uöt8_t
 
hc_num
,

98 
uöt8_t
 
dev_addªss
,

99 
uöt8_t
 
•ìd
,

100 
uöt8_t
 
ï_ty≥
,

101 
uöt16_t
 
mps
);

	@libstm/STM32_USB_HOST_Library/Core/inc/usbh_ioreq.h

23 #i‚de‡
__USBH_IOREQ_H


24 
	#__USBH_IOREQ_H


	)

27 
	~"usb_c⁄f.h
"

28 
	~"usbh_c‹e.h
"

29 
	~"usbh_def.h
"

49 
	#USBH_SETUP_PKT_SIZE
 8

	)

50 
	#USBH_EP0_EP_NUM
 0

	)

51 
	#USBH_MAX_PACKET_SIZE
 0x40

	)

82 
USBH_Sètus
 
USBH_CéSídSëup
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

83 
uöt8_t
 *
buff
,

84 
uöt8_t
 
hc_num
);

86 
USBH_Sètus
 
USBH_CéSídD©a
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

87 
uöt8_t
 *
buff
,

88 
uöt8_t
 
Àngth
,

89 
uöt8_t
 
hc_num
);

91 
USBH_Sètus
 
USBH_CéRe˚iveD©a
–
USB_OTG_CORE_HANDLE
 *
pdev
,

92 
uöt8_t
 *
buff
,

93 
uöt8_t
 
Àngth
,

94 
uöt8_t
 
hc_num
);

96 
USBH_Sètus
 
USBH_BulkRe˚iveD©a
–
USB_OTG_CORE_HANDLE
 *
pdev
,

97 
uöt8_t
 *
buff
,

98 
uöt16_t
 
Àngth
,

99 
uöt8_t
 
hc_num
);

101 
USBH_Sètus
 
USBH_BulkSídD©a
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

102 
uöt8_t
 *
buff
,

103 
uöt16_t
 
Àngth
,

104 
uöt8_t
 
hc_num
);

106 
USBH_Sètus
 
USBH_I¡îru±Re˚iveD©a
–
USB_OTG_CORE_HANDLE
 *
pdev
,

107 
uöt8_t
 *
buff
,

108 
uöt8_t
 
Àngth
,

109 
uöt8_t
 
hc_num
);

111 
USBH_Sètus
 
USBH_I¡îru±SídD©a
–
USB_OTG_CORE_HANDLE
 *
pdev
,

112 
uöt8_t
 *
buff
,

113 
uöt8_t
 
Àngth
,

114 
uöt8_t
 
hc_num
);

116 
USBH_Sètus
 
USBH_CéReq
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

117 
USBH_HOST
 *
pho°
,

118 
uöt8_t
 *
buff
,

119 
uöt16_t
 
Àngth
);

	@libstm/STM32_USB_HOST_Library/Core/inc/usbh_stdreq.h

23 #i‚de‡
__USBH_STDREQ_H


24 
	#__USBH_STDREQ_H


	)

28 
	~"usb_c⁄f.h
"

29 
	~"usb_hcd.h
"

30 
	~"usbh_c‹e.h
"

31 
	~"usbh_def.h
"

51 
	#FEATURE_SELECTOR_ENDPOINT
 0X00

	)

52 
	#FEATURE_SELECTOR_DEVICE
 0X01

	)

55 
	#INTERFACE_DESC_TYPE
 0x04

	)

56 
	#ENDPOINT_DESC_TYPE
 0x05

	)

57 
	#INTERFACE_DESC_SIZE
 0x09

	)

60 
	#USBH_HID_CLASS
 0x03

	)

92 
USBH_Sètus
 
USBH_GëDes¸ùt‹
(
USB_OTG_CORE_HANDLE
 *
pdev
,

93 
USBH_HOST
 *
pho°
,

94 
uöt8_t
 
ªq_ty≥
,

95 
uöt16_t
 
vÆue_idx
,

96 
uöt8_t
* 
buff
,

97 
uöt16_t
 
Àngth
 );

99 
USBH_Sètus
 
USBH_Gë_DevDesc
(
USB_OTG_CORE_HANDLE
 *
pdev
,

100 
USBH_HOST
 *
pho°
,

101 
uöt8_t
 
Àngth
);

103 
USBH_Sètus
 
USBH_Gë_SåögDesc
(
USB_OTG_CORE_HANDLE
 *
pdev
,

104 
USBH_HOST
 *
pho°
,

105 
uöt8_t
 
°rög_ödex
,

106 
uöt8_t
 *
buff
,

107 
uöt16_t
 
Àngth
);

109 
USBH_Sètus
 
USBH_SëCfg
(
USB_OTG_CORE_HANDLE
 *
pdev
,

110 
USBH_HOST
 *
pho°
,

111 
uöt16_t
 
c⁄figuøti⁄_vÆue
);

113 
USBH_Sètus
 
USBH_Gë_CfgDesc
(
USB_OTG_CORE_HANDLE
 *
pdev
,

114 
USBH_HOST
 *
pho°
,

115 
uöt16_t
 
Àngth
);

117 
USBH_Sètus
 
USBH_SëAddªss
(
USB_OTG_CORE_HANDLE
 *
pdev
,

118 
USBH_HOST
 *
pho°
,

119 
uöt8_t
 
Devi˚Addªss
);

121 
USBH_Sètus
 
USBH_CÃFótuª
(
USB_OTG_CORE_HANDLE
 *
pdev
,

122 
USBH_HOST
 *
pho°
,

123 
uöt8_t
 
ï_num
, uöt8_à
hc_num
);

125 
USBH_Sètus
 
USBH_Issue_CÃFótuª
(
USB_OTG_CORE_HANDLE
 *
pdev
,

126 
USBH_HOST
 *
pho°
,

127 
uöt8_t
 
ï_num
);

	@libstm/STM32_USB_HOST_Library/Core/src/usbh_core.c

24 
	~"usbh_i‹eq.h
"

25 
	~"usb_b•.h
"

26 
	~"usbh_hcs.h
"

27 
	~"usbh_°dªq.h
"

28 
	~"usbh_c‹e.h
"

48 
USBH_Disc⁄√˘
 (*
pdev
);

49 
USBH_C⁄√˘
 (*
pdev
);

51 
USB_OTG_hP‹t_Ty≥Def
 
	gUSBH_Devi˚C⁄nSètus_cb
 =

53 
USBH_Disc⁄√˘
,

54 
USBH_C⁄√˘
,

92 
USBH_Sètus
 
USBH_H™dÀEnum
(
USB_OTG_CORE_HANDLE
 *
pdev
, 
USBH_HOST
 *
pho°
);

93 
USBH_Sètus
 
USBH_H™dÀC⁄åﬁ
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
USBH_HOST
 *
pho°
);

111 
	$USBH_C⁄√˘
 (*
pdev
)

113 
USB_OTG_CORE_HANDLE
 *
µdev
 = 
pdev
;

114 
µdev
->
ho°
.
p‹t_cb
->
C⁄nSètus
 = 1;

115 
µdev
->
ho°
.
p‹t_cb
->
C⁄nH™dÀd
 = 0;

116 
	}
}

125 
	$USBH_Disc⁄√˘
 (*
pdev
)

128 
USB_OTG_CORE_HANDLE
 *
µdev
 = 
pdev
;

131 
µdev
->
ho°
.
p‹t_cb
->
Disc⁄nSètus
 = 1;

132 
µdev
->
ho°
.
p‹t_cb
->
Disc⁄nH™dÀd
 = 0;

133 
	}
}

142 
	$USBH_Inô
(
USB_OTG_CORE_HANDLE
 *
pdev
,

143 
USB_OTG_CORE_ID_Ty≥Def
 
c‹eID
,

144 
USBH_HOST
 *
pho°
,

145 
USBH_Cœss_cb_Ty≥Def
 *
˛ass_cb
,

146 
USBH_U§_cb_Ty≥Def
 *
u§_cb
)

150 
	`USB_OTG_BSP_Inô
(
pdev
);

153 
	`USB_OTG_BSP_C⁄figVBUS
(0);

157 
	`USBH_DeInô
(
pdev
, 
pho°
);

160 
pho°
->
˛ass_cb
 = class_cb;

161 
pho°
->
u§_cb
 = usr_cb;

162 
pdev
->
ho°
.
p‹t_cb
 = &
USBH_Devi˚C⁄nSètus_cb
;

164 
pdev
->
ho°
.
p‹t_cb
->
C⁄nSètus
 = 0;

165 
pdev
->
ho°
.
p‹t_cb
->
Disc⁄nSètus
 = 0;

169 
	`HCD_Inô
(
pdev
 , 
c‹eID
);

172 
pho°
->
u§_cb
->
	`Inô
();

175 
	`USB_OTG_BSP_E«bÀI¡îru±
(
pdev
);

176 
	}
}

184 
USBH_Sètus
 
	$USBH_DeInô
(
USB_OTG_CORE_HANDLE
 *
pdev
, 
USBH_HOST
 *
pho°
)

188 
pho°
->
gSèã
 = 
HOST_IDLE
;

189 
pho°
->
gSèãBkp
 = 
HOST_IDLE
;

190 
pho°
->
EnumSèã
 = 
ENUM_IDLE
;

191 
pho°
->
Reque°Sèã
 = 
CMD_SEND
;

193 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_SETUP
;

194 
pho°
->
C⁄åﬁ
.
ï0size
 = 
USB_OTG_MAX_EP0_SIZE
;

196 
pho°
->
devi˚_¥›
.
addªss
 = 
USBH_DEVICE_ADDRESS_DEFAULT
;

197 
pho°
->
devi˚_¥›
.
•ìd
 = 
HPRT0_PRTSPD_FULL_SPEED
;

199 
	`USBH_Fªe_Ch™√l
 (
pdev
, 
pho°
->
C⁄åﬁ
.
hc_num_ö
);

200 
	`USBH_Fªe_Ch™√l
 (
pdev
, 
pho°
->
C⁄åﬁ
.
hc_num_out
);

201  
USBH_OK
;

202 
	}
}

210 
	$USBH_Pro˚ss
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USBH_HOST
 *
pho°
)

212 vﬁ©ûê
USBH_Sètus
 
°©us
 = 
USBH_FAIL
;

214 
pho°
->
gSèã
)

216 
HOST_ISSUE_CORE_RESET
 :

218 i‡–
	`HCD_Re£tP‹t
(
pdev
) == 0)

220 
pho°
->
gSèã
 = 
HOST_IDLE
;

224 
HOST_IDLE
 :

226 i‡(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
))

229 
	`USBH_DeAŒoˇã_AŒCh™√l
(
pdev
);

230 
pho°
->
gSèã
 = 
HOST_DEV_ATTACHED
;

234 
HOST_DEV_ATTACHED
 :

236 
pho°
->
u§_cb
->
	`Devi˚Aâached
();

237 
pdev
->
ho°
.
p‹t_cb
->
Disc⁄nSètus
 = 0;

238 
pdev
->
ho°
.
p‹t_cb
->
C⁄nH™dÀd
 = 1;

240 
pho°
->
C⁄åﬁ
.
hc_num_out
 = 
	`USBH_AŒoc_Ch™√l
(
pdev
, 0x00);

241 
pho°
->
C⁄åﬁ
.
hc_num_ö
 = 
	`USBH_AŒoc_Ch™√l
(
pdev
, 0x80);

244 i‡–
	`HCD_Re£tP‹t
(
pdev
) == 0)

246 
pho°
->
u§_cb
->
	`Re£tDevi˚
();

251 
pho°
->
devi˚_¥›
.
•ìd
 = 
	`HCD_GëCuºítS≥ed
(
pdev
);

253 
pho°
->
gSèã
 = 
HOST_ENUMERATION
;

254 
pho°
->
u§_cb
->
	`Devi˚S≥edDëe˘ed
’ho°->
devi˚_¥›
.
•ìd
);

257 
	`USBH_O≥n_Ch™√l
 (
pdev
,

258 
pho°
->
C⁄åﬁ
.
hc_num_ö
,

259 
pho°
->
devi˚_¥›
.
addªss
,

260 
pho°
->
devi˚_¥›
.
•ìd
,

261 
EP_TYPE_CTRL
,

262 
pho°
->
C⁄åﬁ
.
ï0size
);

265 
	`USBH_O≥n_Ch™√l
 (
pdev
,

266 
pho°
->
C⁄åﬁ
.
hc_num_out
,

267 
pho°
->
devi˚_¥›
.
addªss
,

268 
pho°
->
devi˚_¥›
.
•ìd
,

269 
EP_TYPE_CTRL
,

270 
pho°
->
C⁄åﬁ
.
ï0size
);

274 
HOST_ENUMERATION
:

276 i‡–
	`USBH_H™dÀEnum
(
pdev
 , 
pho°
Ë=
USBH_OK
)

281 
pho°
->
u§_cb
->
	`Enumî©i⁄D⁄e
();

283 
pho°
->
gSèã
 = 
HOST_USR_INPUT
;

287 
HOST_USR_INPUT
:

289 i‡–
pho°
->
u§_cb
->
	`U£rI≈ut
(Ë=
USBH_USR_RESP_OK
)

291 if((
pho°
->
˛ass_cb
->
	`Inô
(
pdev
,Öhost))\

292 =
USBH_OK
)

294 
pho°
->
gSèã
 = 
HOST_CLASS_REQUEST
;

299 
HOST_CLASS_REQUEST
:

301 
°©us
 = 
pho°
->
˛ass_cb
->
	`Reque°s
(
pdev
,Öhost);

303 if(
°©us
 =
USBH_OK
)

305 
pho°
->
gSèã
 = 
HOST_CLASS
;

310 
	`USBH_Eº‹H™dÀ
(
pho°
, 
°©us
);

315 
HOST_CLASS
:

317 
°©us
 = 
pho°
->
˛ass_cb
->
	`Machöe
(
pdev
,Öhost);

318 
	`USBH_Eº‹H™dÀ
(
pho°
, 
°©us
);

321 
HOST_CTRL_XFER
:

323 
	`USBH_H™dÀC⁄åﬁ
(
pdev
, 
pho°
);

326 
HOST_SUSPENDED
:

329 
HOST_ERROR_STATE
:

331 
	`USBH_DeInô
(
pdev
, 
pho°
);

332 
pho°
->
u§_cb
->
	`DeInô
();

333 
pho°
->
˛ass_cb
->
	`DeInô
(
pdev
, &pho°->
devi˚_¥›
);

341 i‡(!(
	`HCD_IsDevi˚C⁄√˘ed
(
pdev
)) &&

342 (
pdev
->
ho°
.
p‹t_cb
->
Disc⁄nH™dÀd
 == 0))

345 
pho°
->
u§_cb
->
	`Devi˚Disc⁄√˘ed
();

347 
pdev
->
ho°
.
p‹t_cb
->
Disc⁄nH™dÀd
 = 1;

350 
	`USBH_DeInô
(
pdev
, 
pho°
);

351 
pho°
->
u§_cb
->
	`DeInô
();

352 
pho°
->
˛ass_cb
->
	`DeInô
(
pdev
, &pho°->
devi˚_¥›
);

354 
	}
}

363 
	$USBH_Eº‹H™dÀ
(
USBH_HOST
 *
pho°
, 
USBH_Sètus
 
îrTy≥
)

366 i‡–(
îrTy≥
 =
USBH_ERROR_SPEED_UNKNOWN
) ||

367 (
îrTy≥
 =
USBH_UNRECOVERED_ERROR
) )

369 
pho°
->
u§_cb
->
	`UƒecovîedEº‹
();

370 
pho°
->
gSèã
 = 
HOST_ERROR_STATE
;

373 if(
îrTy≥
 =
USBH_APPLY_DEINIT
)

375 
pho°
->
gSèã
 = 
HOST_ERROR_STATE
;

377 
pho°
->
u§_cb
->
	`Inô
();

379 
	}
}

388 
USBH_Sètus
 
	$USBH_H™dÀEnum
(
USB_OTG_CORE_HANDLE
 *
pdev
, 
USBH_HOST
 *
pho°
)

390 
USBH_Sètus
 
Sètus
 = 
USBH_BUSY
;

391 
uöt8_t
 
Loˇl_Buf„r
[64];

393 
pho°
->
EnumSèã
)

395 
ENUM_IDLE
:

397 i‡–
	`USBH_Gë_DevDesc
(
pdev
 , 
pho°
, 8Ë=
USBH_OK
)

399 
pho°
->
C⁄åﬁ
.
ï0size
 =Öho°->
devi˚_¥›
.
Dev_Desc
.
bMaxPackëSize
;

402 
	`HCD_Re£tP‹t
(
pdev
);

403 
pho°
->
EnumSèã
 = 
ENUM_GET_FULL_DEV_DESC
;

406 
	`USBH_Modify_Ch™√l
 (
pdev
,

407 
pho°
->
C⁄åﬁ
.
hc_num_out
,

411 
pho°
->
C⁄åﬁ
.
ï0size
);

413 
	`USBH_Modify_Ch™√l
 (
pdev
,

414 
pho°
->
C⁄åﬁ
.
hc_num_ö
,

418 
pho°
->
C⁄åﬁ
.
ï0size
);

422 
ENUM_GET_FULL_DEV_DESC
:

424 i‡–
	`USBH_Gë_DevDesc
(
pdev
, 
pho°
, 
USB_DEVICE_DESC_SIZE
)\

425 =
USBH_OK
)

428 
pho°
->
u§_cb
->
	`Devi˚DescAvaûabÀ
(&pho°->
devi˚_¥›
.
Dev_Desc
);

429 
pho°
->
EnumSèã
 = 
ENUM_SET_ADDR
;

433 
ENUM_SET_ADDR
:

435 i‡–
	`USBH_SëAddªss
(
pdev
, 
pho°
, 
USBH_DEVICE_ADDRESS
Ë=
USBH_OK
)

437 
pho°
->
devi˚_¥›
.
addªss
 = 
USBH_DEVICE_ADDRESS
;

440 
pho°
->
u§_cb
->
	`Devi˚AddªssAssig√d
();

441 
pho°
->
EnumSèã
 = 
ENUM_GET_CFG_DESC
;

444 
	`USBH_Modify_Ch™√l
 (
pdev
,

445 
pho°
->
C⁄åﬁ
.
hc_num_ö
,

446 
pho°
->
devi˚_¥›
.
addªss
,

451 
	`USBH_Modify_Ch™√l
 (
pdev
,

452 
pho°
->
C⁄åﬁ
.
hc_num_out
,

453 
pho°
->
devi˚_¥›
.
addªss
,

460 
ENUM_GET_CFG_DESC
:

462 i‡–
	`USBH_Gë_CfgDesc
(
pdev
,

463 
pho°
,

464 
USB_CONFIGURATION_DESC_SIZE
Ë=
USBH_OK
)

466 
pho°
->
EnumSèã
 = 
ENUM_GET_FULL_CFG_DESC
;

470 
ENUM_GET_FULL_CFG_DESC
:

472 i‡(
	`USBH_Gë_CfgDesc
(
pdev
,

473 
pho°
,

474 
pho°
->
devi˚_¥›
.
Cfg_Desc
.
wTŸÆLígth
Ë=
USBH_OK
)

477 
pho°
->
u§_cb
->
	`C⁄figuøti⁄DescAvaûabÀ
(&pho°->
devi˚_¥›
.
Cfg_Desc
,

478 
pho°
->
devi˚_¥›
.
Itf_Desc
,

479 
pho°
->
devi˚_¥›
.
Ep_Desc
[0]);

481 
pho°
->
EnumSèã
 = 
ENUM_GET_MFC_STRING_DESC
;

485 
ENUM_GET_MFC_STRING_DESC
:

486 i‡(
pho°
->
devi˚_¥›
.
Dev_Desc
.
iM™uÁ˘uªr
 != 0)

489 i‡–
	`USBH_Gë_SåögDesc
(
pdev
,

490 
pho°
,

491 
pho°
->
devi˚_¥›
.
Dev_Desc
.
iM™uÁ˘uªr
,

492 
Loˇl_Buf„r
 ,

493 0xffË=
USBH_OK
)

496 
pho°
->
u§_cb
->
	`M™uÁ˘uªrSåög
(
Loˇl_Buf„r
);

497 
pho°
->
EnumSèã
 = 
ENUM_GET_PRODUCT_STRING_DESC
;

502 
pho°
->
u§_cb
->
	`M™uÁ˘uªrSåög
("N/A");

503 
pho°
->
EnumSèã
 = 
ENUM_GET_PRODUCT_STRING_DESC
;

507 
ENUM_GET_PRODUCT_STRING_DESC
:

508 i‡(
pho°
->
devi˚_¥›
.
Dev_Desc
.
iProdu˘
 != 0)

510 i‡–
	`USBH_Gë_SåögDesc
(
pdev
,

511 
pho°
,

512 
pho°
->
devi˚_¥›
.
Dev_Desc
.
iProdu˘
,

513 
Loˇl_Buf„r
,

514 0xffË=
USBH_OK
)

517 
pho°
->
u§_cb
->
	`Produ˘Såög
(
Loˇl_Buf„r
);

518 
pho°
->
EnumSèã
 = 
ENUM_GET_SERIALNUM_STRING_DESC
;

523 
pho°
->
u§_cb
->
	`Produ˘Såög
("N/A");

524 
pho°
->
EnumSèã
 = 
ENUM_GET_SERIALNUM_STRING_DESC
;

528 
ENUM_GET_SERIALNUM_STRING_DESC
:

529 i‡(
pho°
->
devi˚_¥›
.
Dev_Desc
.
iSîülNumbî
 != 0)

531 i‡–
	`USBH_Gë_SåögDesc
(
pdev
,

532 
pho°
,

533 
pho°
->
devi˚_¥›
.
Dev_Desc
.
iSîülNumbî
,

534 
Loˇl_Buf„r
,

535 0xffË=
USBH_OK
)

538 
pho°
->
u§_cb
->
	`SîülNumSåög
(
Loˇl_Buf„r
);

539 
pho°
->
EnumSèã
 = 
ENUM_SET_CONFIGURATION
;

544 
pho°
->
u§_cb
->
	`SîülNumSåög
("N/A");

545 
pho°
->
EnumSèã
 = 
ENUM_SET_CONFIGURATION
;

549 
ENUM_SET_CONFIGURATION
:

551 i‡(
	`USBH_SëCfg
(
pdev
,

552 
pho°
,

553 
pho°
->
devi˚_¥›
.
Cfg_Desc
.
bC⁄figuøti⁄VÆue
Ë=
USBH_OK
)

555 
pho°
->
EnumSèã
 = 
ENUM_DEV_CONFIGURED
;

560 
ENUM_DEV_CONFIGURED
:

562 
Sètus
 = 
USBH_OK
;

568  
Sètus
;

569 
	}
}

578 
USBH_Sètus
 
	$USBH_H™dÀC⁄åﬁ
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
USBH_HOST
 *
pho°
)

580 
uöt8_t
 
dúe˘i⁄
;

581 
uöt16_t
 
timeout
 = 0;

582 
USBH_Sètus
 
°©us
 = 
USBH_OK
;

583 
URB_STATE
 
URB_Sètus
 = 
URB_IDLE
;

585 
pho°
->
C⁄åﬁ
.
°©us
 = 
CTRL_START
;

588 
pho°
->
C⁄åﬁ
.
°©e
)

590 
CTRL_SETUP
:

592 
	`USBH_CéSídSëup
 (
pdev
,

593 
pho°
->
C⁄åﬁ
.
£tup
.
d8
 ,

594 
pho°
->
C⁄åﬁ
.
hc_num_out
);

595 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_SETUP_WAIT
;

598 
CTRL_SETUP_WAIT
:

600 
URB_Sètus
 = 
	`HCD_GëURB_Sèã
(
pdev
 , 
pho°
->
C⁄åﬁ
.
hc_num_out
);

602 if(
URB_Sètus
 =
URB_DONE
)

604 
dúe˘i⁄
 = (
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bmReque°Ty≥
 & 
USB_REQ_DIR_MASK
);

607 i‡(
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wLígth
.
w
 != 0 )

609 
timeout
 = 
DATA_STAGE_TIMEOUT
;

610 i‡(
dúe˘i⁄
 =
USB_D2H
)

613 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_DATA_IN
;

618 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_DATA_OUT
;

624 
timeout
 = 
NODATA_STAGE_TIMEOUT
;

627 i‡(
dúe˘i⁄
 =
USB_D2H
)

630 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_STATUS_OUT
;

635 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_STATUS_IN
;

639 
pho°
->
C⁄åﬁ
.
timî
 = 
	`HCD_GëCuºítFøme
(
pdev
);

641 if(
URB_Sètus
 =
URB_ERROR
)

643 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_ERROR
;

644 
pho°
->
C⁄åﬁ
.
°©us
 = 
CTRL_XACTERR
;

648 
CTRL_DATA_IN
:

650 
	`USBH_CéRe˚iveD©a
(
pdev
,

651 
pho°
->
C⁄åﬁ
.
buff
,

652 
pho°
->
C⁄åﬁ
.
Àngth
,

653 
pho°
->
C⁄åﬁ
.
hc_num_ö
);

655 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_DATA_IN_WAIT
;

658 
CTRL_DATA_IN_WAIT
:

660 
URB_Sètus
 = 
	`HCD_GëURB_Sèã
(
pdev
 , 
pho°
->
C⁄åﬁ
.
hc_num_ö
);

663 i‡(
URB_Sètus
 =
URB_DONE
)

665 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_STATUS_OUT
;

669 i‡(
URB_Sètus
 =
URB_STALL
)

672 
pho°
->
gSèã
 =Öho°->
gSèãBkp
;

674 i‡(
URB_Sètus
 =
URB_ERROR
)

677 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_ERROR
;

679 i‡((
	`HCD_GëCuºítFøme
(
pdev
)- 
pho°
->
C⁄åﬁ
.
timî
Ë> 
timeout
)

682 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_ERROR
;

686 
CTRL_DATA_OUT
:

689 
pdev
->
ho°
.
hc
[
pho°
->
C⁄åﬁ
.
hc_num_out
].
toggÀ_out
 ^= 1;

691 
	`USBH_CéSídD©a
 (
pdev
,

692 
pho°
->
C⁄åﬁ
.
buff
,

693 
pho°
->
C⁄åﬁ
.
Àngth
 ,

694 
pho°
->
C⁄åﬁ
.
hc_num_out
);

696 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_DATA_OUT_WAIT
;

699 
CTRL_DATA_OUT_WAIT
:

701 
URB_Sètus
 = 
	`HCD_GëURB_Sèã
(
pdev
 , 
pho°
->
C⁄åﬁ
.
hc_num_out
);

702 i‡(
URB_Sètus
 =
URB_DONE
)

704 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_STATUS_IN
;

708 i‡(
URB_Sètus
 =
URB_STALL
)

711 
pho°
->
gSèã
 =Öho°->
gSèãBkp
;

713 i‡(
URB_Sètus
 =
URB_NOTREADY
)

716 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_DATA_OUT
;

718 i‡(
URB_Sètus
 =
URB_ERROR
)

721 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_ERROR
;

726 
CTRL_STATUS_IN
:

728 
	`USBH_CéRe˚iveD©a
 (
pdev
,

731 
pho°
->
C⁄åﬁ
.
hc_num_ö
);

733 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_STATUS_IN_WAIT
;

737 
CTRL_STATUS_IN_WAIT
:

739 
URB_Sètus
 = 
	`HCD_GëURB_Sèã
(
pdev
 , 
pho°
->
C⁄åﬁ
.
hc_num_ö
);

741 i‡–
URB_Sètus
 =
URB_DONE
)

743 
pho°
->
gSèã
 =Öho°->
gSèãBkp
;

746 i‡(
URB_Sètus
 =
URB_ERROR
)

748 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_ERROR
;

751 if((
	`HCD_GëCuºítFøme
(
pdev
)\

752 - 
pho°
->
C⁄åﬁ
.
timî
Ë> 
timeout
)

754 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_ERROR
;

756 if(
URB_Sètus
 =
URB_STALL
)

759 
pho°
->
gSèã
 =Öho°->
gSèãBkp
;

760 
pho°
->
C⁄åﬁ
.
°©us
 = 
CTRL_STALL
;

761 
°©us
 = 
USBH_NOT_SUPPORTED
;

765 
CTRL_STATUS_OUT
:

766 
pdev
->
ho°
.
hc
[
pho°
->
C⁄åﬁ
.
hc_num_out
].
toggÀ_out
 ^= 1;

767 
	`USBH_CéSídD©a
 (
pdev
,

770 
pho°
->
C⁄åﬁ
.
hc_num_out
);

772 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_STATUS_OUT_WAIT
;

775 
CTRL_STATUS_OUT_WAIT
:

777 
URB_Sètus
 = 
	`HCD_GëURB_Sèã
(
pdev
 , 
pho°
->
C⁄åﬁ
.
hc_num_out
);

778 i‡(
URB_Sètus
 =
URB_DONE
)

780 
pho°
->
gSèã
 =Öho°->
gSèãBkp
;

782 i‡(
URB_Sètus
 =
URB_NOTREADY
)

784 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_STATUS_OUT
;

786 i‡(
URB_Sètus
 =
URB_ERROR
)

788 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_ERROR
;

792 
CTRL_ERROR
:

801 i‡(++ 
pho°
->
C⁄åﬁ
.
îr‹cou¡
 <
USBH_MAX_ERROR_COUNT
)

804 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_SETUP
;

808 
pho°
->
C⁄åﬁ
.
°©us
 = 
CTRL_FAIL
;

809 
pho°
->
gSèã
 =Öho°->
gSèãBkp
;

811 
°©us
 = 
USBH_FAIL
;

818  
°©us
;

819 
	}
}

	@libstm/STM32_USB_HOST_Library/Core/src/usbh_hcs.c

23 
	~"usbh_hcs.h
"

73 
uöt16_t
 
USBH_GëFªeCh™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

96 
uöt8_t
 
	$USBH_O≥n_Ch™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

97 
uöt8_t
 
hc_num
,

98 
uöt8_t
 
dev_addªss
,

99 
uöt8_t
 
•ìd
,

100 
uöt8_t
 
ï_ty≥
,

101 
uöt16_t
 
mps
)

104 
pdev
->
ho°
.
hc
[
hc_num
].
ï_num
 =Ödev->ho°.
ch™√l
[hc_num]& 0x7F;

105 
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
 = (pdev->ho°.
ch™√l
[hc_num] & 0x80 ) == 0x80;

106 
pdev
->
ho°
.
hc
[
hc_num
].
dev_addr
 = 
dev_addªss
;

107 
pdev
->
ho°
.
hc
[
hc_num
].
ï_ty≥
 =Ép_type;

108 
pdev
->
ho°
.
hc
[
hc_num
].
max_∑ckë
 = 
mps
;

109 
pdev
->
ho°
.
hc
[
hc_num
].
•ìd
 = speed;

110 
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_ö
 = 0;

111 
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_out
 = 0;

112 if(
•ìd
 =
HPRT0_PRTSPD_HIGH_SPEED
)

114 
pdev
->
ho°
.
hc
[
hc_num
].
do_pög
 = 1;

117 
	`USB_OTG_HC_Inô
(
pdev
, 
hc_num
) ;

119  
HC_OK
;

121 
	}
}

134 
uöt8_t
 
	$USBH_Modify_Ch™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

135 
uöt8_t
 
hc_num
,

136 
uöt8_t
 
dev_addªss
,

137 
uöt8_t
 
•ìd
,

138 
uöt8_t
 
ï_ty≥
,

139 
uöt16_t
 
mps
)

142 if(
dev_addªss
 != 0)

144 
pdev
->
ho°
.
hc
[
hc_num
].
dev_addr
 = 
dev_addªss
;

147 if((
pdev
->
ho°
.
hc
[
hc_num
].
max_∑ckë
 !
mps
) && (mps != 0))

149 
pdev
->
ho°
.
hc
[
hc_num
].
max_∑ckë
 = 
mps
;

152 if((
pdev
->
ho°
.
hc
[
hc_num
].
•ìd
 != speed ) && (speed != 0 ))

154 
pdev
->
ho°
.
hc
[
hc_num
].
•ìd
 = speed;

157 
	`USB_OTG_HC_Inô
(
pdev
, 
hc_num
);

158  
HC_OK
;

160 
	}
}

168 
uöt8_t
 
	$USBH_AŒoc_Ch™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
ï_addr
)

170 
uöt16_t
 
hc_num
;

172 
hc_num
 = 
	`USBH_GëFªeCh™√l
(
pdev
);

174 i‡(
hc_num
 !
HC_ERROR
)

176 
pdev
->
ho°
.
ch™√l
[
hc_num
] = 
HC_USED
 | 
ï_addr
;

178  
hc_num
;

179 
	}
}

187 
uöt8_t
 
	$USBH_Fªe_Ch™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
idx
)

189 if(
idx
 < 
HC_MAX
)

191 
pdev
->
ho°
.
ch™√l
[
idx
] &
HC_USED_MASK
;

193  
USBH_OK
;

194 
	}
}

203 
uöt8_t
 
	$USBH_DeAŒoˇã_AŒCh™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

205 
uöt8_t
 
idx
;

207 
idx
 = 2; idx < 
HC_MAX
 ; idx ++)

209 
pdev
->
ho°
.
ch™√l
[
idx
] = 0;

211  
USBH_OK
;

212 
	}
}

220 
uöt16_t
 
	$USBH_GëFªeCh™√l
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

222 
uöt8_t
 
idx
 = 0;

224 
idx
 = 0 ; idx < 
HC_MAX
 ; idx++)

226 i‡((
pdev
->
ho°
.
ch™√l
[
idx
] & 
HC_USED
) == 0)

228  
idx
;

231  
HC_ERROR
;

232 
	}
}

	@libstm/STM32_USB_HOST_Library/Core/src/usbh_ioreq.c

23 
	~"usbh_i‹eq.h
"

75 
USBH_Sètus
 
USBH_SubmôSëupReque°
(
USBH_HOST
 *
pho°
,

76 
uöt8_t
* 
buff
,

77 
uöt16_t
 
Àngth
);

99 
USBH_Sètus
 
	$USBH_CéReq
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

100 
USBH_HOST
 *
pho°
,

101 
uöt8_t
 *
buff
,

102 
uöt16_t
 
Àngth
)

104 
USBH_Sètus
 
°©us
;

105 
URB_STATE
 
URB_Sètus
 = 
URB_IDLE
;

107 
URB_Sètus
 = 
	`HCD_GëURB_Sèã
(
pdev
, 
pho°
->
C⁄åﬁ
.
hc_num_out
);

109 
°©us
 = 
USBH_BUSY
;

111 
pho°
->
Reque°Sèã
)

113 
CMD_SEND
:

115 
	`USBH_SubmôSëupReque°
(
pho°
, 
buff
, 
Àngth
);

116 
pho°
->
Reque°Sèã
 = 
CMD_WAIT
;

117 
°©us
 = 
USBH_BUSY
;

120 
CMD_WAIT
:

121 i‡(
URB_Sètus
 =
URB_DONE
)

124 
pho°
->
Reque°Sèã
 = 
CMD_SEND
;

125 
°©us
 = 
USBH_OK
;

127 i‡(
URB_Sètus
 =
URB_ERROR
)

130 
pho°
->
Reque°Sèã
 = 
CMD_SEND
;

131 
°©us
 = 
USBH_FAIL
;

133 i‡(
URB_Sètus
 =
URB_STALL
)

136 
pho°
->
Reque°Sèã
 = 
CMD_SEND
;

137 
°©us
 = 
USBH_NOT_SUPPORTED
;

144  
°©us
;

145 
	}
}

155 
USBH_Sètus
 
	$USBH_CéSídSëup
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

156 
uöt8_t
 *
buff
,

157 
uöt8_t
 
hc_num
){

158 
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
 = 0;

159 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_SETUP
;

160 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_buff
 = 
buff
;

161 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 = 
USBH_SETUP_PKT_SIZE
;

163  (
USBH_Sètus
)
	`HCD_SubmôReque°
 (
pdev
 , 
hc_num
);

164 
	}
}

176 
USBH_Sètus
 
	$USBH_CéSídD©a
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

177 
uöt8_t
 *
buff
,

178 
uöt8_t
 
Àngth
,

179 
uöt8_t
 
hc_num
)

181 
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
 = 0;

182 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_buff
 = 
buff
;

183 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 = 
Àngth
;

185 i‡–
Àngth
 == 0 )

187 
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_out
 = 1;

191 i‡–
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_out
 == 0)

193 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA0
;

197 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA1
 ;

200 
	`HCD_SubmôReque°
 (
pdev
 , 
hc_num
);

202  
USBH_OK
;

203 
	}
}

215 
USBH_Sètus
 
	$USBH_CéRe˚iveD©a
(
USB_OTG_CORE_HANDLE
 *
pdev
,

216 
uöt8_t
* 
buff
,

217 
uöt8_t
 
Àngth
,

218 
uöt8_t
 
hc_num
)

221 
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
 = 1;

222 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA1
;

223 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_buff
 = 
buff
;

224 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 = 
Àngth
;

226 
	`HCD_SubmôReque°
 (
pdev
 , 
hc_num
);

228  
USBH_OK
;

230 
	}
}

242 
USBH_Sètus
 
	$USBH_BulkSídD©a
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

243 
uöt8_t
 *
buff
,

244 
uöt16_t
 
Àngth
,

245 
uöt8_t
 
hc_num
)

247 
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
 = 0;

248 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_buff
 = 
buff
;

249 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 = 
Àngth
;

252 i‡–
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_out
 == 0)

254 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA0
;

258 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA1
 ;

261 
	`HCD_SubmôReque°
 (
pdev
 , 
hc_num
);

262  
USBH_OK
;

263 
	}
}

275 
USBH_Sètus
 
	$USBH_BulkRe˚iveD©a
–
USB_OTG_CORE_HANDLE
 *
pdev
,

276 
uöt8_t
 *
buff
,

277 
uöt16_t
 
Àngth
,

278 
uöt8_t
 
hc_num
)

280 
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
 = 1;

281 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_buff
 = 
buff
;

282 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 = 
Àngth
;

285 if–
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_ö
 == 0)

287 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA0
;

291 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA1
;

294 
	`HCD_SubmôReque°
 (
pdev
 , 
hc_num
);

295  
USBH_OK
;

296 
	}
}

308 
USBH_Sètus
 
	$USBH_I¡îru±Re˚iveD©a
–
USB_OTG_CORE_HANDLE
 *
pdev
,

309 
uöt8_t
 *
buff
,

310 
uöt8_t
 
Àngth
,

311 
uöt8_t
 
hc_num
)

314 
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
 = 1;

315 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_buff
 = 
buff
;

316 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 = 
Àngth
;

320 if(
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_ö
 == 0)

322 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA0
;

326 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA1
;

330 
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_ö
 ^= 1;

332 
	`HCD_SubmôReque°
 (
pdev
 , 
hc_num
);

334  
USBH_OK
;

335 
	}
}

346 
USBH_Sètus
 
	$USBH_I¡îru±SídD©a
–
USB_OTG_CORE_HANDLE
 *
pdev
,

347 
uöt8_t
 *
buff
,

348 
uöt8_t
 
Àngth
,

349 
uöt8_t
 
hc_num
)

352 
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
 = 0;

353 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_buff
 = 
buff
;

354 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 = 
Àngth
;

356 if(
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_ö
 == 0)

358 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA0
;

362 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
 = 
HC_PID_DATA1
;

365 
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_ö
 ^= 1;

367 
	`HCD_SubmôReque°
 (
pdev
 , 
hc_num
);

369  
USBH_OK
;

370 
	}
}

383 
USBH_Sètus
 
	$USBH_SubmôSëupReque°
(
USBH_HOST
 *
pho°
,

384 
uöt8_t
* 
buff
,

385 
uöt16_t
 
Àngth
)

389 
pho°
->
gSèãBkp
 =Öho°->
gSèã
;

392 
pho°
->
gSèã
 = 
HOST_CTRL_XFER
;

393 
pho°
->
C⁄åﬁ
.
buff
 = buff;

394 
pho°
->
C⁄åﬁ
.
Àngth
 =Üength;

395 
pho°
->
C⁄åﬁ
.
°©e
 = 
CTRL_SETUP
;

397  
USBH_OK
;

398 
	}
}

	@libstm/STM32_USB_HOST_Library/Core/src/usbh_stdreq.c

23 
	~"usbh_i‹eq.h
"

24 
	~"usbh_°dªq.h
"

76 
USBH_P¨£DevDesc
 (
USBH_DevDesc_Ty≥Def
* , 
uöt8_t
 *
buf
, 
uöt16_t
 
Àngth
);

78 
USBH_P¨£CfgDesc
 (
USBH_CfgDesc_Ty≥Def
* 
cfg_desc
,

79 
USBH_I¡îÁ˚Desc_Ty≥Def
* 
ôf_desc
,

80 
USBH_EpDesc_Ty≥Def
* 
ï_desc
,

81 
uöt8_t
 *
buf
,

82 
uöt16_t
 
Àngth
);

83 
USBH_DescHódî_t
 *
USBH_GëNextDesc
 (
uöt8_t
 *
pbuf
,

84 
uöt16_t
 *
±r
);

86 
USBH_P¨£I¡îÁ˚Desc
 (
USBH_I¡îÁ˚Desc_Ty≥Def
 *
if_des¸ùt‹
, 
uöt8_t
 *
buf
);

87 
USBH_P¨£EPDesc
 (
USBH_EpDesc_Ty≥Def
 *
ï_des¸ùt‹
, 
uöt8_t
 *
buf
);

89 
USBH_P¨£SåögDesc
 (
uöt8_t
* 
p§c
, uöt8_t* 
pde°
, 
uöt16_t
 
Àngth
);

110 
USBH_Sètus
 
	$USBH_Gë_DevDesc
(
USB_OTG_CORE_HANDLE
 *
pdev
,

111 
USBH_HOST
 *
pho°
,

112 
uöt8_t
 
Àngth
)

115 
USBH_Sètus
 
°©us
;

117 if((
°©us
 = 
	`USBH_GëDes¸ùt‹
(
pdev
,

118 
pho°
,

119 
USB_REQ_RECIPIENT_DEVICE
 | 
USB_REQ_TYPE_STANDARD
,

120 
USB_DESC_DEVICE
,

121 
pdev
->
ho°
.
Rx_Buf„r
,

122 
Àngth
)Ë=
USBH_OK
)

125 
	`USBH_P¨£DevDesc
(&
pho°
->
devi˚_¥›
.
Dev_Desc
, 
pdev
->
ho°
.
Rx_Buf„r
, 
Àngth
);

127  
°©us
;

128 
	}
}

142 
USBH_Sètus
 
	$USBH_Gë_CfgDesc
(
USB_OTG_CORE_HANDLE
 *
pdev
,

143 
USBH_HOST
 *
pho°
,

144 
uöt16_t
 
Àngth
)

147 
USBH_Sètus
 
°©us
;

149 if((
°©us
 = 
	`USBH_GëDes¸ùt‹
(
pdev
,

150 
pho°
,

151 
USB_REQ_RECIPIENT_DEVICE
 | 
USB_REQ_TYPE_STANDARD
,

152 
USB_DESC_CONFIGURATION
,

153 
pdev
->
ho°
.
Rx_Buf„r
,

154 
Àngth
)Ë=
USBH_OK
)

157 
	`USBH_P¨£CfgDesc
 (&
pho°
->
devi˚_¥›
.
Cfg_Desc
,

158 
pho°
->
devi˚_¥›
.
Itf_Desc
,

159 
pho°
->
devi˚_¥›
.
Ep_Desc
[0],

160 
pdev
->
ho°
.
Rx_Buf„r
,

161 
Àngth
);

164  
°©us
;

165 
	}
}

178 
USBH_Sètus
 
	$USBH_Gë_SåögDesc
(
USB_OTG_CORE_HANDLE
 *
pdev
,

179 
USBH_HOST
 *
pho°
,

180 
uöt8_t
 
°rög_ödex
,

181 
uöt8_t
 *
buff
,

182 
uöt16_t
 
Àngth
)

184 
USBH_Sètus
 
°©us
;

186 if((
°©us
 = 
	`USBH_GëDes¸ùt‹
(
pdev
,

187 
pho°
,

188 
USB_REQ_RECIPIENT_DEVICE
 | 
USB_REQ_TYPE_STANDARD
,

189 
USB_DESC_STRING
 | 
°rög_ödex
,

190 
pdev
->
ho°
.
Rx_Buf„r
,

191 
Àngth
)Ë=
USBH_OK
)

194 
	`USBH_P¨£SåögDesc
(
pdev
->
ho°
.
Rx_Buf„r
,
buff
, 
Àngth
);

196  
°©us
;

197 
	}
}

210 
USBH_Sètus
 
	$USBH_GëDes¸ùt‹
(
USB_OTG_CORE_HANDLE
 *
pdev
,

211 
USBH_HOST
 *
pho°
,

212 
uöt8_t
 
ªq_ty≥
,

213 
uöt16_t
 
vÆue_idx
,

214 
uöt8_t
* 
buff
,

215 
uöt16_t
 
Àngth
 )

217 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bmReque°Ty≥
 = 
USB_D2H
 | 
ªq_ty≥
;

218 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bReque°
 = 
USB_REQ_GET_DESCRIPTOR
;

219 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wVÆue
.
w
 = 
vÆue_idx
;

221 i‡((
vÆue_idx
 & 0xff00Ë=
USB_DESC_STRING
)

223 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wIndex
.
w
 = 0x0409;

227 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wIndex
.
w
 = 0;

229 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wLígth
.
w
 = 
Àngth
;

230  
	`USBH_CéReq
(
pdev
, 
pho°
, 
buff
 , 
Àngth
 );

231 
	}
}

240 
USBH_Sètus
 
	$USBH_SëAddªss
(
USB_OTG_CORE_HANDLE
 *
pdev
,

241 
USBH_HOST
 *
pho°
,

242 
uöt8_t
 
Devi˚Addªss
)

244 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bmReque°Ty≥
 = 
USB_H2D
 | 
USB_REQ_RECIPIENT_DEVICE
 | \

245 
USB_REQ_TYPE_STANDARD
;

247 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bReque°
 = 
USB_REQ_SET_ADDRESS
;

249 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wVÆue
.
w
 = (
uöt16_t
)
Devi˚Addªss
;

250 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wIndex
.
w
 = 0;

251 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wLígth
.
w
 = 0;

253  
	`USBH_CéReq
(
pdev
, 
pho°
, 0 , 0 );

254 
	}
}

263 
USBH_Sètus
 
	$USBH_SëCfg
(
USB_OTG_CORE_HANDLE
 *
pdev
,

264 
USBH_HOST
 *
pho°
,

265 
uöt16_t
 
cfg_idx
)

268 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bmReque°Ty≥
 = 
USB_H2D
 | 
USB_REQ_RECIPIENT_DEVICE
 |\

269 
USB_REQ_TYPE_STANDARD
;

270 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bReque°
 = 
USB_REQ_SET_CONFIGURATION
;

271 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wVÆue
.
w
 = 
cfg_idx
;

272 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wIndex
.
w
 = 0;

273 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wLígth
.
w
 = 0;

275  
	`USBH_CéReq
(
pdev
, 
pho°
, 0 , 0 );

276 
	}
}

287 
USBH_Sètus
 
	$USBH_CÃFótuª
(
USB_OTG_CORE_HANDLE
 *
pdev
,

288 
USBH_HOST
 *
pho°
,

289 
uöt8_t
 
ï_num
,

290 
uöt8_t
 
hc_num
)

293 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bmReque°Ty≥
 = 
USB_H2D
 |

294 
USB_REQ_RECIPIENT_ENDPOINT
 |

295 
USB_REQ_TYPE_STANDARD
;

297 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
bReque°
 = 
USB_REQ_CLEAR_FEATURE
;

298 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wVÆue
.
w
 = 
FEATURE_SELECTOR_ENDPOINT
;

299 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wIndex
.
w
 = 
ï_num
;

300 
pho°
->
C⁄åﬁ
.
£tup
.
b
.
wLígth
.
w
 = 0;

302 i‡((
ï_num
 & 
USB_REQ_DIR_MASK
 ) =
USB_D2H
)

304 
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_ö
 = 0;

308 
pdev
->
ho°
.
hc
[
hc_num
].
toggÀ_out
 = 0;

311  
	`USBH_CéReq
(
pdev
, 
pho°
, 0 , 0 );

312 
	}
}

322 
	$USBH_P¨£DevDesc
 (
USBH_DevDesc_Ty≥Def
* 
dev_desc
,

323 
uöt8_t
 *
buf
,

324 
uöt16_t
 
Àngth
)

326 
dev_desc
->
bLígth
 = *(
uöt8_t
 *Ë(
buf
 + 0);

327 
dev_desc
->
bDes¸ùt‹Ty≥
 = *(
uöt8_t
 *Ë(
buf
 + 1);

328 
dev_desc
->
bcdUSB
 = 
	`LE16
 (
buf
 + 2);

329 
dev_desc
->
bDevi˚Cœss
 = *(
uöt8_t
 *Ë(
buf
 + 4);

330 
dev_desc
->
bDevi˚SubCœss
 = *(
uöt8_t
 *Ë(
buf
 + 5);

331 
dev_desc
->
bDevi˚PrŸocﬁ
 = *(
uöt8_t
 *Ë(
buf
 + 6);

332 
dev_desc
->
bMaxPackëSize
 = *(
uöt8_t
 *Ë(
buf
 + 7);

334 i‡(
Àngth
 > 8)

337 
dev_desc
->
idVíd‹
 = 
	`LE16
 (
buf
 + 8);

338 
dev_desc
->
idProdu˘
 = 
	`LE16
 (
buf
 + 10);

339 
dev_desc
->
bcdDevi˚
 = 
	`LE16
 (
buf
 + 12);

340 
dev_desc
->
iM™uÁ˘uªr
 = *(
uöt8_t
 *Ë(
buf
 + 14);

341 
dev_desc
->
iProdu˘
 = *(
uöt8_t
 *Ë(
buf
 + 15);

342 
dev_desc
->
iSîülNumbî
 = *(
uöt8_t
 *Ë(
buf
 + 16);

343 
dev_desc
->
bNumC⁄figuøti⁄s
 = *(
uöt8_t
 *Ë(
buf
 + 17);

345 
	}
}

357 
	$USBH_P¨£CfgDesc
 (
USBH_CfgDesc_Ty≥Def
* 
cfg_desc
,

358 
USBH_I¡îÁ˚Desc_Ty≥Def
* 
ôf_desc
,

359 
USBH_EpDesc_Ty≥Def
* 
ï_desc
,

360 
uöt8_t
 *
buf
,

361 
uöt16_t
 
Àngth
)

363 
USBH_I¡îÁ˚Desc_Ty≥Def
 *
pif
 ;

364 
USBH_EpDesc_Ty≥Def
 *
≥p
;

365 
USBH_DescHódî_t
 *
pdesc
 = (USBH_DescHódî_à*)
buf
;

366 
uöt16_t
 
±r
;

367 
öt8_t
 
if_ix
;

368 
öt8_t
 
ï_ix
;

370 
pdesc
 = (
USBH_DescHódî_t
 *)
buf
;

373 
cfg_desc
->
bLígth
 = *(
uöt8_t
 *Ë(
buf
 + 0);

374 
cfg_desc
->
bDes¸ùt‹Ty≥
 = *(
uöt8_t
 *Ë(
buf
 + 1);

375 
cfg_desc
->
wTŸÆLígth
 = 
	`LE16
 (
buf
 + 2);

376 
cfg_desc
->
bNumI¡îÁ˚s
 = *(
uöt8_t
 *Ë(
buf
 + 4);

377 
cfg_desc
->
bC⁄figuøti⁄VÆue
 = *(
uöt8_t
 *Ë(
buf
 + 5);

378 
cfg_desc
->
iC⁄figuøti⁄
 = *(
uöt8_t
 *Ë(
buf
 + 6);

379 
cfg_desc
->
bmAâribuãs
 = *(
uöt8_t
 *Ë(
buf
 + 7);

380 
cfg_desc
->
bMaxPowî
 = *(
uöt8_t
 *Ë(
buf
 + 8);

383 i‡(
Àngth
 > 
USB_CONFIGURATION_DESC_SIZE
)

385 
±r
 = 
USB_LEN_CFG_DESC
;

387 i‡–
cfg_desc
->
bNumI¡îÁ˚s
 <
USBH_MAX_NUM_INTERFACES
)

389 
if_ix
 = 0;

390 
pif
 = (
USBH_I¡îÁ˚Desc_Ty≥Def
 *)0;

393 if(
cfg_desc
->
bNumI¡îÁ˚s
 <
USBH_MAX_NUM_INTERFACES
)

395 
if_ix
 < 
cfg_desc
->
bNumI¡îÁ˚s
)

397 
pdesc
 = 
	`USBH_GëNextDesc
((
uöt8_t
 *Ìdesc, &
±r
);

398 i‡(
pdesc
->
bDes¸ùt‹Ty≥
 =
USB_DESC_TYPE_INTERFACE
)

400 
pif
 = &
ôf_desc
[
if_ix
];

401 
	`USBH_P¨£I¡îÁ˚Desc
 (
pif
, (
uöt8_t
 *)
pdesc
);

402 
ï_ix
 = 0;

405 if(
pif
->
bNumEndpoöts
 <
USBH_MAX_NUM_ENDPOINTS
)

407 
ï_ix
 < 
pif
->
bNumEndpoöts
)

409 
pdesc
 = 
	`USBH_GëNextDesc
((* )pdesc, &
±r
);

410 i‡(
pdesc
->
bDes¸ùt‹Ty≥
 =
USB_DESC_TYPE_ENDPOINT
)

412 
≥p
 = &
ï_desc
[
ï_ix
];

413 
	`USBH_P¨£EPDesc
 (
≥p
, (
uöt8_t
 *)
pdesc
);

414 
ï_ix
++;

418 
±r
 +
pdesc
->
bLígth
;

422 
if_ix
++;

426 
±r
 +
pdesc
->
bLígth
;

432 
	}
}

442 
	$USBH_P¨£I¡îÁ˚Desc
 (
USBH_I¡îÁ˚Desc_Ty≥Def
 *
if_des¸ùt‹
,

443 
uöt8_t
 *
buf
)

445 
if_des¸ùt‹
->
bLígth
 = *(
uöt8_t
 *Ë(
buf
 + 0);

446 
if_des¸ùt‹
->
bDes¸ùt‹Ty≥
 = *(
uöt8_t
 *Ë(
buf
 + 1);

447 
if_des¸ùt‹
->
bI¡îÁ˚Numbî
 = *(
uöt8_t
 *Ë(
buf
 + 2);

448 
if_des¸ùt‹
->
bA…î«ãSëtög
 = *(
uöt8_t
 *Ë(
buf
 + 3);

449 
if_des¸ùt‹
->
bNumEndpoöts
 = *(
uöt8_t
 *Ë(
buf
 + 4);

450 
if_des¸ùt‹
->
bI¡îÁ˚Cœss
 = *(
uöt8_t
 *Ë(
buf
 + 5);

451 
if_des¸ùt‹
->
bI¡îÁ˚SubCœss
 = *(
uöt8_t
 *Ë(
buf
 + 6);

452 
if_des¸ùt‹
->
bI¡îÁ˚PrŸocﬁ
 = *(
uöt8_t
 *Ë(
buf
 + 7);

453 
if_des¸ùt‹
->
iI¡îÁ˚
 = *(
uöt8_t
 *Ë(
buf
 + 8);

454 
	}
}

463 
	$USBH_P¨£EPDesc
 (
USBH_EpDesc_Ty≥Def
 *
ï_des¸ùt‹
,

464 
uöt8_t
 *
buf
)

467 
ï_des¸ùt‹
->
bLígth
 = *(
uöt8_t
 *Ë(
buf
 + 0);

468 
ï_des¸ùt‹
->
bDes¸ùt‹Ty≥
 = *(
uöt8_t
 *Ë(
buf
 + 1);

469 
ï_des¸ùt‹
->
bEndpoötAddªss
 = *(
uöt8_t
 *Ë(
buf
 + 2);

470 
ï_des¸ùt‹
->
bmAâribuãs
 = *(
uöt8_t
 *Ë(
buf
 + 3);

471 
ï_des¸ùt‹
->
wMaxPackëSize
 = 
	`LE16
 (
buf
 + 4);

472 
ï_des¸ùt‹
->
bI¡îvÆ
 = *(
uöt8_t
 *Ë(
buf
 + 6);

473 
	}
}

483 
	$USBH_P¨£SåögDesc
 (
uöt8_t
* 
p§c
,

484 
uöt8_t
* 
pde°
,

485 
uöt16_t
 
Àngth
)

487 
uöt16_t
 
°æígth
;

488 
uöt16_t
 
idx
;

497 i‡–
p§c
[1] =
USB_DESC_TYPE_STRING
)

501 
°æígth
 = ( ( (
p§c
[0]-2Ë<
Àngth
) ? (psrc[0]-2) :length);

502 
p§c
 += 2;

504 
idx
 = 0; idx < 
°æígth
; idx+=2 )

506 *
pde°
 = 
p§c
[
idx
];

507 
pde°
++;

509 *
pde°
 = 0;

511 
	}
}

520 
USBH_DescHódî_t
 *
	$USBH_GëNextDesc
 (
uöt8_t
 *
pbuf
, 
uöt16_t
 *
±r
)

522 
USBH_DescHódî_t
 *
≤ext
;

524 *
±r
 +((
USBH_DescHódî_t
 *)
pbuf
)->
bLígth
;

525 
≤ext
 = (
USBH_DescHódî_t
 *)((
uöt8_t
 *)
pbuf
 + \

526 ((
USBH_DescHódî_t
 *)
pbuf
)->
bLígth
);

528 (
≤ext
);

529 
	}
}

	@libstm/STM32_USB_OTG_Driver/inc/usb_bsp.h

23 #i‚de‡
__USB_BSP__H__


24 
	#__USB_BSP__H__


	)

27 
	~"usb_c‹e.h
"

28 
	~"°m32f4_discovîy.h
"

73 
BSP_Inô
();

75 
USB_OTG_BSP_Inô
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

76 
USB_OTG_BSP_uDñay
 (c⁄° 
uöt32_t
 
u£c
);

77 
USB_OTG_BSP_mDñay
 (c⁄° 
uöt32_t
 
m£c
);

78 
USB_OTG_BSP_E«bÀI¡îru±
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

79 #ifde‡
USE_HOST_MODE


80 
USB_OTG_BSP_C⁄figVBUS
(
USB_OTG_CORE_HANDLE
 *
pdev
);

81 
USB_OTG_BSP_DriveVBUS
(
USB_OTG_CORE_HANDLE
 *
pdev
,
uöt8_t
 
°©e
);

	@libstm/STM32_USB_OTG_Driver/inc/usb_conf_template.h

23 #i‚de‡
__USB_CONF__H__


24 
	#__USB_CONF__H__


	)

27 
	~"°m32f2xx.h
"

48 #i‚de‡
USE_USB_OTG_FS


52 #i‚de‡
USE_USB_OTG_HS


56 #i‚de‡
USE_ULPI_PHY


60 #i‚de‡
USE_EMBEDDED_PHY


64 #i‚de‡
USE_I2C_PHY


69 #ifde‡
USE_USB_OTG_FS


70 
	#USB_OTG_FS_CORE


	)

73 #ifde‡
USE_USB_OTG_HS


74 
	#USB_OTG_HS_CORE


	)

131 #ifde‡
USB_OTG_HS_CORE


132 
	#RX_FIFO_HS_SIZE
 512

	)

133 
	#TX0_FIFO_HS_SIZE
 512

	)

134 
	#TX1_FIFO_HS_SIZE
 512

	)

135 
	#TX2_FIFO_HS_SIZE
 0

	)

136 
	#TX3_FIFO_HS_SIZE
 0

	)

137 
	#TX4_FIFO_HS_SIZE
 0

	)

138 
	#TX5_FIFO_HS_SIZE
 0

	)

139 
	#TXH_NP_HS_FIFOSIZ
 96

	)

140 
	#TXH_P_HS_FIFOSIZ
 96

	)

146 
	#USB_OTG_EXTERNAL_VBUS_ENABLED


	)

148 #ifde‡
USE_ULPI_PHY


149 
	#USB_OTG_ULPI_PHY_ENABLED


	)

151 #ifde‡
USE_EMBEDDED_PHY


152 
	#USB_OTG_EMBEDDED_PHY_ENABLED


	)

154 #ifde‡
USE_I2C_PHY


155 
	#USB_OTG_I2C_PHY_ENABLED


	)

157 
	#USB_OTG_HS_INTERNAL_DMA_ENABLED


	)

158 
	#USB_OTG_HS_DEDICATED_EP1_ENABLED


	)

162 #ifde‡
USB_OTG_FS_CORE


163 
	#RX_FIFO_FS_SIZE
 128

	)

164 
	#TX0_FIFO_FS_SIZE
 64

	)

165 
	#TX1_FIFO_FS_SIZE
 128

	)

166 
	#TX2_FIFO_FS_SIZE
 0

	)

167 
	#TX3_FIFO_FS_SIZE
 0

	)

168 
	#TXH_NP_HS_FIFOSIZ
 96

	)

169 
	#TXH_P_HS_FIFOSIZ
 96

	)

177 
	#USE_DEVICE_MODE


	)

181 #i‚de‡
USB_OTG_FS_CORE


182 #i‚de‡
USB_OTG_HS_CORE


188 #i‚de‡
USE_DEVICE_MODE


189 #i‚de‡
USE_HOST_MODE


194 #i‚de‡
USE_USB_OTG_HS


195 #i‚de‡
USE_USB_OTG_FS


199 #i‚de‡
USE_ULPI_PHY


200 #i‚de‡
USE_EMBEDDED_PHY


201 #i‚de‡
USE_I2C_PHY


211 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


212 #i‡
deföed
 (
__GNUC__
)

213 
	#__ALIGN_END
 
	`__©åibuã__
 ((
	`Æig√d
 (4)))

	)

214 
	#__ALIGN_BEGIN


	)

216 
	#__ALIGN_END


	)

217 #i‡
deföed
 (
__CC_ARM
)

218 
	#__ALIGN_BEGIN
 
	`__Æign
(4)

	)

219 #ñi‡
deföed
 (
__ICCARM__
)

220 
	#__ALIGN_BEGIN


	)

221 #ñi‡
deföed
 (
__TASKING__
)

222 
	#__ALIGN_BEGIN
 
	`__Æign
(4)

	)

226 
	#__ALIGN_BEGIN


	)

227 
	#__ALIGN_END


	)

231 #i‡
deföed
 (
__CC_ARM
)

232 
	#__∑cked
 
__∑cked


	)

233 #ñi‡
deföed
 (
__ICCARM__
)

234 
	#__∑cked
 
__∑cked


	)

235 #ñi‡
deföed
 ( 
__GNUC__
 )

236 
	#__∑cked
 
	`__©åibuã__
 ((
__∑cked__
))

	)

237 #ñi‡
deföed
 (
__TASKING__
)

238 
	#__∑cked
 
__u«lig√d


	)

	@libstm/STM32_USB_OTG_Driver/inc/usb_core.h

23 #i‚de‡
__USB_CORE_H__


24 
	#__USB_CORE_H__


	)

27 
	~"usb_c⁄f.h
"

28 
	~"usb_ªgs.h
"

29 
	~"usb_deföes.h
"

46 
	#USB_OTG_EP0_IDLE
 0

	)

47 
	#USB_OTG_EP0_SETUP
 1

	)

48 
	#USB_OTG_EP0_DATA_IN
 2

	)

49 
	#USB_OTG_EP0_DATA_OUT
 3

	)

50 
	#USB_OTG_EP0_STATUS_IN
 4

	)

51 
	#USB_OTG_EP0_STATUS_OUT
 5

	)

52 
	#USB_OTG_EP0_STALL
 6

	)

54 
	#USB_OTG_EP_TX_DIS
 0x0000

	)

55 
	#USB_OTG_EP_TX_STALL
 0x0010

	)

56 
	#USB_OTG_EP_TX_NAK
 0x0020

	)

57 
	#USB_OTG_EP_TX_VALID
 0x0030

	)

59 
	#USB_OTG_EP_RX_DIS
 0x0000

	)

60 
	#USB_OTG_EP_RX_STALL
 0x1000

	)

61 
	#USB_OTG_EP_RX_NAK
 0x2000

	)

62 
	#USB_OTG_EP_RX_VALID
 0x3000

	)

66 
	#MAX_DATA_LENGTH
 0xFF

	)

74 
	mUSB_OTG_OK
 = 0,

75 
	mUSB_OTG_FAIL


76 }
	tUSB_OTG_STS
;

79 
	mHC_IDLE
 = 0,

80 
	mHC_XFRC
,

81 
	mHC_HALTED
,

82 
	mHC_NAK
,

83 
	mHC_NYET
,

84 
	mHC_STALL
,

85 
	mHC_XACTERR
,

86 
	mHC_BBLERR
,

87 
	mHC_DATATGLERR
,

88 }
	tHC_STATUS
;

91 
	mURB_IDLE
 = 0,

92 
	mURB_DONE
,

93 
	mURB_NOTREADY
,

94 
	mURB_ERROR
,

95 
	mURB_STALL


96 }
	tURB_STATE
;

99 
	mCTRL_START
 = 0,

100 
	mCTRL_XFRC
,

101 
	mCTRL_HALTED
,

102 
	mCTRL_NAK
,

103 
	mCTRL_STALL
,

104 
	mCTRL_XACTERR
,

105 
	mCTRL_BBLERR
,

106 
	mCTRL_DATATGLERR
,

107 
	mCTRL_FAIL


108 }
	tCTRL_STATUS
;

111 
	sUSB_OTG_hc


113 
uöt8_t
 
	mdev_addr
 ;

114 
uöt8_t
 
	mï_num
;

115 
uöt8_t
 
	mï_is_ö
;

116 
uöt8_t
 
	m•ìd
;

117 
uöt8_t
 
	mdo_pög
;

118 
uöt8_t
 
	mï_ty≥
;

119 
uöt16_t
 
	mmax_∑ckë
;

120 
uöt8_t
 
	md©a_pid
;

121 
uöt8_t
 *
	mx„r_buff
;

122 
uöt32_t
 
	mx„r_Àn
;

123 
uöt32_t
 
	mx„r_cou¡
;

124 
uöt8_t
 
	mtoggÀ_ö
;

125 
uöt8_t
 
	mtoggÀ_out
;

126 
uöt32_t
 
	mdma_addr
;

128 
	tUSB_OTG_HC
 , *
	tPUSB_OTG_HC
;

130 
	sUSB_OTG_ï


132 
uöt8_t
 
	mnum
;

133 
uöt8_t
 
	mis_ö
;

134 
uöt8_t
 
	mis_°Æl
;

135 
uöt8_t
 
	mty≥
;

136 
uöt8_t
 
	md©a_pid_°¨t
;

137 
uöt8_t
 
	meví_odd_‰ame
;

138 
uöt16_t
 
	mtx_fifo_num
;

139 
uöt32_t
 
	mmax∑ckë
;

141 
uöt8_t
 *
	mx„r_buff
;

142 
uöt32_t
 
	mdma_addr
;

143 
uöt32_t
 
	mx„r_Àn
;

144 
uöt32_t
 
	mx„r_cou¡
;

146 
uöt32_t
 
	mªm_d©a_Àn
;

147 
uöt32_t
 
	mtŸÆ_d©a_Àn
;

148 
uöt32_t
 
	m˘l_d©a_Àn
;

152 
	tUSB_OTG_EP
 , *
	tPUSB_OTG_EP
;

156 
	sUSB_OTG_c‹e_cfg


158 
uöt8_t
 
	mho°_ch™√ls
;

159 
uöt8_t
 
	mdev_ídpoöts
;

160 
uöt8_t
 
	m•ìd
;

161 
uöt8_t
 
	mdma_íabÀ
;

162 
uöt16_t
 
	mmps
;

163 
uöt16_t
 
	mTŸÆFifoSize
;

164 
uöt8_t
 
	mphy_ôÁ˚
;

165 
uöt8_t
 
	mSof_ouçut
;

166 
uöt8_t
 
	mlow_powî
;

167 
uöt8_t
 
	mc‹eID
;

170 
	tUSB_OTG_CORE_CFGS
, *
	tPUSB_OTG_CORE_CFGS
;

174 
	susb_£tup_ªq
 {

176 
uöt8_t
 
	mbmReque°
;

177 
uöt8_t
 
	mbReque°
;

178 
uöt16_t
 
	mwVÆue
;

179 
uöt16_t
 
	mwIndex
;

180 
uöt16_t
 
	mwLígth
;

181 } 
	tUSB_SETUP_REQ
;

183 
	s_Devi˚_Ty≥Def


185 
	muöt8_t
 *(*
	mGëDevi˚Des¸ùt‹
)–
uöt8_t
 
	m•ìd
 , 
uöt16_t
 *
	mÀngth
);

186 
	muöt8_t
 *(*
	mGëL™gIDSåDes¸ùt‹
)–
uöt8_t
 
	m•ìd
 , 
uöt16_t
 *
	mÀngth
);

187 
	muöt8_t
 *(*
	mGëM™uÁ˘uªrSåDes¸ùt‹
)–
uöt8_t
 
	m•ìd
 , 
uöt16_t
 *
	mÀngth
);

188 
	muöt8_t
 *(*
	mGëProdu˘SåDes¸ùt‹
)–
uöt8_t
 
	m•ìd
 , 
uöt16_t
 *
	mÀngth
);

189 
	muöt8_t
 *(*
	mGëSîülSåDes¸ùt‹
)–
uöt8_t
 
	m•ìd
 , 
uöt16_t
 *
	mÀngth
);

190 
	muöt8_t
 *(*
	mGëC⁄figuøti⁄SåDes¸ùt‹
)–
uöt8_t
 
	m•ìd
 , 
uöt16_t
 *
	mÀngth
);

191 
	muöt8_t
 *(*
	mGëI¡îÁ˚SåDes¸ùt‹
)–
uöt8_t
 
	m•ìd
 , 
uöt16_t
 *
	mÀngth
);

192 } 
	tUSBD_DEVICE
, *
	tpUSBD_DEVICE
;

194 
	sUSB_OTG_hP‹t


196 (*
	mDisc⁄√˘
Ë(*
	mpho°
);

197 (*
	mC⁄√˘
Ë(*
	mpho°
);

198 
uöt8_t
 
	mC⁄nSètus
;

199 
uöt8_t
 
	mDisc⁄nSètus
;

200 
uöt8_t
 
	mC⁄nH™dÀd
;

201 
uöt8_t
 
	mDisc⁄nH™dÀd
;

202 } 
	tUSB_OTG_hP‹t_Ty≥Def
;

204 
	s_Devi˚_cb


206 
uöt8_t
 (*
Inô
Ë(*
	mpdev
 , uöt8_à
	mcfgidx
);

207 
uöt8_t
 (*
DeInô
Ë(*
	mpdev
 , uöt8_à
	mcfgidx
);

209 
uöt8_t
 (*
Sëup
Ë(*
	mpdev
 , 
USB_SETUP_REQ
 *
	mªq
);

210 
uöt8_t
 (*
EP0_TxSít
Ë(*
	mpdev
 );

211 
uöt8_t
 (*
EP0_RxRódy
Ë(*
	mpdev
 );

213 
uöt8_t
 (*
D©aIn
Ë(*
	mpdev
 , uöt8_à
	mïnum
);

214 
uöt8_t
 (*
D©aOut
Ë(*
	mpdev
 , uöt8_à
	mïnum
);

215 
uöt8_t
 (*
SOF
Ë(*
	mpdev
);

216 
uöt8_t
 (*
IsoINIncom∂ëe
Ë(*
	mpdev
);

217 
uöt8_t
 (*
IsoOUTIncom∂ëe
Ë(*
	mpdev
);

219 
	muöt8_t
 *(*
	mGëC⁄figDes¸ùt‹
)–
uöt8_t
 
	m•ìd
 , 
uöt16_t
 *
	mÀngth
);

220 #ifde‡
USB_OTG_HS_CORE


221 
	muöt8_t
 *(*
	mGëOthîC⁄figDes¸ùt‹
)–
uöt8_t
 
	m•ìd
 , 
uöt16_t
 *
	mÀngth
);

224 #ifde‡
USB_SUPPORT_USER_STRING_DESC


225 
	muöt8_t
 *(*
	mGëU§SåDes¸ùt‹
)–
uöt8_t
 
	m•ìd
 ,uöt8_à
	mödex
, 
uöt16_t
 *
	mÀngth
);

228 } 
	tUSBD_Cœss_cb_Ty≥Def
;

232 
	s_USBD_USR_PROP


234 (*
	mInô
)();

235 (*
	mDevi˚Re£t
)(
uöt8_t
 
	m•ìd
);

236 (*
	mDevi˚C⁄figuªd
)();

237 (*
	mDevi˚Su•íded
)();

238 (*
	mDevi˚Resumed
)();

240 (*
	mDevi˚C⁄√˘ed
)();

241 (*
	mDevi˚Disc⁄√˘ed
)();

244 
	tUSBD_U§_cb_Ty≥Def
;

246 
	s_DCD


248 
uöt8_t
 
	mdevi˚_c⁄fig
;

249 
uöt8_t
 
	mdevi˚_°©e
;

250 
uöt8_t
 
	mdevi˚_°©us
;

251 
uöt8_t
 
	mdevi˚_addªss
;

252 
uöt32_t
 
	mDevRemŸeWakeup
;

253 
USB_OTG_EP
 
	mö_ï
 [
USB_OTG_MAX_TX_FIFOS
];

254 
USB_OTG_EP
 
	mout_ï
 [
USB_OTG_MAX_TX_FIFOS
];

255 
uöt8_t
 
	m£tup_∑ckë
 [8*3];

256 
USBD_Cœss_cb_Ty≥Def
 *
	m˛ass_cb
;

257 
USBD_U§_cb_Ty≥Def
 *
	mu§_cb
;

258 
USBD_DEVICE
 *
	mu§_devi˚
;

259 
uöt8_t
 *
	mpC⁄fig_des¸ùt‹
;

261 
	tDCD_DEV
 , *
	tDCD_PDEV
;

264 
	s_HCD


266 
uöt8_t
 
	mRx_Buf„r
 [
MAX_DATA_LENGTH
];

267 
__IO
 
uöt32_t
 
	mC⁄nSts
;

268 
__IO
 
uöt32_t
 
	mEºC¡
[
USB_OTG_MAX_TX_FIFOS
];

269 
__IO
 
uöt32_t
 
	mX„rC¡
[
USB_OTG_MAX_TX_FIFOS
];

270 
__IO
 
HC_STATUS
 
	mHC_Sètus
[
USB_OTG_MAX_TX_FIFOS
];

271 
__IO
 
URB_STATE
 
	mURB_Sèã
[
USB_OTG_MAX_TX_FIFOS
];

272 
USB_OTG_HC
 
	mhc
 [
USB_OTG_MAX_TX_FIFOS
];

273 
uöt16_t
 
	mch™√l
 [
USB_OTG_MAX_TX_FIFOS
];

274 
USB_OTG_hP‹t_Ty≥Def
 *
	mp‹t_cb
;

276 
	tHCD_DEV
 , *
	tUSB_OTG_USBH_PDEV
;

279 
	s_OTG


281 
uöt8_t
 
	mOTG_Sèã
;

282 
uöt8_t
 
	mOTG_PªvSèã
;

283 
uöt8_t
 
	mOTG_Mode
;

285 
	tOTG_DEV
 , *
	tUSB_OTG_USBO_PDEV
;

287 
	sUSB_OTG_h™dÀ


289 
USB_OTG_CORE_CFGS
 
	mcfg
;

290 
USB_OTG_CORE_REGS
 
	mªgs
;

291 #ifde‡
USE_DEVICE_MODE


292 
DCD_DEV
 
	mdev
;

294 #ifde‡
USE_HOST_MODE


295 
HCD_DEV
 
	mho°
;

297 #ifde‡
USE_OTG_MODE


298 
OTG_DEV
 
	mŸg
;

301 
	tUSB_OTG_CORE_HANDLE
 , *
	tPUSB_OTG_CORE_HANDLE
;

328 
USB_OTG_STS
 
USB_OTG_C‹eInô
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

329 
USB_OTG_STS
 
USB_OTG_Sñe˘C‹e
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

330 
USB_OTG_CORE_ID_Ty≥Def
 
c‹eID
);

331 
USB_OTG_STS
 
USB_OTG_E«bÀGlobÆI¡
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

332 
USB_OTG_STS
 
USB_OTG_DißbÀGlobÆI¡
(
USB_OTG_CORE_HANDLE
 *
pdev
);

333 * 
USB_OTG_RódPackë
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

334 
uöt8_t
 *
de°
,

335 
uöt16_t
 
Àn
);

336 
USB_OTG_STS
 
USB_OTG_WrôePackë
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

337 
uöt8_t
 *
§c
,

338 
uöt8_t
 
ch_ï_num
,

339 
uöt16_t
 
Àn
);

340 
USB_OTG_STS
 
USB_OTG_FlushTxFifo
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt32_t
 
num
);

341 
USB_OTG_STS
 
USB_OTG_FlushRxFifo
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

343 
uöt32_t
 
USB_OTG_RódC‹eIå
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

344 
uöt32_t
 
USB_OTG_RódOtgIå
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

345 
uöt8_t
 
USB_OTG_IsHo°Mode
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

346 
uöt8_t
 
USB_OTG_IsDevi˚Mode
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

347 
uöt32_t
 
USB_OTG_GëMode
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

348 
USB_OTG_STS
 
USB_OTG_PhyInô
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

349 
USB_OTG_STS
 
USB_OTG_SëCuºítMode
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

350 
uöt8_t
 
mode
);

353 #ifde‡
USE_HOST_MODE


354 
USB_OTG_STS
 
USB_OTG_C‹eInôHo°
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

355 
USB_OTG_STS
 
USB_OTG_E«bÀHo°I¡
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

356 
USB_OTG_STS
 
USB_OTG_HC_Inô
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
hc_num
);

357 
USB_OTG_STS
 
USB_OTG_HC_HÆt
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
hc_num
);

358 
USB_OTG_STS
 
USB_OTG_HC_SèπX„r
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
hc_num
);

359 
USB_OTG_STS
 
USB_OTG_HC_DoPög
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
hc_num
);

360 
uöt32_t
 
USB_OTG_RódHo°AŒCh™√ls_öå
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

361 
uöt32_t
 
USB_OTG_Re£tP‹t
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

362 
uöt32_t
 
USB_OTG_RódHPRT0
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

363 
USB_OTG_DriveVbus
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
°©e
);

364 
USB_OTG_InôFSLSPClkSñ
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,
uöt8_t
 
‰eq
);

365 
uöt8_t
 
USB_OTG_IsEvíFøme
 (
USB_OTG_CORE_HANDLE
 *
pdev
) ;

366 
USB_OTG_St›Ho°
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

369 #ifde‡
USE_DEVICE_MODE


370 
USB_OTG_STS
 
USB_OTG_C‹eInôDev
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

371 
USB_OTG_STS
 
USB_OTG_E«bÀDevI¡
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

372 
uöt32_t
 
USB_OTG_RódDevAŒInEPIå
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

373 
USB_OTG_SPEED
 
USB_OTG_GëDevi˚S≥ed
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

374 
USB_OTG_STS
 
USB_OTG_EP0A˘iv©e
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

375 
USB_OTG_STS
 
USB_OTG_EPA˘iv©e
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
);

376 
USB_OTG_STS
 
USB_OTG_EPDó˘iv©e
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
);

377 
USB_OTG_STS
 
USB_OTG_EPSèπX„r
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
);

378 
USB_OTG_STS
 
USB_OTG_EP0SèπX„r
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
);

379 
USB_OTG_STS
 
USB_OTG_EPSëSèŒ
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
);

380 
USB_OTG_STS
 
USB_OTG_EPCÀ¨SèŒ
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
);

381 
uöt32_t
 
USB_OTG_RódDevAŒOutEp_ôr
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

382 
uöt32_t
 
USB_OTG_RódDevOutEP_ôr
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
ïnum
);

383 
uöt32_t
 
USB_OTG_RódDevAŒInEPIå
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

384 
USB_OTG_InôDevS≥ed
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
•ìd
);

385 
uöt8_t
 
USBH_IsEvíFøme
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

386 
USB_OTG_EP0_OutSèπ
(
USB_OTG_CORE_HANDLE
 *
pdev
);

387 
USB_OTG_A˘iveRemŸeWakeup
(
USB_OTG_CORE_HANDLE
 *
pdev
);

388 
USB_OTG_Ung©eClock
(
USB_OTG_CORE_HANDLE
 *
pdev
);

389 
USB_OTG_St›Devi˚
(
USB_OTG_CORE_HANDLE
 *
pdev
);

390 
USB_OTG_SëEPSètus
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
 , 
uöt32_t
 
Sètus
);

391 
uöt32_t
 
USB_OTG_GëEPSètus
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,
USB_OTG_EP
 *
ï
);

	@libstm/STM32_USB_OTG_Driver/inc/usb_dcd.h

23 #i‚de‡
__DCD_H__


24 
	#__DCD_H__


	)

27 
	~"usb_c‹e.h
"

43 
	#USB_OTG_EP_CONTROL
 0

	)

44 
	#USB_OTG_EP_ISOC
 1

	)

45 
	#USB_OTG_EP_BULK
 2

	)

46 
	#USB_OTG_EP_INT
 3

	)

47 
	#USB_OTG_EP_MASK
 3

	)

50 
	#USB_OTG_DEFAULT
 1

	)

51 
	#USB_OTG_ADDRESSED
 2

	)

52 
	#USB_OTG_CONFIGURED
 3

	)

53 
	#USB_OTG_SUSPENDED
 4

	)

68 
uöt8_t
 
	mbLígth
;

69 
uöt8_t
 
	mbDes¸ùt‹Ty≥
;

70 
uöt8_t
 
	mbEndpoötAddªss
;

71 
uöt8_t
 
	mbmAâribuãs
;

72 
uöt16_t
 
	mwMaxPackëSize
;

73 
uöt8_t
 
	mbI¡îvÆ
;

75 
	tEP_DESCRIPTOR
 , *
	tPEP_DESCRIPTOR
;

102 
DCD_Inô
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

103 
USB_OTG_CORE_ID_Ty≥Def
 
c‹eID
);

105 
DCD_DevC⁄√˘
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

106 
DCD_DevDisc⁄√˘
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

107 
DCD_EP_SëAddªss
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

108 
uöt8_t
 
addªss
);

109 
uöt32_t
 
DCD_EP_O≥n
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

110 
uöt8_t
 
ï_addr
,

111 
uöt16_t
 
ï_mps
,

112 
uöt8_t
 
ï_ty≥
);

114 
uöt32_t
 
DCD_EP_Clo£
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

115 
uöt8_t
 
ï_addr
);

118 
uöt32_t
 
DCD_EP_Pª∑ªRx
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

119 
uöt8_t
 
ï_addr
,

120 
uöt8_t
 *
pbuf
,

121 
uöt16_t
 
buf_Àn
);

123 
uöt32_t
 
DCD_EP_Tx
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

124 
uöt8_t
 
ï_addr
,

125 
uöt8_t
 *
pbuf
,

126 
uöt32_t
 
buf_Àn
);

127 
uöt32_t
 
DCD_EP_SèŒ
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

128 
uöt8_t
 
ïnum
);

129 
uöt32_t
 
DCD_EP_CÃSèŒ
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

130 
uöt8_t
 
ïnum
);

131 
uöt32_t
 
DCD_EP_Flush
 (
USB_OTG_CORE_HANDLE
 *
pdev
,

132 
uöt8_t
 
ïnum
);

133 
uöt32_t
 
DCD_H™dÀ_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

135 
uöt32_t
 
DCD_GëEPSètus
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

136 
uöt8_t
 
ïnum
);

138 
DCD_SëEPSètus
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

139 
uöt8_t
 
ïnum
 ,

140 
uöt32_t
 
Sètus
);

	@libstm/STM32_USB_OTG_Driver/inc/usb_dcd_int.h

23 #i‚de‡
USB_DCD_INT_H__


24 
	#USB_DCD_INT_H__


	)

27 
	~"usb_dcd.h
"

45 
	s_USBD_DCD_INT


47 
uöt8_t
 (* 
D©aOutSège
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
 , uöt8_à
	mïnum
);

48 
uöt8_t
 (* 
D©aInSège
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
 , uöt8_à
	mïnum
);

49 
uöt8_t
 (* 
SëupSège
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
);

50 
uöt8_t
 (* 
SOF
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
);

51 
uöt8_t
 (* 
Re£t
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
);

52 
uöt8_t
 (* 
Su•íd
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
);

53 
uöt8_t
 (* 
Resume
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
);

54 
uöt8_t
 (* 
IsoINIncom∂ëe
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
);

55 
uöt8_t
 (* 
IsoOUTIncom∂ëe
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
);

57 
uöt8_t
 (* 
DevC⁄√˘ed
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
);

58 
uöt8_t
 (* 
DevDisc⁄√˘ed
Ë(
USB_OTG_CORE_HANDLE
 *
	mpdev
);

60 }
	tUSBD_DCD_INT_cb_Ty≥Def
;

62 
USBD_DCD_INT_cb_Ty≥Def
 *
USBD_DCD_INT_f›s
;

79 
	#CLEAR_IN_EP_INTR
(
ïnum
,
öå
) \

80 
dõpöt
.
d32
=0; \

81 
dõpöt
.
b
.
öå
 = 1; \

82 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[
ïnum
]->
DIEPINT
,
dõpöt
.
d32
);

	)

84 
	#CLEAR_OUT_EP_INTR
(
ïnum
,
öå
) \

85 
d€pöt
.
d32
=0; \

86 
d€pöt
.
b
.
öå
 = 1; \

87 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[
ïnum
]->
DOEPINT
,
d€pöt
.
d32
);

	)

104 
uöt32_t
 
USBD_OTG_ISR_H™dÀr
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

	@libstm/STM32_USB_OTG_Driver/inc/usb_defines.h

23 #i‚de‡
__USB_DEF_H__


24 
	#__USB_DEF_H__


	)

27 
	~"usb_c⁄f.h
"

51 
	#USB_OTG_SPEED_PARAM_HIGH
 0

	)

52 
	#USB_OTG_SPEED_PARAM_HIGH_IN_FULL
 1

	)

53 
	#USB_OTG_SPEED_PARAM_FULL
 3

	)

55 
	#USB_OTG_SPEED_HIGH
 0

	)

56 
	#USB_OTG_SPEED_FULL
 1

	)

58 
	#USB_OTG_ULPI_PHY
 1

	)

59 
	#USB_OTG_EMBEDDED_PHY
 2

	)

60 
	#USB_OTG_I2C_PHY
 3

	)

70 
	#GAHBCFG_TXFEMPTYLVL_EMPTY
 1

	)

71 
	#GAHBCFG_TXFEMPTYLVL_HALFEMPTY
 0

	)

72 
	#GAHBCFG_GLBINT_ENABLE
 1

	)

73 
	#GAHBCFG_INT_DMA_BURST_SINGLE
 0

	)

74 
	#GAHBCFG_INT_DMA_BURST_INCR
 1

	)

75 
	#GAHBCFG_INT_DMA_BURST_INCR4
 3

	)

76 
	#GAHBCFG_INT_DMA_BURST_INCR8
 5

	)

77 
	#GAHBCFG_INT_DMA_BURST_INCR16
 7

	)

78 
	#GAHBCFG_DMAENABLE
 1

	)

79 
	#GAHBCFG_TXFEMPTYLVL_EMPTY
 1

	)

80 
	#GAHBCFG_TXFEMPTYLVL_HALFEMPTY
 0

	)

81 
	#GRXSTS_PKTSTS_IN
 2

	)

82 
	#GRXSTS_PKTSTS_IN_XFER_COMP
 3

	)

83 
	#GRXSTS_PKTSTS_DATA_TOGGLE_ERR
 5

	)

84 
	#GRXSTS_PKTSTS_CH_HALTED
 7

	)

93 
	#MODE_HNP_SRP_CAPABLE
 0

	)

94 
	#MODE_SRP_ONLY_CAPABLE
 1

	)

95 
	#MODE_NO_HNP_SRP_CAPABLE
 2

	)

96 
	#MODE_SRP_CAPABLE_DEVICE
 3

	)

97 
	#MODE_NO_SRP_CAPABLE_DEVICE
 4

	)

98 
	#MODE_SRP_CAPABLE_HOST
 5

	)

99 
	#MODE_NO_SRP_CAPABLE_HOST
 6

	)

100 
	#A_HOST
 1

	)

101 
	#A_SUSPEND
 2

	)

102 
	#A_PERIPHERAL
 3

	)

103 
	#B_PERIPHERAL
 4

	)

104 
	#B_HOST
 5

	)

105 
	#DEVICE_MODE
 0

	)

106 
	#HOST_MODE
 1

	)

107 
	#OTG_MODE
 2

	)

116 
	#DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ
 0

	)

117 
	#DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
 1

	)

118 
	#DSTS_ENUMSPD_LS_PHY_6MHZ
 2

	)

119 
	#DSTS_ENUMSPD_FS_PHY_48MHZ
 3

	)

121 
	#DCFG_FRAME_INTERVAL_80
 0

	)

122 
	#DCFG_FRAME_INTERVAL_85
 1

	)

123 
	#DCFG_FRAME_INTERVAL_90
 2

	)

124 
	#DCFG_FRAME_INTERVAL_95
 3

	)

126 
	#DEP0CTL_MPS_64
 0

	)

127 
	#DEP0CTL_MPS_32
 1

	)

128 
	#DEP0CTL_MPS_16
 2

	)

129 
	#DEP0CTL_MPS_8
 3

	)

131 
	#EP_SPEED_LOW
 0

	)

132 
	#EP_SPEED_FULL
 1

	)

133 
	#EP_SPEED_HIGH
 2

	)

135 
	#EP_TYPE_CTRL
 0

	)

136 
	#EP_TYPE_ISOC
 1

	)

137 
	#EP_TYPE_BULK
 2

	)

138 
	#EP_TYPE_INTR
 3

	)

139 
	#EP_TYPE_MSK
 3

	)

141 
	#STS_GOUT_NAK
 1

	)

142 
	#STS_DATA_UPDT
 2

	)

143 
	#STS_XFER_COMP
 3

	)

144 
	#STS_SETUP_COMP
 4

	)

145 
	#STS_SETUP_UPDT
 6

	)

154 
	#HC_PID_DATA0
 0

	)

155 
	#HC_PID_DATA2
 1

	)

156 
	#HC_PID_DATA1
 2

	)

157 
	#HC_PID_SETUP
 3

	)

159 
	#HPRT0_PRTSPD_HIGH_SPEED
 0

	)

160 
	#HPRT0_PRTSPD_FULL_SPEED
 1

	)

161 
	#HPRT0_PRTSPD_LOW_SPEED
 2

	)

163 
	#HCFG_30_60_MHZ
 0

	)

164 
	#HCFG_48_MHZ
 1

	)

165 
	#HCFG_6_MHZ
 2

	)

167 
	#HCCHAR_CTRL
 0

	)

168 
	#HCCHAR_ISOC
 1

	)

169 
	#HCCHAR_BULK
 2

	)

170 
	#HCCHAR_INTR
 3

	)

172 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

185 
	mUSB_OTG_HS_CORE_ID
 = 0,

186 
	mUSB_OTG_FS_CORE_ID
 = 1

187 }
	tUSB_OTG_CORE_ID_Ty≥Def
;

218 
	#USB_OTG_READ_REG32
(
ªg
Ë(*(
__IO
 
uöt32_t
 *Ïeg)

	)

219 
	#USB_OTG_WRITE_REG32
(
ªg
,
vÆue
Ë(*(
__IO
 
uöt32_t
 *Ïeg = vÆue)

	)

220 
	#USB_OTG_MODIFY_REG32
(
ªg
,
˛ór_mask
,
£t_mask
) \

221 
	`USB_OTG_WRITE_REG32
(
ªg
, (((
	`USB_OTG_READ_REG32
‘eg)Ë& ~
˛ór_mask
Ë| 
£t_mask
 ) )

	)

226 
	eUSB_OTG_SPEED
 {

227 
	mUSB_SPEED_UNKNOWN
 = 0,

228 
	mUSB_SPEED_LOW
,

229 
	mUSB_SPEED_FULL
,

230 
	mUSB_SPEED_HIGH


	@libstm/STM32_USB_OTG_Driver/inc/usb_hcd.h

23 #i‚de‡
__USB_HCD_H__


24 
	#__USB_HCD_H__


	)

27 
	~"usb_ªgs.h
"

28 
	~"usb_c‹e.h
"

74 
uöt32_t
 
HCD_Inô
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

75 
USB_OTG_CORE_ID_Ty≥Def
 
c‹eID
);

76 
uöt32_t
 
HCD_HC_Inô
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

77 
uöt8_t
 
hc_num
);

78 
uöt32_t
 
HCD_SubmôReque°
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

79 
uöt8_t
 
hc_num
) ;

80 
uöt32_t
 
HCD_GëCuºítS≥ed
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

81 
uöt32_t
 
HCD_Re£tP‹t
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

82 
uöt32_t
 
HCD_IsDevi˚C⁄√˘ed
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

83 
uöt32_t
 
HCD_GëCuºítFøme
 (
USB_OTG_CORE_HANDLE
 *
pdev
) ;

84 
URB_STATE
 
HCD_GëURB_Sèã
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
ch_num
);

85 
uöt32_t
 
HCD_GëX„rC¡
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
ch_num
);

86 
HC_STATUS
 
HCD_GëHCSèã
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
ch_num
) ;

	@libstm/STM32_USB_OTG_Driver/inc/usb_hcd_int.h

23 #i‚de‡
__HCD_INT_H__


24 
	#__HCD_INT_H__


	)

28 
	~"usb_hcd.h
"

61 
	#CLEAR_HC_INT
(
HC_REGS
, 
öå
) \

63 
USB_OTG_HCINTn_Ty≥Def
 
hcöt_˛ór
; \

64 
hcöt_˛ór
.
d32
 = 0; \

65 
hcöt_˛ór
.
b
.
öå
 = 1; \

66 
	`USB_OTG_WRITE_REG32
(&((
HC_REGS
)->
HCINT
), 
hcöt_˛ór
.
d32
);\

68 

	)

69 
	#MASK_HOST_INT_CHH
(
hc_num
Ë{ 
USB_OTG_HCGINTMSK_Ty≥Def
 
GINTMSK
; \

70 
GINTMSK
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCGINTMSK
); \

71 
GINTMSK
.
b
.
chh…d
 = 0; \

72 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCGINTMSK
, 
GINTMSK
.
d32
);}

	)

74 
	#UNMASK_HOST_INT_CHH
(
hc_num
Ë{ 
USB_OTG_HCGINTMSK_Ty≥Def
 
GINTMSK
; \

75 
GINTMSK
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCGINTMSK
); \

76 
GINTMSK
.
b
.
chh…d
 = 1; \

77 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCGINTMSK
, 
GINTMSK
.
d32
);}

	)

79 
	#MASK_HOST_INT_ACK
(
hc_num
Ë{ 
USB_OTG_HCGINTMSK_Ty≥Def
 
GINTMSK
; \

80 
GINTMSK
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCGINTMSK
); \

81 
GINTMSK
.
b
.
ack
 = 0; \

82 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCGINTMSK
, 
GINTMSK
.
d32
);}

	)

84 
	#UNMASK_HOST_INT_ACK
(
hc_num
Ë{ 
USB_OTG_HCGINTMSK_Ty≥Def
 
GINTMSK
; \

85 
GINTMSK
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCGINTMSK
); \

86 
GINTMSK
.
b
.
ack
 = 1; \

87 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCGINTMSK
, 
GINTMSK
.
d32
);}

	)

104 
C⁄√˘CÆlback_H™dÀr
(
USB_OTG_CORE_HANDLE
 *
pdev
);

105 
Disc⁄√˘_CÆlback_H™dÀr
(
USB_OTG_CORE_HANDLE
 *
pdev
);

106 
Ovîcuºít_CÆlback_H™dÀr
(
USB_OTG_CORE_HANDLE
 *
pdev
);

107 
uöt32_t
 
USBH_OTG_ISR_H™dÀr
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

	@libstm/STM32_USB_OTG_Driver/inc/usb_otg.h

23 #i‚de‡
__USB_OTG__


24 
	#__USB_OTG__


	)

42 
USB_OTG_InôüãSRP
();

43 
USB_OTG_InôüãHNP
(
uöt8_t
 
°©e
 , uöt8_à
mode
);

44 
USB_OTG_Swôchback
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

45 
uöt32_t
 
USB_OTG_GëCuºítSèã
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

47 
uöt32_t
 
STM32_USBO_OTG_ISR_H™dÀr
(
USB_OTG_CORE_HANDLE
 *
pdev
);

	@libstm/STM32_USB_OTG_Driver/inc/usb_regs.h

23 #i‚de‡
__USB_OTG_REGS_H__


24 
	#__USB_OTG_REGS_H__


	)

27 
	~"usb_c⁄f.h
"

44 
	#USB_OTG_HS_BASE_ADDR
 0x40040000

	)

45 
	#USB_OTG_FS_BASE_ADDR
 0x50000000

	)

47 
	#USB_OTG_CORE_GLOBAL_REGS_OFFSET
 0x000

	)

48 
	#USB_OTG_DEV_GLOBAL_REG_OFFSET
 0x800

	)

49 
	#USB_OTG_DEV_IN_EP_REG_OFFSET
 0x900

	)

50 
	#USB_OTG_EP_REG_OFFSET
 0x20

	)

51 
	#USB_OTG_DEV_OUT_EP_REG_OFFSET
 0xB00

	)

52 
	#USB_OTG_HOST_GLOBAL_REG_OFFSET
 0x400

	)

53 
	#USB_OTG_HOST_PORT_REGS_OFFSET
 0x440

	)

54 
	#USB_OTG_HOST_CHAN_REGS_OFFSET
 0x500

	)

55 
	#USB_OTG_CHAN_REGS_OFFSET
 0x20

	)

56 
	#USB_OTG_PCGCCTL_OFFSET
 0xE00

	)

57 
	#USB_OTG_DATA_FIFO_OFFSET
 0x1000

	)

58 
	#USB_OTG_DATA_FIFO_SIZE
 0x1000

	)

61 
	#USB_OTG_MAX_TX_FIFOS
 15

	)

63 
	#USB_OTG_HS_MAX_PACKET_SIZE
 512

	)

64 
	#USB_OTG_FS_MAX_PACKET_SIZE
 64

	)

65 
	#USB_OTG_MAX_EP0_SIZE
 64

	)

77 
	s_USB_OTG_GREGS


79 
__IO
 
uöt32_t
 
	mGOTGCTL
;

80 
__IO
 
uöt32_t
 
	mGOTGINT
;

81 
__IO
 
uöt32_t
 
	mGAHBCFG
;

82 
__IO
 
uöt32_t
 
	mGUSBCFG
;

83 
__IO
 
uöt32_t
 
	mGRSTCTL
;

84 
__IO
 
uöt32_t
 
	mGINTSTS
;

85 
__IO
 
uöt32_t
 
	mGINTMSK
;

86 
__IO
 
uöt32_t
 
	mGRXSTSR
;

87 
__IO
 
uöt32_t
 
	mGRXSTSP
;

88 
__IO
 
uöt32_t
 
	mGRXFSIZ
;

89 
__IO
 
uöt32_t
 
	mDIEPTXF0_HNPTXFSIZ
;

90 
__IO
 
uöt32_t
 
	mHNPTXSTS
;

91 
__IO
 
uöt32_t
 
	mGI2CCTL
;

92 
uöt32_t
 
	mRe£rved34
;

93 
__IO
 
uöt32_t
 
	mGCCFG
;

94 
__IO
 
uöt32_t
 
	mCID
;

95 
uöt32_t
 
	mRe£rved40
[48];

96 
__IO
 
uöt32_t
 
	mHPTXFSIZ
;

97 
__IO
 
uöt32_t
 
	mDIEPTXF
[
USB_OTG_MAX_TX_FIFOS
];

99 
	tUSB_OTG_GREGS
;

108 
	s_USB_OTG_DREGS


110 
__IO
 
uöt32_t
 
	mDCFG
;

111 
__IO
 
uöt32_t
 
	mDCTL
;

112 
__IO
 
uöt32_t
 
	mDSTS
;

113 
uöt32_t
 
	mRe£rved0C
;

114 
__IO
 
uöt32_t
 
	mDIEPMSK
;

115 
__IO
 
uöt32_t
 
	mDOEPMSK
;

116 
__IO
 
uöt32_t
 
	mDAINT
;

117 
__IO
 
uöt32_t
 
	mDAINTMSK
;

118 
uöt32_t
 
	mRe£rved20
;

119 
uöt32_t
 
	mRe£rved9
;

120 
__IO
 
uöt32_t
 
	mDVBUSDIS
;

121 
__IO
 
uöt32_t
 
	mDVBUSPULSE
;

122 
__IO
 
uöt32_t
 
	mDTHRCTL
;

123 
__IO
 
uöt32_t
 
	mDIEPEMPMSK
;

124 
__IO
 
uöt32_t
 
	mDEACHINT
;

125 
__IO
 
uöt32_t
 
	mDEACHMSK
;

126 
uöt32_t
 
	mRe£rved40
;

127 
__IO
 
uöt32_t
 
	mDINEP1MSK
;

128 
uöt32_t
 
	mRe£rved44
[15];

129 
__IO
 
uöt32_t
 
	mDOUTEP1MSK
;

131 
	tUSB_OTG_DREGS
;

140 
	s_USB_OTG_INEPREGS


142 
__IO
 
uöt32_t
 
	mDIEPCTL
;

143 
uöt32_t
 
	mRe£rved04
;

144 
__IO
 
uöt32_t
 
	mDIEPINT
;

145 
uöt32_t
 
	mRe£rved0C
;

146 
__IO
 
uöt32_t
 
	mDIEPTSIZ
;

147 
__IO
 
uöt32_t
 
	mDIEPDMA
;

148 
__IO
 
uöt32_t
 
	mDTXFSTS
;

149 
uöt32_t
 
	mRe£rved18
;

151 
	tUSB_OTG_INEPREGS
;

160 
	s_USB_OTG_OUTEPREGS


162 
__IO
 
uöt32_t
 
	mDOEPCTL
;

163 
__IO
 
uöt32_t
 
	mDOUTEPFRM
;

164 
__IO
 
uöt32_t
 
	mDOEPINT
;

165 
uöt32_t
 
	mRe£rved0C
;

166 
__IO
 
uöt32_t
 
	mDOEPTSIZ
;

167 
__IO
 
uöt32_t
 
	mDOEPDMA
;

168 
uöt32_t
 
	mRe£rved18
[2];

170 
	tUSB_OTG_OUTEPREGS
;

179 
	s_USB_OTG_HREGS


181 
__IO
 
uöt32_t
 
	mHCFG
;

182 
__IO
 
uöt32_t
 
	mHFIR
;

183 
__IO
 
uöt32_t
 
	mHFNUM
;

184 
uöt32_t
 
	mRe£rved40C
;

185 
__IO
 
uöt32_t
 
	mHPTXSTS
;

186 
__IO
 
uöt32_t
 
	mHAINT
;

187 
__IO
 
uöt32_t
 
	mHAINTMSK
;

189 
	tUSB_OTG_HREGS
;

198 
	s_USB_OTG_HC_REGS


200 
__IO
 
uöt32_t
 
	mHCCHAR
;

201 
__IO
 
uöt32_t
 
	mHCSPLT
;

202 
__IO
 
uöt32_t
 
	mHCINT
;

203 
__IO
 
uöt32_t
 
	mHCGINTMSK
;

204 
__IO
 
uöt32_t
 
	mHCTSIZ
;

205 
__IO
 
uöt32_t
 
	mHCDMA
;

206 
uöt32_t
 
	mRe£rved
[2];

208 
	tUSB_OTG_HC_REGS
;

217 
	sUSB_OTG_c‹e_ªgs


219 
USB_OTG_GREGS
 *
	mGREGS
;

220 
USB_OTG_DREGS
 *
	mDREGS
;

221 
USB_OTG_HREGS
 *
	mHREGS
;

222 
USB_OTG_INEPREGS
 *
	mINEP_REGS
[
USB_OTG_MAX_TX_FIFOS
];

223 
USB_OTG_OUTEPREGS
 *
	mOUTEP_REGS
[
USB_OTG_MAX_TX_FIFOS
];

224 
USB_OTG_HC_REGS
 *
	mHC_REGS
[
USB_OTG_MAX_TX_FIFOS
];

225 
__IO
 
uöt32_t
 *
	mHPRT0
;

226 
__IO
 
uöt32_t
 *
	mDFIFO
[
USB_OTG_MAX_TX_FIFOS
];

227 
__IO
 
uöt32_t
 *
	mPCGCCTL
;

229 
	tUSB_OTG_CORE_REGS
 , *
	tPUSB_OTG_CORE_REGS
;

230 
	u_USB_OTG_OTGCTL_Ty≥Def


232 
uöt32_t
 
	md32
;

235 
uöt32_t
 
	m£§eqscs
 :

237 
uöt32_t
 
	m£§eq
 :

239 
uöt32_t
 
	mRe£rved2_7
 :

241 
uöt32_t
 
	mh°√gscs
 :

243 
uöt32_t
 
	mh≈ªq
 :

245 
uöt32_t
 
	mh°£th≈í
 :

247 
uöt32_t
 
	mdevh≈í
 :

249 
uöt32_t
 
	mRe£rved12_15
 :

251 
uöt32_t
 
	mc⁄id°s
 :

253 
uöt32_t
 
	mRe£rved17
 :

255 
uöt32_t
 
	ma£svld
 :

257 
uöt32_t
 
	mb£svld
 :

259 
uöt32_t
 
	mcuºmod
 :

261 
uöt32_t
 
	mRe£rved21_31
 :

264 
	mb
;

265 } 
	tUSB_OTG_OTGCTL_Ty≥Def
 ;

266 
	u_USB_OTG_GOTGINT_Ty≥Def


268 
uöt32_t
 
	md32
;

271 
uöt32_t
 
	mRe£rved0_1
 :

273 
uöt32_t
 
	m££nddë
 :

275 
uöt32_t
 
	mRe£rved3_7
 :

277 
uöt32_t
 
	m£§eqsuc°schng
 :

279 
uöt32_t
 
	mh°√gsuc°schng
 :

281 
uöt32_t
 
	mª£rvî10_16
 :

283 
uöt32_t
 
	mh°√gdë
 :

285 
uöt32_t
 
	madevtoutchng
 :

287 
uöt32_t
 
	mdebd⁄e
 :

289 
uöt32_t
 
	mRe£rved31_20
 :

292 
	mb
;

293 } 
	tUSB_OTG_GOTGINT_Ty≥Def
 ;

294 
	u_USB_OTG_GAHBCFG_Ty≥Def


296 
uöt32_t
 
	md32
;

299 
uöt32_t
 
	mglblöåmsk
 :

301 
uöt32_t
 
	mhbur°Àn
 :

303 
uöt32_t
 
	mdm´«bÀ
 :

305 
uöt32_t
 
	mRe£rved
 :

307 
uöt32_t
 
	m≈tx„m∂vl_tx„m∂vl
 :

309 
uöt32_t
 
	m±x„m∂vl
 :

311 
uöt32_t
 
	mRe£rved9_31
 :

314 
	mb
;

315 } 
	tUSB_OTG_GAHBCFG_Ty≥Def
 ;

316 
	u_USB_OTG_GUSBCFG_Ty≥Def


318 
uöt32_t
 
	md32
;

321 
uöt32_t
 
	mtoutˇl
 :

323 
uöt32_t
 
	mphyif
 :

325 
uöt32_t
 
	muÕi_utmi_£l
 :

327 
uöt32_t
 
	mfsötf
 :

329 
uöt32_t
 
	mphy£l
 :

331 
uöt32_t
 
	mddr£l
 :

333 
uöt32_t
 
	m§pˇp
 :

335 
uöt32_t
 
	mh≈ˇp
 :

337 
uöt32_t
 
	musbådtim
 :

339 
uöt32_t
 
	m≈tx‰wndí
 :

341 
uöt32_t
 
	mphyÕwr˛k£l
 :

343 
uöt32_t
 
	mŸgutmifs£l
 :

345 
uöt32_t
 
	muÕi_f¶s
 :

347 
uöt32_t
 
	muÕi_auto_ªs
 :

349 
uöt32_t
 
	muÕi_˛k_sus_m
 :

351 
uöt32_t
 
	muÕi_ext_vbus_drv
 :

353 
uöt32_t
 
	muÕi_öt_vbus_ödiˇt‹
 :

355 
uöt32_t
 
	mãrm_£l_dl_pul£
 :

357 
uöt32_t
 
	mRe£rved
 :

359 
uöt32_t
 
	mf‹˚_ho°
 :

361 
uöt32_t
 
	mf‹˚_dev
 :

363 
uöt32_t
 
	mc‹ru±_tx
 :

366 
	mb
;

367 } 
	tUSB_OTG_GUSBCFG_Ty≥Def
 ;

368 
	u_USB_OTG_GRSTCTL_Ty≥Def


370 
uöt32_t
 
	md32
;

373 
uöt32_t
 
	mcs·r°
 :

375 
uöt32_t
 
	mhs·r°
 :

377 
uöt32_t
 
	mh°‰m
 :

379 
uöt32_t
 
	mötknqÊsh
 :

381 
uöt32_t
 
	mrxfÊsh
 :

383 
uöt32_t
 
	mtxfÊsh
 :

385 
uöt32_t
 
	mtx‚um
 :

387 
uöt32_t
 
	mRe£rved11_29
 :

389 
uöt32_t
 
	mdm¨eq
 :

391 
uöt32_t
 
	mahbidÀ
 :

394 
	mb
;

395 } 
	tUSB_OTG_GRSTCTL_Ty≥Def
 ;

396 
	u_USB_OTG_GINTMSK_Ty≥Def


398 
uöt32_t
 
	md32
;

401 
uöt32_t
 
	mRe£rved0
 :

403 
uöt32_t
 
	mmodemism©ch
 :

405 
uöt32_t
 
	mŸgöå
 :

407 
uöt32_t
 
	msoföå
 :

409 
uöt32_t
 
	mrx°sqlvl
 :

411 
uöt32_t
 
	m≈tx„m±y
 :

413 
uöt32_t
 
	mgö«keff
 :

415 
uöt32_t
 
	mgouäakeff
 :

417 
uöt32_t
 
	mRe£rved8
 :

419 
uöt32_t
 
	mi2cöå
 :

421 
uöt32_t
 
	mîlysu•íd
 :

423 
uöt32_t
 
	musbsu•íd
 :

425 
uöt32_t
 
	musbª£t
 :

427 
uöt32_t
 
	míumd⁄e
 :

429 
uöt32_t
 
	misooutdr›
 :

431 
uöt32_t
 
	me›‰ame
 :

433 
uöt32_t
 
	mRe£rved16
 :

435 
uöt32_t
 
	mïmism©ch
 :

437 
uöt32_t
 
	möïöå
 :

439 
uöt32_t
 
	mouãpöå
 :

441 
uöt32_t
 
	möcom∂isoö
 :

443 
uöt32_t
 
	möcom∂isoout
 :

445 
uöt32_t
 
	mRe£rved22_23
 :

447 
uöt32_t
 
	mp‹töå
 :

449 
uöt32_t
 
	mhcöå
 :

451 
uöt32_t
 
	m±x„m±y
 :

453 
uöt32_t
 
	mRe£rved27
 :

455 
uöt32_t
 
	mc⁄id°schng
 :

457 
uöt32_t
 
	mdisc⁄√˘
 :

459 
uöt32_t
 
	m£s§eqöå
 :

461 
uöt32_t
 
	mwkupöå
 :

464 
	mb
;

465 } 
	tUSB_OTG_GINTMSK_Ty≥Def
 ;

466 
	u_USB_OTG_GINTSTS_Ty≥Def


468 
uöt32_t
 
	md32
;

471 
uöt32_t
 
	mcurmode
 :

473 
uöt32_t
 
	mmodemism©ch
 :

475 
uöt32_t
 
	mŸgöå
 :

477 
uöt32_t
 
	msoföå
 :

479 
uöt32_t
 
	mrx°sqlvl
 :

481 
uöt32_t
 
	m≈tx„m±y
 :

483 
uöt32_t
 
	mgö«keff
 :

485 
uöt32_t
 
	mgouäakeff
 :

487 
uöt32_t
 
	mRe£rved8
 :

489 
uöt32_t
 
	mi2cöå
 :

491 
uöt32_t
 
	mîlysu•íd
 :

493 
uöt32_t
 
	musbsu•íd
 :

495 
uöt32_t
 
	musbª£t
 :

497 
uöt32_t
 
	míumd⁄e
 :

499 
uöt32_t
 
	misooutdr›
 :

501 
uöt32_t
 
	me›‰ame
 :

503 
uöt32_t
 
	mötimîrx
 :

505 
uöt32_t
 
	mïmism©ch
 :

507 
uöt32_t
 
	möïöt
:

509 
uöt32_t
 
	mouãpöå
 :

511 
uöt32_t
 
	möcom∂isoö
 :

513 
uöt32_t
 
	möcom∂isoout
 :

515 
uöt32_t
 
	mRe£rved22_23
 :

517 
uöt32_t
 
	mp‹töå
 :

519 
uöt32_t
 
	mhcöå
 :

521 
uöt32_t
 
	m±x„m±y
 :

523 
uöt32_t
 
	mRe£rved27
 :

525 
uöt32_t
 
	mc⁄id°schng
 :

527 
uöt32_t
 
	mdisc⁄√˘
 :

529 
uöt32_t
 
	m£s§eqöå
 :

531 
uöt32_t
 
	mwkupöå
 :

534 
	mb
;

535 } 
	tUSB_OTG_GINTSTS_Ty≥Def
 ;

536 
	u_USB_OTG_DRXSTS_Ty≥Def


538 
uöt32_t
 
	md32
;

541 
uöt32_t
 
	mïnum
 :

543 
uöt32_t
 
	mb˙t
 :

545 
uöt32_t
 
	mdpid
 :

547 
uöt32_t
 
	mpkt°s
 :

549 
uöt32_t
 
	m‚
 :

551 
uöt32_t
 
	mRe£rved
 :

554 
	mb
;

555 } 
	tUSB_OTG_DRXSTS_Ty≥Def
 ;

556 
	u_USB_OTG_GRXSTS_Ty≥Def


558 
uöt32_t
 
	md32
;

561 
uöt32_t
 
	mchnum
 :

563 
uöt32_t
 
	mb˙t
 :

565 
uöt32_t
 
	mdpid
 :

567 
uöt32_t
 
	mpkt°s
 :

569 
uöt32_t
 
	mRe£rved
 :

572 
	mb
;

573 } 
	tUSB_OTG_GRXFSTS_Ty≥Def
 ;

574 
	u_USB_OTG_FSIZ_Ty≥Def


576 
uöt32_t
 
	md32
;

579 
uöt32_t
 
	m°¨èddr
 :

581 
uöt32_t
 
	mdïth
 :

584 
	mb
;

585 } 
	tUSB_OTG_FSIZ_Ty≥Def
 ;

586 
	u_USB_OTG_HNPTXSTS_Ty≥Def


588 
uöt32_t
 
	md32
;

591 
uöt32_t
 
	m≈txf•ˇvaû
 :

593 
uöt32_t
 
	m≈txq•ˇvaû
 :

595 
uöt32_t
 
	m≈txqt›_ãrmö©e
 :

597 
uöt32_t
 
	m≈txqt›_timî
 :

599 
uöt32_t
 
	m≈txqt›
 :

601 
uöt32_t
 
	mchnum
 :

603 
uöt32_t
 
	mRe£rved
 :

606 
	mb
;

607 } 
	tUSB_OTG_HNPTXSTS_Ty≥Def
 ;

608 
	u_USB_OTG_DTXFSTSn_Ty≥Def


610 
uöt32_t
 
	md32
;

613 
uöt32_t
 
	mtxf•ˇvaû
 :

615 
uöt32_t
 
	mRe£rved
 :

618 
	mb
;

619 } 
	tUSB_OTG_DTXFSTSn_Ty≥Def
 ;

620 
	u_USB_OTG_GI2CCTL_Ty≥Def


622 
uöt32_t
 
	md32
;

625 
uöt32_t
 
	mrwd©a
 :

627 
uöt32_t
 
	mªgaddr
 :

629 
uöt32_t
 
	maddr
 :

631 
uöt32_t
 
	mi2˚n
 :

633 
uöt32_t
 
	mack
 :

635 
uöt32_t
 
	mi2csu•˘l
 :

637 
uöt32_t
 
	mi2cdevaddr
 :

639 
uöt32_t
 
	md©_£0
:

641 
uöt32_t
 
	mRe£rved
 :

643 
uöt32_t
 
	mrw
 :

645 
uöt32_t
 
	mbsyd√
 :

648 
	mb
;

649 } 
	tUSB_OTG_GI2CCTL_Ty≥Def
 ;

650 
	u_USB_OTG_GCCFG_Ty≥Def


652 
uöt32_t
 
	md32
;

655 
uöt32_t
 
	mRe£rved_ö
 :

657 
uöt32_t
 
	mpwdn
 :

659 
uöt32_t
 
	mi2ci„n
 :

661 
uöt32_t
 
	mvbus£nsögA
 :

663 
uöt32_t
 
	mvbus£nsögB
 :

665 
uöt32_t
 
	msofouãn
 :

667 
uöt32_t
 
	mdißbÀvbus£nsög
 :

669 
uöt32_t
 
	mRe£rved_out
 :

672 
	mb
;

673 } 
	tUSB_OTG_GCCFG_Ty≥Def
 ;

675 
	u_USB_OTG_DCFG_Ty≥Def


677 
uöt32_t
 
	md32
;

680 
uöt32_t
 
	mdev•d
 :

682 
uöt32_t
 
	mnz°southshk
 :

684 
uöt32_t
 
	mRe£rved3
 :

686 
uöt32_t
 
	mdevaddr
 :

688 
uöt32_t
 
	m≥r‰öt
 :

690 
uöt32_t
 
	mRe£rved13_17
 :

692 
uöt32_t
 
	mïms˙t
 :

695 
	mb
;

696 } 
	tUSB_OTG_DCFG_Ty≥Def
 ;

697 
	u_USB_OTG_DCTL_Ty≥Def


699 
uöt32_t
 
	md32
;

702 
uöt32_t
 
	mrmtwkupsig
 :

704 
uöt32_t
 
	ms·disc⁄
 :

706 
uöt32_t
 
	mg≈ö«k°s
 :

708 
uöt32_t
 
	mgouäak°s
 :

710 
uöt32_t
 
	mt°˘l
 :

712 
uöt32_t
 
	msg≈ö«k
 :

714 
uöt32_t
 
	mcg≈ö«k
 :

716 
uöt32_t
 
	msgouäak
 :

718 
uöt32_t
 
	mcgouäak
 :

720 
uöt32_t
 
	mRe£rved
 :

723 
	mb
;

724 } 
	tUSB_OTG_DCTL_Ty≥Def
 ;

725 
	u_USB_OTG_DSTS_Ty≥Def


727 
uöt32_t
 
	md32
;

730 
uöt32_t
 
	msu•°s
 :

732 
uöt32_t
 
	míum•d
 :

734 
uöt32_t
 
	mîπi˚º
 :

736 
uöt32_t
 
	mRe£rved4_7
:

738 
uöt32_t
 
	msof‚
 :

740 
uöt32_t
 
	mRe£rved22_31
 :

743 
	mb
;

744 } 
	tUSB_OTG_DSTS_Ty≥Def
 ;

745 
	u_USB_OTG_DIEPINTn_Ty≥Def


747 
uöt32_t
 
	md32
;

750 
uöt32_t
 
	mx„rcom∂
 :

752 
uöt32_t
 
	mïdißbÀd
 :

754 
uöt32_t
 
	mahbîr
 :

756 
uöt32_t
 
	mtimeout
 :

758 
uöt32_t
 
	mötktx„mp
 :

760 
uöt32_t
 
	mötk√pmis
 :

762 
uöt32_t
 
	möï«keff
 :

764 
uöt32_t
 
	mem±yöå
 :

766 
uöt32_t
 
	mtxfifound∫
 :

768 
uöt32_t
 
	mRe£rved08_31
 :

771 
	mb
;

772 } 
	tUSB_OTG_DIEPINTn_Ty≥Def
 ;

773 
_USB_OTG_DIEPINTn_Ty≥Def
 
	tUSB_OTG_DIEPMSK_Ty≥Def
 ;

774 
	u_USB_OTG_DOEPINTn_Ty≥Def


776 
uöt32_t
 
	md32
;

779 
uöt32_t
 
	mx„rcom∂
 :

781 
uöt32_t
 
	mïdißbÀd
 :

783 
uöt32_t
 
	mahbîr
 :

785 
uöt32_t
 
	m£tup
 :

787 
uöt32_t
 
	mRe£rved04_31
 :

790 
	mb
;

791 } 
	tUSB_OTG_DOEPINTn_Ty≥Def
 ;

792 
_USB_OTG_DOEPINTn_Ty≥Def
 
	tUSB_OTG_DOEPMSK_Ty≥Def
 ;

794 
	u_USB_OTG_DAINT_Ty≥Def


796 
uöt32_t
 
	md32
;

799 
uöt32_t
 
	mö
 :

801 
uöt32_t
 
	mout
 :

804 
	mï
;

805 } 
	tUSB_OTG_DAINT_Ty≥Def
 ;

807 
	u_USB_OTG_DTHRCTL_Ty≥Def


809 
uöt32_t
 
	md32
;

812 
uöt32_t
 
	mn⁄_iso_thr_í
 :

814 
uöt32_t
 
	miso_thr_í
 :

816 
uöt32_t
 
	mtx_thr_Àn
 :

818 
uöt32_t
 
	mRe£rved11_15
 :

820 
uöt32_t
 
	mrx_thr_í
 :

822 
uöt32_t
 
	mrx_thr_Àn
 :

824 
uöt32_t
 
	mRe£rved26_31
 :

827 
	mb
;

828 } 
	tUSB_OTG_DTHRCTL_Ty≥Def
 ;

829 
	u_USB_OTG_DEPCTL_Ty≥Def


831 
uöt32_t
 
	md32
;

834 
uöt32_t
 
	mmps
 :

836 
uöt32_t
 
	mª£rved
 :

838 
uöt32_t
 
	musba˘ï
 :

840 
uöt32_t
 
	mdpid
 :

842 
uöt32_t
 
	m«k°s
 :

844 
uöt32_t
 
	mïty≥
 :

846 
uöt32_t
 
	m¢p
 :

848 
uöt32_t
 
	m°Æl
 :

850 
uöt32_t
 
	mtx‚um
 :

852 
uöt32_t
 
	m˙ak
 :

854 
uöt32_t
 
	m¢ak
 :

856 
uöt32_t
 
	m£td0pid
 :

858 
uöt32_t
 
	m£td1pid
 :

860 
uöt32_t
 
	mïdis
 :

862 
uöt32_t
 
	mïía
 :

865 
	mb
;

866 } 
	tUSB_OTG_DEPCTL_Ty≥Def
 ;

867 
	u_USB_OTG_DEPXFRSIZ_Ty≥Def


869 
uöt32_t
 
	md32
;

872 
uöt32_t
 
	mx„rsize
 :

874 
uöt32_t
 
	mpkt˙t
 :

876 
uöt32_t
 
	mmc
 :

878 
uöt32_t
 
	mRe£rved
 :

881 
	mb
;

882 } 
	tUSB_OTG_DEPXFRSIZ_Ty≥Def
 ;

883 
	u_USB_OTG_DEP0XFRSIZ_Ty≥Def


885 
uöt32_t
 
	md32
;

888 
uöt32_t
 
	mx„rsize
 :

890 
uöt32_t
 
	mRe£rved7_18
 :

892 
uöt32_t
 
	mpkt˙t
 :

894 
uöt32_t
 
	mRe£rved20_28
 :

896 
uöt32_t
 
	msup˙t
 :

898 
uöt32_t
 
	mRe£rved31
;

900 
	mb
;

901 } 
	tUSB_OTG_DEP0XFRSIZ_Ty≥Def
 ;

902 
	u_USB_OTG_HCFG_Ty≥Def


904 
uöt32_t
 
	md32
;

907 
uöt32_t
 
	mf¶•˛k£l
 :

909 
uöt32_t
 
	mf¶ssuµ
 :

912 
	mb
;

913 } 
	tUSB_OTG_HCFG_Ty≥Def
 ;

914 
	u_USB_OTG_HFRMINTRVL_Ty≥Def


916 
uöt32_t
 
	md32
;

919 
uöt32_t
 
	m‰öt
 :

921 
uöt32_t
 
	mRe£rved
 :

924 
	mb
;

925 } 
	tUSB_OTG_HFRMINTRVL_Ty≥Def
 ;

927 
	u_USB_OTG_HFNUM_Ty≥Def


929 
uöt32_t
 
	md32
;

932 
uöt32_t
 
	m‰num
 :

934 
uöt32_t
 
	m‰ªm
 :

937 
	mb
;

938 } 
	tUSB_OTG_HFNUM_Ty≥Def
 ;

939 
	u_USB_OTG_HPTXSTS_Ty≥Def


941 
uöt32_t
 
	md32
;

944 
uöt32_t
 
	m±xf•ˇvaû
 :

946 
uöt32_t
 
	m±xq•ˇvaû
 :

948 
uöt32_t
 
	m±xqt›_ãrmö©e
 :

950 
uöt32_t
 
	m±xqt›_timî
 :

952 
uöt32_t
 
	m±xqt›
 :

954 
uöt32_t
 
	mchnum
 :

956 
uöt32_t
 
	m±xqt›_odd
 :

959 
	mb
;

960 } 
	tUSB_OTG_HPTXSTS_Ty≥Def
 ;

961 
	u_USB_OTG_HPRT0_Ty≥Def


963 
uöt32_t
 
	md32
;

966 
uöt32_t
 
	m¥tc⁄n°s
 :

968 
uöt32_t
 
	m¥tc⁄ndë
 :

970 
uöt32_t
 
	m¥ã«
 :

972 
uöt32_t
 
	m¥ãnchng
 :

974 
uöt32_t
 
	m¥tovrcuºa˘
 :

976 
uöt32_t
 
	m¥tovrcuºchng
 :

978 
uöt32_t
 
	m¥åes
 :

980 
uöt32_t
 
	m¥tsu•
 :

982 
uöt32_t
 
	m¥å°
 :

984 
uöt32_t
 
	mRe£rved9
 :

986 
uöt32_t
 
	m¥én°s
 :

988 
uöt32_t
 
	m¥çwr
 :

990 
uöt32_t
 
	m¥â°˘l
 :

992 
uöt32_t
 
	m¥t•d
 :

994 
uöt32_t
 
	mRe£rved19_31
 :

997 
	mb
;

998 } 
	tUSB_OTG_HPRT0_Ty≥Def
 ;

999 
	u_USB_OTG_HAINT_Ty≥Def


1001 
uöt32_t
 
	md32
;

1004 
uöt32_t
 
	mchöt
 :

1006 
uöt32_t
 
	mRe£rved
 :

1009 
	mb
;

1010 } 
	tUSB_OTG_HAINT_Ty≥Def
 ;

1011 
	u_USB_OTG_HAINTMSK_Ty≥Def


1013 
uöt32_t
 
	md32
;

1016 
uöt32_t
 
	mchöt
 :

1018 
uöt32_t
 
	mRe£rved
 :

1021 
	mb
;

1022 } 
	tUSB_OTG_HAINTMSK_Ty≥Def
 ;

1023 
	u_USB_OTG_HCCHAR_Ty≥Def


1025 
uöt32_t
 
	md32
;

1028 
uöt32_t
 
	mmps
 :

1030 
uöt32_t
 
	mïnum
 :

1032 
uöt32_t
 
	mïdú
 :

1034 
uöt32_t
 
	mRe£rved
 :

1036 
uöt32_t
 
	ml•ddev
 :

1038 
uöt32_t
 
	mïty≥
 :

1040 
uöt32_t
 
	mmu…i˙t
 :

1042 
uöt32_t
 
	mdevaddr
 :

1044 
uöt32_t
 
	modd‰m
 :

1046 
uöt32_t
 
	mchdis
 :

1048 
uöt32_t
 
	mchí
 :

1051 
	mb
;

1052 } 
	tUSB_OTG_HCCHAR_Ty≥Def
 ;

1053 
	u_USB_OTG_HCSPLT_Ty≥Def


1055 
uöt32_t
 
	md32
;

1058 
uöt32_t
 
	m¥èddr
 :

1060 
uöt32_t
 
	mhubaddr
 :

1062 
uöt32_t
 
	mxa˘pos
 :

1064 
uöt32_t
 
	mcomp•…
 :

1066 
uöt32_t
 
	mRe£rved
 :

1068 
uöt32_t
 
	m•…ía
 :

1071 
	mb
;

1072 } 
	tUSB_OTG_HCSPLT_Ty≥Def
 ;

1073 
	u_USB_OTG_HCINTn_Ty≥Def


1075 
uöt32_t
 
	md32
;

1078 
uöt32_t
 
	mx„rcom∂
 :

1080 
uöt32_t
 
	mchh…d
 :

1082 
uöt32_t
 
	mahbîr
 :

1084 
uöt32_t
 
	m°Æl
 :

1086 
uöt32_t
 
	m«k
 :

1088 
uöt32_t
 
	mack
 :

1090 
uöt32_t
 
	mnyë
 :

1092 
uöt32_t
 
	mxa˘îr
 :

1094 
uöt32_t
 
	mbbÀº
 :

1096 
uöt32_t
 
	m‰movrun
 :

1098 
uöt32_t
 
	md©©gÀº
 :

1100 
uöt32_t
 
	mRe£rved
 :

1103 
	mb
;

1104 } 
	tUSB_OTG_HCINTn_Ty≥Def
 ;

1105 
	u_USB_OTG_HCTSIZn_Ty≥Def


1107 
uöt32_t
 
	md32
;

1110 
uöt32_t
 
	mx„rsize
 :

1112 
uöt32_t
 
	mpkt˙t
 :

1114 
uöt32_t
 
	mpid
 :

1116 
uöt32_t
 
	md›ng
 :

1119 
	mb
;

1120 } 
	tUSB_OTG_HCTSIZn_Ty≥Def
 ;

1121 
	u_USB_OTG_HCGINTMSK_Ty≥Def


1123 
uöt32_t
 
	md32
;

1126 
uöt32_t
 
	mx„rcom∂
 :

1128 
uöt32_t
 
	mchh…d
 :

1130 
uöt32_t
 
	mahbîr
 :

1132 
uöt32_t
 
	m°Æl
 :

1134 
uöt32_t
 
	m«k
 :

1136 
uöt32_t
 
	mack
 :

1138 
uöt32_t
 
	mnyë
 :

1140 
uöt32_t
 
	mxa˘îr
 :

1142 
uöt32_t
 
	mbbÀº
 :

1144 
uöt32_t
 
	m‰movrun
 :

1146 
uöt32_t
 
	md©©gÀº
 :

1148 
uöt32_t
 
	mRe£rved
 :

1151 
	mb
;

1152 } 
	tUSB_OTG_HCGINTMSK_Ty≥Def
 ;

1153 
	u_USB_OTG_PCGCCTL_Ty≥Def


1155 
uöt32_t
 
	md32
;

1158 
uöt32_t
 
	m°›p˛k
 :

1160 
uöt32_t
 
	mg©eh˛k
 :

1162 
uöt32_t
 
	mRe£rved
 :

1165 
	mb
;

1166 } 
	tUSB_OTG_PCGCCTL_Ty≥Def
 ;

	@libstm/STM32_USB_OTG_Driver/src/usb_bsp_template.c

24 
	~"usb_b•.h
"

88 
	$USB_OTG_BSP_Inô
()

91 
	}
}

98 
	$USB_OTG_BSP_E«bÀI¡îru±
()

101 
	}
}

111 
	$USB_OTG_BSP_DriveVBUS
(
uöt32_t
 
•ìd
, 
uöt8_t
 
°©e
)

114 
	}
}

123 
	$USB_OTG_BSP_C⁄figVBUS
(
uöt32_t
 
•ìd
)

126 
	}
}

134 
	$USB_OTG_BSP_TimeInô
 ( )

137 
	}
}

145 
	$USB_OTG_BSP_uDñay
 (c⁄° 
uöt32_t
 
u£c
)

148 
uöt32_t
 
cou¡
 = 0;

149 c⁄° 
uöt32_t
 
utime
 = (120 * 
u£c
 / 7);

152 i‡–++
cou¡
 > 
utime
 )

159 
	}
}

168 
	$USB_OTG_BSP_mDñay
 (c⁄° 
uöt32_t
 
m£c
)

171 
	`USB_OTG_BSP_uDñay
(
m£c
 * 1000);

173 
	}
}

183 
	$USB_OTG_BSP_TimîIRQ
 ()

186 
	}
}

	@libstm/STM32_USB_OTG_Driver/src/usb_core.c

23 
	~"usb_c‹e.h
"

24 
	~"usb_b•.h
"

89 
	$USB_OTG_E«bÀComm⁄I¡
(
USB_OTG_CORE_HANDLE
 *
pdev
)

91 
USB_OTG_GINTMSK_Ty≥Def
 
öt_mask
;

93 
öt_mask
.
d32
 = 0;

95 #i‚de‡
USE_OTG_MODE


96 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
GOTGINT
, 0xFFFFFFFF);

99 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 0xFFFFFFFF);

101 
öt_mask
.
b
.
wkupöå
 = 1;

102 
öt_mask
.
b
.
usbsu•íd
 = 1;

104 #ifde‡
USE_OTG_MODE


105 
öt_mask
.
b
.
Ÿgöå
 = 1;

106 
öt_mask
.
b
.
£s§eqöå
 = 1;

107 
öt_mask
.
b
.
c⁄id°schng
 = 1;

109 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 
öt_mask
.
d32
);

110 
	}
}

117 
USB_OTG_STS
 
	$USB_OTG_C‹eRe£t
(
USB_OTG_CORE_HANDLE
 *
pdev
)

119 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

120 
__IO
 
USB_OTG_GRSTCTL_Ty≥Def
 
gª£t
;

121 
uöt32_t
 
cou¡
 = 0;

123 
gª£t
.
d32
 = 0;

127 
	`USB_OTG_BSP_uDñay
(3);

128 
gª£t
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GRSTCTL
);

129 i‡(++
cou¡
 > 200000)

131  
USB_OTG_OK
;

134 
gª£t
.
b
.
ahbidÀ
 == 0);

136 
cou¡
 = 0;

137 
gª£t
.
b
.
cs·r°
 = 1;

138 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GRSTCTL
, 
gª£t
.
d32
 );

141 
gª£t
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GRSTCTL
);

142 i‡(++
cou¡
 > 200000)

147 
gª£t
.
b
.
cs·r°
 == 1);

149 
	`USB_OTG_BSP_uDñay
(3);

150  
°©us
;

151 
	}
}

162 
USB_OTG_STS
 
	$USB_OTG_WrôePackë
(
USB_OTG_CORE_HANDLE
 *
pdev
,

163 
uöt8_t
 *
§c
,

164 
uöt8_t
 
ch_ï_num
,

165 
uöt16_t
 
Àn
)

167 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

168 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 0)

170 
uöt32_t
 
cou¡32b
0 , 
i
= 0;

171 
__IO
 
uöt32_t
 *
fifo
;

173 
cou¡32b
 = (
Àn
 + 3) / 4;

174 
fifo
 = 
pdev
->
ªgs
.
DFIFO
[
ch_ï_num
];

175 
i
 = 0; i < 
cou¡32b
; i++, 
§c
+=4)

177 
	`USB_OTG_WRITE_REG32
–
fifo
, *((
__∑cked
 
uöt32_t
 *)
§c
) );

180  
°©us
;

181 
	}
}

191 *
	$USB_OTG_RódPackë
(
USB_OTG_CORE_HANDLE
 *
pdev
,

192 
uöt8_t
 *
de°
,

193 
uöt16_t
 
Àn
)

195 
uöt32_t
 
i
=0;

196 
uöt32_t
 
cou¡32b
 = (
Àn
 + 3) / 4;

198 
__IO
 
uöt32_t
 *
fifo
 = 
pdev
->
ªgs
.
DFIFO
[0];

200  
i
 = 0; i < 
cou¡32b
; i++, 
de°
 += 4 )

202 *(
__∑cked
 
uöt32_t
 *)
de°
 = 
	`USB_OTG_READ_REG32
(
fifo
);

205  ((*)
de°
);

206 
	}
}

215 
USB_OTG_STS
 
	$USB_OTG_Sñe˘C‹e
(
USB_OTG_CORE_HANDLE
 *
pdev
,

216 
USB_OTG_CORE_ID_Ty≥Def
 
c‹eID
)

218 
uöt32_t
 
i
 , 
ba£Addªss
 = 0;

219 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

221 
pdev
->
cfg
.
dma_íabÀ
 = 0;

224 
pdev
->
cfg
.
•ìd
 = 
USB_OTG_SPEED_FULL
;

225 
pdev
->
cfg
.
mps
 = 
USB_OTG_FS_MAX_PACKET_SIZE
 ;

228 i‡(
c‹eID
 =
USB_OTG_FS_CORE_ID
)

230 
ba£Addªss
 = 
USB_OTG_FS_BASE_ADDR
;

231 
pdev
->
cfg
.
c‹eID
 = 
USB_OTG_FS_CORE_ID
;

232 
pdev
->
cfg
.
ho°_ch™√ls
 = 8 ;

233 
pdev
->
cfg
.
dev_ídpoöts
 = 4 ;

234 
pdev
->
cfg
.
TŸÆFifoSize
 = 320;

235 
pdev
->
cfg
.
phy_ôÁ˚
 = 
USB_OTG_EMBEDDED_PHY
;

237 #ifde‡
USB_OTG_FS_SOF_OUTPUT_ENABLED


238 
pdev
->
cfg
.
Sof_ouçut
 = 1;

241 #ifde‡
USB_OTG_FS_LOW_PWR_MGMT_SUPPORT


242 
pdev
->
cfg
.
low_powî
 = 1;

245 i‡(
c‹eID
 =
USB_OTG_HS_CORE_ID
)

247 
ba£Addªss
 = 
USB_OTG_HS_BASE_ADDR
;

248 
pdev
->
cfg
.
c‹eID
 = 
USB_OTG_HS_CORE_ID
;

249 
pdev
->
cfg
.
ho°_ch™√ls
 = 12 ;

250 
pdev
->
cfg
.
dev_ídpoöts
 = 6 ;

251 
pdev
->
cfg
.
TŸÆFifoSize
 = 1280;

253 #ifde‡
USB_OTG_ULPI_PHY_ENABLED


254 
pdev
->
cfg
.
phy_ôÁ˚
 = 
USB_OTG_ULPI_PHY
;

256 #ifde‡
USB_OTG_EMBEDDED_PHY_ENABLED


257 
pdev
->
cfg
.
phy_ôÁ˚
 = 
USB_OTG_EMBEDDED_PHY
;

259 #ifde‡
USB_OTG_I2C_PHY_ENABLED


260 
pdev
->
cfg
.
phy_ôÁ˚
 = 
USB_OTG_I2C_PHY
;

265 #ifde‡
USB_OTG_HS_INTERNAL_DMA_ENABLED


266 
pdev
->
cfg
.
dma_íabÀ
 = 1;

269 #ifde‡
USB_OTG_HS_SOF_OUTPUT_ENABLED


270 
pdev
->
cfg
.
Sof_ouçut
 = 1;

273 #ifde‡
USB_OTG_HS_LOW_PWR_MGMT_SUPPORT


274 
pdev
->
cfg
.
low_powî
 = 1;

279 
pdev
->
ªgs
.
GREGS
 = (
USB_OTG_GREGS
 *)(
ba£Addªss
 + \

280 
USB_OTG_CORE_GLOBAL_REGS_OFFSET
);

281 
pdev
->
ªgs
.
DREGS
 = (
USB_OTG_DREGS
 *Ë(
ba£Addªss
 + \

282 
USB_OTG_DEV_GLOBAL_REG_OFFSET
);

284 
i
 = 0; i < 
pdev
->
cfg
.
dev_ídpoöts
; i++)

286 
pdev
->
ªgs
.
INEP_REGS
[
i
] = (
USB_OTG_INEPREGS
 *) \

287 (
ba£Addªss
 + 
USB_OTG_DEV_IN_EP_REG_OFFSET
 + \

288 (
i
 * 
USB_OTG_EP_REG_OFFSET
));

289 
pdev
->
ªgs
.
OUTEP_REGS
[
i
] = (
USB_OTG_OUTEPREGS
 *) \

290 (
ba£Addªss
 + 
USB_OTG_DEV_OUT_EP_REG_OFFSET
 + \

291 (
i
 * 
USB_OTG_EP_REG_OFFSET
));

293 
pdev
->
ªgs
.
HREGS
 = (
USB_OTG_HREGS
 *)(
ba£Addªss
 + \

294 
USB_OTG_HOST_GLOBAL_REG_OFFSET
);

295 
pdev
->
ªgs
.
HPRT0
 = (
uöt32_t
 *)(
ba£Addªss
 + 
USB_OTG_HOST_PORT_REGS_OFFSET
);

297 
i
 = 0; i < 
pdev
->
cfg
.
ho°_ch™√ls
; i++)

299 
pdev
->
ªgs
.
HC_REGS
[
i
] = (
USB_OTG_HC_REGS
 *)(
ba£Addªss
 + \

300 
USB_OTG_HOST_CHAN_REGS_OFFSET
 + \

301 (
i
 * 
USB_OTG_CHAN_REGS_OFFSET
));

303 
i
 = 0; i < 
pdev
->
cfg
.
ho°_ch™√ls
; i++)

305 
pdev
->
ªgs
.
DFIFO
[
i
] = (
uöt32_t
 *)(
ba£Addªss
 + 
USB_OTG_DATA_FIFO_OFFSET
 +\

306 (
i
 * 
USB_OTG_DATA_FIFO_SIZE
));

308 
pdev
->
ªgs
.
PCGCCTL
 = (
uöt32_t
 *)(
ba£Addªss
 + 
USB_OTG_PCGCCTL_OFFSET
);

310  
°©us
;

311 
	}
}

321 
USB_OTG_STS
 
	$USB_OTG_C‹eInô
(
USB_OTG_CORE_HANDLE
 *
pdev
)

323 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

324 
USB_OTG_GUSBCFG_Ty≥Def
 
usbcfg
;

325 
USB_OTG_GCCFG_Ty≥Def
 
gccfg
;

326 
USB_OTG_GI2CCTL_Ty≥Def
 
i2c˘l
;

327 
USB_OTG_GAHBCFG_Ty≥Def
 
ahbcfg
;

329 
usbcfg
.
d32
 = 0;

330 
gccfg
.
d32
 = 0;

331 
ahbcfg
.
d32
 = 0;

335 i‡(
pdev
->
cfg
.
phy_ôÁ˚
 =
USB_OTG_ULPI_PHY
)

337 
gccfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GCCFG
);

338 
gccfg
.
b
.
pwdn
 = 0;

340 i‡(
pdev
->
cfg
.
Sof_ouçut
)

342 
gccfg
.
b
.
sofouãn
 = 1;

344 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GCCFG
, 
gccfg
.
d32
);

347 
usbcfg
.
d32
 = 0;

348 
usbcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
);

350 
usbcfg
.
b
.
phy£l
 = 0;

351 #ifde‡
USB_OTG_INTERNAL_VBUS_ENABLED


352 
usbcfg
.
b
.
uÕi_ext_vbus_drv
 = 0;

354 #ifde‡
USB_OTG_EXTERNAL_VBUS_ENABLED


355 
usbcfg
.
b
.
uÕi_ext_vbus_drv
 = 1;

358 
usbcfg
.
b
.
ãrm_£l_dl_pul£
 = 0;

359 
usbcfg
.
b
.
uÕi_utmi_£l
 = 1;

361 
usbcfg
.
b
.
phyif
 = 0;

362 
usbcfg
.
b
.
ddr£l
 = 0;

364 
usbcfg
.
b
.
uÕi_f¶s
 = 0;

365 
usbcfg
.
b
.
uÕi_˛k_sus_m
 = 0;

366 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
, 
usbcfg
.
d32
);

369 
	`USB_OTG_C‹eRe£t
(
pdev
);

371 if(
pdev
->
cfg
.
dma_íabÀ
 == 1)

374 
ahbcfg
.
b
.
hbur°Àn
 = 5;

375 
ahbcfg
.
b
.
dm´«bÀ
 = 1;

376 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GAHBCFG
, 
ahbcfg
.
d32
);

383 
usbcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
);;

384 
usbcfg
.
b
.
phy£l
 = 1;

385 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
, 
usbcfg
.
d32
);

387 
	`USB_OTG_C‹eRe£t
(
pdev
);

389 
gccfg
.
d32
 = 0;

390 
gccfg
.
b
.
pwdn
 = 1;

392 if(
pdev
->
cfg
.
phy_ôÁ˚
 =
USB_OTG_I2C_PHY
)

394 
gccfg
.
b
.
i2ci„n
 = 1;

396 
gccfg
.
b
.
vbus£nsögA
 = 1 ;

397 
gccfg
.
b
.
vbus£nsögB
 = 1 ;

398 #i‚de‡
VBUS_SENSING_ENABLED


399 
gccfg
.
b
.
dißbÀvbus£nsög
 = 1;

402 if(
pdev
->
cfg
.
Sof_ouçut
)

404 
gccfg
.
b
.
sofouãn
 = 1;

407 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GCCFG
, 
gccfg
.
d32
);

408 
	`USB_OTG_BSP_mDñay
(20);

410 
usbcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
);

412 if(
pdev
->
cfg
.
phy_ôÁ˚
 =
USB_OTG_I2C_PHY
)

414 
usbcfg
.
b
.
Ÿgutmifs£l
 = 1;

417 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
, 
usbcfg
.
d32
);

419 if(
pdev
->
cfg
.
phy_ôÁ˚
 =
USB_OTG_I2C_PHY
)

422 
i2c˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GI2CCTL
);

423 
i2c˘l
.
b
.
i2cdevaddr
 = 1;

424 
i2c˘l
.
b
.
i2˚n
 = 0;

425 
i2c˘l
.
b
.
d©_£0
 = 1;

426 
i2c˘l
.
b
.
addr
 = 0x2D;

427 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GI2CCTL
, 
i2c˘l
.
d32
);

429 
	`USB_OTG_BSP_mDñay
(200);

431 
i2c˘l
.
b
.
i2˚n
 = 1;

432 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GI2CCTL
, 
i2c˘l
.
d32
);

433 
	`USB_OTG_BSP_mDñay
(200);

437 if(
pdev
->
cfg
.
dma_íabÀ
 == 1)

440 
ahbcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GAHBCFG
);

441 
ahbcfg
.
b
.
hbur°Àn
 = 5;

442 
ahbcfg
.
b
.
dm´«bÀ
 = 1;

443 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GAHBCFG
, 
ahbcfg
.
d32
);

447 #ifde‡ 
USE_OTG_MODE


448 
usbcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
);

449 
usbcfg
.
b
.
h≈ˇp
 = 1;

450 
usbcfg
.
b
.
§pˇp
 = 1;

451 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
, 
usbcfg
.
d32
);

452 
	`USB_OTG_E«bÀComm⁄I¡
(
pdev
);

454  
°©us
;

455 
	}
}

462 
USB_OTG_STS
 
	$USB_OTG_E«bÀGlobÆI¡
(
USB_OTG_CORE_HANDLE
 *
pdev
)

464 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

465 
USB_OTG_GAHBCFG_Ty≥Def
 
ahbcfg
;

467 
ahbcfg
.
d32
 = 0;

468 
ahbcfg
.
b
.
glblöåmsk
 = 1;

469 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
GREGS
->
GAHBCFG
, 0, 
ahbcfg
.
d32
);

470  
°©us
;

471 
	}
}

480 
USB_OTG_STS
 
	$USB_OTG_DißbÀGlobÆI¡
(
USB_OTG_CORE_HANDLE
 *
pdev
)

482 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

483 
USB_OTG_GAHBCFG_Ty≥Def
 
ahbcfg
;

484 
ahbcfg
.
d32
 = 0;

485 
ahbcfg
.
b
.
glblöåmsk
 = 1;

486 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
GREGS
->
GAHBCFG
, 
ahbcfg
.
d32
, 0);

487  
°©us
;

488 
	}
}

497 
USB_OTG_STS
 
	$USB_OTG_FlushTxFifo
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt32_t
 
num
 )

499 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

500 
__IO
 
USB_OTG_GRSTCTL_Ty≥Def
 
gª£t
;

502 
uöt32_t
 
cou¡
 = 0;

503 
gª£t
.
d32
 = 0;

504 
gª£t
.
b
.
txfÊsh
 = 1;

505 
gª£t
.
b
.
tx‚um
 = 
num
;

506 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
GRSTCTL
, 
gª£t
.
d32
 );

509 
gª£t
.
d32
 = 
	`USB_OTG_READ_REG32
–&
pdev
->
ªgs
.
GREGS
->
GRSTCTL
);

510 i‡(++
cou¡
 > 200000)

515 
gª£t
.
b
.
txfÊsh
 == 1);

517 
	`USB_OTG_BSP_uDñay
(3);

518  
°©us
;

519 
	}
}

527 
USB_OTG_STS
 
	$USB_OTG_FlushRxFifo
–
USB_OTG_CORE_HANDLE
 *
pdev
 )

529 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

530 
__IO
 
USB_OTG_GRSTCTL_Ty≥Def
 
gª£t
;

531 
uöt32_t
 
cou¡
 = 0;

533 
gª£t
.
d32
 = 0;

534 
gª£t
.
b
.
rxfÊsh
 = 1;

535 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
GRSTCTL
, 
gª£t
.
d32
 );

538 
gª£t
.
d32
 = 
	`USB_OTG_READ_REG32
–&
pdev
->
ªgs
.
GREGS
->
GRSTCTL
);

539 i‡(++
cou¡
 > 200000)

544 
gª£t
.
b
.
rxfÊsh
 == 1);

546 
	`USB_OTG_BSP_uDñay
(3);

547  
°©us
;

548 
	}
}

557 
USB_OTG_STS
 
	$USB_OTG_SëCuºítMode
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
mode
)

559 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

560 
USB_OTG_GUSBCFG_Ty≥Def
 
usbcfg
;

562 
usbcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
);

564 
usbcfg
.
b
.
f‹˚_ho°
 = 0;

565 
usbcfg
.
b
.
f‹˚_dev
 = 0;

567 i‡–
mode
 =
HOST_MODE
)

569 
usbcfg
.
b
.
f‹˚_ho°
 = 1;

571 i‡–
mode
 =
DEVICE_MODE
)

573 
usbcfg
.
b
.
f‹˚_dev
 = 1;

576 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
, 
usbcfg
.
d32
);

577 
	`USB_OTG_BSP_mDñay
(50);

578  
°©us
;

579 
	}
}

587 
uöt32_t
 
	$USB_OTG_GëMode
(
USB_OTG_CORE_HANDLE
 *
pdev
)

589  (
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
 ) & 0x1);

590 
	}
}

598 
uöt8_t
 
	$USB_OTG_IsDevi˚Mode
(
USB_OTG_CORE_HANDLE
 *
pdev
)

600  (
	`USB_OTG_GëMode
(
pdev
Ë!
HOST_MODE
);

601 
	}
}

609 
uöt8_t
 
	$USB_OTG_IsHo°Mode
(
USB_OTG_CORE_HANDLE
 *
pdev
)

611  (
	`USB_OTG_GëMode
(
pdev
Ë=
HOST_MODE
);

612 
	}
}

620 
uöt32_t
 
	$USB_OTG_RódC‹eIå
(
USB_OTG_CORE_HANDLE
 *
pdev
)

622 
uöt32_t
 
v
 = 0;

623 
v
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
);

624 
v
 &
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTMSK
);

625  
v
;

626 
	}
}

634 
uöt32_t
 
	$USB_OTG_RódOtgIå
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

636  (
	`USB_OTG_READ_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GOTGINT
));

637 
	}
}

639 #ifde‡
USE_HOST_MODE


645 
USB_OTG_STS
 
	$USB_OTG_C‹eInôHo°
(
USB_OTG_CORE_HANDLE
 *
pdev
)

647 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

648 
USB_OTG_FSIZ_Ty≥Def
 
≈txfifosize
;

649 
USB_OTG_FSIZ_Ty≥Def
 
±xfifosize
;

650 
USB_OTG_HCFG_Ty≥Def
 
hcfg
;

652 #ifde‡
USE_OTG_MODE


653 
USB_OTG_OTGCTL_Ty≥Def
 
gŸg˘l
;

656 
uöt32_t
 
i
 = 0;

658 
≈txfifosize
.
d32
 = 0;

659 
±xfifosize
.
d32
 = 0;

660 #ifde‡
USE_OTG_MODE


661 
gŸg˘l
.
d32
 = 0;

663 
hcfg
.
d32
 = 0;

667 
	`USB_OTG_BSP_C⁄figVBUS
(
pdev
);

670 
	`USB_OTG_WRITE_REG32
(
pdev
->
ªgs
.
PCGCCTL
, 0);

673 
	`USB_OTG_InôFSLSPClkSñ
(
pdev
 , 
HCFG_48_MHZ
);

675 
hcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HREGS
->
HCFG
);

676 
hcfg
.
b
.
f¶ssuµ
 = 0;

677 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HREGS
->
HCFG
, 
hcfg
.
d32
);

681 #ifde‡
USB_OTG_FS_CORE


682 if(
pdev
->
cfg
.
c‹eID
 =
USB_OTG_FS_CORE_ID
)

685 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GRXFSIZ
, 
RX_FIFO_FS_SIZE
);

686 
≈txfifosize
.
b
.
°¨èddr
 = 
RX_FIFO_FS_SIZE
;

687 
≈txfifosize
.
b
.
dïth
 = 
TXH_NP_FS_FIFOSIZ
;

688 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
DIEPTXF0_HNPTXFSIZ
, 
≈txfifosize
.
d32
);

690 
±xfifosize
.
b
.
°¨èddr
 = 
RX_FIFO_FS_SIZE
 + 
TXH_NP_FS_FIFOSIZ
;

691 
±xfifosize
.
b
.
dïth
 = 
TXH_P_FS_FIFOSIZ
;

692 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
HPTXFSIZ
, 
±xfifosize
.
d32
);

695 #ifde‡
USB_OTG_HS_CORE


696 i‡(
pdev
->
cfg
.
c‹eID
 =
USB_OTG_HS_CORE_ID
)

699 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GRXFSIZ
, 
RX_FIFO_HS_SIZE
);

700 
≈txfifosize
.
b
.
°¨èddr
 = 
RX_FIFO_HS_SIZE
;

701 
≈txfifosize
.
b
.
dïth
 = 
TXH_NP_HS_FIFOSIZ
;

702 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
DIEPTXF0_HNPTXFSIZ
, 
≈txfifosize
.
d32
);

704 
±xfifosize
.
b
.
°¨èddr
 = 
RX_FIFO_HS_SIZE
 + 
TXH_NP_HS_FIFOSIZ
;

705 
±xfifosize
.
b
.
dïth
 = 
TXH_P_HS_FIFOSIZ
;

706 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
HPTXFSIZ
, 
±xfifosize
.
d32
);

710 #ifde‡
USE_OTG_MODE


712 
gŸg˘l
.
b
.
h°£th≈í
 = 1;

713 
	`USB_OTG_MODIFY_REG32
–&
pdev
->
ªgs
.
GREGS
->
GOTGCTL
, 
gŸg˘l
.
d32
, 0);

717 
	`USB_OTG_FlushTxFifo
(
pdev
, 0x10 );

718 
	`USB_OTG_FlushRxFifo
(
pdev
);

722 
i
 = 0; i < 
pdev
->
cfg
.
ho°_ch™√ls
; i++)

724 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
HC_REGS
[
i
]->
HCINT
, 0xFFFFFFFF );

725 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
HC_REGS
[
i
]->
HCGINTMSK
, 0 );

727 #i‚de‡
USE_OTG_MODE


728 
	`USB_OTG_DriveVbus
(
pdev
, 1);

731 
	`USB_OTG_E«bÀHo°I¡
(
pdev
);

732  
°©us
;

733 
	}
}

741 
uöt8_t
 
	$USB_OTG_IsEvíFøme
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

743  !(
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HREGS
->
HFNUM
) & 0x1);

744 
	}
}

752 
	$USB_OTG_DriveVbus
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
°©e
)

754 
USB_OTG_HPRT0_Ty≥Def
 
h¥t0
;

756 
h¥t0
.
d32
 = 0;

759 
	`USB_OTG_BSP_DriveVBUS
(
pdev
, 
°©e
);

762 
h¥t0
.
d32
 = 
	`USB_OTG_RódHPRT0
(
pdev
);

763 i‡((
h¥t0
.
b
.
¥çwr
 =0 ) && (
°©e
 == 1 ))

765 
h¥t0
.
b
.
¥çwr
 = 1;

766 
	`USB_OTG_WRITE_REG32
(
pdev
->
ªgs
.
HPRT0
, 
h¥t0
.
d32
);

768 i‡((
h¥t0
.
b
.
¥çwr
 =1 ) && (
°©e
 == 0 ))

770 
h¥t0
.
b
.
¥çwr
 = 0;

771 
	`USB_OTG_WRITE_REG32
(
pdev
->
ªgs
.
HPRT0
, 
h¥t0
.
d32
);

774 
	`USB_OTG_BSP_mDñay
(200);

775 
	}
}

781 
USB_OTG_STS
 
	$USB_OTG_E«bÀHo°I¡
(
USB_OTG_CORE_HANDLE
 *
pdev
)

783 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

784 
USB_OTG_GINTMSK_Ty≥Def
 
ötmsk
;

785 
ötmsk
.
d32
 = 0;

787 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 0);

790 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 0xFFFFFFFF);

793 
	`USB_OTG_E«bÀComm⁄I¡
(
pdev
);

795 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 0)

797 
ötmsk
.
b
.
rx°sqlvl
 = 1;

799 
ötmsk
.
b
.
p‹töå
 = 1;

800 
ötmsk
.
b
.
hcöå
 = 1;

801 
ötmsk
.
b
.
disc⁄√˘
 = 1;

802 
ötmsk
.
b
.
soföå
 = 1;

803 
ötmsk
.
b
.
öcom∂isoout
 = 1;

804 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 
ötmsk
.
d32
, intmsk.d32);

805  
°©us
;

806 
	}
}

815 
	$USB_OTG_InôFSLSPClkSñ
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
‰eq
)

817 
USB_OTG_HCFG_Ty≥Def
 
hcfg
;

819 
hcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HREGS
->
HCFG
);

820 
hcfg
.
b
.
f¶•˛k£l
 = 
‰eq
;

821 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HREGS
->
HCFG
, 
hcfg
.
d32
);

822 
	}
}

830 
uöt32_t
 
	$USB_OTG_RódHPRT0
(
USB_OTG_CORE_HANDLE
 *
pdev
)

832 
USB_OTG_HPRT0_Ty≥Def
 
h¥t0
;

834 
h¥t0
.
d32
 = 
	`USB_OTG_READ_REG32
(
pdev
->
ªgs
.
HPRT0
);

835 
h¥t0
.
b
.
¥ã«
 = 0;

836 
h¥t0
.
b
.
¥tc⁄ndë
 = 0;

837 
h¥t0
.
b
.
¥ãnchng
 = 0;

838 
h¥t0
.
b
.
¥tovrcuºchng
 = 0;

839  
h¥t0
.
d32
;

840 
	}
}

848 
uöt32_t
 
	$USB_OTG_RódHo°AŒCh™√ls_öå
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

850  (
	`USB_OTG_READ_REG32
 (&
pdev
->
ªgs
.
HREGS
->
HAINT
));

851 
	}
}

861 
uöt32_t
 
	$USB_OTG_Re£tP‹t
(
USB_OTG_CORE_HANDLE
 *
pdev
)

863 
USB_OTG_HPRT0_Ty≥Def
 
h¥t0
;

865 
h¥t0
.
d32
 = 
	`USB_OTG_RódHPRT0
(
pdev
);

866 
h¥t0
.
b
.
¥å°
 = 1;

867 
	`USB_OTG_WRITE_REG32
(
pdev
->
ªgs
.
HPRT0
, 
h¥t0
.
d32
);

868 
	`USB_OTG_BSP_mDñay
 (10);

869 
h¥t0
.
b
.
¥å°
 = 0;

870 
	`USB_OTG_WRITE_REG32
(
pdev
->
ªgs
.
HPRT0
, 
h¥t0
.
d32
);

871 
	`USB_OTG_BSP_mDñay
 (20);

873 
	}
}

882 
USB_OTG_STS
 
	$USB_OTG_HC_Inô
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
hc_num
)

884 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

885 
uöt32_t
 
öå_íabÀ
 = 0;

886 
USB_OTG_HCGINTMSK_Ty≥Def
 
hcötmsk
;

887 
USB_OTG_GINTMSK_Ty≥Def
 
götmsk
;

888 
USB_OTG_HCCHAR_Ty≥Def
 
hcch¨
;

889 
USB_OTG_HCINTn_Ty≥Def
 
hcöt
;

892 
götmsk
.
d32
 = 0;

893 
hcötmsk
.
d32
 = 0;

894 
hcch¨
.
d32
 = 0;

897 
hcöt
.
d32
 = 0xFFFFFFFF;

898 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCINT
, 
hcöt
.
d32
);

901 
hcötmsk
.
d32
 = 0;

903 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

905 
hcötmsk
.
b
.
ahbîr
 = 1;

908 
pdev
->
ho°
.
hc
[
hc_num
].
ï_ty≥
)

910 
EP_TYPE_CTRL
:

911 
EP_TYPE_BULK
:

912 
hcötmsk
.
b
.
x„rcom∂
 = 1;

913 
hcötmsk
.
b
.
°Æl
 = 1;

914 
hcötmsk
.
b
.
xa˘îr
 = 1;

915 
hcötmsk
.
b
.
d©©gÀº
 = 1;

916 
hcötmsk
.
b
.
«k
 = 1;

917 i‡(
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
)

919 
hcötmsk
.
b
.
bbÀº
 = 1;

923 
hcötmsk
.
b
.
nyë
 = 1;

924 i‡(
pdev
->
ho°
.
hc
[
hc_num
].
do_pög
)

926 
hcötmsk
.
b
.
ack
 = 1;

930 
EP_TYPE_INTR
:

931 
hcötmsk
.
b
.
x„rcom∂
 = 1;

932 
hcötmsk
.
b
.
«k
 = 1;

933 
hcötmsk
.
b
.
°Æl
 = 1;

934 
hcötmsk
.
b
.
xa˘îr
 = 1;

935 
hcötmsk
.
b
.
d©©gÀº
 = 1;

936 
hcötmsk
.
b
.
‰movrun
 = 1;

938 i‡(
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
)

940 
hcötmsk
.
b
.
bbÀº
 = 1;

944 
EP_TYPE_ISOC
:

945 
hcötmsk
.
b
.
x„rcom∂
 = 1;

946 
hcötmsk
.
b
.
‰movrun
 = 1;

947 
hcötmsk
.
b
.
ack
 = 1;

949 i‡(
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
)

951 
hcötmsk
.
b
.
xa˘îr
 = 1;

952 
hcötmsk
.
b
.
bbÀº
 = 1;

958 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCGINTMSK
, 
hcötmsk
.
d32
);

962 
öå_íabÀ
 = (1 << 
hc_num
);

963 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
HREGS
->
HAINTMSK
, 0, 
öå_íabÀ
);

966 
götmsk
.
b
.
hcöå
 = 1;

967 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 0, 
götmsk
.
d32
);

970 
hcch¨
.
d32
 = 0;

971 
hcch¨
.
b
.
devaddr
 = 
pdev
->
ho°
.
hc
[
hc_num
].
dev_addr
;

972 
hcch¨
.
b
.
ïnum
 = 
pdev
->
ho°
.
hc
[
hc_num
].
ï_num
;

973 
hcch¨
.
b
.
ïdú
 = 
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
;

974 
hcch¨
.
b
.
l•ddev
 = (
pdev
->
ho°
.
hc
[
hc_num
].
•ìd
 =
HPRT0_PRTSPD_LOW_SPEED
);

975 
hcch¨
.
b
.
ïty≥
 = 
pdev
->
ho°
.
hc
[
hc_num
].
ï_ty≥
;

976 
hcch¨
.
b
.
mps
 = 
pdev
->
ho°
.
hc
[
hc_num
].
max_∑ckë
;

977 i‡(
pdev
->
ho°
.
hc
[
hc_num
].
ï_ty≥
 =
HCCHAR_INTR
)

979 
hcch¨
.
b
.
odd‰m
 = 1;

981 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCCHAR
, 
hcch¨
.
d32
);

982  
°©us
;

983 
	}
}

992 
USB_OTG_STS
 
	$USB_OTG_HC_SèπX„r
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
hc_num
)

994 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

995 
USB_OTG_HCCHAR_Ty≥Def
 
hcch¨
;

996 
USB_OTG_HCTSIZn_Ty≥Def
 
h˘siz
;

997 
USB_OTG_HNPTXSTS_Ty≥Def
 
h≈tx°s
;

998 
USB_OTG_HPTXSTS_Ty≥Def
 
h±x°s
;

999 
USB_OTG_GINTMSK_Ty≥Def
 
ötmsk
;

1000 
uöt16_t
 
Àn_w‹ds
 = 0;

1002 
uöt16_t
 
num_∑ckës
;

1003 
uöt16_t
 
max_hc_pkt_cou¡
;

1005 
max_hc_pkt_cou¡
 = 256;

1006 
h˘siz
.
d32
 = 0;

1007 
hcch¨
.
d32
 = 0;

1008 
ötmsk
.
d32
 = 0;

1011 i‡(
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 > 0)

1013 
num_∑ckës
 = (
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 + \

1014 
pdev
->
ho°
.
hc
[
hc_num
].
max_∑ckë
 - 1) /Ödev->host.hc[hc_num].max_packet;

1016 i‡(
num_∑ckës
 > 
max_hc_pkt_cou¡
)

1018 
num_∑ckës
 = 
max_hc_pkt_cou¡
;

1019 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 = 
num_∑ckës
 * \

1020 
pdev
->
ho°
.
hc
[
hc_num
].
max_∑ckë
;

1025 
num_∑ckës
 = 1;

1027 i‡(
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
)

1029 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 = 
num_∑ckës
 * \

1030 
pdev
->
ho°
.
hc
[
hc_num
].
max_∑ckë
;

1033 
h˘siz
.
b
.
x„rsize
 = 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
;

1034 
h˘siz
.
b
.
pkt˙t
 = 
num_∑ckës
;

1035 
h˘siz
.
b
.
pid
 = 
pdev
->
ho°
.
hc
[
hc_num
].
d©a_pid
;

1036 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCTSIZ
, 
h˘siz
.
d32
);

1038 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

1040 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCDMA
, (Ìdev->
ho°
.
hc
[hc_num].
x„r_buff
);

1044 
hcch¨
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCCHAR
);

1045 
hcch¨
.
b
.
odd‰m
 = 
	`USB_OTG_IsEvíFøme
(
pdev
);

1048 
hcch¨
.
b
.
chí
 = 1;

1049 
hcch¨
.
b
.
chdis
 = 0;

1050 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCCHAR
, 
hcch¨
.
d32
);

1052 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 0)

1054 if((
pdev
->
ho°
.
hc
[
hc_num
].
ï_is_ö
 == 0) &&

1055 (
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 > 0))

1057 
pdev
->
ho°
.
hc
[
hc_num
].
ï_ty≥
)

1060 
EP_TYPE_CTRL
:

1061 
EP_TYPE_BULK
:

1063 
h≈tx°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
HNPTXSTS
);

1064 
Àn_w‹ds
 = (
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 + 3) / 4;

1067 if(
Àn_w‹ds
 > 
h≈tx°s
.
b
.
≈txf•ˇvaû
)

1070 
ötmsk
.
b
.
≈tx„m±y
 = 1;

1071 
	`USB_OTG_MODIFY_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 0, 
ötmsk
.
d32
);

1076 
EP_TYPE_INTR
:

1077 
EP_TYPE_ISOC
:

1078 
h±x°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HREGS
->
HPTXSTS
);

1079 
Àn_w‹ds
 = (
pdev
->
ho°
.
hc
[
hc_num
].
x„r_Àn
 + 3) / 4;

1081 if(
Àn_w‹ds
 > 
h±x°s
.
b
.
±xf•ˇvaû
)

1084 
ötmsk
.
b
.
±x„m±y
 = 1;

1085 
	`USB_OTG_MODIFY_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 0, 
ötmsk
.
d32
);

1094 
	`USB_OTG_WrôePackë
(
pdev
,

1095 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_buff
 ,

1096 
hc_num
, 
pdev
->
ho°
.
hc
[hc_num].
x„r_Àn
);

1099  
°©us
;

1100 
	}
}

1109 
USB_OTG_STS
 
	$USB_OTG_HC_HÆt
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
hc_num
)

1111 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1112 
USB_OTG_HNPTXSTS_Ty≥Def
 
≈tx°s
;

1113 
USB_OTG_HPTXSTS_Ty≥Def
 
h±x°s
;

1114 
USB_OTG_HCCHAR_Ty≥Def
 
hcch¨
;

1116 
≈tx°s
.
d32
 = 0;

1117 
h±x°s
.
d32
 = 0;

1118 
hcch¨
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCCHAR
);

1119 
hcch¨
.
b
.
chí
 = 1;

1120 
hcch¨
.
b
.
chdis
 = 1;

1123 i‡(
hcch¨
.
b
.
ïty≥
 =
HCCHAR_CTRL
 || hcch¨.b.ïty≥ =
HCCHAR_BULK
)

1125 
≈tx°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
HNPTXSTS
);

1126 i‡(
≈tx°s
.
b
.
≈txq•ˇvaû
 == 0)

1128 
hcch¨
.
b
.
chí
 = 0;

1133 
h±x°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HREGS
->
HPTXSTS
);

1134 i‡(
h±x°s
.
b
.
±xq•ˇvaû
 == 0)

1136 
hcch¨
.
b
.
chí
 = 0;

1139 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCCHAR
, 
hcch¨
.
d32
);

1140  
°©us
;

1141 
	}
}

1148 
USB_OTG_STS
 
	$USB_OTG_HC_DoPög
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
hc_num
)

1150 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1151 
USB_OTG_HCCHAR_Ty≥Def
 
hcch¨
;

1152 
USB_OTG_HCTSIZn_Ty≥Def
 
h˘siz
;

1154 
h˘siz
.
d32
 = 0;

1155 
h˘siz
.
b
.
d›ng
 = 1;

1156 
h˘siz
.
b
.
pkt˙t
 = 1;

1157 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCTSIZ
, 
h˘siz
.
d32
);

1159 
hcch¨
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCCHAR
);

1160 
hcch¨
.
b
.
chí
 = 1;

1161 
hcch¨
.
b
.
chdis
 = 0;

1162 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
hc_num
]->
HCCHAR
, 
hcch¨
.
d32
);

1163  
°©us
;

1164 
	}
}

1171 
	$USB_OTG_St›Ho°
(
USB_OTG_CORE_HANDLE
 *
pdev
)

1173 
USB_OTG_HCCHAR_Ty≥Def
 
hcch¨
;

1174 
uöt32_t
 
i
;

1176 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HREGS
->
HAINTMSK
 , 0);

1177 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HREGS
->
HAINT
, 0xFFFFFFFF);

1180 
i
 = 0; i < 
pdev
->
cfg
.
ho°_ch™√ls
; i++)

1182 
hcch¨
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
i
]->
HCCHAR
);

1183 
hcch¨
.
b
.
chí
 = 0;

1184 
hcch¨
.
b
.
chdis
 = 1;

1185 
hcch¨
.
b
.
ïdú
 = 0;

1186 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
i
]->
HCCHAR
, 
hcch¨
.
d32
);

1190 
	`USB_OTG_FlushRxFifo
(
pdev
);

1191 
	`USB_OTG_FlushTxFifo
(
pdev
 , 0x10 );

1192 
	}
}

1194 #ifde‡
USE_DEVICE_MODE


1203 
	$USB_OTG_InôDevS≥ed
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
•ìd
)

1205 
USB_OTG_DCFG_Ty≥Def
 
dcfg
;

1207 
dcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCFG
);

1208 
dcfg
.
b
.
dev•d
 = 
•ìd
;

1209 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCFG
, 
dcfg
.
d32
);

1210 
	}
}

1219 
USB_OTG_STS
 
	$USB_OTG_C‹eInôDev
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

1221 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1222 
USB_OTG_DEPCTL_Ty≥Def
 
dï˘l
;

1223 
uöt32_t
 
i
;

1224 
USB_OTG_DCFG_Ty≥Def
 
dcfg
;

1225 
USB_OTG_FSIZ_Ty≥Def
 
≈txfifosize
;

1226 
USB_OTG_FSIZ_Ty≥Def
 
txfifosize
;

1227 
USB_OTG_DIEPMSK_Ty≥Def
 
msk
;

1228 
USB_OTG_DTHRCTL_Ty≥Def
 
dthr˘l
;

1230 
dï˘l
.
d32
 = 0;

1231 
dcfg
.
d32
 = 0;

1232 
≈txfifosize
.
d32
 = 0;

1233 
txfifosize
.
d32
 = 0;

1234 
msk
.
d32
 = 0;

1237 
	`USB_OTG_WRITE_REG32
(
pdev
->
ªgs
.
PCGCCTL
, 0);

1239 
dcfg
.
d32
 = 
	`USB_OTG_READ_REG32
–&
pdev
->
ªgs
.
DREGS
->
DCFG
);

1240 
dcfg
.
b
.
≥r‰öt
 = 
DCFG_FRAME_INTERVAL_80
;

1241 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DCFG
, 
dcfg
.
d32
 );

1243 #ifde‡
USB_OTG_FS_CORE


1244 if(
pdev
->
cfg
.
c‹eID
 =
USB_OTG_FS_CORE_ID
 )

1248 
	`USB_OTG_InôDevS≥ed
 (
pdev
 , 
USB_OTG_SPEED_PARAM_FULL
);

1251 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GRXFSIZ
, 
RX_FIFO_FS_SIZE
);

1254 
≈txfifosize
.
b
.
dïth
 = 
TX0_FIFO_FS_SIZE
;

1255 
≈txfifosize
.
b
.
°¨èddr
 = 
RX_FIFO_FS_SIZE
;

1256 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
DIEPTXF0_HNPTXFSIZ
, 
≈txfifosize
.
d32
 );

1260 
txfifosize
.
b
.
°¨èddr
 = 
≈txfifosize
.b.°¨èdd∏+Ç±xfifosize.b.
dïth
;

1261 
txfifosize
.
b
.
dïth
 = 
TX1_FIFO_FS_SIZE
;

1262 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
DIEPTXF
[0], 
txfifosize
.
d32
 );

1266 
txfifosize
.
b
.
°¨èddr
 +txfifosize.b.
dïth
;

1267 
txfifosize
.
b
.
dïth
 = 
TX2_FIFO_FS_SIZE
;

1268 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
DIEPTXF
[1], 
txfifosize
.
d32
 );

1272 
txfifosize
.
b
.
°¨èddr
 +txfifosize.b.
dïth
;

1273 
txfifosize
.
b
.
dïth
 = 
TX3_FIFO_FS_SIZE
;

1274 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
DIEPTXF
[2], 
txfifosize
.
d32
 );

1277 #ifde‡
USB_OTG_HS_CORE


1278 if(
pdev
->
cfg
.
c‹eID
 =
USB_OTG_HS_CORE_ID
 )

1283 if(
pdev
->
cfg
.
phy_ôÁ˚
 =
USB_OTG_ULPI_PHY
)

1285 
	`USB_OTG_InôDevS≥ed
 (
pdev
 , 
USB_OTG_SPEED_PARAM_HIGH
);

1289 
	`USB_OTG_InôDevS≥ed
 (
pdev
 , 
USB_OTG_SPEED_PARAM_HIGH_IN_FULL
);

1293 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GRXFSIZ
, 
RX_FIFO_HS_SIZE
);

1296 
≈txfifosize
.
b
.
dïth
 = 
TX0_FIFO_HS_SIZE
;

1297 
≈txfifosize
.
b
.
°¨èddr
 = 
RX_FIFO_HS_SIZE
;

1298 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
DIEPTXF0_HNPTXFSIZ
, 
≈txfifosize
.
d32
 );

1302 
txfifosize
.
b
.
°¨èddr
 = 
≈txfifosize
.b.°¨èdd∏+Ç±xfifosize.b.
dïth
;

1303 
txfifosize
.
b
.
dïth
 = 
TX1_FIFO_HS_SIZE
;

1304 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
DIEPTXF
[0], 
txfifosize
.
d32
 );

1308 
txfifosize
.
b
.
°¨èddr
 +txfifosize.b.
dïth
;

1309 
txfifosize
.
b
.
dïth
 = 
TX2_FIFO_HS_SIZE
;

1310 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
DIEPTXF
[1], 
txfifosize
.
d32
 );

1314 
txfifosize
.
b
.
°¨èddr
 +txfifosize.b.
dïth
;

1315 
txfifosize
.
b
.
dïth
 = 
TX3_FIFO_HS_SIZE
;

1316 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
DIEPTXF
[2], 
txfifosize
.
d32
 );

1319 
txfifosize
.
b
.
°¨èddr
 +txfifosize.b.
dïth
;

1320 
txfifosize
.
b
.
dïth
 = 
TX4_FIFO_HS_SIZE
;

1321 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
DIEPTXF
[3], 
txfifosize
.
d32
 );

1325 
txfifosize
.
b
.
°¨èddr
 +txfifosize.b.
dïth
;

1326 
txfifosize
.
b
.
dïth
 = 
TX5_FIFO_HS_SIZE
;

1327 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
DIEPTXF
[4], 
txfifosize
.
d32
 );

1331 
	`USB_OTG_FlushTxFifo
(
pdev
 , 0x10);

1332 
	`USB_OTG_FlushRxFifo
(
pdev
);

1334 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DIEPMSK
, 0 );

1335 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DOEPMSK
, 0 );

1336 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DAINT
, 0xFFFFFFFF );

1337 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DAINTMSK
, 0 );

1339 
i
 = 0; i < 
pdev
->
cfg
.
dev_ídpoöts
; i++)

1341 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[
i
]->
DIEPCTL
);

1342 i‡(
dï˘l
.
b
.
ïía
)

1344 
dï˘l
.
d32
 = 0;

1345 
dï˘l
.
b
.
ïdis
 = 1;

1346 
dï˘l
.
b
.
¢ak
 = 1;

1350 
dï˘l
.
d32
 = 0;

1352 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
INEP_REGS
[
i
]->
DIEPCTL
, 
dï˘l
.
d32
);

1353 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
INEP_REGS
[
i
]->
DIEPTSIZ
, 0);

1354 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
INEP_REGS
[
i
]->
DIEPINT
, 0xFF);

1356 
i
 = 0; i < 
pdev
->
cfg
.
dev_ídpoöts
; i++)

1358 
USB_OTG_DEPCTL_Ty≥Def
 
dï˘l
;

1359 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[
i
]->
DOEPCTL
);

1360 i‡(
dï˘l
.
b
.
ïía
)

1362 
dï˘l
.
d32
 = 0;

1363 
dï˘l
.
b
.
ïdis
 = 1;

1364 
dï˘l
.
b
.
¢ak
 = 1;

1368 
dï˘l
.
d32
 = 0;

1370 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
OUTEP_REGS
[
i
]->
DOEPCTL
, 
dï˘l
.
d32
);

1371 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
OUTEP_REGS
[
i
]->
DOEPTSIZ
, 0);

1372 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
OUTEP_REGS
[
i
]->
DOEPINT
, 0xFF);

1374 
msk
.
d32
 = 0;

1375 
msk
.
b
.
txfifound∫
 = 1;

1376 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DIEPMSK
, 
msk
.
d32
, msk.d32);

1378 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

1380 
dthr˘l
.
d32
 = 0;

1381 
dthr˘l
.
b
.
n⁄_iso_thr_í
 = 1;

1382 
dthr˘l
.
b
.
iso_thr_í
 = 1;

1383 
dthr˘l
.
b
.
tx_thr_Àn
 = 64;

1384 
dthr˘l
.
b
.
rx_thr_í
 = 1;

1385 
dthr˘l
.
b
.
rx_thr_Àn
 = 64;

1386 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
DREGS
->
DTHRCTL
, 
dthr˘l
.
d32
);

1388 
	`USB_OTG_E«bÀDevI¡
(
pdev
);

1389  
°©us
;

1390 
	}
}

1398 
USB_OTG_STS
 
	$USB_OTG_E«bÀDevI¡
(
USB_OTG_CORE_HANDLE
 *
pdev
)

1400 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1401 
USB_OTG_GINTMSK_Ty≥Def
 
ötmsk
;

1403 
ötmsk
.
d32
 = 0;

1406 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 0);

1408 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 0xFFFFFFFF);

1410 
	`USB_OTG_E«bÀComm⁄I¡
(
pdev
);

1412 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 0)

1414 
ötmsk
.
b
.
rx°sqlvl
 = 1;

1418 
ötmsk
.
b
.
usbsu•íd
 = 1;

1419 
ötmsk
.
b
.
usbª£t
 = 1;

1420 
ötmsk
.
b
.
íumd⁄e
 = 1;

1421 
ötmsk
.
b
.
öïöå
 = 1;

1422 
ötmsk
.
b
.
ouãpöå
 = 1;

1423 
ötmsk
.
b
.
soföå
 = 1;

1425 
ötmsk
.
b
.
öcom∂isoö
 = 1;

1426 
ötmsk
.
b
.
öcom∂isoout
 = 1;

1427 #ifde‡
VBUS_SENSING_ENABLED


1428 
ötmsk
.
b
.
£s§eqöå
 = 1;

1429 
ötmsk
.
b
.
Ÿgöå
 = 1;

1431 
	`USB_OTG_MODIFY_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 
ötmsk
.
d32
, intmsk.d32);

1432  
°©us
;

1433 
	}
}

1442 
USB_OTG_SPEED
 
	$USB_OTG_GëDevi˚S≥ed
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

1444 
USB_OTG_DSTS_Ty≥Def
 
d°s
;

1445 
USB_OTG_SPEED
 
•ìd
 = 
USB_SPEED_UNKNOWN
;

1448 
d°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DSTS
);

1450 
d°s
.
b
.
íum•d
)

1452 
DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ
:

1453 
•ìd
 = 
USB_SPEED_HIGH
;

1455 
DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
:

1456 
DSTS_ENUMSPD_FS_PHY_48MHZ
:

1457 
•ìd
 = 
USB_SPEED_FULL
;

1460 
DSTS_ENUMSPD_LS_PHY_6MHZ
:

1461 
•ìd
 = 
USB_SPEED_LOW
;

1465  
•ìd
;

1466 
	}
}

1473 
USB_OTG_STS
 
	$USB_OTG_EP0A˘iv©e
(
USB_OTG_CORE_HANDLE
 *
pdev
)

1475 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1476 
USB_OTG_DSTS_Ty≥Def
 
d°s
;

1477 
USB_OTG_DEPCTL_Ty≥Def
 
dõp˘l
;

1478 
USB_OTG_DCTL_Ty≥Def
 
d˘l
;

1480 
d˘l
.
d32
 = 0;

1482 
d°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DSTS
);

1483 
dõp˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[0]->
DIEPCTL
);

1485 
d°s
.
b
.
íum•d
)

1487 
DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ
:

1488 
DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
:

1489 
DSTS_ENUMSPD_FS_PHY_48MHZ
:

1490 
dõp˘l
.
b
.
mps
 = 
DEP0CTL_MPS_64
;

1492 
DSTS_ENUMSPD_LS_PHY_6MHZ
:

1493 
dõp˘l
.
b
.
mps
 = 
DEP0CTL_MPS_8
;

1496 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[0]->
DIEPCTL
, 
dõp˘l
.
d32
);

1497 
d˘l
.
b
.
cg≈ö«k
 = 1;

1498 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
, 
d˘l
.
d32
, dctl.d32);

1499  
°©us
;

1500 
	}
}

1508 
USB_OTG_STS
 
	$USB_OTG_EPA˘iv©e
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
)

1510 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1511 
USB_OTG_DEPCTL_Ty≥Def
 
dï˘l
;

1512 
USB_OTG_DAINT_Ty≥Def
 
daötmsk
;

1513 
__IO
 
uöt32_t
 *
addr
;

1516 
dï˘l
.
d32
 = 0;

1517 
daötmsk
.
d32
 = 0;

1519 i‡(
ï
->
is_ö
 == 1)

1521 
addr
 = &
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPCTL
;

1522 
daötmsk
.
ï
.
ö
 = 1 <<Ép->
num
;

1526 
addr
 = &
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPCTL
;

1527 
daötmsk
.
ï
.
out
 = 1 <<Ép->
num
;

1531 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
addr
);

1532 i‡(!
dï˘l
.
b
.
usba˘ï
)

1534 
dï˘l
.
b
.
mps
 = 
ï
->
max∑ckë
;

1535 
dï˘l
.
b
.
ïty≥
 = 
ï
->
ty≥
;

1536 
dï˘l
.
b
.
tx‚um
 = 
ï
->
tx_fifo_num
;

1537 
dï˘l
.
b
.
£td0pid
 = 1;

1538 
dï˘l
.
b
.
usba˘ï
 = 1;

1539 
	`USB_OTG_WRITE_REG32
(
addr
, 
dï˘l
.
d32
);

1542 #ifde‡
USB_OTG_HS_DEDICATED_EP1_ENABLED


1543 if((
ï
->
num
 =1)&&(
pdev
->
cfg
.
c‹eID
 =
USB_OTG_HS_CORE_ID
))

1545 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DEACHMSK
, 0, 
daötmsk
.
d32
);

1549 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DAINTMSK
, 0, 
daötmsk
.
d32
);

1550  
°©us
;

1551 
	}
}

1559 
USB_OTG_STS
 
	$USB_OTG_EPDó˘iv©e
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
)

1561 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1562 
USB_OTG_DEPCTL_Ty≥Def
 
dï˘l
;

1563 
USB_OTG_DAINT_Ty≥Def
 
daötmsk
;

1564 
__IO
 
uöt32_t
 *
addr
;

1566 
dï˘l
.
d32
 = 0;

1567 
daötmsk
.
d32
 = 0;

1569 i‡(
ï
->
is_ö
 == 1)

1571 
addr
 = &
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPCTL
;

1572 
daötmsk
.
ï
.
ö
 = 1 <<Ép->
num
;

1576 
addr
 = &
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPCTL
;

1577 
daötmsk
.
ï
.
out
 = 1 <<Ép->
num
;

1579 
dï˘l
.
b
.
usba˘ï
 = 0;

1580 
	`USB_OTG_WRITE_REG32
(
addr
, 
dï˘l
.
d32
);

1583 #ifde‡
USB_OTG_HS_DEDICATED_EP1_ENABLED


1584 if((
ï
->
num
 =1)&&(
pdev
->
cfg
.
c‹eID
 =
USB_OTG_HS_CORE_ID
))

1586 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DEACHMSK
, 
daötmsk
.
d32
, 0);

1590 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DAINTMSK
, 
daötmsk
.
d32
, 0);

1591  
°©us
;

1592 
	}
}

1601 
USB_OTG_STS
 
	$USB_OTG_EPSèπX„r
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
)

1603 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1604 
USB_OTG_DEPCTL_Ty≥Def
 
dï˘l
;

1605 
USB_OTG_DEPXFRSIZ_Ty≥Def
 
dïtsiz
;

1606 
USB_OTG_DSTS_Ty≥Def
 
d°s
;

1607 
uöt32_t
 
fif€m±ymsk
 = 0;

1609 
dï˘l
.
d32
 = 0;

1610 
dïtsiz
.
d32
 = 0;

1612 i‡(
ï
->
is_ö
 == 1)

1614 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&(
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPCTL
));

1615 
dïtsiz
.
d32
 = 
	`USB_OTG_READ_REG32
(&(
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPTSIZ
));

1617 i‡(
ï
->
x„r_Àn
 == 0)

1619 
dïtsiz
.
b
.
x„rsize
 = 0;

1620 
dïtsiz
.
b
.
pkt˙t
 = 1;

1629 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
x„r_Àn
;

1630 
dïtsiz
.
b
.
pkt˙t
 = (
ï
->
x„r_Àn
 - 1 +Ép->
max∑ckë
) /Ép->maxpacket;

1632 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

1634 
dïtsiz
.
b
.
mc
 = 1;

1637 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPTSIZ
, 
dïtsiz
.
d32
);

1639 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

1641 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPDMA
,Ép->
dma_addr
);

1645 i‡(
ï
->
ty≥
 !
EP_TYPE_ISOC
)

1648 i‡(
ï
->
x„r_Àn
 > 0)

1650 
fif€m±ymsk
 = 1 << 
ï
->
num
;

1651 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DIEPEMPMSK
, 0, 
fif€m±ymsk
);

1657 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

1659 
d°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DSTS
);

1661 i‡(((
d°s
.
b
.
sof‚
)&0x1) == 0)

1663 
dï˘l
.
b
.
£td1pid
 = 1;

1667 
dï˘l
.
b
.
£td0pid
 = 1;

1672 
dï˘l
.
b
.
˙ak
 = 1;

1673 
dï˘l
.
b
.
ïía
 = 1;

1674 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPCTL
, 
dï˘l
.
d32
);

1676 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

1678 
	`USB_OTG_WrôePackë
(
pdev
, 
ï
->
x„r_buff
,Ép->
num
,Ép->
x„r_Àn
);

1684 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&(
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPCTL
));

1685 
dïtsiz
.
d32
 = 
	`USB_OTG_READ_REG32
(&(
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPTSIZ
));

1690 i‡(
ï
->
x„r_Àn
 == 0)

1692 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
max∑ckë
;

1693 
dïtsiz
.
b
.
pkt˙t
 = 1;

1697 
dïtsiz
.
b
.
pkt˙t
 = (
ï
->
x„r_Àn
 + (ï->
max∑ckë
 - 1)) /Ép->maxpacket;

1698 
dïtsiz
.
b
.
x„rsize
 = dïtsiz.b.
pkt˙t
 * 
ï
->
max∑ckë
;

1700 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPTSIZ
, 
dïtsiz
.
d32
);

1702 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

1704 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPDMA
,Ép->
dma_addr
);

1707 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

1709 i‡(
ï
->
eví_odd_‰ame
)

1711 
dï˘l
.
b
.
£td1pid
 = 1;

1715 
dï˘l
.
b
.
£td0pid
 = 1;

1719 
dï˘l
.
b
.
˙ak
 = 1;

1720 
dï˘l
.
b
.
ïía
 = 1;

1721 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPCTL
, 
dï˘l
.
d32
);

1723  
°©us
;

1724 
	}
}

1733 
USB_OTG_STS
 
	$USB_OTG_EP0SèπX„r
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
)

1735 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1736 
USB_OTG_DEPCTL_Ty≥Def
 
dï˘l
;

1737 
USB_OTG_DEP0XFRSIZ_Ty≥Def
 
dïtsiz
;

1738 
USB_OTG_INEPREGS
 *
ö_ªgs
;

1739 
uöt32_t
 
fif€m±ymsk
 = 0;

1741 
dï˘l
.
d32
 = 0;

1742 
dïtsiz
.
d32
 = 0;

1744 i‡(
ï
->
is_ö
 == 1)

1746 
ö_ªgs
 = 
pdev
->
ªgs
.
INEP_REGS
[0];

1747 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
ö_ªgs
->
DIEPCTL
);

1748 
dïtsiz
.
d32
 = 
	`USB_OTG_READ_REG32
(&
ö_ªgs
->
DIEPTSIZ
);

1750 i‡(
ï
->
x„r_Àn
 == 0)

1752 
dïtsiz
.
b
.
x„rsize
 = 0;

1753 
dïtsiz
.
b
.
pkt˙t
 = 1;

1758 i‡(
ï
->
x„r_Àn
 >Ép->
max∑ckë
)

1760 
ï
->
x„r_Àn
 =Ép->
max∑ckë
;

1761 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
max∑ckë
;

1765 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
x„r_Àn
;

1767 
dïtsiz
.
b
.
pkt˙t
 = 1;

1769 
	`USB_OTG_WRITE_REG32
(&
ö_ªgs
->
DIEPTSIZ
, 
dïtsiz
.
d32
);

1771 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

1773 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPDMA
,Ép->
dma_addr
);

1777 
dï˘l
.
b
.
˙ak
 = 1;

1778 
dï˘l
.
b
.
ïía
 = 1;

1779 
	`USB_OTG_WRITE_REG32
(&
ö_ªgs
->
DIEPCTL
, 
dï˘l
.
d32
);

1783 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 0)

1786 i‡(
ï
->
x„r_Àn
 > 0)

1789 
fif€m±ymsk
 |1 << 
ï
->
num
;

1790 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DIEPEMPMSK
, 0, 
fif€m±ymsk
);

1798 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPCTL
);

1799 
dïtsiz
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPTSIZ
);

1803 i‡(
ï
->
x„r_Àn
 == 0)

1805 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
max∑ckë
;

1806 
dïtsiz
.
b
.
pkt˙t
 = 1;

1810 
ï
->
x„r_Àn
 =Ép->
max∑ckë
;

1811 
dïtsiz
.
b
.
x„rsize
 = 
ï
->
max∑ckë
;

1812 
dïtsiz
.
b
.
pkt˙t
 = 1;

1814 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPTSIZ
, 
dïtsiz
.
d32
);

1815 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

1817 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPDMA
,Ép->
dma_addr
);

1820 
dï˘l
.
b
.
˙ak
 = 1;

1821 
dï˘l
.
b
.
ïía
 = 1;

1822 
	`USB_OTG_WRITE_REG32
 (&(
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPCTL
), 
dï˘l
.
d32
);

1825  
°©us
;

1826 
	}
}

1834 
USB_OTG_STS
 
	$USB_OTG_EPSëSèŒ
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
)

1836 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1837 
USB_OTG_DEPCTL_Ty≥Def
 
dï˘l
;

1838 
__IO
 
uöt32_t
 *
dï˘l_addr
;

1840 
dï˘l
.
d32
 = 0;

1841 i‡(
ï
->
is_ö
 == 1)

1843 
dï˘l_addr
 = &(
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPCTL
);

1844 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

1846 i‡(
dï˘l
.
b
.
ïía
)

1848 
dï˘l
.
b
.
ïdis
 = 1;

1850 
dï˘l
.
b
.
°Æl
 = 1;

1851 
	`USB_OTG_WRITE_REG32
(
dï˘l_addr
, 
dï˘l
.
d32
);

1855 
dï˘l_addr
 = &(
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPCTL
);

1856 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

1858 
dï˘l
.
b
.
°Æl
 = 1;

1859 
	`USB_OTG_WRITE_REG32
(
dï˘l_addr
, 
dï˘l
.
d32
);

1861  
°©us
;

1862 
	}
}

1870 
USB_OTG_STS
 
	$USB_OTG_EPCÀ¨SèŒ
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
)

1872 
USB_OTG_STS
 
°©us
 = 
USB_OTG_OK
;

1873 
USB_OTG_DEPCTL_Ty≥Def
 
dï˘l
;

1874 
__IO
 
uöt32_t
 *
dï˘l_addr
;

1876 
dï˘l
.
d32
 = 0;

1878 i‡(
ï
->
is_ö
 == 1)

1880 
dï˘l_addr
 = &(
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPCTL
);

1884 
dï˘l_addr
 = &(
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPCTL
);

1886 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

1888 
dï˘l
.
b
.
°Æl
 = 0;

1889 i‡(
ï
->
ty≥
 =
EP_TYPE_INTR
 ||Ép->ty≥ =
EP_TYPE_BULK
)

1891 
dï˘l
.
b
.
£td0pid
 = 1;

1893 
	`USB_OTG_WRITE_REG32
(
dï˘l_addr
, 
dï˘l
.
d32
);

1894  
°©us
;

1895 
	}
}

1903 
uöt32_t
 
	$USB_OTG_RódDevAŒOutEp_ôr
(
USB_OTG_CORE_HANDLE
 *
pdev
)

1905 
uöt32_t
 
v
;

1906 
v
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DAINT
);

1907 
v
 &
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DAINTMSK
);

1908  ((
v
 & 0xffff0000) >> 16);

1909 
	}
}

1918 
uöt32_t
 
	$USB_OTG_RódDevOutEP_ôr
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
ïnum
)

1920 
uöt32_t
 
v
;

1921 
v
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[
ïnum
]->
DOEPINT
);

1922 
v
 &
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DOEPMSK
);

1923  
v
;

1924 
	}
}

1932 
uöt32_t
 
	$USB_OTG_RódDevAŒInEPIå
(
USB_OTG_CORE_HANDLE
 *
pdev
)

1934 
uöt32_t
 
v
;

1935 
v
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DAINT
);

1936 
v
 &
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DAINTMSK
);

1937  (
v
 & 0xffff);

1938 
	}
}

1945 
	$USB_OTG_EP0_OutSèπ
(
USB_OTG_CORE_HANDLE
 *
pdev
)

1947 
USB_OTG_DEP0XFRSIZ_Ty≥Def
 
d€±size0
;

1948 
d€±size0
.
d32
 = 0;

1949 
d€±size0
.
b
.
sup˙t
 = 3;

1950 
d€±size0
.
b
.
pkt˙t
 = 1;

1951 
d€±size0
.
b
.
x„rsize
 = 8 * 3;

1952 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
OUTEP_REGS
[0]->
DOEPTSIZ
, 
d€±size0
.
d32
 );

1954 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

1956 
USB_OTG_DEPCTL_Ty≥Def
 
d€p˘l
;

1957 
d€p˘l
.
d32
 = 0;

1958 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
OUTEP_REGS
[0]->
DOEPDMA
,

1959 (
uöt32_t
)&
pdev
->
dev
.
£tup_∑ckë
);

1962 
d€p˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[0]->
DOEPCTL
);

1963 
d€p˘l
.
b
.
ïía
 = 1;

1964 
d€p˘l
.
d32
 = 0x80008000;

1965 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
OUTEP_REGS
[0]->
DOEPCTL
, 
d€p˘l
.
d32
);

1967 
	}
}

1974 
	$USB_OTG_A˘iveRemŸeWakeup
(
USB_OTG_CORE_HANDLE
 *
pdev
)

1977 
USB_OTG_DCTL_Ty≥Def
 
d˘l
;

1978 
USB_OTG_DSTS_Ty≥Def
 
d°s
;

1979 
USB_OTG_PCGCCTL_Ty≥Def
 
powî
;

1981 i‡(
pdev
->
dev
.
DevRemŸeWakeup
)

1983 
d°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DSTS
);

1984 if(
d°s
.
b
.
su•°s
 == 1)

1986 if(
pdev
->
cfg
.
low_powî
)

1989 
powî
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
PCGCCTL
);

1990 
powî
.
b
.
g©eh˛k
 = 0;

1991 
powî
.
b
.
°›p˛k
 = 0;

1992 
	`USB_OTG_WRITE_REG32
(
pdev
->
ªgs
.
PCGCCTL
, 
powî
.
d32
);

1995 
d˘l
.
d32
 = 0;

1996 
d˘l
.
b
.
rmtwkupsig
 = 1;

1997 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
, 0, 
d˘l
.
d32
);

1998 
	`USB_OTG_BSP_mDñay
(5);

1999 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
, 
d˘l
.
d32
, 0 );

2002 
	}
}

2010 
	$USB_OTG_Ung©eClock
(
USB_OTG_CORE_HANDLE
 *
pdev
)

2012 if(
pdev
->
cfg
.
low_powî
)

2015 
USB_OTG_DSTS_Ty≥Def
 
d°s
;

2016 
USB_OTG_PCGCCTL_Ty≥Def
 
powî
;

2018 
d°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DSTS
);

2020 if(
d°s
.
b
.
su•°s
 == 1)

2023 
powî
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
PCGCCTL
);

2024 
powî
.
b
.
g©eh˛k
 = 0;

2025 
powî
.
b
.
°›p˛k
 = 0;

2026 
	`USB_OTG_WRITE_REG32
(
pdev
->
ªgs
.
PCGCCTL
, 
powî
.
d32
);

2030 
	}
}

2037 
	$USB_OTG_St›Devi˚
(
USB_OTG_CORE_HANDLE
 *
pdev
)

2039 
uöt32_t
 
i
;

2041 
pdev
->
dev
.
devi˚_°©us
 = 1;

2043 
i
 = 0; i < 
pdev
->
cfg
.
dev_ídpoöts
 ; i++)

2045 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
INEP_REGS
[
i
]->
DIEPINT
, 0xFF);

2046 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
OUTEP_REGS
[
i
]->
DOEPINT
, 0xFF);

2049 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DIEPMSK
, 0 );

2050 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DOEPMSK
, 0 );

2051 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DAINTMSK
, 0 );

2052 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DAINT
, 0xFFFFFFFF );

2055 
	`USB_OTG_FlushRxFifo
(
pdev
);

2056 
	`USB_OTG_FlushTxFifo
(
pdev
 , 0x10 );

2057 
	}
}

2066 
uöt32_t
 
	$USB_OTG_GëEPSètus
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,
USB_OTG_EP
 *
ï
)

2068 
USB_OTG_DEPCTL_Ty≥Def
 
dï˘l
;

2069 
__IO
 
uöt32_t
 *
dï˘l_addr
;

2070 
uöt32_t
 
Sètus
 = 0;

2072 
dï˘l
.
d32
 = 0;

2073 i‡(
ï
->
is_ö
 == 1)

2075 
dï˘l_addr
 = &(
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPCTL
);

2076 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

2078 i‡(
dï˘l
.
b
.
°Æl
 == 1)

2079 
Sètus
 = 
USB_OTG_EP_TX_STALL
;

2080 i‡(
dï˘l
.
b
.
«k°s
 == 1)

2081 
Sètus
 = 
USB_OTG_EP_TX_NAK
;

2083 
Sètus
 = 
USB_OTG_EP_TX_VALID
;

2088 
dï˘l_addr
 = &(
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPCTL
);

2089 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

2090 i‡(
dï˘l
.
b
.
°Æl
 == 1)

2091 
Sètus
 = 
USB_OTG_EP_RX_STALL
;

2092 i‡(
dï˘l
.
b
.
«k°s
 == 1)

2093 
Sètus
 = 
USB_OTG_EP_RX_NAK
;

2095 
Sètus
 = 
USB_OTG_EP_RX_VALID
;

2099  
Sètus
;

2100 
	}
}

2109 
	$USB_OTG_SëEPSètus
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
USB_OTG_EP
 *
ï
 , 
uöt32_t
 
Sètus
)

2111 
USB_OTG_DEPCTL_Ty≥Def
 
dï˘l
;

2112 
__IO
 
uöt32_t
 *
dï˘l_addr
;

2114 
dï˘l
.
d32
 = 0;

2117 i‡(
ï
->
is_ö
 == 1)

2119 
dï˘l_addr
 = &(
pdev
->
ªgs
.
INEP_REGS
[
ï
->
num
]->
DIEPCTL
);

2120 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

2122 i‡(
Sètus
 =
USB_OTG_EP_TX_STALL
)

2124 
	`USB_OTG_EPSëSèŒ
(
pdev
, 
ï
); ;

2126 i‡(
Sètus
 =
USB_OTG_EP_TX_NAK
)

2127 
dï˘l
.
b
.
¢ak
 = 1;

2128 i‡(
Sètus
 =
USB_OTG_EP_TX_VALID
)

2130 i‡(
dï˘l
.
b
.
°Æl
 == 1)

2132 
ï
->
eví_odd_‰ame
 = 0;

2133 
	`USB_OTG_EPCÀ¨SèŒ
(
pdev
, 
ï
);

2136 
dï˘l
.
b
.
˙ak
 = 1;

2137 
dï˘l
.
b
.
usba˘ï
 = 1;

2138 
dï˘l
.
b
.
ïía
 = 1;

2140 i‡(
Sètus
 =
USB_OTG_EP_TX_DIS
)

2141 
dï˘l
.
b
.
usba˘ï
 = 0;

2145 
dï˘l_addr
 = &(
pdev
->
ªgs
.
OUTEP_REGS
[
ï
->
num
]->
DOEPCTL
);

2146 
dï˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(
dï˘l_addr
);

2148 i‡(
Sètus
 =
USB_OTG_EP_RX_STALL
) {

2149 
dï˘l
.
b
.
°Æl
 = 1;

2151 i‡(
Sètus
 =
USB_OTG_EP_RX_NAK
)

2152 
dï˘l
.
b
.
¢ak
 = 1;

2153 i‡(
Sètus
 =
USB_OTG_EP_RX_VALID
)

2155 i‡(
dï˘l
.
b
.
°Æl
 == 1)

2157 
ï
->
eví_odd_‰ame
 = 0;

2158 
	`USB_OTG_EPCÀ¨SèŒ
(
pdev
, 
ï
);

2161 
dï˘l
.
b
.
˙ak
 = 1;

2162 
dï˘l
.
b
.
usba˘ï
 = 1;

2163 
dï˘l
.
b
.
ïía
 = 1;

2165 i‡(
Sètus
 =
USB_OTG_EP_RX_DIS
)

2167 
dï˘l
.
b
.
usba˘ï
 = 0;

2171 
	`USB_OTG_WRITE_REG32
(
dï˘l_addr
, 
dï˘l
.
d32
);

2172 
	}
}

	@libstm/STM32_USB_OTG_Driver/src/usb_dcd.c

23 
	~"usb_dcd.h
"

24 
	~"usb_b•.h
"

85 
	$DCD_Inô
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

86 
USB_OTG_CORE_ID_Ty≥Def
 
c‹eID
)

88 
uöt32_t
 
i
;

89 
USB_OTG_EP
 *
ï
;

91 
	`USB_OTG_Sñe˘C‹e
 (
pdev
 , 
c‹eID
);

93 
pdev
->
dev
.
devi˚_°©us
 = 
USB_OTG_DEFAULT
;

94 
pdev
->
dev
.
devi˚_addªss
 = 0;

97 
i
 = 0; i < 
pdev
->
cfg
.
dev_ídpoöts
 ; i++)

99 
ï
 = &
pdev
->
dev
.
ö_ï
[
i
];

101 
ï
->
is_ö
 = 1;

102 
ï
->
num
 = 
i
;

103 
ï
->
tx_fifo_num
 = 
i
;

105 
ï
->
ty≥
 = 
EP_TYPE_CTRL
;

106 
ï
->
max∑ckë
 = 
USB_OTG_MAX_EP0_SIZE
;

107 
ï
->
x„r_buff
 = 0;

108 
ï
->
x„r_Àn
 = 0;

111 
i
 = 0; i < 
pdev
->
cfg
.
dev_ídpoöts
; i++)

113 
ï
 = &
pdev
->
dev
.
out_ï
[
i
];

115 
ï
->
is_ö
 = 0;

116 
ï
->
num
 = 
i
;

117 
ï
->
tx_fifo_num
 = 
i
;

119 
ï
->
ty≥
 = 
EP_TYPE_CTRL
;

120 
ï
->
max∑ckë
 = 
USB_OTG_MAX_EP0_SIZE
;

121 
ï
->
x„r_buff
 = 0;

122 
ï
->
x„r_Àn
 = 0;

125 
	`USB_OTG_DißbÀGlobÆI¡
(
pdev
);

128 
	`USB_OTG_C‹eInô
(
pdev
);

132 
	`USB_OTG_SëCuºítMode
(
pdev
, 
DEVICE_MODE
);

135 
	`USB_OTG_C‹eInôDev
(
pdev
);

139 
	`USB_OTG_E«bÀGlobÆI¡
(
pdev
);

140 
	}
}

149 
uöt32_t
 
	$DCD_EP_O≥n
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

150 
uöt8_t
 
ï_addr
,

151 
uöt16_t
 
ï_mps
,

152 
uöt8_t
 
ï_ty≥
)

154 
USB_OTG_EP
 *
ï
;

156 i‡((
ï_addr
 & 0x80) == 0x80)

158 
ï
 = &
pdev
->
dev
.
ö_ï
[
ï_addr
 & 0x7F];

162 
ï
 = &
pdev
->
dev
.
out_ï
[
ï_addr
 & 0x7F];

164 
ï
->
num
 = 
ï_addr
 & 0x7F;

166 
ï
->
is_ö
 = (0x80 & 
ï_addr
) != 0;

167 
ï
->
max∑ckë
 = 
ï_mps
;

168 
ï
->
ty≥
 = 
ï_ty≥
;

169 i‡(
ï
->
is_ö
)

172 
ï
->
tx_fifo_num
 =Ép->
num
;

175 i‡(
ï_ty≥
 =
USB_OTG_EP_BULK
 )

177 
ï
->
d©a_pid_°¨t
 = 0;

179 
	`USB_OTG_EPA˘iv©e
(
pdev
 , 
ï
 );

181 
	}
}

188 
uöt32_t
 
	$DCD_EP_Clo£
(
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
ï_addr
)

190 
USB_OTG_EP
 *
ï
;

192 i‡((
ï_addr
&0x80) == 0x80)

194 
ï
 = &
pdev
->
dev
.
ö_ï
[
ï_addr
 & 0x7F];

198 
ï
 = &
pdev
->
dev
.
out_ï
[
ï_addr
 & 0x7F];

200 
ï
->
num
 = 
ï_addr
 & 0x7F;

201 
ï
->
is_ö
 = (0x80 & 
ï_addr
) != 0;

202 
	`USB_OTG_EPDó˘iv©e
(
pdev
 , 
ï
 );

204 
	}
}

215 
uöt32_t
 
	$DCD_EP_Pª∑ªRx
–
USB_OTG_CORE_HANDLE
 *
pdev
,

216 
uöt8_t
 
ï_addr
,

217 
uöt8_t
 *
pbuf
,

218 
uöt16_t
 
buf_Àn
)

220 
USB_OTG_EP
 *
ï
;

222 
ï
 = &
pdev
->
dev
.
out_ï
[
ï_addr
 & 0x7F];

225 
ï
->
x„r_buff
 = 
pbuf
;

226 
ï
->
x„r_Àn
 = 
buf_Àn
;

227 
ï
->
x„r_cou¡
 = 0;

228 
ï
->
is_ö
 = 0;

229 
ï
->
num
 = 
ï_addr
 & 0x7F;

231 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

233 
ï
->
dma_addr
 = (
uöt32_t
)
pbuf
;

236 i‡–
ï
->
num
 == 0 )

238 
	`USB_OTG_EP0SèπX„r
(
pdev
 , 
ï
);

242 
	`USB_OTG_EPSèπX„r
(
pdev
, 
ï
 );

245 
	}
}

255 
uöt32_t
 
	$DCD_EP_Tx
 ( 
USB_OTG_CORE_HANDLE
 *
pdev
,

256 
uöt8_t
 
ï_addr
,

257 
uöt8_t
 *
pbuf
,

258 
uöt32_t
 
buf_Àn
)

260 
USB_OTG_EP
 *
ï
;

262 
ï
 = &
pdev
->
dev
.
ö_ï
[
ï_addr
 & 0x7F];

265 
ï
->
is_ö
 = 1;

266 
ï
->
num
 = 
ï_addr
 & 0x7F;

267 
ï
->
x„r_buff
 = 
pbuf
;

268 
ï
->
dma_addr
 = (
uöt32_t
)
pbuf
;

269 
ï
->
x„r_cou¡
 = 0;

270 
ï
->
x„r_Àn
 = 
buf_Àn
;

272 i‡–
ï
->
num
 == 0 )

274 
	`USB_OTG_EP0SèπX„r
(
pdev
 , 
ï
);

278 
	`USB_OTG_EPSèπX„r
(
pdev
, 
ï
 );

281 
	}
}

290 
uöt32_t
 
	$DCD_EP_SèŒ
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
ïnum
)

292 
USB_OTG_EP
 *
ï
;

293 i‡((0x80 & 
ïnum
) == 0x80)

295 
ï
 = &
pdev
->
dev
.
ö_ï
[
ïnum
 & 0x7F];

299 
ï
 = &
pdev
->
dev
.
out_ï
[
ïnum
];

302 
ï
->
is_°Æl
 = 1;

303 
ï
->
num
 = 
ïnum
 & 0x7F;

304 
ï
->
is_ö
 = ((
ïnum
 & 0x80) == 0x80);

306 
	`USB_OTG_EPSëSèŒ
(
pdev
 , 
ï
);

308 
	}
}

317 
uöt32_t
 
	$DCD_EP_CÃSèŒ
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
ïnum
)

319 
USB_OTG_EP
 *
ï
;

320 i‡((0x80 & 
ïnum
) == 0x80)

322 
ï
 = &
pdev
->
dev
.
ö_ï
[
ïnum
 & 0x7F];

326 
ï
 = &
pdev
->
dev
.
out_ï
[
ïnum
];

329 
ï
->
is_°Æl
 = 0;

330 
ï
->
num
 = 
ïnum
 & 0x7F;

331 
ï
->
is_ö
 = ((
ïnum
 & 0x80) == 0x80);

333 
	`USB_OTG_EPCÀ¨SèŒ
(
pdev
 , 
ï
);

335 
	}
}

344 
uöt32_t
 
	$DCD_EP_Flush
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
ïnum
)

347 i‡((
ïnum
 & 0x80) == 0x80)

349 
	`USB_OTG_FlushTxFifo
(
pdev
, 
ïnum
 & 0x7F);

353 
	`USB_OTG_FlushRxFifo
(
pdev
);

357 
	}
}

366 
	$DCD_EP_SëAddªss
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
addªss
)

368 
USB_OTG_DCFG_Ty≥Def
 
dcfg
;

369 
dcfg
.
d32
 = 0;

370 
dcfg
.
b
.
devaddr
 = 
addªss
;

371 
	`USB_OTG_MODIFY_REG32
–&
pdev
->
ªgs
.
DREGS
->
DCFG
, 0, 
dcfg
.
d32
);

372 
	}
}

379 
	$DCD_DevC⁄√˘
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

381 #i‚de‡
USE_OTG_MODE


382 
USB_OTG_DCTL_Ty≥Def
 
d˘l
;

383 
d˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
);

385 
d˘l
.
b
.
s·disc⁄
 = 0;

386 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
, 
d˘l
.
d32
);

387 
	`USB_OTG_BSP_mDñay
(3);

389 
	}
}

397 
	$DCD_DevDisc⁄√˘
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

399 #i‚de‡
USE_OTG_MODE


400 
USB_OTG_DCTL_Ty≥Def
 
d˘l
;

401 
d˘l
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
);

403 
d˘l
.
b
.
s·disc⁄
 = 1;

404 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
, 
d˘l
.
d32
);

405 
	`USB_OTG_BSP_mDñay
(3);

407 
	}
}

417 
uöt32_t
 
	$DCD_GëEPSètus
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,
uöt8_t
 
ïnum
)

419 
USB_OTG_EP
 *
ï
;

420 
uöt32_t
 
Sètus
 = 0;

422 i‡((0x80 & 
ïnum
) == 0x80)

424 
ï
 = &
pdev
->
dev
.
ö_ï
[
ïnum
 & 0x7F];

428 
ï
 = &
pdev
->
dev
.
out_ï
[
ïnum
];

431 
Sètus
 = 
	`USB_OTG_GëEPSètus
(
pdev
 ,
ï
);

434  
Sètus
;

435 
	}
}

444 
	$DCD_SëEPSètus
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
ïnum
 , 
uöt32_t
 
Sètus
)

446 
USB_OTG_EP
 *
ï
;

448 i‡((0x80 & 
ïnum
) == 0x80)

450 
ï
 = &
pdev
->
dev
.
ö_ï
[
ïnum
 & 0x7F];

454 
ï
 = &
pdev
->
dev
.
out_ï
[
ïnum
];

457 
	`USB_OTG_SëEPSètus
(
pdev
 ,
ï
 , 
Sètus
);

458 
	}
}

	@libstm/STM32_USB_OTG_Driver/src/usb_dcd_int.c

23 
	~"usb_dcd_öt.h
"

71 
uöt32_t
 
DCD_RódDevInEP
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
ïnum
);

74 
uöt32_t
 
DCD_H™dÀInEP_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

75 
uöt32_t
 
DCD_H™dÀOutEP_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

76 
uöt32_t
 
DCD_H™dÀSof_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

78 
uöt32_t
 
DCD_H™dÀRxSètusQueueLevñ_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

79 
uöt32_t
 
DCD_WrôeEm±yTxFifo
(
USB_OTG_CORE_HANDLE
 *
pdev
 , uöt32_à
ïnum
);

81 
uöt32_t
 
DCD_H™dÀUsbRe£t_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

82 
uöt32_t
 
DCD_H™dÀEnumD⁄e_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

83 
uöt32_t
 
DCD_H™dÀResume_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

84 
uöt32_t
 
DCD_H™dÀUSBSu•íd_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

86 
uöt32_t
 
DCD_IsoINIncom∂ëe_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

87 
uöt32_t
 
DCD_IsoOUTIncom∂ëe_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

88 #ifde‡
VBUS_SENSING_ENABLED


89 
uöt32_t
 
DCD_Sessi⁄Reque°_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

90 
uöt32_t
 
DCD_OTG_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

103 #ifde‡
USB_OTG_HS_DEDICATED_EP1_ENABLED


110 
uöt32_t
 
	$USBD_OTG_EP1OUT_ISR_H™dÀr
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

113 
USB_OTG_DOEPINTn_Ty≥Def
 
d€pöt
;

114 
USB_OTG_DEPXFRSIZ_Ty≥Def
 
dïtsiz
;

116 
d€pöt
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
OUTEP_REGS
[1]->
DOEPINT
);

117 
d€pöt
.
d32
&
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DOUTEP1MSK
);

120 i‡–
d€pöt
.
b
.
x„rcom∂
 )

123 
	`CLEAR_OUT_EP_INTR
(1, 
x„rcom∂
);

124 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

126 
dïtsiz
.
d32
 = 
	`USB_OTG_READ_REG32
(&(
pdev
->
ªgs
.
OUTEP_REGS
[1]->
DOEPTSIZ
));

128 
pdev
->
dev
.
out_ï
[1].
x„r_cou¡
 =Ödev->dev.out_ï[1].
max∑ckë
 - \

129 
dïtsiz
.
b
.
x„rsize
;

133 
USBD_DCD_INT_f›s
->
	`D©aOutSège
(
pdev
 , 1);

138 i‡–
d€pöt
.
b
.
ïdißbÀd
 )

141 
	`CLEAR_OUT_EP_INTR
(1, 
ïdißbÀd
);

144 i‡–
d€pöt
.
b
.
ahbîr
 )

146 
	`CLEAR_OUT_EP_INTR
(1, 
ahbîr
);

149 
	}
}

157 
uöt32_t
 
	$USBD_OTG_EP1IN_ISR_H™dÀr
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

160 
USB_OTG_DIEPINTn_Ty≥Def
 
dõpöt
;

161 
uöt32_t
 
fif€m±ymsk
, 
msk
, 
emp
;

163 
msk
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DINEP1MSK
);

164 
emp
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DIEPEMPMSK
);

165 
msk
 |((
emp
 >> 1 ) & 0x1) << 7;

166 
dõpöt
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[1]->
DIEPINT
Ë& 
msk
;

168 i‡–
dõpöt
.
b
.
x„rcom∂
 )

170 
fif€m±ymsk
 = 0x1 << 1;

171 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DIEPEMPMSK
, 
fif€m±ymsk
, 0);

172 
	`CLEAR_IN_EP_INTR
(1, 
x„rcom∂
);

174 
USBD_DCD_INT_f›s
->
	`D©aInSège
(
pdev
 , 1);

176 i‡–
dõpöt
.
b
.
ahbîr
 )

178 
	`CLEAR_IN_EP_INTR
(1, 
ahbîr
);

180 i‡–
dõpöt
.
b
.
ïdißbÀd
 )

182 
	`CLEAR_IN_EP_INTR
(1, 
ïdißbÀd
);

184 i‡–
dõpöt
.
b
.
timeout
 )

186 
	`CLEAR_IN_EP_INTR
(1, 
timeout
);

188 i‡(
dõpöt
.
b
.
ötktx„mp
)

190 
	`CLEAR_IN_EP_INTR
(1, 
ötktx„mp
);

192 i‡(
dõpöt
.
b
.
ötk√pmis
)

194 
	`CLEAR_IN_EP_INTR
(1, 
ötk√pmis
);

196 i‡(
dõpöt
.
b
.
öï«keff
)

198 
	`CLEAR_IN_EP_INTR
(1, 
öï«keff
);

200 i‡(
dõpöt
.
b
.
em±yöå
)

202 
	`DCD_WrôeEm±yTxFifo
(
pdev
 , 1);

203 
	`CLEAR_IN_EP_INTR
(1, 
em±yöå
);

206 
	}
}

215 
uöt32_t
 
	$USBD_OTG_ISR_H™dÀr
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

217 
USB_OTG_GINTSTS_Ty≥Def
 
göå_°©us
;

218 
uöt32_t
 
ªtvÆ
 = 0;

220 i‡(
	`USB_OTG_IsDevi˚Mode
(
pdev
))

222 
göå_°©us
.
d32
 = 
	`USB_OTG_RódC‹eIå
(
pdev
);

223 i‡(!
göå_°©us
.
d32
)

228 i‡(
göå_°©us
.
b
.
ouãpöå
)

230 
ªtvÆ
 |
	`DCD_H™dÀOutEP_ISR
(
pdev
);

233 i‡(
göå_°©us
.
b
.
öïöt
)

235 
ªtvÆ
 |
	`DCD_H™dÀInEP_ISR
(
pdev
);

238 i‡(
göå_°©us
.
b
.
modemism©ch
)

240 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

243 
göt°s
.
d32
 = 0;

244 
göt°s
.
b
.
modemism©ch
 = 1;

245 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

248 i‡(
göå_°©us
.
b
.
wkupöå
)

250 
ªtvÆ
 |
	`DCD_H™dÀResume_ISR
(
pdev
);

253 i‡(
göå_°©us
.
b
.
usbsu•íd
)

255 
ªtvÆ
 |
	`DCD_H™dÀUSBSu•íd_ISR
(
pdev
);

257 i‡(
göå_°©us
.
b
.
soföå
)

259 
ªtvÆ
 |
	`DCD_H™dÀSof_ISR
(
pdev
);

263 i‡(
göå_°©us
.
b
.
rx°sqlvl
)

265 
ªtvÆ
 |
	`DCD_H™dÀRxSètusQueueLevñ_ISR
(
pdev
);

269 i‡(
göå_°©us
.
b
.
usbª£t
)

271 
ªtvÆ
 |
	`DCD_H™dÀUsbRe£t_ISR
(
pdev
);

274 i‡(
göå_°©us
.
b
.
íumd⁄e
)

276 
ªtvÆ
 |
	`DCD_H™dÀEnumD⁄e_ISR
(
pdev
);

279 i‡(
göå_°©us
.
b
.
öcom∂isoö
)

281 
ªtvÆ
 |
	`DCD_IsoINIncom∂ëe_ISR
(
pdev
);

284 i‡(
göå_°©us
.
b
.
öcom∂isoout
)

286 
ªtvÆ
 |
	`DCD_IsoOUTIncom∂ëe_ISR
(
pdev
);

288 #ifde‡
VBUS_SENSING_ENABLED


289 i‡(
göå_°©us
.
b
.
£s§eqöå
)

291 
ªtvÆ
 |
	`DCD_Sessi⁄Reque°_ISR
(
pdev
);

294 i‡(
göå_°©us
.
b
.
Ÿgöå
)

296 
ªtvÆ
 |
	`DCD_OTG_ISR
(
pdev
);

300  
ªtvÆ
;

301 
	}
}

303 #ifde‡
VBUS_SENSING_ENABLED


310 
uöt32_t
 
	$DCD_Sessi⁄Reque°_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

312 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

313 
USBD_DCD_INT_f›s
->
	`DevC⁄√˘ed
 (
pdev
);

316 
göt°s
.
d32
 = 0;

317 
göt°s
.
b
.
£s§eqöå
 = 1;

318 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

320 
	}
}

329 
uöt32_t
 
	$DCD_OTG_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

332 
USB_OTG_GOTGINT_Ty≥Def
 
gŸgöt
;

334 
gŸgöt
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GOTGINT
);

336 i‡(
gŸgöt
.
b
.
££nddë
)

338 
USBD_DCD_INT_f›s
->
	`DevDisc⁄√˘ed
 (
pdev
);

341 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GOTGINT
, 
gŸgöt
.
d32
);

343 
	}
}

352 
uöt32_t
 
	$DCD_H™dÀResume_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

354 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

355 
USB_OTG_DCTL_Ty≥Def
 
dev˘l
;

356 
USB_OTG_PCGCCTL_Ty≥Def
 
powî
;

358 if(
pdev
->
cfg
.
low_powî
)

361 
powî
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
PCGCCTL
);

362 
powî
.
b
.
g©eh˛k
 = 0;

363 
powî
.
b
.
°›p˛k
 = 0;

364 
	`USB_OTG_WRITE_REG32
(
pdev
->
ªgs
.
PCGCCTL
, 
powî
.
d32
);

368 
dev˘l
.
d32
 = 0;

369 
dev˘l
.
b
.
rmtwkupsig
 = 1;

370 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
, 
dev˘l
.
d32
, 0);

373 
USBD_DCD_INT_f›s
->
	`Resume
 (
pdev
);

376 
göt°s
.
d32
 = 0;

377 
göt°s
.
b
.
wkupöå
 = 1;

378 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

380 
	}
}

388 
uöt32_t
 
	$DCD_H™dÀUSBSu•íd_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

390 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

391 
USB_OTG_PCGCCTL_Ty≥Def
 
powî
;

392 
USB_OTG_DSTS_Ty≥Def
 
d°s
;

394 
USBD_DCD_INT_f›s
->
	`Su•íd
 (
pdev
);

396 
d°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DSTS
);

399 
göt°s
.
d32
 = 0;

400 
göt°s
.
b
.
usbsu•íd
 = 1;

401 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

403 if((
pdev
->
cfg
.
low_powî
Ë&& (
d°s
.
b
.
su•°s
 == 1))

406 
powî
.
d32
 = 0;

407 
powî
.
b
.
°›p˛k
 = 1;

408 
	`USB_OTG_MODIFY_REG32
(
pdev
->
ªgs
.
PCGCCTL
, 0, 
powî
.
d32
);

410 
powî
.
b
.
g©eh˛k
 = 1;

411 
	`USB_OTG_MODIFY_REG32
(
pdev
->
ªgs
.
PCGCCTL
, 0, 
powî
.
d32
);

414 
SCB
->
SCR
 |(
SCB_SCR_SLEEPDEEP_Msk
 | 
SCB_SCR_SLEEPONEXIT_Msk
);

417 
	}
}

425 
uöt32_t
 
	$DCD_H™dÀInEP_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

427 
USB_OTG_DIEPINTn_Ty≥Def
 
dõpöt
;

429 
uöt32_t
 
ï_öå
;

430 
uöt32_t
 
ïnum
 = 0;

431 
uöt32_t
 
fif€m±ymsk
;

432 
dõpöt
.
d32
 = 0;

433 
ï_öå
 = 
	`USB_OTG_RódDevAŒInEPIå
(
pdev
);

435  
ï_öå
 )

437 i‡(
ï_öå
&0x1)

439 
dõpöt
.
d32
 = 
	`DCD_RódDevInEP
(
pdev
 , 
ïnum
);

440 i‡–
dõpöt
.
b
.
x„rcom∂
 )

442 
fif€m±ymsk
 = 0x1 << 
ïnum
;

443 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DIEPEMPMSK
, 
fif€m±ymsk
, 0);

444 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
x„rcom∂
);

446 
USBD_DCD_INT_f›s
->
	`D©aInSège
(
pdev
 , 
ïnum
);

448 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

450 if((
ïnum
 =0Ë&& (
pdev
->
dev
.
devi˚_°©e
 =
USB_OTG_EP0_STATUS_IN
))

453 
	`USB_OTG_EP0_OutSèπ
(
pdev
);

457 i‡–
dõpöt
.
b
.
ahbîr
 )

459 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
ahbîr
);

461 i‡–
dõpöt
.
b
.
timeout
 )

463 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
timeout
);

465 i‡(
dõpöt
.
b
.
ötktx„mp
)

467 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
ötktx„mp
);

469 i‡(
dõpöt
.
b
.
ötk√pmis
)

471 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
ötk√pmis
);

473 i‡(
dõpöt
.
b
.
öï«keff
)

475 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
öï«keff
);

477 i‡–
dõpöt
.
b
.
ïdißbÀd
 )

479 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
ïdißbÀd
);

481 i‡(
dõpöt
.
b
.
em±yöå
)

484 
	`DCD_WrôeEm±yTxFifo
(
pdev
 , 
ïnum
);

486 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
em±yöå
);

489 
ïnum
++;

490 
ï_öå
 >>= 1;

494 
	}
}

502 
uöt32_t
 
	$DCD_H™dÀOutEP_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

504 
uöt32_t
 
ï_öå
;

505 
USB_OTG_DOEPINTn_Ty≥Def
 
d€pöt
;

506 
USB_OTG_DEPXFRSIZ_Ty≥Def
 
dïtsiz
;

507 
uöt32_t
 
ïnum
 = 0;

509 
d€pöt
.
d32
 = 0;

512 
ï_öå
 = 
	`USB_OTG_RódDevAŒOutEp_ôr
(
pdev
);

514  
ï_öå
 )

516 i‡(
ï_öå
&0x1)

519 
d€pöt
.
d32
 = 
	`USB_OTG_RódDevOutEP_ôr
(
pdev
, 
ïnum
);

522 i‡–
d€pöt
.
b
.
x„rcom∂
 )

525 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
x„rcom∂
);

526 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

528 
dïtsiz
.
d32
 = 
	`USB_OTG_READ_REG32
(&(
pdev
->
ªgs
.
OUTEP_REGS
[
ïnum
]->
DOEPTSIZ
));

530 
pdev
->
dev
.
out_ï
[
ïnum
].
x„r_cou¡
 =Ödev->dev.out_ï[ïnum].
max∑ckë
 - \

531 
dïtsiz
.
b
.
x„rsize
;

535 
USBD_DCD_INT_f›s
->
	`D©aOutSège
(
pdev
 , 
ïnum
);

537 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

539 if((
ïnum
 =0Ë&& (
pdev
->
dev
.
devi˚_°©e
 =
USB_OTG_EP0_STATUS_OUT
))

542 
	`USB_OTG_EP0_OutSèπ
(
pdev
);

547 i‡–
d€pöt
.
b
.
ïdißbÀd
 )

550 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
ïdißbÀd
);

553 i‡–
d€pöt
.
b
.
ahbîr
 )

555 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
ahbîr
);

558 i‡–
d€pöt
.
b
.
£tup
 )

563 
USBD_DCD_INT_f›s
->
	`SëupSège
(
pdev
);

564 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
£tup
);

567 
ïnum
++;

568 
ï_öå
 >>= 1;

571 
	}
}

579 
uöt32_t
 
	$DCD_H™dÀSof_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

581 
USB_OTG_GINTSTS_Ty≥Def
 
GINTSTS
;

584 
USBD_DCD_INT_f›s
->
	`SOF
(
pdev
);

587 
GINTSTS
.
d32
 = 0;

588 
GINTSTS
.
b
.
soföå
 = 1;

589 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, GINTSTS.
d32
);

592 
	}
}

600 
uöt32_t
 
	$DCD_H™dÀRxSètusQueueLevñ_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

602 
USB_OTG_GINTMSK_Ty≥Def
 
öt_mask
;

603 
USB_OTG_DRXSTS_Ty≥Def
 
°©us
;

604 
USB_OTG_EP
 *
ï
;

607 
öt_mask
.
d32
 = 0;

608 
öt_mask
.
b
.
rx°sqlvl
 = 1;

609 
	`USB_OTG_MODIFY_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 
öt_mask
.
d32
, 0);

612 
°©us
.
d32
 = 
	`USB_OTG_READ_REG32
–&
pdev
->
ªgs
.
GREGS
->
GRXSTSP
 );

614 
ï
 = &
pdev
->
dev
.
out_ï
[
°©us
.
b
.
ïnum
];

616 
°©us
.
b
.
pkt°s
)

618 
STS_GOUT_NAK
:

620 
STS_DATA_UPDT
:

621 i‡(
°©us
.
b
.
b˙t
)

623 
	`USB_OTG_RódPackë
(
pdev
,
ï
->
x„r_buff
, 
°©us
.
b
.
b˙t
);

624 
ï
->
x„r_buff
 +
°©us
.
b
.
b˙t
;

625 
ï
->
x„r_cou¡
 +
°©us
.
b
.
b˙t
;

628 
STS_XFER_COMP
:

630 
STS_SETUP_COMP
:

632 
STS_SETUP_UPDT
:

634 
	`USB_OTG_RódPackë
(
pdev
 ,Ödev->
dev
.
£tup_∑ckë
, 8);

635 
ï
->
x„r_cou¡
 +
°©us
.
b
.
b˙t
;

642 
	`USB_OTG_MODIFY_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 0, 
öt_mask
.
d32
);

645 
	}
}

653 
uöt32_t
 
	$DCD_WrôeEm±yTxFifo
(
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt32_t
 
ïnum
)

655 
USB_OTG_DTXFSTSn_Ty≥Def
 
tx°©us
;

656 
USB_OTG_EP
 *
ï
;

657 
uöt32_t
 
Àn
 = 0;

658 
uöt32_t
 
Àn32b
;

659 
tx°©us
.
d32
 = 0;

661 
ï
 = &
pdev
->
dev
.
ö_ï
[
ïnum
];

663 
Àn
 = 
ï
->
x„r_Àn
 -Ép->
x„r_cou¡
;

665 i‡(
Àn
 > 
ï
->
max∑ckë
)

667 
Àn
 = 
ï
->
max∑ckë
;

670 
Àn32b
 = (
Àn
 + 3) / 4;

671 
tx°©us
.
d32
 = 
	`USB_OTG_READ_REG32
–&
pdev
->
ªgs
.
INEP_REGS
[
ïnum
]->
DTXFSTS
);

675 
tx°©us
.
b
.
txf•ˇvaû
 > 
Àn32b
 &&

676 
ï
->
x„r_cou¡
 <Ép->
x„r_Àn
 &&

677 
ï
->
x„r_Àn
 != 0)

680 
Àn
 = 
ï
->
x„r_Àn
 -Ép->
x„r_cou¡
;

682 i‡(
Àn
 > 
ï
->
max∑ckë
)

684 
Àn
 = 
ï
->
max∑ckë
;

686 
Àn32b
 = (
Àn
 + 3) / 4;

688 
	`USB_OTG_WrôePackë
 (
pdev
 , 
ï
->
x„r_buff
, 
ïnum
, 
Àn
);

690 
ï
->
x„r_buff
 +
Àn
;

691 
ï
->
x„r_cou¡
 +
Àn
;

693 
tx°©us
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[
ïnum
]->
DTXFSTS
);

697 
	}
}

705 
uöt32_t
 
	$DCD_H™dÀUsbRe£t_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

707 
USB_OTG_DAINT_Ty≥Def
 
daötmsk
;

708 
USB_OTG_DOEPMSK_Ty≥Def
 
d€pmsk
;

709 
USB_OTG_DIEPMSK_Ty≥Def
 
dõpmsk
;

710 
USB_OTG_DCFG_Ty≥Def
 
dcfg
;

711 
USB_OTG_DCTL_Ty≥Def
 
d˘l
;

712 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

713 
uöt32_t
 
i
;

715 
d˘l
.
d32
 = 0;

716 
daötmsk
.
d32
 = 0;

717 
d€pmsk
.
d32
 = 0;

718 
dõpmsk
.
d32
 = 0;

719 
dcfg
.
d32
 = 0;

720 
göt°s
.
d32
 = 0;

723 
d˘l
.
b
.
rmtwkupsig
 = 1;

724 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
DREGS
->
DCTL
, 
d˘l
.
d32
, 0 );

727 
	`USB_OTG_FlushTxFifo
(
pdev
 , 0 );

729 
i
 = 0; i < 
pdev
->
cfg
.
dev_ídpoöts
 ; i++)

731 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
INEP_REGS
[
i
]->
DIEPINT
, 0xFF);

732 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
OUTEP_REGS
[
i
]->
DOEPINT
, 0xFF);

734 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DAINT
, 0xFFFFFFFF );

736 
daötmsk
.
ï
.
ö
 = 1;

737 
daötmsk
.
ï
.
out
 = 1;

738 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DAINTMSK
, 
daötmsk
.
d32
 );

740 
d€pmsk
.
b
.
£tup
 = 1;

741 
d€pmsk
.
b
.
x„rcom∂
 = 1;

742 
d€pmsk
.
b
.
ahbîr
 = 1;

743 
d€pmsk
.
b
.
ïdißbÀd
 = 1;

744 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DOEPMSK
, 
d€pmsk
.
d32
 );

745 #ifde‡
USB_OTG_HS_DEDICATED_EP1_ENABLED


746 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DOUTEP1MSK
, 
d€pmsk
.
d32
 );

748 
dõpmsk
.
b
.
x„rcom∂
 = 1;

749 
dõpmsk
.
b
.
timeout
 = 1;

750 
dõpmsk
.
b
.
ïdißbÀd
 = 1;

751 
dõpmsk
.
b
.
ahbîr
 = 1;

752 
dõpmsk
.
b
.
ötk√pmis
 = 1;

753 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DIEPMSK
, 
dõpmsk
.
d32
 );

754 #ifde‡
USB_OTG_HS_DEDICATED_EP1_ENABLED


755 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DINEP1MSK
, 
dõpmsk
.
d32
 );

758 
dcfg
.
d32
 = 
	`USB_OTG_READ_REG32
–&
pdev
->
ªgs
.
DREGS
->
DCFG
);

759 
dcfg
.
b
.
devaddr
 = 0;

760 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
DREGS
->
DCFG
, 
dcfg
.
d32
);

764 
	`USB_OTG_EP0_OutSèπ
(
pdev
);

767 
göt°s
.
d32
 = 0;

768 
göt°s
.
b
.
usbª£t
 = 1;

769 
	`USB_OTG_WRITE_REG32
 (&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

772 
USBD_DCD_INT_f›s
->
	`Re£t
(
pdev
);

774 
	}
}

782 
uöt32_t
 
	$DCD_H™dÀEnumD⁄e_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

784 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

785 
USB_OTG_GUSBCFG_Ty≥Def
 
gusbcfg
;

787 
	`USB_OTG_EP0A˘iv©e
(
pdev
);

790 
gusbcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
);

793 i‡–
	`USB_OTG_GëDevi˚S≥ed
(
pdev
Ë=
USB_SPEED_HIGH
)

795 
pdev
->
cfg
.
•ìd
 = 
USB_OTG_SPEED_HIGH
;

796 
pdev
->
cfg
.
mps
 = 
USB_OTG_HS_MAX_PACKET_SIZE
 ;

797 
gusbcfg
.
b
.
usbådtim
 = 9;

801 
pdev
->
cfg
.
•ìd
 = 
USB_OTG_SPEED_FULL
;

802 
pdev
->
cfg
.
mps
 = 
USB_OTG_FS_MAX_PACKET_SIZE
 ;

803 
gusbcfg
.
b
.
usbådtim
 = 5;

806 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GUSBCFG
, 
gusbcfg
.
d32
);

809 
göt°s
.
d32
 = 0;

810 
göt°s
.
b
.
íumd⁄e
 = 1;

811 
	`USB_OTG_WRITE_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
 );

813 
	}
}

822 
uöt32_t
 
	$DCD_IsoINIncom∂ëe_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

824 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

826 
göt°s
.
d32
 = 0;

828 
USBD_DCD_INT_f›s
->
	`IsoINIncom∂ëe
 (
pdev
);

831 
göt°s
.
b
.
öcom∂isoö
 = 1;

832 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

835 
	}
}

843 
uöt32_t
 
	$DCD_IsoOUTIncom∂ëe_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
)

845 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

847 
göt°s
.
d32
 = 0;

849 
USBD_DCD_INT_f›s
->
	`IsoOUTIncom∂ëe
 (
pdev
);

852 
göt°s
.
b
.
öcom∂isoout
 = 1;

853 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

855 
	}
}

862 
uöt32_t
 
	$DCD_RódDevInEP
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
ïnum
)

864 
uöt32_t
 
v
, 
msk
, 
emp
;

865 
msk
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DIEPMSK
);

866 
emp
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
DREGS
->
DIEPEMPMSK
);

867 
msk
 |((
emp
 >> 
ïnum
) & 0x1) << 7;

868 
v
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
INEP_REGS
[
ïnum
]->
DIEPINT
Ë& 
msk
;

869  
v
;

870 
	}
}

	@libstm/STM32_USB_OTG_Driver/src/usb_hcd.c

23 
	~"usb_c‹e.h
"

24 
	~"usb_hcd.h
"

25 
	~"usb_c⁄f.h
"

26 
	~"usb_b•.h
"

91 
uöt32_t
 
	$HCD_Inô
(
USB_OTG_CORE_HANDLE
 *
pdev
 ,

92 
USB_OTG_CORE_ID_Ty≥Def
 
c‹eID
)

94 
uöt8_t
 
i
 = 0;

95 
pdev
->
ho°
.
C⁄nSts
 = 0;

97 
i
0; i< 
USB_OTG_MAX_TX_FIFOS
; i++)

99 
pdev
->
ho°
.
EºC¡
[
i
] = 0;

100 
pdev
->
ho°
.
X„rC¡
[
i
] = 0;

101 
pdev
->
ho°
.
HC_Sètus
[
i
] = 
HC_IDLE
;

103 
pdev
->
ho°
.
hc
[0].
max_∑ckë
 = 8;

105 
	`USB_OTG_Sñe˘C‹e
(
pdev
, 
c‹eID
);

106 #i‚de‡
DUAL_ROLE_MODE_ENABLED


107 
	`USB_OTG_DißbÀGlobÆI¡
(
pdev
);

108 
	`USB_OTG_C‹eInô
(
pdev
);

111 
	`USB_OTG_SëCuºítMode
(
pdev
 , 
HOST_MODE
);

112 
	`USB_OTG_C‹eInôHo°
(
pdev
);

113 
	`USB_OTG_E«bÀGlobÆI¡
(
pdev
);

117 
	}
}

127 
uöt32_t
 
	$HCD_GëCuºítS≥ed
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

129 
USB_OTG_HPRT0_Ty≥Def
 
HPRT0
;

130 
HPRT0
.
d32
 = 
	`USB_OTG_READ_REG32
(
pdev
->
ªgs
.HPRT0);

132  
HPRT0
.
b
.
¥t•d
;

133 
	}
}

141 
uöt32_t
 
	$HCD_Re£tP‹t
(
USB_OTG_CORE_HANDLE
 *
pdev
)

150 
	`USB_OTG_Re£tP‹t
(
pdev
);

152 
	}
}

161 
uöt32_t
 
	$HCD_IsDevi˚C⁄√˘ed
(
USB_OTG_CORE_HANDLE
 *
pdev
)

163  (
pdev
->
ho°
.
C⁄nSts
);

164 
	}
}

173 
uöt32_t
 
	$HCD_GëCuºítFøme
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

175  (
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HREGS
->
HFNUM
) & 0xFFFF) ;

176 
	}
}

185 
URB_STATE
 
	$HCD_GëURB_Sèã
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
ch_num
)

187  
pdev
->
ho°
.
URB_Sèã
[
ch_num
] ;

188 
	}
}

197 
uöt32_t
 
	$HCD_GëX„rC¡
 (
USB_OTG_CORE_HANDLE
 *
pdev
, 
uöt8_t
 
ch_num
)

199  
pdev
->
ho°
.
X„rC¡
[
ch_num
] ;

200 
	}
}

211 
HC_STATUS
 
	$HCD_GëHCSèã
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
ch_num
)

213  
pdev
->
ho°
.
HC_Sètus
[
ch_num
] ;

214 
	}
}

223 
uöt32_t
 
	$HCD_HC_Inô
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
hc_num
)

225  
	`USB_OTG_HC_Inô
(
pdev
, 
hc_num
);

226 
	}
}

235 
uöt32_t
 
	$HCD_SubmôReque°
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt8_t
 
hc_num
)

238 
pdev
->
ho°
.
URB_Sèã
[
hc_num
] = 
URB_IDLE
;

239 
pdev
->
ho°
.
hc
[
hc_num
].
x„r_cou¡
 = 0 ;

240  
	`USB_OTG_HC_SèπX„r
(
pdev
, 
hc_num
);

241 
	}
}

	@libstm/STM32_USB_OTG_Driver/src/usb_hcd_int.c

23 
	~"usb_c‹e.h
"

24 
	~"usb_deföes.h
"

25 
	~"usb_hcd_öt.h
"

27 #i‡
deföed
 (
__CC_ARM
)

28 #¥agm®
O0


29 #ñi‡
deföed
 ( 
__ICCARM__
 )

30 #¥agm®
O0


31 #ñi‡
deföed
 (
__GNUC__
)

32 #¥agm®
GCC
 
›timize
 ("O0")

33 #ñi‡
deföed
 (
__TASKING__
)

34 #¥agm®
›timize
=0

85 
uöt32_t
 
USB_OTG_USBH_h™dÀ_sof_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

86 
uöt32_t
 
USB_OTG_USBH_h™dÀ_p‹t_ISR
(
USB_OTG_CORE_HANDLE
 *
pdev
);

87 
uöt32_t
 
USB_OTG_USBH_h™dÀ_hc_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

88 
uöt32_t
 
USB_OTG_USBH_h™dÀ_hc_n_In_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

89 
uöt32_t
 
num
);

90 
uöt32_t
 
USB_OTG_USBH_h™dÀ_hc_n_Out_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
 ,

91 
uöt32_t
 
num
);

92 
uöt32_t
 
USB_OTG_USBH_h™dÀ_rx_qlvl_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

93 
uöt32_t
 
USB_OTG_USBH_h™dÀ_≈tx„m±y_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

94 
uöt32_t
 
USB_OTG_USBH_h™dÀ_±x„m±y_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

95 
uöt32_t
 
USB_OTG_USBH_h™dÀ_Disc⁄√˘_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

96 
uöt32_t
 
USB_OTG_USBH_h™dÀ_Incom∂ëePîiodicX„r_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
);

114 
uöt32_t
 
	$USBH_OTG_ISR_H™dÀr
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

116 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

117 
uöt32_t
 
ªtvÆ
 = 0;

119 
göt°s
.
d32
 = 0;

122 i‡(
	`USB_OTG_IsHo°Mode
(
pdev
))

124 
göt°s
.
d32
 = 
	`USB_OTG_RódC‹eIå
(
pdev
);

125 i‡(!
göt°s
.
d32
)

130 i‡(
göt°s
.
b
.
soföå
)

132 
ªtvÆ
 |
	`USB_OTG_USBH_h™dÀ_sof_ISR
 (
pdev
);

135 i‡(
göt°s
.
b
.
rx°sqlvl
)

137 
ªtvÆ
 |
	`USB_OTG_USBH_h™dÀ_rx_qlvl_ISR
 (
pdev
);

140 i‡(
göt°s
.
b
.
≈tx„m±y
)

142 
ªtvÆ
 |
	`USB_OTG_USBH_h™dÀ_≈tx„m±y_ISR
 (
pdev
);

145 i‡(
göt°s
.
b
.
±x„m±y
)

147 
ªtvÆ
 |
	`USB_OTG_USBH_h™dÀ_±x„m±y_ISR
 (
pdev
);

150 i‡(
göt°s
.
b
.
hcöå
)

152 
ªtvÆ
 |
	`USB_OTG_USBH_h™dÀ_hc_ISR
 (
pdev
);

155 i‡(
göt°s
.
b
.
p‹töå
)

157 
ªtvÆ
 |
	`USB_OTG_USBH_h™dÀ_p‹t_ISR
 (
pdev
);

160 i‡(
göt°s
.
b
.
disc⁄√˘
)

162 
ªtvÆ
 |
	`USB_OTG_USBH_h™dÀ_Disc⁄√˘_ISR
 (
pdev
);

166 i‡(
göt°s
.
b
.
öcom∂isoout
)

168 
ªtvÆ
 |
	`USB_OTG_USBH_h™dÀ_Incom∂ëePîiodicX„r_ISR
 (
pdev
);

173  
ªtvÆ
;

174 
	}
}

182 
uöt32_t
 
	$USB_OTG_USBH_h™dÀ_hc_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

184 
USB_OTG_HAINT_Ty≥Def
 
haöt
;

185 
USB_OTG_HCCHAR_Ty≥Def
 
hcch¨
;

186 
uöt32_t
 
i
 = 0;

187 
uöt32_t
 
ªtvÆ
 = 0;

192 
haöt
.
d32
 = 
	`USB_OTG_RódHo°AŒCh™√ls_öå
(
pdev
);

194 
i
 = 0; i < 
pdev
->
cfg
.
ho°_ch™√ls
 ; i++)

196 i‡(
haöt
.
b
.
chöt
 & (1 << 
i
))

198 
hcch¨
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
i
]->
HCCHAR
);

200 i‡(
hcch¨
.
b
.
ïdú
)

202 
ªtvÆ
 |
	`USB_OTG_USBH_h™dÀ_hc_n_In_ISR
 (
pdev
, 
i
);

206 
ªtvÆ
 |
	`USB_OTG_USBH_h™dÀ_hc_n_Out_ISR
 (
pdev
, 
i
);

211  
ªtvÆ
;

212 
	}
}

220 
uöt32_t
 
	$USB_OTG_USBH_h™dÀ_sof_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

222 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

225 
göt°s
.
d32
 = 0;

227 
göt°s
.
b
.
soföå
 = 1;

228 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

231 
	}
}

239 
uöt32_t
 
	$USB_OTG_USBH_h™dÀ_Disc⁄√˘_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

241 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

243 
pdev
->
ho°
.
C⁄nSts
 = 0;

244 
göt°s
.
d32
 = 0;

246 
pdev
->
ho°
.
p‹t_cb
->
	`Disc⁄√˘
(pdev);

249 
göt°s
.
b
.
disc⁄√˘
 = 1;

250 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

253 
	}
}

261 
uöt32_t
 
	$USB_OTG_USBH_h™dÀ_≈tx„m±y_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

263 
USB_OTG_GINTMSK_Ty≥Def
 
ötmsk
;

264 
USB_OTG_HNPTXSTS_Ty≥Def
 
h≈tx°s
;

265 
uöt16_t
 
Àn_w‹ds
 , 
Àn
;

267 
h≈tx°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
HNPTXSTS
);

269 
Àn_w‹ds
 = (
pdev
->
ho°
.
hc
[
h≈tx°s
.
b
.
chnum
].
x„r_Àn
 + 3) / 4;

271 (
h≈tx°s
.
b
.
≈txf•ˇvaû
 > 
Àn_w‹ds
)&&

272 (
pdev
->
ho°
.
hc
[
h≈tx°s
.
b
.
chnum
].
x„r_Àn
 != 0))

275 
Àn
 = 
h≈tx°s
.
b
.
≈txf•ˇvaû
 * 4;

277 i‡(
Àn
 > 
pdev
->
ho°
.
hc
[
h≈tx°s
.
b
.
chnum
].
x„r_Àn
)

280 
Àn
 = 
pdev
->
ho°
.
hc
[
h≈tx°s
.
b
.
chnum
].
x„r_Àn
;

282 
ötmsk
.
d32
 = 0;

283 
ötmsk
.
b
.
≈tx„m±y
 = 1;

284 
	`USB_OTG_MODIFY_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 
ötmsk
.
d32
, 0);

287 
Àn_w‹ds
 = (
pdev
->
ho°
.
hc
[
h≈tx°s
.
b
.
chnum
].
x„r_Àn
 + 3) / 4;

289 
	`USB_OTG_WrôePackë
 (
pdev
 ,Ödev->
ho°
.
hc
[
h≈tx°s
.
b
.
chnum
].
x„r_buff
, h≈tx°s.b.chnum, 
Àn
);

291 
pdev
->
ho°
.
hc
[
h≈tx°s
.
b
.
chnum
].
x„r_buff
 +
Àn
;

292 
pdev
->
ho°
.
hc
[
h≈tx°s
.
b
.
chnum
].
x„r_Àn
 -
Àn
;

293 
pdev
->
ho°
.
hc
[
h≈tx°s
.
b
.
chnum
].
x„r_cou¡
 +
Àn
;

295 
h≈tx°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
HNPTXSTS
);

299 
	}
}

307 
uöt32_t
 
	$USB_OTG_USBH_h™dÀ_±x„m±y_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

309 
USB_OTG_GINTMSK_Ty≥Def
 
ötmsk
;

310 
USB_OTG_HPTXSTS_Ty≥Def
 
h±x°s
;

311 
uöt16_t
 
Àn_w‹ds
 , 
Àn
;

313 
h±x°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HREGS
->
HPTXSTS
);

315 
Àn_w‹ds
 = (
pdev
->
ho°
.
hc
[
h±x°s
.
b
.
chnum
].
x„r_Àn
 + 3) / 4;

317 (
h±x°s
.
b
.
±xf•ˇvaû
 > 
Àn_w‹ds
)&&

318 (
pdev
->
ho°
.
hc
[
h±x°s
.
b
.
chnum
].
x„r_Àn
 != 0))

321 
Àn
 = 
h±x°s
.
b
.
±xf•ˇvaû
 * 4;

323 i‡(
Àn
 > 
pdev
->
ho°
.
hc
[
h±x°s
.
b
.
chnum
].
x„r_Àn
)

325 
Àn
 = 
pdev
->
ho°
.
hc
[
h±x°s
.
b
.
chnum
].
x„r_Àn
;

327 
ötmsk
.
d32
 = 0;

328 
ötmsk
.
b
.
±x„m±y
 = 1;

329 
	`USB_OTG_MODIFY_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 
ötmsk
.
d32
, 0);

332 
Àn_w‹ds
 = (
pdev
->
ho°
.
hc
[
h±x°s
.
b
.
chnum
].
x„r_Àn
 + 3) / 4;

334 
	`USB_OTG_WrôePackë
 (
pdev
 ,Ödev->
ho°
.
hc
[
h±x°s
.
b
.
chnum
].
x„r_buff
, h±x°s.b.chnum, 
Àn
);

336 
pdev
->
ho°
.
hc
[
h±x°s
.
b
.
chnum
].
x„r_buff
 +
Àn
;

337 
pdev
->
ho°
.
hc
[
h±x°s
.
b
.
chnum
].
x„r_Àn
 -
Àn
;

338 
pdev
->
ho°
.
hc
[
h±x°s
.
b
.
chnum
].
x„r_cou¡
 +
Àn
;

340 
h±x°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HREGS
->
HPTXSTS
);

344 
	}
}

352 
uöt32_t
 
	$USB_OTG_USBH_h™dÀ_p‹t_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

354 
USB_OTG_HPRT0_Ty≥Def
 
h¥t0
;

355 
USB_OTG_HPRT0_Ty≥Def
 
h¥t0_dup
;

356 
USB_OTG_HCFG_Ty≥Def
 
hcfg
;

357 
uöt32_t
 
do_ª£t
 = 0;

358 
uöt32_t
 
ªtvÆ
 = 0;

360 
hcfg
.
d32
 = 0;

361 
h¥t0
.
d32
 = 0;

362 
h¥t0_dup
.
d32
 = 0;

364 
h¥t0
.
d32
 = 
	`USB_OTG_READ_REG32
(
pdev
->
ªgs
.
HPRT0
);

365 
h¥t0_dup
.
d32
 = 
	`USB_OTG_READ_REG32
(
pdev
->
ªgs
.
HPRT0
);

369 
h¥t0_dup
.
b
.
¥ã«
 = 0;

370 
h¥t0_dup
.
b
.
¥tc⁄ndë
 = 0;

371 
h¥t0_dup
.
b
.
¥ãnchng
 = 0;

372 
h¥t0_dup
.
b
.
¥tovrcuºchng
 = 0;

375 i‡(
h¥t0
.
b
.
¥tc⁄ndë
)

377 
pdev
->
ho°
.
p‹t_cb
->
	`C⁄√˘
(pdev);

378 
h¥t0_dup
.
b
.
¥tc⁄ndë
 = 1;

379 
do_ª£t
 = 1;

380 
ªtvÆ
 |= 1;

384 i‡(
h¥t0
.
b
.
¥ãnchng
)

386 
h¥t0_dup
.
b
.
¥ãnchng
 = 1;

387 i‡(
h¥t0
.
b
.
¥ã«
 == 1)

389 
pdev
->
ho°
.
C⁄nSts
 = 1;

391 i‡((
h¥t0
.
b
.
¥t•d
 =
HPRT0_PRTSPD_LOW_SPEED
) ||

392 (
h¥t0
.
b
.
¥t•d
 =
HPRT0_PRTSPD_FULL_SPEED
))

395 
hcfg
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HREGS
->
HCFG
);

397 i‡(
h¥t0
.
b
.
¥t•d
 =
HPRT0_PRTSPD_LOW_SPEED
)

399 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HREGS
->
HFIR
, 6000 );

400 i‡(
hcfg
.
b
.
f¶•˛k£l
 !
HCFG_6_MHZ
)

402 if(
pdev
->
cfg
.
c‹eID
 =
USB_OTG_FS_CORE_ID
)

404 
	`USB_OTG_InôFSLSPClkSñ
(
pdev
 ,
HCFG_6_MHZ
 );

406 
do_ª£t
 = 1;

412 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HREGS
->
HFIR
, 48000 );

413 i‡(
hcfg
.
b
.
f¶•˛k£l
 !
HCFG_48_MHZ
)

415 
	`USB_OTG_InôFSLSPClkSñ
(
pdev
 ,
HCFG_48_MHZ
 );

416 
do_ª£t
 = 1;

422 
do_ª£t
 = 1;

427 i‡(
h¥t0
.
b
.
¥tovrcuºchng
)

429 
h¥t0_dup
.
b
.
¥tovrcuºchng
 = 1;

430 
ªtvÆ
 |= 1;

432 i‡(
do_ª£t
)

434 
	`USB_OTG_Re£tP‹t
(
pdev
);

438 
	`USB_OTG_WRITE_REG32
(
pdev
->
ªgs
.
HPRT0
, 
h¥t0_dup
.
d32
);

440  
ªtvÆ
;

441 
	}
}

450 
uöt32_t
 
	$USB_OTG_USBH_h™dÀ_hc_n_Out_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt32_t
 
num
)

453 
USB_OTG_HCINTn_Ty≥Def
 
hcöt
;

454 
USB_OTG_HCGINTMSK_Ty≥Def
 
hcötmsk
;

455 
USB_OTG_HC_REGS
 *
h¸eg
;

456 
USB_OTG_HCCHAR_Ty≥Def
 
hcch¨
;

458 
h¸eg
 = 
pdev
->
ªgs
.
HC_REGS
[
num
];

459 
hcöt
.
d32
 = 
	`USB_OTG_READ_REG32
(&
h¸eg
->
HCINT
);

460 
hcötmsk
.
d32
 = 
	`USB_OTG_READ_REG32
(&
h¸eg
->
HCGINTMSK
);

461 
hcöt
.
d32
 = hcöt.d32 & 
hcötmsk
.d32;

463 
hcch¨
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
num
]->
HCCHAR
);

465 i‡(
hcöt
.
b
.
ahbîr
)

467 
	`CLEAR_HC_INT
(
h¸eg
 ,
ahbîr
);

468 
	`UNMASK_HOST_INT_CHH
 (
num
);

470 i‡(
hcöt
.
b
.
ack
)

472 
	`CLEAR_HC_INT
(
h¸eg
 , 
ack
);

475 i‡(
hcöt
.
b
.
x„rcom∂
)

477 
pdev
->
ho°
.
EºC¡
[
num
] = 0;

478 
	`UNMASK_HOST_INT_CHH
 (
num
);

479 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

480 
	`CLEAR_HC_INT
(
h¸eg
 , 
x„rcom∂
);

481 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_XFRC
;

484 i‡(
hcöt
.
b
.
°Æl
)

486 
	`CLEAR_HC_INT
(
h¸eg
 , 
°Æl
);

487 
	`UNMASK_HOST_INT_CHH
 (
num
);

488 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

489 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_STALL
;

492 i‡(
hcöt
.
b
.
«k
)

494 
pdev
->
ho°
.
EºC¡
[
num
] = 0;

495 
	`UNMASK_HOST_INT_CHH
 (
num
);

496 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

497 
	`CLEAR_HC_INT
(
h¸eg
 , 
«k
);

498 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_NAK
;

501 i‡(
hcöt
.
b
.
xa˘îr
)

503 
	`UNMASK_HOST_INT_CHH
 (
num
);

504 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

505 
pdev
->
ho°
.
EºC¡
[
num
] ++;

506 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_XACTERR
;

507 
	`CLEAR_HC_INT
(
h¸eg
 , 
xa˘îr
);

509 i‡(
hcöt
.
b
.
nyë
)

511 
pdev
->
ho°
.
EºC¡
[
num
] = 0;

512 
	`UNMASK_HOST_INT_CHH
 (
num
);

513 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

514 
	`CLEAR_HC_INT
(
h¸eg
 , 
nyë
);

515 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_NYET
;

517 i‡(
hcöt
.
b
.
d©©gÀº
)

520 
	`UNMASK_HOST_INT_CHH
 (
num
);

521 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

522 
	`CLEAR_HC_INT
(
h¸eg
 , 
«k
);

523 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_DATATGLERR
;

525 
	`CLEAR_HC_INT
(
h¸eg
 , 
d©©gÀº
);

527 i‡(
hcöt
.
b
.
chh…d
)

529 
	`MASK_HOST_INT_CHH
 (
num
);

531 if(
pdev
->
ho°
.
HC_Sètus
[
num
] =
HC_XFRC
)

533 
pdev
->
ho°
.
URB_Sèã
[
num
] = 
URB_DONE
;

535 i‡(
hcch¨
.
b
.
ïty≥
 =
EP_TYPE_BULK
)

537 
pdev
->
ho°
.
hc
[
num
].
toggÀ_out
 ^= 1;

540 if(
pdev
->
ho°
.
HC_Sètus
[
num
] =
HC_NAK
)

542 
pdev
->
ho°
.
URB_Sèã
[
num
] = 
URB_NOTREADY
;

544 if(
pdev
->
ho°
.
HC_Sètus
[
num
] =
HC_NYET
)

546 if(
pdev
->
ho°
.
hc
[
num
].
do_pög
 == 1)

548 
	`USB_OTG_HC_DoPög
(
pdev
, 
num
);

550 
pdev
->
ho°
.
URB_Sèã
[
num
] = 
URB_NOTREADY
;

552 if(
pdev
->
ho°
.
HC_Sètus
[
num
] =
HC_STALL
)

554 
pdev
->
ho°
.
URB_Sèã
[
num
] = 
URB_STALL
;

556 if(
pdev
->
ho°
.
HC_Sètus
[
num
] =
HC_XACTERR
)

558 i‡(
pdev
->
ho°
.
EºC¡
[
num
] == 3)

560 
pdev
->
ho°
.
URB_Sèã
[
num
] = 
URB_ERROR
;

561 
pdev
->
ho°
.
EºC¡
[
num
] = 0;

564 
	`CLEAR_HC_INT
(
h¸eg
 , 
chh…d
);

569 
	}
}

578 
uöt32_t
 
	$USB_OTG_USBH_h™dÀ_hc_n_In_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
 , 
uöt32_t
 
num
)

580 
USB_OTG_HCINTn_Ty≥Def
 
hcöt
;

581 
USB_OTG_HCGINTMSK_Ty≥Def
 
hcötmsk
;

582 
USB_OTG_HCCHAR_Ty≥Def
 
hcch¨
;

583 
USB_OTG_HCTSIZn_Ty≥Def
 
h˘siz
;

584 
USB_OTG_HC_REGS
 *
h¸eg
;

587 
h¸eg
 = 
pdev
->
ªgs
.
HC_REGS
[
num
];

588 
hcöt
.
d32
 = 
	`USB_OTG_READ_REG32
(&
h¸eg
->
HCINT
);

589 
hcötmsk
.
d32
 = 
	`USB_OTG_READ_REG32
(&
h¸eg
->
HCGINTMSK
);

590 
hcöt
.
d32
 = hcöt.d32 & 
hcötmsk
.d32;

591 
hcch¨
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
num
]->
HCCHAR
);

592 
hcötmsk
.
d32
 = 0;

595 i‡(
hcöt
.
b
.
ahbîr
)

597 
	`CLEAR_HC_INT
(
h¸eg
 ,
ahbîr
);

598 
	`UNMASK_HOST_INT_CHH
 (
num
);

600 i‡(
hcöt
.
b
.
ack
)

602 
	`CLEAR_HC_INT
(
h¸eg
 ,
ack
);

605 i‡(
hcöt
.
b
.
°Æl
)

607 
	`UNMASK_HOST_INT_CHH
 (
num
);

608 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_STALL
;

609 
	`CLEAR_HC_INT
(
h¸eg
 , 
«k
);

610 
	`CLEAR_HC_INT
(
h¸eg
 , 
°Æl
);

611 
hcöt
.
b
.
«k
 = 0;

614 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

616 i‡(
hcöt
.
b
.
d©©gÀº
)

619 
	`UNMASK_HOST_INT_CHH
 (
num
);

620 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

621 
	`CLEAR_HC_INT
(
h¸eg
 , 
«k
);

622 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_DATATGLERR
;

623 
	`CLEAR_HC_INT
(
h¸eg
 , 
d©©gÀº
);

626 i‡(
hcöt
.
b
.
‰movrun
)

628 
	`UNMASK_HOST_INT_CHH
 (
num
);

629 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

630 
	`CLEAR_HC_INT
(
h¸eg
 ,
‰movrun
);

633 i‡(
hcöt
.
b
.
x„rcom∂
)

636 i‡(
pdev
->
cfg
.
dma_íabÀ
 == 1)

638 
h˘siz
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
num
]->
HCTSIZ
);

639 
pdev
->
ho°
.
X„rC¡
[
num
] =Ödev->ho°.
hc
[num].
x„r_Àn
 - 
h˘siz
.
b
.
x„rsize
;

642 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_XFRC
;

643 
pdev
->
ho°
.
EºC¡
 [
num
]= 0;

644 
	`CLEAR_HC_INT
(
h¸eg
 , 
x„rcom∂
);

646 i‡((
hcch¨
.
b
.
ïty≥
 =
EP_TYPE_CTRL
)||

647 (
hcch¨
.
b
.
ïty≥
 =
EP_TYPE_BULK
))

649 
	`UNMASK_HOST_INT_CHH
 (
num
);

650 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

651 
	`CLEAR_HC_INT
(
h¸eg
 , 
«k
);

652 
pdev
->
ho°
.
hc
[
num
].
toggÀ_ö
 ^= 1;

655 if(
hcch¨
.
b
.
ïty≥
 =
EP_TYPE_INTR
)

657 
hcch¨
.
b
.
odd‰m
 = 1;

658 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
num
]->
HCCHAR
, 
hcch¨
.
d32
);

659 
pdev
->
ho°
.
URB_Sèã
[
num
] = 
URB_DONE
;

663 i‡(
hcöt
.
b
.
chh…d
)

665 
	`MASK_HOST_INT_CHH
 (
num
);

667 if(
pdev
->
ho°
.
HC_Sètus
[
num
] =
HC_XFRC
)

669 
pdev
->
ho°
.
URB_Sèã
[
num
] = 
URB_DONE
;

672 i‡(
pdev
->
ho°
.
HC_Sètus
[
num
] =
HC_STALL
)

674 
pdev
->
ho°
.
URB_Sèã
[
num
] = 
URB_STALL
;

677 if((
pdev
->
ho°
.
HC_Sètus
[
num
] =
HC_XACTERR
) ||

678 (
pdev
->
ho°
.
HC_Sètus
[
num
] =
HC_DATATGLERR
))

680 
pdev
->
ho°
.
EºC¡
[
num
] = 0;

681 
pdev
->
ho°
.
URB_Sèã
[
num
] = 
URB_ERROR
;

684 if(
hcch¨
.
b
.
ïty≥
 =
EP_TYPE_INTR
)

686 
pdev
->
ho°
.
hc
[
num
].
toggÀ_ö
 ^= 1;

689 
	`CLEAR_HC_INT
(
h¸eg
 , 
chh…d
);

692 i‡(
hcöt
.
b
.
xa˘îr
)

694 
	`UNMASK_HOST_INT_CHH
 (
num
);

695 
pdev
->
ho°
.
EºC¡
[
num
] ++;

696 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_XACTERR
;

697 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

698 
	`CLEAR_HC_INT
(
h¸eg
 , 
xa˘îr
);

701 i‡(
hcöt
.
b
.
«k
)

703 if(
hcch¨
.
b
.
ïty≥
 =
EP_TYPE_INTR
)

705 
	`UNMASK_HOST_INT_CHH
 (
num
);

706 
	`USB_OTG_HC_HÆt
(
pdev
, 
num
);

707 
	`CLEAR_HC_INT
(
h¸eg
 , 
«k
);

709 i‡((
hcch¨
.
b
.
ïty≥
 =
EP_TYPE_CTRL
)||

710 (
hcch¨
.
b
.
ïty≥
 =
EP_TYPE_BULK
))

713 
hcch¨
.
b
.
chí
 = 1;

714 
hcch¨
.
b
.
chdis
 = 0;

715 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
num
]->
HCCHAR
, 
hcch¨
.
d32
);

717 
pdev
->
ho°
.
HC_Sètus
[
num
] = 
HC_NAK
;

723 
	}
}

732 
uöt32_t
 
	$USB_OTG_USBH_h™dÀ_rx_qlvl_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

734 
USB_OTG_GRXFSTS_Ty≥Def
 
grx°s
;

735 
USB_OTG_GINTMSK_Ty≥Def
 
ötmsk
;

736 
USB_OTG_HCTSIZn_Ty≥Def
 
h˘siz
;

737 
USB_OTG_HCCHAR_Ty≥Def
 
hcch¨
;

738 
__IO
 
uöt8_t
 
ch™√ um
 =0;

739 
uöt32_t
 
cou¡
;

742 
ötmsk
.
d32
 = 0;

743 
ötmsk
.
b
.
rx°sqlvl
 = 1;

744 
	`USB_OTG_MODIFY_REG32
–&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 
ötmsk
.
d32
, 0);

746 
grx°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GRXSTSP
);

747 
ch™√ um
 = 
grx°s
.
b
.
chnum
;

748 
hcch¨
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
ch™√ um
]->
HCCHAR
);

750 
grx°s
.
b
.
pkt°s
)

752 
GRXSTS_PKTSTS_IN
:

754 i‡((
grx°s
.
b
.
b˙t
 > 0Ë&& (
pdev
->
ho°
.
hc
[
ch™√ um
].
x„r_buff
 != (*)0))

757 
	`USB_OTG_RódPackë
(
pdev
,Ödev->
ho°
.
hc
[
ch™√ um
].
x„r_buff
, 
grx°s
.
b
.
b˙t
);

759 
pdev
->
ho°
.
hc
[
grx°s
.
b
.
chnum
].
x„r_buff
 +grx°s.b.
b˙t
;

760 
pdev
->
ho°
.
hc
[
grx°s
.
b
.
chnum
].
x„r_cou¡
 +grx°s.b.
b˙t
;

763 
cou¡
 = 
pdev
->
ho°
.
hc
[
ch™√ um
].
x„r_cou¡
;

764 
pdev
->
ho°
.
X„rC¡
[
ch™√ um
] = 
cou¡
;

766 
h˘siz
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
ch™√ um
]->
HCTSIZ
);

767 if(
h˘siz
.
b
.
pkt˙t
 > 0)

770 
hcch¨
.
b
.
chí
 = 1;

771 
hcch¨
.
b
.
chdis
 = 0;

772 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[
ch™√ um
]->
HCCHAR
, 
hcch¨
.
d32
);

777 
GRXSTS_PKTSTS_IN_XFER_COMP
:

779 
GRXSTS_PKTSTS_DATA_TOGGLE_ERR
:

780 
GRXSTS_PKTSTS_CH_HALTED
:

786 
ötmsk
.
b
.
rx°sqlvl
 = 1;

787 
	`USB_OTG_MODIFY_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTMSK
, 0, 
ötmsk
.
d32
);

789 
	}
}

797 
uöt32_t
 
	$USB_OTG_USBH_h™dÀ_Incom∂ëePîiodicX„r_ISR
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

800 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

801 
USB_OTG_HCCHAR_Ty≥Def
 
hcch¨
;

806 
hcch¨
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
HC_REGS
[0]->
HCCHAR
);

807 
hcch¨
.
b
.
chí
 = 1;

808 
hcch¨
.
b
.
chdis
 = 1;

809 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
HC_REGS
[0]->
HCCHAR
, 
hcch¨
.
d32
);

811 
göt°s
.
d32
 = 0;

813 
göt°s
.
b
.
öcom∂isoout
 = 1;

814 
	`USB_OTG_WRITE_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
, 
göt°s
.
d32
);

817 
	}
}

	@libstm/STM32_USB_OTG_Driver/src/usb_otg.c

23 
	~"usb_deföes.h
"

24 
	~"usb_ªgs.h
"

25 
	~"usb_c‹e.h
"

26 
	~"usb_Ÿg.h
"

75 
uöt32_t
 
USB_OTG_Ród_ôr
(
USB_OTG_CORE_HANDLE
 *
pdev
);

96 
uöt32_t
 
	$STM32_USBO_OTG_ISR_H™dÀr
(
USB_OTG_CORE_HANDLE
 *
pdev
)

98 
uöt32_t
 
ªtvÆ
 = 0;

99 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
 ;

100 
göt°s
.
d32
 = 0;

102 
göt°s
.
d32
 = 
	`USB_OTG_Ród_ôr
(
pdev
);

103 i‡(
göt°s
.
d32
 == 0)

107 i‡(
göt°s
.
b
.
Ÿgöå
)

109 
ªtvÆ
 |= 1;

111 i‡(
göt°s
.
b
.
c⁄id°schng
)

113 
ªtvÆ
 |= 2;

115 i‡(
göt°s
.
b
.
£s§eqöå
)

117 
ªtvÆ
 |= 3;

119  
ªtvÆ
;

120 
	}
}

129 
uöt32_t
 
	$USB_OTG_Ród_ôr
(
USB_OTG_CORE_HANDLE
 *
pdev
)

131 
USB_OTG_GINTSTS_Ty≥Def
 
göt°s
;

132 
USB_OTG_GINTMSK_Ty≥Def
 
götmsk
;

133 
USB_OTG_GINTMSK_Ty≥Def
 
götmsk_comm⁄
;

136 
göt°s
.
d32
 = 0;

137 
götmsk
.
d32
 = 0;

138 
götmsk_comm⁄
.
d32
 = 0;

141 
götmsk_comm⁄
.
b
.
£s§eqöå
 = 1;

142 
götmsk_comm⁄
.
b
.
c⁄id°schng
 = 1;

143 
götmsk_comm⁄
.
b
.
Ÿgöå
 = 1;

145 
göt°s
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTSTS
);

146 
götmsk
.
d32
 = 
	`USB_OTG_READ_REG32
(&
pdev
->
ªgs
.
GREGS
->
GINTMSK
);

147  ((
göt°s
.
d32
 & 
götmsk
.d32 ) & 
götmsk_comm⁄
.d32);

148 
	}
}

157 
uöt32_t
 
	$USB_OTG_GëCuºítSèã
 (
USB_OTG_CORE_HANDLE
 *
pdev
)

159  
pdev
->
Ÿg
.
OTG_Sèã
;

160 
	}
}

	@libstm/Utilities/STM32F4-Discovery/discoveryf4utils.c

28 
	~"°m32f4xx_c⁄f.h
"

29 
	~"discovîyf4utûs.h
"

73 
GPIO_Ty≥Def
* 
	gGPIO_PORT
[
LEDn
] = {
LED_GREEN_GPIO_PORT
, 
LED_BLUE_GPIO_PORT
, 
LED_RED_GPIO_PORT
,

74 
LED_ORANGE_GPIO_PORT
};

75 c⁄° 
uöt16_t
 
	gGPIO_PIN
[
LEDn
] = {
LED_GREEN_PIN
, 
LED_BLUE_PIN
, 
LED_RED_PIN
,

76 
LED_ORANGE_PIN
};

77 c⁄° 
uöt32_t
 
	gGPIO_CLK
[
LEDn
] = {
LED_GREEN_GPIO_CLK
, 
LED_BLUE_GPIO_CLK
, 
LED_RED_GPIO_CLK
,

78 
LED_ORANGE_GPIO_CLK
};

80 
GPIO_Ty≥Def
* 
	gBUTTON_PORT
[
BUTTONn
] = {
USER_BUTTON_GPIO_PORT
 };

82 c⁄° 
uöt16_t
 
	gBUTTON_PIN
[
BUTTONn
] = {
USER_BUTTON_PIN
 };

84 c⁄° 
uöt32_t
 
	gBUTTON_CLK
[
BUTTONn
] = {
USER_BUTTON_GPIO_CLK
 };

86 c⁄° 
uöt16_t
 
	gBUTTON_EXTI_LINE
[
BUTTONn
] = {
USER_BUTTON_EXTI_LINE
 };

88 c⁄° 
uöt8_t
 
	gBUTTON_PORT_SOURCE
[
BUTTONn
] = {
USER_BUTTON_EXTI_PORT_SOURCE
};

90 c⁄° 
uöt8_t
 
	gBUTTON_PIN_SOURCE
[
BUTTONn
] = {
USER_BUTTON_EXTI_PIN_SOURCE
 };

91 c⁄° 
uöt8_t
 
	gBUTTON_IRQn
[
BUTTONn
] = {
USER_BUTTON_EXTI_IRQn
 };

93 
NVIC_InôTy≥Def
 
	gNVIC_InôSåu˘uª
;

122 
	$STM_EVAL_LEDInô
(
Led_Ty≥Def
 
Led
)

124 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

127 
	`RCC_AHB1PîùhClockCmd
(
GPIO_CLK
[
Led
], 
ENABLE
);

130 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_PIN
[
Led
];

131 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

132 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

133 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

134 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

135 
	`GPIO_Inô
(
GPIO_PORT
[
Led
], &
GPIO_InôSåu˘uª
);

136 
	}
}

148 
	$STM_EVAL_LEDOn
(
Led_Ty≥Def
 
Led
)

150 
GPIO_PORT
[
Led
]->
BSRRL
 = 
GPIO_PIN
[Led];

151 
	}
}

163 
	$STM_EVAL_LEDOff
(
Led_Ty≥Def
 
Led
)

165 
GPIO_PORT
[
Led
]->
BSRRH
 = 
GPIO_PIN
[Led];

166 
	}
}

178 
	$STM_EVAL_LEDToggÀ
(
Led_Ty≥Def
 
Led
)

180 
GPIO_PORT
[
Led
]->
ODR
 ^
GPIO_PIN
[Led];

181 
	}
}

194 
	$STM_EVAL_PBInô
(
Buâ⁄_Ty≥Def
 
Buâ⁄
, 
Buâ⁄Mode_Ty≥Def
 
Buâ⁄_Mode
)

196 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

197 
EXTI_InôTy≥Def
 
EXTI_InôSåu˘uª
;

198 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

201 
	`RCC_AHB1PîùhClockCmd
(
BUTTON_CLK
[
Buâ⁄
], 
ENABLE
);

202 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_SYSCFG
, 
ENABLE
);

205 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

206 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

207 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
BUTTON_PIN
[
Buâ⁄
];

208 
	`GPIO_Inô
(
BUTTON_PORT
[
Buâ⁄
], &
GPIO_InôSåu˘uª
);

210 i‡(
Buâ⁄_Mode
 =
BUTTON_MODE_EXTI
)

213 
	`SYSCFG_EXTILöeC⁄fig
(
BUTTON_PORT_SOURCE
[
Buâ⁄
], 
BUTTON_PIN_SOURCE
[Button]);

216 
EXTI_InôSåu˘uª
.
EXTI_Löe
 = 
BUTTON_EXTI_LINE
[
Buâ⁄
];

217 
EXTI_InôSåu˘uª
.
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

218 
EXTI_InôSåu˘uª
.
EXTI_Triggî
 = 
EXTI_Triggî_Risög
;

219 
EXTI_InôSåu˘uª
.
EXTI_LöeCmd
 = 
ENABLE
;

220 
	`EXTI_Inô
(&
EXTI_InôSåu˘uª
);

223 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
BUTTON_IRQn
[
Buâ⁄
];

224 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0x0F;

225 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0x0F;

226 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

228 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

230 
	}
}

238 
uöt32_t
 
	$STM_EVAL_PBGëSèã
(
Buâ⁄_Ty≥Def
 
Buâ⁄
)

240  
	`GPIO_RódI≈utD©aBô
(
BUTTON_PORT
[
Buâ⁄
], 
BUTTON_PIN
[Button]);

241 
	}
}

265 
USART_Ty≥Def
* 
	gCOM_USART
[
COMn
] = {
EVAL_COM1
};

266 
GPIO_Ty≥Def
* 
	gCOM_TX_PORT
[
COMn
] = {
EVAL_COM1_TX_GPIO_PORT
};

267 
GPIO_Ty≥Def
* 
	gCOM_RX_PORT
[
COMn
] = {
EVAL_COM1_RX_GPIO_PORT
};

268 c⁄° 
uöt32_t
 
	gCOM_USART_CLK
[
COMn
] = {
EVAL_COM1_CLK
};

269 c⁄° 
uöt32_t
 
	gCOM_TX_PORT_CLK
[
COMn
] = {
EVAL_COM1_TX_GPIO_CLK
};

270 c⁄° 
uöt32_t
 
	gCOM_RX_PORT_CLK
[
COMn
] = {
EVAL_COM1_RX_GPIO_CLK
};

271 c⁄° 
uöt16_t
 
	gCOM_TX_PIN
[
COMn
] = {
EVAL_COM1_TX_PIN
};

272 c⁄° 
uöt16_t
 
	gCOM_RX_PIN
[
COMn
] = {
EVAL_COM1_RX_PIN
};

273 c⁄° 
uöt16_t
 
	gCOM_TX_PIN_SOURCE
[
COMn
] = {
EVAL_COM1_TX_SOURCE
};

274 c⁄° 
uöt16_t
 
	gCOM_RX_PIN_SOURCE
[
COMn
] = {
EVAL_COM1_RX_SOURCE
};

275 c⁄° 
uöt16_t
 
	gCOM_TX_AF
[
COMn
] = {
EVAL_COM1_TX_AF
};

276 c⁄° 
uöt16_t
 
	gCOM_RX_AF
[
COMn
] = {
EVAL_COM1_RX_AF
};

287 
	$STM_EVAL_COMInô
(
COM_Ty≥Def
 
COM
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

289 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

292 
	`RCC_AHB1PîùhClockCmd
(
COM_TX_PORT_CLK
[
COM
] | 
COM_RX_PORT_CLK
[COM], 
ENABLE
);

294 i‡(
COM
 =
COM1
)

297 
	`RCC_APB1PîùhClockCmd
(
COM_USART_CLK
[
COM
], 
ENABLE
);

301 
	`GPIO_PöAFC⁄fig
(
COM_TX_PORT
[
COM
], 
COM_TX_PIN_SOURCE
[COM], 
COM_TX_AF
[COM]);

304 
	`GPIO_PöAFC⁄fig
(
COM_RX_PORT
[
COM
], 
COM_RX_PIN_SOURCE
[COM], 
COM_RX_AF
[COM]);

307 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

308 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

309 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

311 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
COM_TX_PIN
[
COM
];

312 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

313 
	`GPIO_Inô
(
COM_TX_PORT
[
COM
], &
GPIO_InôSåu˘uª
);

316 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

317 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
COM_RX_PIN
[
COM
];

318 
	`GPIO_Inô
(
COM_RX_PORT
[
COM
], &
GPIO_InôSåu˘uª
);

323 
	`USART_Inô
(
COM_USART
[
COM
], 
USART_InôSåu˘
);

326 
	`USART_Cmd
(
COM_USART
[
COM
], 
ENABLE
);

327 
	}
}

	@libstm/Utilities/STM32F4-Discovery/discoveryf4utils.h

28 #i‚de‡
__DISCOVERYF4UTILS_H


29 
	#__DISCOVERYF4UTILS_H


	)

31 #ifde‡
__˝lu•lus


36 
	~"°m32f4xx_c⁄f.h
"

37 
	~"°m32f4xx.h
"

56 
LED_GREEN
 = 0,

57 
LED_BLUE
 = 1,

58 
LED_RED
 = 2,

59 
LED_ORANGE
 = 3

60 } 
	tLed_Ty≥Def
;

64 
BUTTON_USER
 = 0,

65 } 
	tBuâ⁄_Ty≥Def
;

69 
BUTTON_MODE_GPIO
 = 0,

70 
BUTTON_MODE_EXTI
 = 1

71 } 
	tBuâ⁄Mode_Ty≥Def
;

83 
	#LEDn
 4

	)

85 
	#LED_RED_PIN
 
GPIO_Pö_14


	)

86 
	#LED_RED_GPIO_PORT
 
GPIOD


	)

87 
	#LED_RED_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOD


	)

89 
	#LED_GREEN_PIN
 
GPIO_Pö_12


	)

90 
	#LED_GREEN_GPIO_PORT
 
GPIOD


	)

91 
	#LED_GREEN_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOD


	)

93 
	#LED_BLUE_PIN
 
GPIO_Pö_15


	)

94 
	#LED_BLUE_GPIO_PORT
 
GPIOD


	)

95 
	#LED_BLUE_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOD


	)

97 
	#LED_ORANGE_PIN
 
GPIO_Pö_13


	)

98 
	#LED_ORANGE_GPIO_PORT
 
GPIOD


	)

99 
	#LED_ORANGE_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOD


	)

107 
	#BUTTONn
 1

	)

112 
	#USER_BUTTON_PIN
 
GPIO_Pö_0


	)

113 
	#USER_BUTTON_GPIO_PORT
 
GPIOA


	)

114 
	#USER_BUTTON_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOA


	)

115 
	#USER_BUTTON_EXTI_LINE
 
EXTI_Löe0


	)

116 
	#USER_BUTTON_EXTI_PORT_SOURCE
 
EXTI_P‹tSour˚GPIOA


	)

117 
	#USER_BUTTON_EXTI_PIN_SOURCE
 
EXTI_PöSour˚0


	)

118 
	#USER_BUTTON_EXTI_IRQn
 
EXTI0_IRQn


	)

134 
STM_EVAL_LEDInô
(
Led_Ty≥Def
 
Led
);

135 
STM_EVAL_LEDOn
(
Led_Ty≥Def
 
Led
);

136 
STM_EVAL_LEDOff
(
Led_Ty≥Def
 
Led
);

137 
STM_EVAL_LEDToggÀ
(
Led_Ty≥Def
 
Led
);

138 
STM_EVAL_PBInô
(
Buâ⁄_Ty≥Def
 
Buâ⁄
, 
Buâ⁄Mode_Ty≥Def
 
Buâ⁄_Mode
);

139 
uöt32_t
 
STM_EVAL_PBGëSèã
(
Buâ⁄_Ty≥Def
 
Buâ⁄
);

152 
	#COMn
 1

	)

156 
COM1
 = 0,

157 
COM2
 = 1

158 } 
	tCOM_Ty≥Def
;

163 
	#EVAL_COM1
 
USART3


	)

164 
	#EVAL_COM1_CLK
 
RCC_APB1Pîùh_USART3


	)

165 
	#EVAL_COM1_TX_PIN
 
GPIO_Pö_10


	)

166 
	#EVAL_COM1_TX_GPIO_PORT
 
GPIOC


	)

167 
	#EVAL_COM1_TX_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOC


	)

168 
	#EVAL_COM1_TX_SOURCE
 
GPIO_PöSour˚10


	)

169 
	#EVAL_COM1_TX_AF
 
GPIO_AF_USART3


	)

170 
	#EVAL_COM1_RX_PIN
 
GPIO_Pö_11


	)

171 
	#EVAL_COM1_RX_GPIO_PORT
 
GPIOC


	)

172 
	#EVAL_COM1_RX_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOC


	)

173 
	#EVAL_COM1_RX_SOURCE
 
GPIO_PöSour˚11


	)

174 
	#EVAL_COM1_RX_AF
 
GPIO_AF_USART3


	)

175 
	#EVAL_COM1_IRQn
 
USART3_IRQn


	)

178 
STM_EVAL_COMInô
(
COM_Ty≥Def
 
COM
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

190 #ifde‡
__˝lu•lus


	@libstm/Utilities/STM32F4-Discovery/stm32f4_discovery.c

24 
	~"°m32f4xx_c⁄f.h
"

25 
	~"°m32f4_discovîy.h
"

69 
GPIO_Ty≥Def
* 
	gGPIO_PORT
[
LEDn
] = {
LED4_GPIO_PORT
, 
LED3_GPIO_PORT
, 
LED5_GPIO_PORT
,

70 
LED6_GPIO_PORT
};

71 c⁄° 
uöt16_t
 
	gGPIO_PIN
[
LEDn
] = {
LED4_PIN
, 
LED3_PIN
, 
LED5_PIN
,

72 
LED6_PIN
};

73 c⁄° 
uöt32_t
 
	gGPIO_CLK
[
LEDn
] = {
LED4_GPIO_CLK
, 
LED3_GPIO_CLK
, 
LED5_GPIO_CLK
,

74 
LED6_GPIO_CLK
};

76 
GPIO_Ty≥Def
* 
	gBUTTON_PORT
[
BUTTONn
] = {
USER_BUTTON_GPIO_PORT
 };

78 c⁄° 
uöt16_t
 
	gBUTTON_PIN
[
BUTTONn
] = {
USER_BUTTON_PIN
 };

80 c⁄° 
uöt32_t
 
	gBUTTON_CLK
[
BUTTONn
] = {
USER_BUTTON_GPIO_CLK
 };

82 c⁄° 
uöt16_t
 
	gBUTTON_EXTI_LINE
[
BUTTONn
] = {
USER_BUTTON_EXTI_LINE
 };

84 c⁄° 
uöt8_t
 
	gBUTTON_PORT_SOURCE
[
BUTTONn
] = {
USER_BUTTON_EXTI_PORT_SOURCE
};

86 c⁄° 
uöt8_t
 
	gBUTTON_PIN_SOURCE
[
BUTTONn
] = {
USER_BUTTON_EXTI_PIN_SOURCE
 };

87 c⁄° 
uöt8_t
 
	gBUTTON_IRQn
[
BUTTONn
] = {
USER_BUTTON_EXTI_IRQn
 };

89 
NVIC_InôTy≥Def
 
	gNVIC_InôSåu˘uª
;

118 
	$STM_EVAL_LEDInô
(
Led_Ty≥Def
 
Led
)

120 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

123 
	`RCC_AHB1PîùhClockCmd
(
GPIO_CLK
[
Led
], 
ENABLE
);

126 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_PIN
[
Led
];

127 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

128 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

129 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

130 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

131 
	`GPIO_Inô
(
GPIO_PORT
[
Led
], &
GPIO_InôSåu˘uª
);

132 
	}
}

144 
	$STM_EVAL_LEDOn
(
Led_Ty≥Def
 
Led
)

146 
GPIO_PORT
[
Led
]->
BSRRL
 = 
GPIO_PIN
[Led];

147 
	}
}

159 
	$STM_EVAL_LEDOff
(
Led_Ty≥Def
 
Led
)

161 
GPIO_PORT
[
Led
]->
BSRRH
 = 
GPIO_PIN
[Led];

162 
	}
}

174 
	$STM_EVAL_LEDToggÀ
(
Led_Ty≥Def
 
Led
)

176 
GPIO_PORT
[
Led
]->
ODR
 ^
GPIO_PIN
[Led];

177 
	}
}

190 
	$STM_EVAL_PBInô
(
Buâ⁄_Ty≥Def
 
Buâ⁄
, 
Buâ⁄Mode_Ty≥Def
 
Buâ⁄_Mode
)

192 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

193 
EXTI_InôTy≥Def
 
EXTI_InôSåu˘uª
;

194 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

197 
	`RCC_AHB1PîùhClockCmd
(
BUTTON_CLK
[
Buâ⁄
], 
ENABLE
);

198 
	`RCC_APB2PîùhClockCmd
(
RCC_APB2Pîùh_SYSCFG
, 
ENABLE
);

201 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

202 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

203 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
BUTTON_PIN
[
Buâ⁄
];

204 
	`GPIO_Inô
(
BUTTON_PORT
[
Buâ⁄
], &
GPIO_InôSåu˘uª
);

206 i‡(
Buâ⁄_Mode
 =
BUTTON_MODE_EXTI
)

209 
	`SYSCFG_EXTILöeC⁄fig
(
BUTTON_PORT_SOURCE
[
Buâ⁄
], 
BUTTON_PIN_SOURCE
[Button]);

212 
EXTI_InôSåu˘uª
.
EXTI_Löe
 = 
BUTTON_EXTI_LINE
[
Buâ⁄
];

213 
EXTI_InôSåu˘uª
.
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

214 
EXTI_InôSåu˘uª
.
EXTI_Triggî
 = 
EXTI_Triggî_Risög
;

215 
EXTI_InôSåu˘uª
.
EXTI_LöeCmd
 = 
ENABLE
;

216 
	`EXTI_Inô
(&
EXTI_InôSåu˘uª
);

219 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
BUTTON_IRQn
[
Buâ⁄
];

220 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0x0F;

221 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 0x0F;

222 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

224 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

226 
	}
}

234 
uöt32_t
 
	$STM_EVAL_PBGëSèã
(
Buâ⁄_Ty≥Def
 
Buâ⁄
)

236  
	`GPIO_RódI≈utD©aBô
(
BUTTON_PORT
[
Buâ⁄
], 
BUTTON_PIN
[Button]);

237 
	}
}

261 
USART_Ty≥Def
* 
	gCOM_USART
[
COMn
] = {
EVAL_COM1
};

262 
GPIO_Ty≥Def
* 
	gCOM_TX_PORT
[
COMn
] = {
EVAL_COM1_TX_GPIO_PORT
};

263 
GPIO_Ty≥Def
* 
	gCOM_RX_PORT
[
COMn
] = {
EVAL_COM1_RX_GPIO_PORT
};

264 c⁄° 
uöt32_t
 
	gCOM_USART_CLK
[
COMn
] = {
EVAL_COM1_CLK
};

265 c⁄° 
uöt32_t
 
	gCOM_TX_PORT_CLK
[
COMn
] = {
EVAL_COM1_TX_GPIO_CLK
};

266 c⁄° 
uöt32_t
 
	gCOM_RX_PORT_CLK
[
COMn
] = {
EVAL_COM1_RX_GPIO_CLK
};

267 c⁄° 
uöt16_t
 
	gCOM_TX_PIN
[
COMn
] = {
EVAL_COM1_TX_PIN
};

268 c⁄° 
uöt16_t
 
	gCOM_RX_PIN
[
COMn
] = {
EVAL_COM1_RX_PIN
};

269 c⁄° 
uöt16_t
 
	gCOM_TX_PIN_SOURCE
[
COMn
] = {
EVAL_COM1_TX_SOURCE
};

270 c⁄° 
uöt16_t
 
	gCOM_RX_PIN_SOURCE
[
COMn
] = {
EVAL_COM1_RX_SOURCE
};

271 c⁄° 
uöt16_t
 
	gCOM_TX_AF
[
COMn
] = {
EVAL_COM1_TX_AF
};

272 c⁄° 
uöt16_t
 
	gCOM_RX_AF
[
COMn
] = {
EVAL_COM1_RX_AF
};

283 
	$STM_EVAL_COMInô
(
COM_Ty≥Def
 
COM
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

285 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

288 
	`RCC_AHB1PîùhClockCmd
(
COM_TX_PORT_CLK
[
COM
] | 
COM_RX_PORT_CLK
[COM], 
ENABLE
);

290 i‡(
COM
 =
COM1
)

293 
	`RCC_APB1PîùhClockCmd
(
COM_USART_CLK
[
COM
], 
ENABLE
);

297 
	`GPIO_PöAFC⁄fig
(
COM_TX_PORT
[
COM
], 
COM_TX_PIN_SOURCE
[COM], 
COM_TX_AF
[COM]);

300 
	`GPIO_PöAFC⁄fig
(
COM_RX_PORT
[
COM
], 
COM_RX_PIN_SOURCE
[COM], 
COM_RX_AF
[COM]);

303 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

304 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_UP
;

305 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

307 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
COM_TX_PIN
[
COM
];

308 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

309 
	`GPIO_Inô
(
COM_TX_PORT
[
COM
], &
GPIO_InôSåu˘uª
);

312 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

313 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
COM_RX_PIN
[
COM
];

314 
	`GPIO_Inô
(
COM_RX_PORT
[
COM
], &
GPIO_InôSåu˘uª
);

319 
	`USART_Inô
(
COM_USART
[
COM
], 
USART_InôSåu˘
);

322 
	`USART_Cmd
(
COM_USART
[
COM
], 
ENABLE
);

323 
	}
}

	@libstm/Utilities/STM32F4-Discovery/stm32f4_discovery.h

24 #i‚de‡
__STM32F4_DISCOVERY_H


25 
	#__STM32F4_DISCOVERY_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx_c⁄f.h
"

33 
	~"°m32f4xx.h
"

52 
LED4
 = 0,

53 
LED3
 = 1,

54 
LED5
 = 2,

55 
LED6
 = 3

56 } 
	tLed_Ty≥Def
;

60 
BUTTON_USER
 = 0,

61 } 
	tBuâ⁄_Ty≥Def
;

65 
BUTTON_MODE_GPIO
 = 0,

66 
BUTTON_MODE_EXTI
 = 1

67 } 
	tBuâ⁄Mode_Ty≥Def
;

79 
	#LEDn
 4

	)

81 
	#LED4_PIN
 
GPIO_Pö_12


	)

82 
	#LED4_GPIO_PORT
 
GPIOD


	)

83 
	#LED4_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOD


	)

85 
	#LED3_PIN
 
GPIO_Pö_13


	)

86 
	#LED3_GPIO_PORT
 
GPIOD


	)

87 
	#LED3_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOD


	)

89 
	#LED5_PIN
 
GPIO_Pö_14


	)

90 
	#LED5_GPIO_PORT
 
GPIOD


	)

91 
	#LED5_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOD


	)

93 
	#LED6_PIN
 
GPIO_Pö_15


	)

94 
	#LED6_GPIO_PORT
 
GPIOD


	)

95 
	#LED6_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOD


	)

103 
	#BUTTONn
 1

	)

108 
	#USER_BUTTON_PIN
 
GPIO_Pö_0


	)

109 
	#USER_BUTTON_GPIO_PORT
 
GPIOA


	)

110 
	#USER_BUTTON_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOA


	)

111 
	#USER_BUTTON_EXTI_LINE
 
EXTI_Löe0


	)

112 
	#USER_BUTTON_EXTI_PORT_SOURCE
 
EXTI_P‹tSour˚GPIOA


	)

113 
	#USER_BUTTON_EXTI_PIN_SOURCE
 
EXTI_PöSour˚0


	)

114 
	#USER_BUTTON_EXTI_IRQn
 
EXTI0_IRQn


	)

130 
STM_EVAL_LEDInô
(
Led_Ty≥Def
 
Led
);

131 
STM_EVAL_LEDOn
(
Led_Ty≥Def
 
Led
);

132 
STM_EVAL_LEDOff
(
Led_Ty≥Def
 
Led
);

133 
STM_EVAL_LEDToggÀ
(
Led_Ty≥Def
 
Led
);

134 
STM_EVAL_PBInô
(
Buâ⁄_Ty≥Def
 
Buâ⁄
, 
Buâ⁄Mode_Ty≥Def
 
Buâ⁄_Mode
);

135 
uöt32_t
 
STM_EVAL_PBGëSèã
(
Buâ⁄_Ty≥Def
 
Buâ⁄
);

148 
COM1
 = 0,

149 
COM2
 = 1

150 } 
	tCOM_Ty≥Def
;

152 
	#COMn
 1

	)

157 
	#EVAL_COM1
 
USART3


	)

158 
	#EVAL_COM1_CLK
 
RCC_APB1Pîùh_USART3


	)

159 
	#EVAL_COM1_TX_PIN
 
GPIO_Pö_10


	)

160 
	#EVAL_COM1_TX_GPIO_PORT
 
GPIOC


	)

161 
	#EVAL_COM1_TX_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOC


	)

162 
	#EVAL_COM1_TX_SOURCE
 
GPIO_PöSour˚10


	)

163 
	#EVAL_COM1_TX_AF
 
GPIO_AF_USART3


	)

164 
	#EVAL_COM1_RX_PIN
 
GPIO_Pö_11


	)

165 
	#EVAL_COM1_RX_GPIO_PORT
 
GPIOC


	)

166 
	#EVAL_COM1_RX_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOC


	)

167 
	#EVAL_COM1_RX_SOURCE
 
GPIO_PöSour˚11


	)

168 
	#EVAL_COM1_RX_AF
 
GPIO_AF_USART3


	)

169 
	#EVAL_COM1_IRQn
 
USART3_IRQn


	)

172 
STM_EVAL_COMInô
(
COM_Ty≥Def
 
COM
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

184 #ifde‡
__˝lu•lus


	@libstm/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.c

128 
	~"°m32f4_discovîy_audio_codec.h
"

130 
	~"°m32f4xx_c⁄f.h
"

158 
	#I2S_ENABLE_MASK
 0x0400

	)

161 
	#CODEC_RESET_DELAY
 0x4FFF

	)

164 #ifde‡
I2S_STANDARD_PHILLIPS


165 
	#CODEC_STANDARD
 0x04

	)

166 
	#I2S_STANDARD
 
I2S_Sènd¨d_Phûlùs


	)

167 #ñi‡
deföed
(
I2S_STANDARD_MSB
)

168 
	#CODEC_STANDARD
 0x00

	)

169 
	#I2S_STANDARD
 
I2S_Sènd¨d_MSB


	)

170 #ñi‡
deföed
(
I2S_STANDARD_LSB
)

171 
	#CODEC_STANDARD
 0x08

	)

172 
	#I2S_STANDARD
 
I2S_Sènd¨d_LSB


	)

178 
	#CODEC_ADDRESS
 0x94

	)

194 
DMA_InôTy≥Def
 
	gDMA_InôSåu˘uª
;

195 
DMA_InôTy≥Def
 
	gAUDIO_MAL_DMA_InôSåu˘uª
;

197 
uöt32_t
 
	gAudioTŸÆSize
 = 0xFFFF;

198 
uöt32_t
 
	gAudioRemSize
 = 0xFFFF;

199 
uöt16_t
 *
	gCuºítPos
;

201 
__IO
 
uöt32_t
 
	gCODECTimeout
 = 
CODEC_LONG_TIMEOUT
;

202 
__IO
 
uöt8_t
 
	gOuçutDev
 = 0;

205 
__IO
 
uöt32_t
 
	gCuºAudioI¡îÁ˚
 = 
AUDIO_INTERFACE_I2S
;

220 
Audio_MAL_IRQH™dÀr
();

225 
uöt32_t
 
Codec_Inô
(
uöt16_t
 
OuçutDevi˚
, 
uöt8_t
 
Vﬁume
, uöt32_à
AudioFªq
);

226 
uöt32_t
 
Codec_DeInô
();

227 
uöt32_t
 
Codec_Pœy
();

228 
uöt32_t
 
Codec_Pau£Resume
(uöt32_à
Cmd
);

229 
uöt32_t
 
Codec_St›
(uöt32_à
Cmd
);

230 
uöt32_t
 
Codec_VﬁumeCål
(
uöt8_t
 
Vﬁume
);

231 
uöt32_t
 
Codec_Muã
(uöt32_à
Cmd
);

233 
Codec_CålI¡îÁ˚_Inô
();

234 
Codec_CålI¡îÁ˚_DeInô
();

235 
Codec_AudioI¡îÁ˚_Inô
(
uöt32_t
 
AudioFªq
);

236 
Codec_AudioI¡îÁ˚_DeInô
();

237 
Codec_Re£t
();

238 
uöt32_t
 
Codec_WrôeRegi°î
(
uöt8_t
 
Regi°îAddr
, uöt8_à
Regi°îVÆue
);

239 
uöt32_t
 
Codec_RódRegi°î
(
uöt8_t
 
Regi°îAddr
);

240 
Codec_GPIO_Inô
();

241 
Codec_GPIO_DeInô
();

242 
Dñay
(
__IO
 
uöt32_t
 
nCou¡
);

249 
Audio_MAL_Inô
();

250 
Audio_MAL_DeInô
();

251 
Audio_MAL_Pœy
(
uöt32_t
 
Addr
, uöt32_à
Size
);

252 
Audio_MAL_Pau£Resume
(
uöt32_t
 
Cmd
, uöt32_à
Addr
);

253 
Audio_MAL_St›
();

257 
uöt32_t
 
	gAUDIO_MAL_DMA_CLOCK
 = 
AUDIO_I2S_DMA_CLOCK
;

258 
DMA_Såóm_Ty≥Def
 * 
	gAUDIO_MAL_DMA_STREAM
 = 
AUDIO_I2S_DMA_STREAM
 ;

259 
uöt32_t
 
	gAUDIO_MAL_DMA_DREG
 = 
AUDIO_I2S_DMA_DREG
;

260 
uöt32_t
 
	gAUDIO_MAL_DMA_CHANNEL
 = 
AUDIO_I2S_DMA_CHANNEL
;

261 
uöt32_t
 
	gAUDIO_MAL_DMA_IRQ
 = 
AUDIO_I2S_DMA_IRQ
 ;

262 
uöt32_t
 
	gAUDIO_MAL_DMA_FLAG_TC
 = 
AUDIO_I2S_DMA_FLAG_TC
;

263 
uöt32_t
 
	gAUDIO_MAL_DMA_FLAG_HT
 = 
AUDIO_I2S_DMA_FLAG_HT
;

264 
uöt32_t
 
	gAUDIO_MAL_DMA_FLAG_FE
 = 
AUDIO_I2S_DMA_FLAG_FE
;

265 
uöt32_t
 
	gAUDIO_MAL_DMA_FLAG_TE
 = 
AUDIO_I2S_DMA_FLAG_TE
;

266 
uöt32_t
 
	gAUDIO_MAL_DMA_FLAG_DME
 = 
AUDIO_I2S_DMA_FLAG_DME
;

273 
	$EVAL_AUDIO_SëAudioI¡îÁ˚
(
uöt32_t
 
I¡îÁ˚
)

275 
CuºAudioI¡îÁ˚
 = 
I¡îÁ˚
;

277 i‡(
CuºAudioI¡îÁ˚
 =
AUDIO_INTERFACE_I2S
)

280 
AUDIO_MAL_DMA_CLOCK
 = 
AUDIO_I2S_DMA_CLOCK
;

281 
AUDIO_MAL_DMA_STREAM
 = 
AUDIO_I2S_DMA_STREAM
;

282 
AUDIO_MAL_DMA_DREG
 = 
AUDIO_I2S_DMA_DREG
;

283 
AUDIO_MAL_DMA_CHANNEL
 = 
AUDIO_I2S_DMA_CHANNEL
;

284 
AUDIO_MAL_DMA_IRQ
 = 
AUDIO_I2S_DMA_IRQ
 ;

285 
AUDIO_MAL_DMA_FLAG_TC
 = 
AUDIO_I2S_DMA_FLAG_TC
;

286 
AUDIO_MAL_DMA_FLAG_HT
 = 
AUDIO_I2S_DMA_FLAG_HT
;

287 
AUDIO_MAL_DMA_FLAG_FE
 = 
AUDIO_I2S_DMA_FLAG_FE
;

288 
AUDIO_MAL_DMA_FLAG_TE
 = 
AUDIO_I2S_DMA_FLAG_TE
;

289 
AUDIO_MAL_DMA_FLAG_DME
 = 
AUDIO_I2S_DMA_FLAG_DME
;

291 i‡(
I¡îÁ˚
 =
AUDIO_INTERFACE_DAC
)

294 
AUDIO_MAL_DMA_CLOCK
 = 
AUDIO_DAC_DMA_CLOCK
;

295 
AUDIO_MAL_DMA_STREAM
 = 
AUDIO_DAC_DMA_STREAM
;

296 
AUDIO_MAL_DMA_DREG
 = 
AUDIO_DAC_DMA_DREG
;

297 
AUDIO_MAL_DMA_CHANNEL
 = 
AUDIO_DAC_DMA_CHANNEL
;

298 
AUDIO_MAL_DMA_IRQ
 = 
AUDIO_DAC_DMA_IRQ
 ;

299 
AUDIO_MAL_DMA_FLAG_TC
 = 
AUDIO_DAC_DMA_FLAG_TC
;

300 
AUDIO_MAL_DMA_FLAG_HT
 = 
AUDIO_DAC_DMA_FLAG_HT
;

301 
AUDIO_MAL_DMA_FLAG_FE
 = 
AUDIO_DAC_DMA_FLAG_FE
;

302 
AUDIO_MAL_DMA_FLAG_TE
 = 
AUDIO_DAC_DMA_FLAG_TE
;

303 
AUDIO_MAL_DMA_FLAG_DME
 = 
AUDIO_DAC_DMA_FLAG_DME
;

305 
	}
}

315 
uöt32_t
 
	$EVAL_AUDIO_Inô
(
uöt16_t
 
OuçutDevi˚
, 
uöt8_t
 
Vﬁume
, 
uöt32_t
 
AudioFªq
)

318 i‡(
	`Codec_Inô
(
OuçutDevi˚
, 
	`VOLUME_CONVERT
(
Vﬁume
), 
AudioFªq
) != 0)

326 
	`Audio_MAL_Inô
();

331 
	}
}

339 
uöt32_t
 
	$EVAL_AUDIO_DeInô
()

342 
	`Audio_MAL_DeInô
();

345 
	`Codec_DeInô
();

348 
	}
}

356 
uöt32_t
 
	$EVAL_AUDIO_Pœy
(
uöt16_t
* 
pBuf„r
, 
uöt32_t
 
Size
)

359 
AudioTŸÆSize
 = 
Size
/2;

362 
	`Codec_Pœy
();

365 
	`Audio_MAL_Pœy
((
uöt32_t
)
pBuf„r
, (uöt32_t)(
	`DMA_MAX
(
AudioTŸÆSize
 / 2)));

368 
AudioRemSize
 = (
Size
/2Ë- 
	`DMA_MAX
(
AudioTŸÆSize
);

371 
CuºítPos
 = 
pBuf„r
 + 
	`DMA_MAX
(
AudioTŸÆSize
);

374 
	}
}

389 
uöt32_t
 
	$EVAL_AUDIO_Pau£Resume
(
uöt32_t
 
Cmd
)

392 i‡(
	`Codec_Pau£Resume
(
Cmd
) != 0)

399 
	`Audio_MAL_Pau£Resume
(
Cmd
, 0);

404 
	}
}

415 
uöt32_t
 
	$EVAL_AUDIO_St›
(
uöt32_t
 
O±i⁄
)

418 i‡(
	`Codec_St›
(
O±i⁄
) != 0)

425 
	`Audio_MAL_St›
();

428 
AudioRemSize
 = 
AudioTŸÆSize
;

433 
	}
}

441 
uöt32_t
 
	$EVAL_AUDIO_VﬁumeCé
(
uöt8_t
 
Vﬁume
)

444  (
	`Codec_VﬁumeCål
(
	`VOLUME_CONVERT
(
Vﬁume
)));

445 
	}
}

453 
uöt32_t
 
	$EVAL_AUDIO_Muã
(
uöt32_t
 
Cmd
)

456  (
	`Codec_Muã
(
Cmd
));

457 
	}
}

464 
	$Audio_MAL_IRQH™dÀr
()

466 #i‚de‡
AUDIO_MAL_MODE_NORMAL


467 
uöt16_t
 *
pAddr
 = (uöt16_à*)
CuºítPos
;

468 
uöt32_t
 
Size
 = 
AudioRemSize
;

471 #ifde‡
AUDIO_MAL_DMA_IT_TC_EN


473 i‡(
	`DMA_GëFœgSètus
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_TC
Ë!
RESET
)

475 #ifde‡
AUDIO_MAL_MODE_NORMAL


477 i‡(
AudioRemSize
 > 0)

480 
	`DMA_GëCmdSètus
(
AUDIO_MAL_DMA_STREAM
Ë!
DISABLE
)

484 
	`DMA_CÀ¨Fœg
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_TC
);

487 
DMA_InôSåu˘uª
.
DMA_Mem‹y0Ba£Addr
 = (
uöt32_t
Ë
CuºítPos
;

488 
DMA_InôSåu˘uª
.
DMA_Buf„rSize
 = (
uöt32_t
Ë(
	`DMA_MAX
(
AudioRemSize
));

491 
	`DMA_Inô
(
AUDIO_MAL_DMA_STREAM
, &
DMA_InôSåu˘uª
);

494 
	`DMA_Cmd
(
AUDIO_MAL_DMA_STREAM
, 
ENABLE
);

497 
CuºítPos
 +
	`DMA_MAX
(
AudioRemSize
);

500 
AudioRemSize
 -
	`DMA_MAX
(AudioRemSize);

505 
	`DMA_Cmd
(
AUDIO_MAL_DMA_STREAM
, 
DISABLE
);

508 
	`DMA_CÀ¨Fœg
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_TC
);

512 
	`EVAL_AUDIO_Tøns„rCom∂ëe_CÆlBack
((
uöt32_t
)
CuºítPos
, 0);

515 #ñi‡
	`deföed
(
AUDIO_MAL_MODE_CIRCULAR
)

518 
	`EVAL_AUDIO_Tøns„rCom∂ëe_CÆlBack
(
pAddr
, 
Size
);

521 
	`DMA_CÀ¨Fœg
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_TC
);

526 #ifde‡
AUDIO_MAL_DMA_IT_HT_EN


528 i‡(
	`DMA_GëFœgSètus
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_HT
Ë!
RESET
)

532 
	`EVAL_AUDIO_HÆfTøns„r_CÆlBack
((
uöt32_t
)
pAddr
, 
Size
);

535 
	`DMA_CÀ¨Fœg
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_HT
);

539 #ifde‡
AUDIO_MAL_DMA_IT_TE_EN


541 i‡((
	`DMA_GëFœgSètus
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_TE
Ë!
RESET
) || \

542 (
	`DMA_GëFœgSètus
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_FE
Ë!
RESET
) || \

543 (
	`DMA_GëFœgSètus
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_DME
Ë!
RESET
))

548 
	`EVAL_AUDIO_Eº‹_CÆlBack
((
uöt32_t
*)&
pAddr
);

551 
	`DMA_CÀ¨Fœg
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_TE
 | 
AUDIO_MAL_DMA_FLAG_FE
 | \

552 
AUDIO_MAL_DMA_FLAG_DME
);

555 
	}
}

562 
	$Audio_MAL_I2S_IRQH™dÀr
()

564 
	`Audio_MAL_IRQH™dÀr
();

565 
	}
}

572 
	$Audio_MAL_DAC_IRQH™dÀr
()

574 
	`Audio_MAL_IRQH™dÀr
();

575 
	}
}

582 
	$Audio_I2S_IRQH™dÀr
()

585 i‡(
	`SPI_I2S_GëFœgSètus
(
SPI3
, 
SPI_I2S_FLAG_TXE
Ë!
RESET
)

587 i‡(
CuºAudioI¡îÁ˚
 =
AUDIO_INTERFACE_DAC
)

590 
	`DAC_SëCh™√l1D©a
(
DAC_Align_12b_L
, 
	`EVAL_AUDIO_GëSam∂eCÆlBack
());

594 
	`SPI_I2S_SídD©a
(
CODEC_I2S
, 
	`EVAL_AUDIO_GëSam∂eCÆlBack
());

596 
	}
}

610 
uöt32_t
 
	$Codec_Inô
(
uöt16_t
 
OuçutDevi˚
, 
uöt8_t
 
Vﬁume
, 
uöt32_t
 
AudioFªq
)

612 
uöt32_t
 
cou¡î
 = 0;

615 
	`Codec_GPIO_Inô
();

618 
	`Codec_Re£t
();

621 
	`Codec_CålI¡îÁ˚_Inô
();

624 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x02, 0x01);

626 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x04, 0xAF);

627 
OuçutDev
 = 0xAF;

630 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x05, 0x81);

633 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x06, 
CODEC_STANDARD
);

636 
	`Codec_VﬁumeCål
(
Vﬁume
);

638 i‡(
CuºAudioI¡îÁ˚
 =
AUDIO_INTERFACE_DAC
)

641 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x08, 0x01);

642 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x09, 0x01);

645 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x0E, 0xC0);

648 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x14, 0x00);

649 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x15, 0x00);

653 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x02, 0x9E);

663 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x0A, 0x00);

664 i‡(
CuºAudioI¡îÁ˚
 !
AUDIO_INTERFACE_DAC
)

667 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x0E, 0x04);

670 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x27, 0x00);

672 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x1F, 0x0F);

674 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x1A, 0x0A);

675 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x1B, 0x0A);

678 
	`Codec_AudioI¡îÁ˚_Inô
(
AudioFªq
);

681  
cou¡î
;

682 
	}
}

690 
uöt32_t
 
	$Codec_DeInô
()

692 
uöt32_t
 
cou¡î
 = 0;

695 
	`Codec_Re£t
();

698 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x02, 0x01);

701 
	`Codec_GPIO_DeInô
();

704 
	`Codec_CålI¡îÁ˚_DeInô
();

707 
	`Codec_AudioI¡îÁ˚_DeInô
();

710  
cou¡î
;

711 
	}
}

719 
uöt32_t
 
	$Codec_Pœy
()

727 
	}
}

735 
uöt32_t
 
	$Codec_Pau£Resume
(
uöt32_t
 
Cmd
)

737 
uöt32_t
 
cou¡î
 = 0;

740 i‡(
Cmd
 =
AUDIO_PAUSE
)

743 
cou¡î
 +
	`Codec_Muã
(
AUDIO_MUTE_ON
);

746 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x02, 0x01);

751 
cou¡î
 +
	`Codec_Muã
(
AUDIO_MUTE_OFF
);

753 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x04, 
OuçutDev
);

756 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x02, 0x9E);

759  
cou¡î
;

760 
	}
}

774 
uöt32_t
 
	$Codec_St›
(
uöt32_t
 
CodecPdwnMode
)

776 
uöt32_t
 
cou¡î
 = 0;

779 
	`Codec_Muã
(
AUDIO_MUTE_ON
);

781 i‡(
CodecPdwnMode
 =
CODEC_PDWN_SW
)

784 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x02, 0x9F);

789 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x02, 0x9F);

792 
	`Dñay
(0xFFF);

795 
	`GPIO_WrôeBô
(
AUDIO_RESET_GPIO
, 
AUDIO_RESET_PIN
, 
Bô_RESET
);

798  
cou¡î
;

799 
	}
}

807 
uöt32_t
 
	$Codec_VﬁumeCål
(
uöt8_t
 
Vﬁume
)

809 
uöt32_t
 
cou¡î
 = 0;

811 i‡(
Vﬁume
 > 0xE6)

814 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x20, 
Vﬁume
 - 0xE7);

815 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x21, 
Vﬁume
 - 0xE7);

820 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x20, 
Vﬁume
 + 0x19);

821 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x21, 
Vﬁume
 + 0x19);

824  
cou¡î
;

825 
	}
}

833 
uöt32_t
 
	$Codec_Muã
(
uöt32_t
 
Cmd
)

835 
uöt32_t
 
cou¡î
 = 0;

838 i‡(
Cmd
 =
AUDIO_MUTE_ON
)

840 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x04, 0xFF);

844 
cou¡î
 +
	`Codec_WrôeRegi°î
(0x04, 
OuçutDev
);

847  
cou¡î
;

848 
	}
}

857 
	$Codec_Re£t
()

860 
	`GPIO_WrôeBô
(
AUDIO_RESET_GPIO
, 
AUDIO_RESET_PIN
, 
Bô_RESET
);

863 
	`Dñay
(
CODEC_RESET_DELAY
);

866 
	`GPIO_WrôeBô
(
AUDIO_RESET_GPIO
, 
AUDIO_RESET_PIN
, 
Bô_SET
);

867 
	}
}

876 
uöt32_t
 
	$Codec_WrôeRegi°î
(
uöt8_t
 
Regi°îAddr
, uöt8_à
Regi°îVÆue
)

878 
uöt32_t
 
ªsu…
 = 0;

881 
CODECTimeout
 = 
CODEC_LONG_TIMEOUT
;

882 
	`I2C_GëFœgSètus
(
CODEC_I2C
, 
I2C_FLAG_BUSY
))

884 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

888 
	`I2C_Gíî©eSTART
(
CODEC_I2C
, 
ENABLE
);

891 
CODECTimeout
 = 
CODEC_FLAG_TIMEOUT
;

892 !
	`I2C_CheckEvít
(
CODEC_I2C
, 
I2C_EVENT_MASTER_MODE_SELECT
))

894 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

898 
	`I2C_Síd7bôAddªss
(
CODEC_I2C
, 
CODEC_ADDRESS
, 
I2C_Dúe˘i⁄_Tønsmôãr
);

901 
CODECTimeout
 = 
CODEC_FLAG_TIMEOUT
;

902 !
	`I2C_CheckEvít
(
CODEC_I2C
, 
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
))

904 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

908 
	`I2C_SídD©a
(
CODEC_I2C
, 
Regi°îAddr
);

911 
CODECTimeout
 = 
CODEC_FLAG_TIMEOUT
;

912 !
	`I2C_CheckEvít
(
CODEC_I2C
, 
I2C_EVENT_MASTER_BYTE_TRANSMITTING
))

914 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

918 
	`I2C_SídD©a
(
CODEC_I2C
, 
Regi°îVÆue
);

921 
CODECTimeout
 = 
CODEC_LONG_TIMEOUT
;

922 !
	`I2C_GëFœgSètus
(
CODEC_I2C
, 
I2C_FLAG_BTF
))

924 if((
CODECTimeout
--Ë=0Ë
	`Codec_TIMEOUT_U£rCÆlback
();

928 
	`I2C_Gíî©eSTOP
(
CODEC_I2C
, 
ENABLE
);

930 #ifde‡
VERIFY_WRITTENDATA


932 
ªsu…
 = (
	`Codec_RódRegi°î
(
Regi°îAddr
Ë=
Regi°îVÆue
)? 0:1;

936  
ªsu…
;

937 
	}
}

946 
uöt32_t
 
	$Codec_RódRegi°î
(
uöt8_t
 
Regi°îAddr
)

948 
uöt32_t
 
ªsu…
 = 0;

951 
CODECTimeout
 = 
CODEC_LONG_TIMEOUT
;

952 
	`I2C_GëFœgSètus
(
CODEC_I2C
, 
I2C_FLAG_BUSY
))

954 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

958 
	`I2C_Gíî©eSTART
(
CODEC_I2C
, 
ENABLE
);

961 
CODECTimeout
 = 
CODEC_FLAG_TIMEOUT
;

962 !
	`I2C_CheckEvít
(
CODEC_I2C
, 
I2C_EVENT_MASTER_MODE_SELECT
))

964 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

968 
	`I2C_Síd7bôAddªss
(
CODEC_I2C
, 
CODEC_ADDRESS
, 
I2C_Dúe˘i⁄_Tønsmôãr
);

971 
CODECTimeout
 = 
CODEC_FLAG_TIMEOUT
;

972 !
	`I2C_CheckEvít
(
CODEC_I2C
, 
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
))

974 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

978 
	`I2C_SídD©a
(
CODEC_I2C
, 
Regi°îAddr
);

981 
CODECTimeout
 = 
CODEC_FLAG_TIMEOUT
;

982 
	`I2C_GëFœgSètus
(
CODEC_I2C
, 
I2C_FLAG_BTF
Ë=
RESET
)

984 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

988 
	`I2C_Gíî©eSTART
(
CODEC_I2C
, 
ENABLE
);

991 
CODECTimeout
 = 
CODEC_FLAG_TIMEOUT
;

992 !
	`I2C_CheckEvít
(
CODEC_I2C
, 
I2C_EVENT_MASTER_MODE_SELECT
))

994 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

998 
	`I2C_Síd7bôAddªss
(
CODEC_I2C
, 
CODEC_ADDRESS
, 
I2C_Dúe˘i⁄_Re˚ivî
);

1001 
CODECTimeout
 = 
CODEC_FLAG_TIMEOUT
;

1002 
	`I2C_GëFœgSètus
(
CODEC_I2C
, 
I2C_FLAG_ADDR
Ë=
RESET
)

1004 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

1008 
	`I2C_AcknowÀdgeC⁄fig
(
CODEC_I2C
, 
DISABLE
);

1011 ()
CODEC_I2C
->
SR2
;

1014 
	`I2C_Gíî©eSTOP
(
CODEC_I2C
, 
ENABLE
);

1017 
CODECTimeout
 = 
CODEC_FLAG_TIMEOUT
;

1018 
	`I2C_GëFœgSètus
(
CODEC_I2C
, 
I2C_FLAG_RXNE
Ë=
RESET
)

1020 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

1024 
ªsu…
 = 
	`I2C_Re˚iveD©a
(
CODEC_I2C
);

1027 
CODECTimeout
 = 
CODEC_FLAG_TIMEOUT
;

1028 
CODEC_I2C
->
CR1
 & 
I2C_CR1_STOP
)

1030 if((
CODECTimeout
--Ë=0Ë 
	`Codec_TIMEOUT_U£rCÆlback
();

1034 
	`I2C_AcknowÀdgeC⁄fig
(
CODEC_I2C
, 
ENABLE
);

1037 
	`I2C_CÀ¨Fœg
(
CODEC_I2C
, 
I2C_FLAG_AF
);

1040  
ªsu…
;

1041 
	}
}

1048 
	$Codec_CålI¡îÁ˚_Inô
()

1050 
I2C_InôTy≥Def
 
I2C_InôSåu˘uª
;

1053 
	`RCC_APB1PîùhClockCmd
(
CODEC_I2C_CLK
, 
ENABLE
);

1056 
	`I2C_DeInô
(
CODEC_I2C
);

1057 
I2C_InôSåu˘uª
.
I2C_Mode
 = 
I2C_Mode_I2C
;

1058 
I2C_InôSåu˘uª
.
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

1059 
I2C_InôSåu˘uª
.
I2C_OwnAddªss1
 = 0x33;

1060 
I2C_InôSåu˘uª
.
I2C_Ack
 = 
I2C_Ack_E«bÀ
;

1061 
I2C_InôSåu˘uª
.
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

1062 
I2C_InôSåu˘uª
.
I2C_ClockS≥ed
 = 
I2C_SPEED
;

1064 
	`I2C_Cmd
(
CODEC_I2C
, 
ENABLE
);

1065 
	`I2C_Inô
(
CODEC_I2C
, &
I2C_InôSåu˘uª
);

1066 
	}
}

1075 
	$Codec_CålI¡îÁ˚_DeInô
()

1080 
	}
}

1090 
	$Codec_AudioI¡îÁ˚_Inô
(
uöt32_t
 
AudioFªq
)

1092 
I2S_InôTy≥Def
 
I2S_InôSåu˘uª
;

1093 
DAC_InôTy≥Def
 
DAC_InôSåu˘uª
;

1096 
	`RCC_APB1PîùhClockCmd
(
CODEC_I2S_CLK
, 
ENABLE
);

1099 
	`SPI_I2S_DeInô
(
CODEC_I2S
);

1100 
I2S_InôSåu˘uª
.
I2S_AudioFªq
 = 
AudioFªq
;

1101 
I2S_InôSåu˘uª
.
I2S_Sènd¨d
 = 
I2S_STANDARD
;

1102 
I2S_InôSåu˘uª
.
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

1103 
I2S_InôSåu˘uª
.
I2S_CPOL
 = 
I2S_CPOL_Low
;

1104 #ifde‡
DAC_USE_I2S_DMA


1105 i‡(
CuºAudioI¡îÁ˚
 =
AUDIO_INTERFACE_DAC
)

1107 
I2S_InôSåu˘uª
.
I2S_Mode
 = 
I2S_Mode_Ma°îRx
;

1112 
I2S_InôSåu˘uª
.
I2S_Mode
 = 
I2S_Mode_Ma°îTx
;

1114 #ifde‡
DAC_USE_I2S_DMA


1117 #ifde‡
CODEC_MCLK_ENABLED


1118 
I2S_InôSåu˘uª
.
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_E«bÀ
;

1119 #ñi‡
	`deföed
(
CODEC_MCLK_DISABLED
)

1120 
I2S_InôSåu˘uª
.
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

1126 
	`I2S_Inô
(
CODEC_I2S
, &
I2S_InôSåu˘uª
);

1130 i‡(
CuºAudioI¡îÁ˚
 =
AUDIO_INTERFACE_DAC
)

1133 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

1136 
DAC_InôSåu˘uª
.
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

1137 
DAC_InôSåu˘uª
.
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

1138 
DAC_InôSåu˘uª
.
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

1139 
	`DAC_Inô
(
AUDIO_DAC_CHANNEL
, &
DAC_InôSåu˘uª
);

1142 
	`DAC_Cmd
(
AUDIO_DAC_CHANNEL
, 
ENABLE
);

1154 
	`Codec_AudioI¡îÁ˚_DeInô
()

1157 
	`I2S_Cmd
(
CODEC_I2S
, 
DISABLE
);

1160 
	`SPI_I2S_DeInô
(
CODEC_I2S
);

1163 
	`RCC_APB1PîùhClockCmd
(
CODEC_I2S_CLK
, 
DISABLE
);

1172 
	`Codec_GPIO_Inô
()

1174 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

1177 
	`RCC_AHB1PîùhClockCmd
(
AUDIO_RESET_GPIO_CLK
,
ENABLE
);

1180 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
AUDIO_RESET_PIN
;

1181 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

1182 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

1183 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

1184 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

1185 
	`GPIO_Inô
(
AUDIO_RESET_GPIO
, &
GPIO_InôSåu˘uª
);

1188 
	`RCC_AHB1PîùhClockCmd
(
CODEC_I2C_GPIO_CLOCK
 | 
CODEC_I2S_GPIO_CLOCK
, 
ENABLE
);

1191 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
CODEC_I2C_SCL_PIN
 | 
CODEC_I2C_SDA_PIN
;

1192 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

1193 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

1194 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_OD
;

1195 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

1196 
	`GPIO_Inô
(
CODEC_I2C_GPIO
, &
GPIO_InôSåu˘uª
);

1198 
	`GPIO_PöAFC⁄fig
(
CODEC_I2C_GPIO
, 
CODEC_I2S_SCL_PINSRC
, 
CODEC_I2C_GPIO_AF
);

1199 
	`GPIO_PöAFC⁄fig
(
CODEC_I2C_GPIO
, 
CODEC_I2S_SDA_PINSRC
, 
CODEC_I2C_GPIO_AF
);

1202 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
CODEC_I2S_SCK_PIN
 | 
CODEC_I2S_SD_PIN
;

1203 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

1204 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

1205 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

1206 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

1207 
	`GPIO_Inô
(
CODEC_I2S_GPIO
, &
GPIO_InôSåu˘uª
);

1210 
	`GPIO_PöAFC⁄fig
(
CODEC_I2S_WS_GPIO
, 
CODEC_I2S_WS_PINSRC
, 
CODEC_I2S_GPIO_AF
);

1211 
	`GPIO_PöAFC⁄fig
(
CODEC_I2S_GPIO
, 
CODEC_I2S_SCK_PINSRC
, 
CODEC_I2S_GPIO_AF
);

1213 i‡(
CuºAudioI¡îÁ˚
 !
AUDIO_INTERFACE_DAC
)

1215 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
CODEC_I2S_WS_PIN
 ;

1216 
	`GPIO_Inô
(
CODEC_I2S_WS_GPIO
, &
GPIO_InôSåu˘uª
);

1217 
	`GPIO_PöAFC⁄fig
(
CODEC_I2S_GPIO
, 
CODEC_I2S_SD_PINSRC
, 
CODEC_I2S_GPIO_AF
);

1222 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

1225 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_4
;

1226 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AN
;

1227 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

1228 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

1231 #ifde‡
CODEC_MCLK_ENABLED


1233 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
CODEC_I2S_MCK_PIN
;

1234 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

1235 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

1236 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

1237 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

1238 
	`GPIO_Inô
(
CODEC_I2S_MCK_GPIO
, &
GPIO_InôSåu˘uª
);

1240 
	`GPIO_PöAFC⁄fig
(
CODEC_I2S_MCK_GPIO
, 
CODEC_I2S_MCK_PINSRC
, 
CODEC_I2S_GPIO_AF
);

1249 
	`Codec_GPIO_DeInô
()

1251 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

1254 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
CODEC_I2S_SCK_PIN
 | 
CODEC_I2S_SD_PIN
;

1255 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

1256 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

1257 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

1258 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

1259 
	`GPIO_Inô
(
CODEC_I2S_GPIO
, &
GPIO_InôSåu˘uª
);

1261 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
CODEC_I2S_WS_PIN
 ;

1262 
	`GPIO_Inô
(
CODEC_I2S_WS_GPIO
, &
GPIO_InôSåu˘uª
);

1265 
	`GPIO_PöAFC⁄fig
(
CODEC_I2S_WS_GPIO
, 
CODEC_I2S_WS_PINSRC
, 0x00);

1266 
	`GPIO_PöAFC⁄fig
(
CODEC_I2S_GPIO
, 
CODEC_I2S_SCK_PINSRC
, 0x00);

1267 
	`GPIO_PöAFC⁄fig
(
CODEC_I2S_GPIO
, 
CODEC_I2S_SD_PINSRC
, 0x00);

1269 #ifde‡
CODEC_MCLK_ENABLED


1271 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
CODEC_I2S_MCK_PIN
;

1272 
	`GPIO_Inô
(
CODEC_I2S_MCK_GPIO
, &
GPIO_InôSåu˘uª
);

1274 
	`GPIO_PöAFC⁄fig
(
CODEC_I2S_MCK_GPIO
, 
CODEC_I2S_MCK_PINSRC
, 
CODEC_I2S_GPIO_AF
);

1283 
	`Dñay
–
__IO
 
uöt32_t
 
nCou¡
)

1285 ; 
nCou¡
 != 0;ÇCount--);

1288 #ifde‡
USE_DEFAULT_TIMEOUT_CALLBACK


1294 
uöt32_t
 
	`Codec_TIMEOUT_U£rCÆlback
()

1314 
	`Audio_MAL_Inô
()

1317 #ifde‡
I2S_INTERRUPT


1318 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

1320 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
SPI3_IRQn
;

1321 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 0;

1322 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 =0;

1323 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

1324 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

1326 
	`SPI_I2S_ITC⁄fig
(
SPI3
, 
SPI_I2S_IT_TXE
, 
ENABLE
);

1328 
	`I2S_Cmd
(
SPI3
, 
ENABLE
);

1330 #i‡
	`deföed
(
AUDIO_MAL_DMA_IT_TC_EN
Ë|| deföed(
AUDIO_MAL_DMA_IT_HT_EN
Ë|| deföed(
AUDIO_MAL_DMA_IT_TE_EN
)

1331 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

1334 i‡(
CuºAudioI¡îÁ˚
 =
AUDIO_INTERFACE_I2S
)

1337 
	`RCC_AHB1PîùhClockCmd
(
AUDIO_MAL_DMA_CLOCK
, 
ENABLE
);

1340 
	`DMA_Cmd
(
AUDIO_MAL_DMA_STREAM
, 
DISABLE
);

1341 
	`DMA_DeInô
(
AUDIO_MAL_DMA_STREAM
);

1343 
DMA_InôSåu˘uª
.
DMA_Ch™√l
 = 
AUDIO_MAL_DMA_CHANNEL
;

1344 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBa£Addr
 = 
AUDIO_MAL_DMA_DREG
;

1345 
DMA_InôSåu˘uª
.
DMA_Mem‹y0Ba£Addr
 = (
uöt32_t
)0;

1346 
DMA_InôSåu˘uª
.
DMA_DIR
 = 
DMA_DIR_Mem‹yToPîùhîÆ
;

1347 
DMA_InôSåu˘uª
.
DMA_Buf„rSize
 = (
uöt32_t
)0xFFFE;

1348 
DMA_InôSåu˘uª
.
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

1349 
DMA_InôSåu˘uª
.
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_E«bÀ
;

1350 
DMA_InôSåu˘uª
.
DMA_PîùhîÆD©aSize
 = 
AUDIO_MAL_DMA_PERIPH_DATA_SIZE
;

1351 
DMA_InôSåu˘uª
.
DMA_Mem‹yD©aSize
 = 
AUDIO_MAL_DMA_MEM_DATA_SIZE
;

1352 #ifde‡
AUDIO_MAL_MODE_NORMAL


1353 
DMA_InôSåu˘uª
.
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

1354 #ñi‡
	`deföed
(
AUDIO_MAL_MODE_CIRCULAR
)

1355 
DMA_InôSåu˘uª
.
DMA_Mode
 = 
DMA_Mode_Cúcuœr
;

1359 
DMA_InôSåu˘uª
.
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_High
;

1360 
DMA_InôSåu˘uª
.
DMA_FIFOMode
 = 
DMA_FIFOMode_E«bÀ
;

1361 
DMA_InôSåu˘uª
.
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_FuŒ
;

1362 
DMA_InôSåu˘uª
.
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

1363 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

1364 
	`DMA_Inô
(
AUDIO_MAL_DMA_STREAM
, &
DMA_InôSåu˘uª
);

1367 #ifde‡
AUDIO_MAL_DMA_IT_TC_EN


1368 
	`DMA_ITC⁄fig
(
AUDIO_MAL_DMA_STREAM
, 
DMA_IT_TC
, 
ENABLE
);

1370 #ifde‡
AUDIO_MAL_DMA_IT_HT_EN


1371 
	`DMA_ITC⁄fig
(
AUDIO_MAL_DMA_STREAM
, 
DMA_IT_HT
, 
ENABLE
);

1373 #ifde‡
AUDIO_MAL_DMA_IT_TE_EN


1374 
	`DMA_ITC⁄fig
(
AUDIO_MAL_DMA_STREAM
, 
DMA_IT_TE
 | 
DMA_IT_FE
 | 
DMA_IT_DME
, 
ENABLE
);

1377 #i‡
	`deföed
(
AUDIO_MAL_DMA_IT_TC_EN
Ë|| deföed(
AUDIO_MAL_DMA_IT_HT_EN
Ë|| deföed(
AUDIO_MAL_DMA_IT_TE_EN
)

1379 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
AUDIO_MAL_DMA_IRQ
;

1380 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 
EVAL_AUDIO_IRQ_PREPRIO
;

1381 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 
EVAL_AUDIO_IRQ_SUBRIO
;

1382 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

1383 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

1387 #ifde‡
DAC_USE_I2S_DMA


1391 
	`RCC_AHB1PîùhClockCmd
(
AUDIO_MAL_DMA_CLOCK
, 
ENABLE
);

1394 
	`DMA_Cmd
(
AUDIO_MAL_DMA_STREAM
, 
DISABLE
);

1395 
	`DMA_DeInô
(
AUDIO_MAL_DMA_STREAM
);

1397 
DMA_InôSåu˘uª
.
DMA_Ch™√l
 = 
AUDIO_MAL_DMA_CHANNEL
;

1398 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBa£Addr
 = 
AUDIO_MAL_DMA_DREG
;

1399 
DMA_InôSåu˘uª
.
DMA_Mem‹y0Ba£Addr
 = (
uöt32_t
)0;

1400 
DMA_InôSåu˘uª
.
DMA_DIR
 = 
DMA_DIR_Mem‹yToPîùhîÆ
;

1401 
DMA_InôSåu˘uª
.
DMA_Buf„rSize
 = (
uöt32_t
)0xFFFE;

1402 
DMA_InôSåu˘uª
.
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

1403 
DMA_InôSåu˘uª
.
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_E«bÀ
;

1404 
DMA_InôSåu˘uª
.
DMA_PîùhîÆD©aSize
 = 
AUDIO_MAL_DMA_PERIPH_DATA_SIZE
;

1405 
DMA_InôSåu˘uª
.
DMA_Mem‹yD©aSize
 = 
AUDIO_MAL_DMA_MEM_DATA_SIZE
;

1406 #ifde‡
AUDIO_MAL_MODE_NORMAL


1407 
DMA_InôSåu˘uª
.
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

1408 #ñi‡
	`deföed
(
AUDIO_MAL_MODE_CIRCULAR
)

1409 
DMA_InôSåu˘uª
.
DMA_Mode
 = 
DMA_Mode_Cúcuœr
;

1413 
DMA_InôSåu˘uª
.
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_High
;

1414 
DMA_InôSåu˘uª
.
DMA_FIFOMode
 = 
DMA_FIFOMode_E«bÀ
;

1415 
DMA_InôSåu˘uª
.
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_FuŒ
;

1416 
DMA_InôSåu˘uª
.
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

1417 
DMA_InôSåu˘uª
.
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

1418 
	`DMA_Inô
(
AUDIO_MAL_DMA_STREAM
, &
DMA_InôSåu˘uª
);

1421 #ifde‡
AUDIO_MAL_DMA_IT_TC_EN


1422 
	`DMA_ITC⁄fig
(
AUDIO_MAL_DMA_STREAM
, 
DMA_IT_TC
, 
ENABLE
);

1424 #ifde‡
AUDIO_MAL_DMA_IT_HT_EN


1425 
	`DMA_ITC⁄fig
(
AUDIO_MAL_DMA_STREAM
, 
DMA_IT_HT
, 
ENABLE
);

1427 #ifde‡
AUDIO_MAL_DMA_IT_TE_EN


1428 
	`DMA_ITC⁄fig
(
AUDIO_MAL_DMA_STREAM
, 
DMA_IT_TE
 | 
DMA_IT_FE
 | 
DMA_IT_DME
, 
ENABLE
);

1431 #i‡
	`deföed
(
AUDIO_MAL_DMA_IT_TC_EN
Ë|| deföed(
AUDIO_MAL_DMA_IT_HT_EN
Ë|| deföed(
AUDIO_MAL_DMA_IT_TE_EN
)

1433 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
AUDIO_MAL_DMA_IRQ
;

1434 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 
EVAL_AUDIO_IRQ_PREPRIO
;

1435 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 
EVAL_AUDIO_IRQ_SUBRIO
;

1436 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

1437 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

1442 i‡(
CuºAudioI¡îÁ˚
 =
AUDIO_INTERFACE_I2S
)

1445 
	`SPI_I2S_DMACmd
(
CODEC_I2S
, 
SPI_I2S_DMAReq_Tx
, 
ENABLE
);

1450 
	`DAC_C⁄fig
();

1452 #i‚de‡
DAC_USE_I2S_DMA


1454 
	`SPI_I2S_ITC⁄fig
(
SPI3
, 
SPI_I2S_IT_TXE
, 
ENABLE
);

1457 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
CODEC_I2S_IRQ
;

1458 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 
EVAL_AUDIO_IRQ_PREPRIO
;

1459 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 
EVAL_AUDIO_IRQ_SUBRIO
;

1460 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
ENABLE
;

1461 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

1464 
	`SPI_I2S_DMACmd
(
CODEC_I2S
, 
SPI_I2S_DMAReq_Rx
, 
ENABLE
);

1475 
	`Audio_MAL_DeInô
()

1477 #i‡
	`deföed
(
AUDIO_MAL_DMA_IT_TC_EN
Ë|| deföed(
AUDIO_MAL_DMA_IT_HT_EN
Ë|| deföed(
AUDIO_MAL_DMA_IT_TE_EN
)

1478 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘uª
;

1481 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√l
 = 
AUDIO_MAL_DMA_IRQ
;

1482 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 = 
EVAL_AUDIO_IRQ_PREPRIO
;

1483 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lSubPri‹ôy
 = 
EVAL_AUDIO_IRQ_SUBRIO
;

1484 
NVIC_InôSåu˘uª
.
NVIC_IRQCh™√lCmd
 = 
DISABLE
;

1485 
	`NVIC_Inô
(&
NVIC_InôSåu˘uª
);

1489 
	`DMA_Cmd
(
AUDIO_MAL_DMA_STREAM
, 
DISABLE
);

1492 
	`DMA_DeInô
(
AUDIO_MAL_DMA_STREAM
);

1504 
	`Audio_MAL_Pœy
(
uöt32_t
 
Addr
, uöt32_à
Size
)

1506 i‡(
CuºAudioI¡îÁ˚
 =
AUDIO_INTERFACE_I2S
)

1509 
DMA_InôSåu˘uª
.
DMA_Mem‹y0Ba£Addr
 = (
uöt32_t
)
Addr
;

1510 
DMA_InôSåu˘uª
.
DMA_Buf„rSize
 = (
uöt32_t
)
Size
;

1513 
	`DMA_Inô
(
AUDIO_MAL_DMA_STREAM
, &
DMA_InôSåu˘uª
);

1516 
	`DMA_Cmd
(
AUDIO_MAL_DMA_STREAM
, 
ENABLE
);

1518 #i‚de‡
DAC_USE_I2S_DMA


1522 
DMA_InôSåu˘uª
.
DMA_Mem‹y0Ba£Addr
 = (
uöt32_t
)
Addr
;

1523 
DMA_InôSåu˘uª
.
DMA_Buf„rSize
 = (
uöt32_t
)
Size
;

1526 
	`DMA_Inô
(
AUDIO_MAL_DMA_STREAM
, &
DMA_InôSåu˘uª
);

1529 
	`DMA_Cmd
(
AUDIO_MAL_DMA_STREAM
, 
ENABLE
);

1534 i‡((
CODEC_I2S
->
I2SCFGR
 & 
I2S_ENABLE_MASK
) == 0)

1536 
	`I2S_Cmd
(
CODEC_I2S
, 
ENABLE
);

1547 
	`Audio_MAL_Pau£Resume
(
uöt32_t
 
Cmd
, uöt32_à
Addr
)

1550 i‡(
Cmd
 =
AUDIO_PAUSE
)

1553 
	`SPI_I2S_DMACmd
(
CODEC_I2S
, 
SPI_I2S_DMAReq_Tx
, 
DISABLE
);

1560 
	`DMA_Cmd
(
AUDIO_MAL_DMA_STREAM
, 
DISABLE
);

1565 
	`SPI_I2S_DMACmd
(
CODEC_I2S
, 
SPI_I2S_DMAReq_Tx
, 
ENABLE
);

1572 
	`DMA_Cmd
(
AUDIO_MAL_DMA_STREAM
, 
ENABLE
);

1575 i‡((
CODEC_I2S
->
I2SCFGR
 & 
I2S_ENABLE_MASK
) == 0)

1577 
	`I2S_Cmd
(
CODEC_I2S
, 
ENABLE
);

1587 
	`Audio_MAL_St›
()

1590 
	`DMA_Cmd
(
AUDIO_MAL_DMA_STREAM
, 
DISABLE
);

1593 
	`DMA_CÀ¨Fœg
(
AUDIO_MAL_DMA_STREAM
, 
AUDIO_MAL_DMA_FLAG_TC
 |
AUDIO_MAL_DMA_FLAG_HT
 | \

1594 
AUDIO_MAL_DMA_FLAG_FE
 | 
AUDIO_MAL_DMA_FLAG_TE
);

1601 
	`I2S_Cmd
(
CODEC_I2S
, 
DISABLE
);

1609 
	`DAC_C⁄fig
()

1611 
DAC_InôTy≥Def
 
DAC_InôSåu˘uª
;

1612 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

1615 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_DMA1
 | 
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

1618 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

1621 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
GPIO_Pö_4
;

1622 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AN
;

1623 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

1624 
	`GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘uª
);

1627 
DAC_InôSåu˘uª
.
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

1628 
DAC_InôSåu˘uª
.
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

1629 
DAC_InôSåu˘uª
.
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

1630 
	`DAC_Inô
(
AUDIO_DAC_CHANNEL
, &
DAC_InôSåu˘uª
);

1633 
	`DAC_Cmd
(
AUDIO_DAC_CHANNEL
, 
ENABLE
);

	@libstm/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.h

24 #i‚de‡
__STM32F4_DISCOVERY_AUDIOCODEC_H


25 
	#__STM32F4_DISCOVERY_AUDIOCODEC_H


	)

28 
	~"°m32f4xx.h
"

29 
	~"°m32f4xx_gpio.h
"

56 
	#I2S_INTERRUPT


	)

58 
	#AUDIO_MAL_MODE_NORMAL


	)

64 
	#AUDIO_MAL_DMA_IT_TC_EN


	)

69 
	#EVAL_AUDIO_IRQ_PREPRIO
 0

	)

70 
	#EVAL_AUDIO_IRQ_SUBRIO
 0

	)

90 #i‚de‡
I2C_SPEED


91 
	#I2C_SPEED
 100000

	)

96 
	#I2S_STANDARD_PHILLIPS


	)

102 
	#CODEC_MCLK_ENABLED


	)

107 
	#VERIFY_WRITTENDATA


	)

114 
	#AUDIO_RESET_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOD


	)

115 
	#AUDIO_RESET_PIN
 
GPIO_Pö_4


	)

116 
	#AUDIO_RESET_GPIO
 
GPIOD


	)

119 
	#CODEC_I2S
 
SPI3


	)

120 
	#CODEC_I2S_CLK
 
RCC_APB1Pîùh_SPI3


	)

121 
	#CODEC_I2S_ADDRESS
 0x40003C0C

	)

122 
	#CODEC_I2S_GPIO_AF
 
GPIO_AF_SPI3


	)

123 
	#CODEC_I2S_IRQ
 
SPI3_IRQn


	)

124 
	#CODEC_I2S_GPIO_CLOCK
 (
RCC_AHB1Pîùh_GPIOC
 | 
RCC_AHB1Pîùh_GPIOA
)

	)

125 
	#CODEC_I2S_WS_PIN
 
GPIO_Pö_4


	)

126 
	#CODEC_I2S_SCK_PIN
 
GPIO_Pö_10


	)

127 
	#CODEC_I2S_SD_PIN
 
GPIO_Pö_12


	)

128 
	#CODEC_I2S_MCK_PIN
 
GPIO_Pö_7


	)

129 
	#CODEC_I2S_WS_PINSRC
 
GPIO_PöSour˚4


	)

130 
	#CODEC_I2S_SCK_PINSRC
 
GPIO_PöSour˚10


	)

131 
	#CODEC_I2S_SD_PINSRC
 
GPIO_PöSour˚12


	)

132 
	#CODEC_I2S_MCK_PINSRC
 
GPIO_PöSour˚7


	)

133 
	#CODEC_I2S_GPIO
 
GPIOC


	)

134 
	#CODEC_I2S_WS_GPIO
 
GPIOA


	)

135 
	#CODEC_I2S_MCK_GPIO
 
GPIOC


	)

136 
	#Audio_I2S_IRQH™dÀr
 
SPI3_IRQH™dÀr


	)

139 
	#AUDIO_MAL_DMA_PERIPH_DATA_SIZE
 
DMA_PîùhîÆD©aSize_HÆfW‹d


	)

140 
	#AUDIO_MAL_DMA_MEM_DATA_SIZE
 
DMA_Mem‹yD©aSize_HÆfW‹d


	)

141 
	#DMA_MAX_SZE
 0xFFFF

	)

144 
	#DAC_DHR12L1_ADDRESS
 0x4000740C

	)

145 
	#DAC_DHR12R1_ADDRESS
 0x40007408

	)

146 
	#DAC_DHR8R1_ADDRESS
 0x40007410

	)

147 
	#AUDIO_DAC_CHANNEL
 
DAC_Ch™√l_1


	)

150 
	#AUDIO_I2S_DMA_CLOCK
 
RCC_AHB1Pîùh_DMA1


	)

151 
	#AUDIO_I2S_DMA_STREAM
 
DMA1_Såóm7


	)

152 
	#AUDIO_I2S_DMA_DREG
 
CODEC_I2S_ADDRESS


	)

153 
	#AUDIO_I2S_DMA_CHANNEL
 
DMA_Ch™√l_0


	)

154 
	#AUDIO_I2S_DMA_IRQ
 
DMA1_Såóm7_IRQn


	)

155 
	#AUDIO_I2S_DMA_FLAG_TC
 
DMA_FLAG_TCIF7


	)

156 
	#AUDIO_I2S_DMA_FLAG_HT
 
DMA_FLAG_HTIF7


	)

157 
	#AUDIO_I2S_DMA_FLAG_FE
 
DMA_FLAG_FEIF7


	)

158 
	#AUDIO_I2S_DMA_FLAG_TE
 
DMA_FLAG_TEIF7


	)

159 
	#AUDIO_I2S_DMA_FLAG_DME
 
DMA_FLAG_DMEIF7


	)

161 
	#Audio_MAL_I2S_IRQH™dÀr
 
DMA1_Såóm7_IRQH™dÀr


	)

165 
	#AUDIO_DAC_DMA_CLOCK
 
RCC_AHB1Pîùh_DMA1


	)

166 
	#AUDIO_DAC_DMA_STREAM
 
DMA1_Såóm0


	)

167 
	#AUDIO_DAC_DMA_DREG
 
DAC_DHR12L1_ADDRESS


	)

168 
	#AUDIO_DAC_DMA_CHANNEL
 
DMA_Ch™√l_0


	)

169 
	#AUDIO_DAC_DMA_IRQ
 
DMA1_Såóm0_IRQn


	)

170 
	#AUDIO_DAC_DMA_FLAG_TC
 
DMA_FLAG_TCIF0


	)

171 
	#AUDIO_DAC_DMA_FLAG_HT
 
DMA_FLAG_HTIF0


	)

172 
	#AUDIO_DAC_DMA_FLAG_FE
 
DMA_FLAG_FEIF0


	)

173 
	#AUDIO_DAC_DMA_FLAG_TE
 
DMA_FLAG_TEIF0


	)

174 
	#AUDIO_DAC_DMA_FLAG_DME
 
DMA_FLAG_DMEIF0


	)

176 
	#Audio_MAL_DAC_IRQH™dÀr
 
DMA1_Såóm0_IRQH™dÀr


	)

180 
	#CODEC_I2C
 
I2C1


	)

181 
	#CODEC_I2C_CLK
 
RCC_APB1Pîùh_I2C1


	)

182 
	#CODEC_I2C_GPIO_CLOCK
 
RCC_AHB1Pîùh_GPIOB


	)

183 
	#CODEC_I2C_GPIO_AF
 
GPIO_AF_I2C1


	)

184 
	#CODEC_I2C_GPIO
 
GPIOB


	)

185 
	#CODEC_I2C_SCL_PIN
 
GPIO_Pö_6


	)

186 
	#CODEC_I2C_SDA_PIN
 
GPIO_Pö_9


	)

187 
	#CODEC_I2S_SCL_PINSRC
 
GPIO_PöSour˚6


	)

188 
	#CODEC_I2S_SDA_PINSRC
 
GPIO_PöSour˚9


	)

195 
	#CODEC_FLAG_TIMEOUT
 ((
uöt32_t
)0x1000)

	)

196 
	#CODEC_LONG_TIMEOUT
 ((
uöt32_t
)(300 * 
CODEC_FLAG_TIMEOUT
))

	)

203 
	#AUDIO_INTERFACE_I2S
 1

	)

204 
	#AUDIO_INTERFACE_DAC
 2

	)

207 
	#OUTPUT_DEVICE_SPEAKER
 1

	)

208 
	#OUTPUT_DEVICE_HEADPHONE
 2

	)

209 
	#OUTPUT_DEVICE_BOTH
 3

	)

210 
	#OUTPUT_DEVICE_AUTO
 4

	)

213 
	#DEFAULT_VOLMIN
 0x00

	)

214 
	#DEFAULT_VOLMAX
 0xFF

	)

215 
	#DEFAULT_VOLSTEP
 0x04

	)

217 
	#AUDIO_PAUSE
 0

	)

218 
	#AUDIO_RESUME
 1

	)

221 
	#CODEC_PDWN_HW
 1

	)

222 
	#CODEC_PDWN_SW
 2

	)

225 
	#AUDIO_MUTE_ON
 1

	)

226 
	#AUDIO_MUTE_OFF
 0

	)

235 
	#VOLUME_CONVERT
(
x
Ë((
Vﬁume
 > 100)? 100:((
uöt8_t
)((Vﬁumê* 255Ë/ 100)))

	)

236 
	#DMA_MAX
(
x
Ë(((xË<
DMA_MAX_SZE
)? (x):DMA_MAX_SZE)

	)

245 
EVAL_AUDIO_SëAudioI¡îÁ˚
(
uöt32_t
 
I¡îÁ˚
);

246 
uöt32_t
 
EVAL_AUDIO_Inô
(
uöt16_t
 
OuçutDevi˚
, 
uöt8_t
 
Vﬁume
, uöt32_à
AudioFªq
);

247 
uöt32_t
 
EVAL_AUDIO_DeInô
();

248 
uöt32_t
 
EVAL_AUDIO_Pœy
(
uöt16_t
* 
pBuf„r
, uöt32_à
Size
);

249 
uöt32_t
 
EVAL_AUDIO_Pau£Resume
(uöt32_à
Cmd
);

250 
uöt32_t
 
EVAL_AUDIO_St›
(uöt32_à
CodecPowîDown_Mode
);

251 
uöt32_t
 
EVAL_AUDIO_VﬁumeCé
(
uöt8_t
 
Vﬁume
);

252 
uöt32_t
 
EVAL_AUDIO_Muã
(uöt32_à
Comm™d
);

253 
DAC_C⁄fig
();

258 
uöt16_t
 
EVAL_AUDIO_GëSam∂eCÆlBack
();

265 
EVAL_AUDIO_Tøns„rCom∂ëe_CÆlBack
(
uöt32_t
 
pBuf„r
, uöt32_à
Size
);

270 
EVAL_AUDIO_HÆfTøns„r_CÆlBack
(
uöt32_t
 
pBuf„r
, uöt32_à
Size
);

274 
EVAL_AUDIO_Eº‹_CÆlBack
(* 
pD©a
);

283 
uöt32_t
 
Codec_TIMEOUT_U£rCÆlback
();

	@libstm/Utilities/STM32F4-Discovery/stm32f4_discovery_lis302dl.c

24 
	~"°m32f4_discovîy_lis302dl.h
"

26 
	~"°m32f4xx_c⁄f.h
"

52 
__IO
 
uöt32_t
 
	gLIS302DLTimeout
 = 
LIS302DL_FLAG_TIMEOUT
;

55 
	#READWRITE_CMD
 ((
uöt8_t
)0x80)

	)

57 
	#MULTIPLEBYTE_CMD
 ((
uöt8_t
)0x40)

	)

59 
	#DUMMY_BYTE
 ((
uöt8_t
)0x00)

	)

84 
uöt8_t
 
LIS302DL_SídByã
(uöt8_à
byã
);

85 
LIS302DL_LowLevñ_Inô
();

101 
	$LIS302DL_Inô
(
LIS302DL_InôTy≥Def
 *
LIS302DL_InôSåu˘
)

103 
uöt8_t
 
˘æ
 = 0x00;

106 
	`LIS302DL_LowLevñ_Inô
();

109 
˘æ
 = (
uöt8_t
Ë(
LIS302DL_InôSåu˘
->
Ouçut_D©aR©e
 | LIS302DL_InôSåu˘->
Powî_Mode
 | \

110 
LIS302DL_InôSåu˘
->
FuŒ_SˇÀ
 | LIS302DL_InôSåu˘->
Sñf_Te°
 | \

111 
LIS302DL_InôSåu˘
->
Axes_E«bÀ
);

114 
	`LIS302DL_Wrôe
(&
˘æ
, 
LIS302DL_CTRL_REG1_ADDR
, 1);

115 
	}
}

123 
	$LIS302DL_FûãrC⁄fig
(
LIS302DL_FûãrC⁄figTy≥Def
 *
LIS302DL_FûãrC⁄figSåu˘
)

125 
uöt8_t
 
˘æ
 = 0x00;

128 
	`LIS302DL_Ród
(&
˘æ
, 
LIS302DL_CTRL_REG2_ADDR
, 1);

131 
˘æ
 &(
uöt8_t
)~(
LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER
 | \

132 
LIS302DL_HIGHPASSFILTER_LEVEL_3
 | \

133 
LIS302DL_HIGHPASSFILTERINTERRUPT_1_2
);

135 
˘æ
 |(
uöt8_t
)(
LIS302DL_FûãrC⁄figSåu˘
->
HighPassFûãr_D©a_Sñe˘i⁄
 | \

136 
LIS302DL_FûãrC⁄figSåu˘
->
HighPassFûãr_CutOff_Fªquícy
 | \

137 
LIS302DL_FûãrC⁄figSåu˘
->
HighPassFûãr_I¡îru±
);

140 
	`LIS302DL_Wrôe
(&
˘æ
, 
LIS302DL_CTRL_REG2_ADDR
, 1);

141 
	}
}

149 
	$LIS302DL_I¡îru±C⁄fig
(
LIS302DL_I¡îru±C⁄figTy≥Def
 *
LIS302DL_I¡C⁄figSåu˘
)

151 
uöt8_t
 
˘æ
 = 0x00;

154 
	`LIS302DL_Ród
(&
˘æ
, 
LIS302DL_CLICK_CFG_REG_ADDR
, 1);

157 
˘æ
 = (
uöt8_t
)(
LIS302DL_I¡C⁄figSåu˘
->
L©ch_Reque°
| \

158 
LIS302DL_I¡C⁄figSåu˘
->
SögÀClick_Axes
 | \

159 
LIS302DL_I¡C⁄figSåu˘
->
DoubÀClick_Axes
);

162 
	`LIS302DL_Wrôe
(&
˘æ
, 
LIS302DL_CLICK_CFG_REG_ADDR
, 1);

163 
	}
}

173 
	$LIS302DL_LowpowîCmd
(
uöt8_t
 
LowPowîMode
)

175 
uöt8_t
 
tm¥eg
;

178 
	`LIS302DL_Ród
(&
tm¥eg
, 
LIS302DL_CTRL_REG1_ADDR
, 1);

181 
tm¥eg
 &(
uöt8_t
)~
LIS302DL_LOWPOWERMODE_ACTIVE
;

182 
tm¥eg
 |
LowPowîMode
;

185 
	`LIS302DL_Wrôe
(&
tm¥eg
, 
LIS302DL_CTRL_REG1_ADDR
, 1);

186 
	}
}

196 
	$LIS302DL_D©aR©eCmd
(
uöt8_t
 
D©aR©eVÆue
)

198 
uöt8_t
 
tm¥eg
;

201 
	`LIS302DL_Ród
(&
tm¥eg
, 
LIS302DL_CTRL_REG1_ADDR
, 1);

204 
tm¥eg
 &(
uöt8_t
)~
LIS302DL_DATARATE_400
;

205 
tm¥eg
 |
D©aR©eVÆue
;

208 
	`LIS302DL_Wrôe
(&
tm¥eg
, 
LIS302DL_CTRL_REG1_ADDR
, 1);

209 
	}
}

219 
	$LIS302DL_FuŒSˇÀCmd
(
uöt8_t
 
FS_vÆue
)

221 
uöt8_t
 
tm¥eg
;

224 
	`LIS302DL_Ród
(&
tm¥eg
, 
LIS302DL_CTRL_REG1_ADDR
, 1);

227 
tm¥eg
 &(
uöt8_t
)~
LIS302DL_FULLSCALE_9_2
;

228 
tm¥eg
 |
FS_vÆue
;

231 
	`LIS302DL_Wrôe
(&
tm¥eg
, 
LIS302DL_CTRL_REG1_ADDR
, 1);

232 
	}
}

239 
	$LIS302DL_ReboŸCmd
()

241 
uöt8_t
 
tm¥eg
;

243 
	`LIS302DL_Ród
(&
tm¥eg
, 
LIS302DL_CTRL_REG2_ADDR
, 1);

246 
tm¥eg
 |
LIS302DL_BOOT_REBOOTMEMORY
;

249 
	`LIS302DL_Wrôe
(&
tm¥eg
, 
LIS302DL_CTRL_REG2_ADDR
, 1);

250 
	}
}

259 
	$LIS302DL_Wrôe
(
uöt8_t
* 
pBuf„r
, uöt8_à
WrôeAddr
, 
uöt16_t
 
NumByãToWrôe
)

265 if(
NumByãToWrôe
 > 0x01)

267 
WrôeAddr
 |(
uöt8_t
)
MULTIPLEBYTE_CMD
;

270 
	`LIS302DL_CS_LOW
();

273 
	`LIS302DL_SídByã
(
WrôeAddr
);

275 
NumByãToWrôe
 >= 0x01)

277 
	`LIS302DL_SídByã
(*
pBuf„r
);

278 
NumByãToWrôe
--;

279 
pBuf„r
++;

283 
	`LIS302DL_CS_HIGH
();

284 
	}
}

293 
	$LIS302DL_Ród
(
uöt8_t
* 
pBuf„r
, uöt8_à
RódAddr
, 
uöt16_t
 
NumByãToRód
)

295 if(
NumByãToRód
 > 0x01)

297 
RódAddr
 |(
uöt8_t
)(
READWRITE_CMD
 | 
MULTIPLEBYTE_CMD
);

301 
RódAddr
 |(
uöt8_t
)
READWRITE_CMD
;

304 
	`LIS302DL_CS_LOW
();

307 
	`LIS302DL_SídByã
(
RódAddr
);

310 
NumByãToRód
 > 0x00)

313 *
pBuf„r
 = 
	`LIS302DL_SídByã
(
DUMMY_BYTE
);

314 
NumByãToRód
--;

315 
pBuf„r
++;

319 
	`LIS302DL_CS_HIGH
();

320 
	}
}

328 
	$LIS302DL_RódACC
(
öt32_t
* 
out
)

330 
uöt8_t
 
buf„r
[6];

331 
uöt8_t
 
¸é
, 
i
 = 0x00;

333 
	`LIS302DL_Ród
(&
¸é
, 
LIS302DL_CTRL_REG1_ADDR
, 1);

334 
	`LIS302DL_Ród
(
buf„r
, 
LIS302DL_OUT_X_ADDR
, 6);

336 
¸é
 & 0x20)

340 
i
=0; i<0x03; i++)

342 *
out
 =(
öt32_t
)(
LIS302DL_SENSITIVITY_2_3G
 * (
öt8_t
)
buf„r
[2*
i
]);

343 
out
++;

348 
i
=0; i<0x03; i++)

350 *
out
 =(
öt32_t
)(
LIS302DL_SENSITIVITY_9_2G
 * (
öt8_t
)
buf„r
[2*
i
]);

351 
out
++;

357 
	}
}

364 
	$LIS302DL_LowLevñ_Inô
()

366 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

367 
SPI_InôTy≥Def
 
SPI_InôSåu˘uª
;

370 
	`RCC_APB2PîùhClockCmd
(
LIS302DL_SPI_CLK
, 
ENABLE
);

373 
	`RCC_AHB1PîùhClockCmd
(
LIS302DL_SPI_SCK_GPIO_CLK
 | 
LIS302DL_SPI_MISO_GPIO_CLK
 | 
LIS302DL_SPI_MOSI_GPIO_CLK
, 
ENABLE
);

376 
	`RCC_AHB1PîùhClockCmd
(
LIS302DL_SPI_CS_GPIO_CLK
, 
ENABLE
);

379 
	`RCC_AHB1PîùhClockCmd
(
LIS302DL_SPI_INT1_GPIO_CLK
, 
ENABLE
);

382 
	`RCC_AHB1PîùhClockCmd
(
LIS302DL_SPI_INT2_GPIO_CLK
, 
ENABLE
);

384 
	`GPIO_PöAFC⁄fig
(
LIS302DL_SPI_SCK_GPIO_PORT
, 
LIS302DL_SPI_SCK_SOURCE
, 
LIS302DL_SPI_SCK_AF
);

385 
	`GPIO_PöAFC⁄fig
(
LIS302DL_SPI_MISO_GPIO_PORT
, 
LIS302DL_SPI_MISO_SOURCE
, 
LIS302DL_SPI_MISO_AF
);

386 
	`GPIO_PöAFC⁄fig
(
LIS302DL_SPI_MOSI_GPIO_PORT
, 
LIS302DL_SPI_MOSI_SOURCE
, 
LIS302DL_SPI_MOSI_AF
);

388 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_AF
;

389 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

390 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_DOWN
;

391 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

394 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
LIS302DL_SPI_SCK_PIN
;

395 
	`GPIO_Inô
(
LIS302DL_SPI_SCK_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

398 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
LIS302DL_SPI_MOSI_PIN
;

399 
	`GPIO_Inô
(
LIS302DL_SPI_MOSI_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

402 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
LIS302DL_SPI_MISO_PIN
;

403 
	`GPIO_Inô
(
LIS302DL_SPI_MISO_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

406 
	`SPI_I2S_DeInô
(
LIS302DL_SPI
);

407 
SPI_InôSåu˘uª
.
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

408 
SPI_InôSåu˘uª
.
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

409 
SPI_InôSåu˘uª
.
SPI_CPOL
 = 
SPI_CPOL_Low
;

410 
SPI_InôSåu˘uª
.
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

411 
SPI_InôSåu˘uª
.
SPI_NSS
 = 
SPI_NSS_So·
;

412 
SPI_InôSåu˘uª
.
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_4
;

413 
SPI_InôSåu˘uª
.
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

414 
SPI_InôSåu˘uª
.
SPI_CRCPﬁynomül
 = 7;

415 
SPI_InôSåu˘uª
.
SPI_Mode
 = 
SPI_Mode_Ma°î
;

416 
	`SPI_Inô
(
LIS302DL_SPI
, &
SPI_InôSåu˘uª
);

419 
	`SPI_Cmd
(
LIS302DL_SPI
, 
ENABLE
);

422 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
LIS302DL_SPI_CS_PIN
;

423 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

424 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

425 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

426 
	`GPIO_Inô
(
LIS302DL_SPI_CS_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

429 
	`GPIO_SëBôs
(
LIS302DL_SPI_CS_GPIO_PORT
, 
LIS302DL_SPI_CS_PIN
);

432 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
LIS302DL_SPI_INT1_PIN
;

433 
GPIO_InôSåu˘uª
.
GPIO_Mode
 = 
GPIO_Mode_IN
;

434 
GPIO_InôSåu˘uª
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

435 
GPIO_InôSåu˘uª
.
GPIO_S≥ed
 = 
GPIO_S≥ed_50MHz
;

436 
GPIO_InôSåu˘uª
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

437 
	`GPIO_Inô
(
LIS302DL_SPI_INT1_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

439 
GPIO_InôSåu˘uª
.
GPIO_Pö
 = 
LIS302DL_SPI_INT2_PIN
;

440 
	`GPIO_Inô
(
LIS302DL_SPI_INT2_GPIO_PORT
, &
GPIO_InôSåu˘uª
);

441 
	}
}

449 
uöt8_t
 
	$LIS302DL_SídByã
(
uöt8_t
 
byã
)

452 
LIS302DLTimeout
 = 
LIS302DL_FLAG_TIMEOUT
;

453 
	`SPI_I2S_GëFœgSètus
(
LIS302DL_SPI
, 
SPI_I2S_FLAG_TXE
Ë=
RESET
)

455 if((
LIS302DLTimeout
--Ë=0Ë 
	`LIS302DL_TIMEOUT_U£rCÆlback
();

459 
	`SPI_I2S_SídD©a
(
LIS302DL_SPI
, 
byã
);

462 
LIS302DLTimeout
 = 
LIS302DL_FLAG_TIMEOUT
;

463 
	`SPI_I2S_GëFœgSètus
(
LIS302DL_SPI
, 
SPI_I2S_FLAG_RXNE
Ë=
RESET
)

465 if((
LIS302DLTimeout
--Ë=0Ë 
	`LIS302DL_TIMEOUT_U£rCÆlback
();

469  (
uöt8_t
)
	`SPI_I2S_Re˚iveD©a
(
LIS302DL_SPI
);

470 
	}
}

472 #ifde‡
USE_DEFAULT_TIMEOUT_CALLBACK


478 
uöt32_t
 
	$LIS302DL_TIMEOUT_U£rCÆlback
()

484 
	}
}

	@libstm/Utilities/STM32F4-Discovery/stm32f4_discovery_lis302dl.h

24 #i‚de‡
__STM32F4_DISCOVERY_LIS302DL_H


25 
	#__STM32F4_DISCOVERY_LIS302DL_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

54 
uöt8_t
 
Powî_Mode
;

55 
uöt8_t
 
Ouçut_D©aR©e
;

56 
uöt8_t
 
Axes_E«bÀ
;

57 
uöt8_t
 
FuŒ_SˇÀ
;

58 
uöt8_t
 
Sñf_Te°
;

59 }
	tLIS302DL_InôTy≥Def
;

64 
uöt8_t
 
HighPassFûãr_D©a_Sñe˘i⁄
;

65 
uöt8_t
 
HighPassFûãr_CutOff_Fªquícy
;

66 
uöt8_t
 
HighPassFûãr_I¡îru±
;

67 }
	tLIS302DL_FûãrC⁄figTy≥Def
;

72 
uöt8_t
 
L©ch_Reque°
;

73 
uöt8_t
 
SögÀClick_Axes
;

74 
uöt8_t
 
DoubÀClick_Axes
;

75 }
	tLIS302DL_I¡îru±C⁄figTy≥Def
;

97 
	#LIS302DL_FLAG_TIMEOUT
 ((
uöt32_t
)0x1000)

	)

102 
	#LIS302DL_SPI
 
SPI1


	)

103 
	#LIS302DL_SPI_CLK
 
RCC_APB2Pîùh_SPI1


	)

105 
	#LIS302DL_SPI_SCK_PIN
 
GPIO_Pö_5


	)

106 
	#LIS302DL_SPI_SCK_GPIO_PORT
 
GPIOA


	)

107 
	#LIS302DL_SPI_SCK_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOA


	)

108 
	#LIS302DL_SPI_SCK_SOURCE
 
GPIO_PöSour˚5


	)

109 
	#LIS302DL_SPI_SCK_AF
 
GPIO_AF_SPI1


	)

111 
	#LIS302DL_SPI_MISO_PIN
 
GPIO_Pö_6


	)

112 
	#LIS302DL_SPI_MISO_GPIO_PORT
 
GPIOA


	)

113 
	#LIS302DL_SPI_MISO_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOA


	)

114 
	#LIS302DL_SPI_MISO_SOURCE
 
GPIO_PöSour˚6


	)

115 
	#LIS302DL_SPI_MISO_AF
 
GPIO_AF_SPI1


	)

117 
	#LIS302DL_SPI_MOSI_PIN
 
GPIO_Pö_7


	)

118 
	#LIS302DL_SPI_MOSI_GPIO_PORT
 
GPIOA


	)

119 
	#LIS302DL_SPI_MOSI_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOA


	)

120 
	#LIS302DL_SPI_MOSI_SOURCE
 
GPIO_PöSour˚7


	)

121 
	#LIS302DL_SPI_MOSI_AF
 
GPIO_AF_SPI1


	)

123 
	#LIS302DL_SPI_CS_PIN
 
GPIO_Pö_3


	)

124 
	#LIS302DL_SPI_CS_GPIO_PORT
 
GPIOE


	)

125 
	#LIS302DL_SPI_CS_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOE


	)

127 
	#LIS302DL_SPI_INT1_PIN
 
GPIO_Pö_0


	)

128 
	#LIS302DL_SPI_INT1_GPIO_PORT
 
GPIOE


	)

129 
	#LIS302DL_SPI_INT1_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOE


	)

130 
	#LIS302DL_SPI_INT1_EXTI_LINE
 
EXTI_Löe0


	)

131 
	#LIS302DL_SPI_INT1_EXTI_PORT_SOURCE
 
EXTI_P‹tSour˚GPIOE


	)

132 
	#LIS302DL_SPI_INT1_EXTI_PIN_SOURCE
 
EXTI_PöSour˚0


	)

133 
	#LIS302DL_SPI_INT1_EXTI_IRQn
 
EXTI0_IRQn


	)

135 
	#LIS302DL_SPI_INT2_PIN
 
GPIO_Pö_1


	)

136 
	#LIS302DL_SPI_INT2_GPIO_PORT
 
GPIOE


	)

137 
	#LIS302DL_SPI_INT2_GPIO_CLK
 
RCC_AHB1Pîùh_GPIOE


	)

138 
	#LIS302DL_SPI_INT2_EXTI_LINE
 
EXTI_Löe1


	)

139 
	#LIS302DL_SPI_INT2_EXTI_PORT_SOURCE
 
EXTI_P‹tSour˚GPIOE


	)

140 
	#LIS302DL_SPI_INT2_EXTI_PIN_SOURCE
 
EXTI_PöSour˚1


	)

141 
	#LIS302DL_SPI_INT2_EXTI_IRQn
 
EXTI1_IRQn


	)

153 
	#LIS302DL_WHO_AM_I_ADDR
 0x0F

	)

184 
	#LIS302DL_CTRL_REG1_ADDR
 0x20

	)

222 
	#LIS302DL_CTRL_REG2_ADDR
 0x21

	)

245 
	#LIS302DL_CTRL_REG3_ADDR
 0x22

	)

255 
	#LIS302DL_HP_FILTER_RESET_REG_ADDR
 0x23

	)

285 
	#LIS302DL_STATUS_REG_ADDR
 0x27

	)

293 
	#LIS302DL_OUT_X_ADDR
 0x29

	)

301 
	#LIS302DL_OUT_Y_ADDR
 0x2B

	)

309 
	#LIS302DL_OUT_Z_ADDR
 0x2D

	)

340 
	#LIS302DL_FF_WU_CFG1_REG_ADDR
 0x30

	)

372 
	#LIS302DL_FF_WU_SRC1_REG_ADDR
 0x31

	)

383 
	#LIS302DL_FF_WU_THS1_REG_ADDR
 0x32

	)

391 
	#LIS302DL_FF_WU_DURATION1_REG_ADDR
 0x33

	)

422 
	#LIS302DL_FF_WU_CFG2_REG_ADDR
 0x34

	)

454 
	#LIS302DL_FF_WU_SRC2_REG_ADDR
 0x35

	)

465 
	#LIS302DL_FF_WU_THS2_REG_ADDR
 0x36

	)

473 
	#LIS302DL_FF_WU_DURATION2_REG_ADDR
 0x37

	)

502 
	#LIS302DL_CLICK_CFG_REG_ADDR
 0x38

	)

531 
	#LIS302DL_CLICK_SRC_REG_ADDR
 0x39

	)

540 
	#LIS302DL_CLICK_THSY_X_REG_ADDR
 0x3B

	)

549 
	#LIS302DL_CLICK_THSZ_REG_ADDR
 0x3C

	)

557 
	#LIS302DL_CLICK_TIMELIMIT_REG_ADDR
 0x3D

	)

565 
	#LIS302DL_CLICK_LATENCY_REG_ADDR
 0x3E

	)

573 
	#LIS302DL_CLICK_WINDOW_REG_ADDR
 0x3F

	)

579 
	#LIS302DL_SENSITIVITY_2_3G
 18

	)

580 
	#LIS302DL_SENSITIVITY_9_2G
 72

	)

585 
	#LIS302DL_DATARATE_100
 ((
uöt8_t
)0x00)

	)

586 
	#LIS302DL_DATARATE_400
 ((
uöt8_t
)0x80)

	)

594 
	#LIS302DL_LOWPOWERMODE_POWERDOWN
 ((
uöt8_t
)0x00)

	)

595 
	#LIS302DL_LOWPOWERMODE_ACTIVE
 ((
uöt8_t
)0x40)

	)

603 
	#LIS302DL_FULLSCALE_2_3
 ((
uöt8_t
)0x00)

	)

604 
	#LIS302DL_FULLSCALE_9_2
 ((
uöt8_t
)0x20)

	)

612 
	#LIS302DL_SELFTEST_NORMAL
 ((
uöt8_t
)0x00)

	)

613 
	#LIS302DL_SELFTEST_P
 ((
uöt8_t
)0x10)

	)

614 
	#LIS302DL_SELFTEST_M
 ((
uöt8_t
)0x08)

	)

622 
	#LIS302DL_X_ENABLE
 ((
uöt8_t
)0x01)

	)

623 
	#LIS302DL_Y_ENABLE
 ((
uöt8_t
)0x02)

	)

624 
	#LIS302DL_Z_ENABLE
 ((
uöt8_t
)0x04)

	)

625 
	#LIS302DL_XYZ_ENABLE
 ((
uöt8_t
)0x07)

	)

633 
	#LIS302DL_SERIALINTERFACE_4WIRE
 ((
uöt8_t
)0x00)

	)

634 
	#LIS302DL_SERIALINTERFACE_3WIRE
 ((
uöt8_t
)0x80)

	)

642 
	#LIS302DL_BOOT_NORMALMODE
 ((
uöt8_t
)0x00)

	)

643 
	#LIS302DL_BOOT_REBOOTMEMORY
 ((
uöt8_t
)0x40)

	)

651 
	#LIS302DL_FILTEREDDATASELECTION_BYPASSED
 ((
uöt8_t
)0x00)

	)

652 
	#LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER
 ((
uöt8_t
)0x20)

	)

660 
	#LIS302DL_HIGHPASSFILTERINTERRUPT_OFF
 ((
uöt8_t
)0x00)

	)

661 
	#LIS302DL_HIGHPASSFILTERINTERRUPT_1
 ((
uöt8_t
)0x04)

	)

662 
	#LIS302DL_HIGHPASSFILTERINTERRUPT_2
 ((
uöt8_t
)0x08)

	)

663 
	#LIS302DL_HIGHPASSFILTERINTERRUPT_1_2
 ((
uöt8_t
)0x0C)

	)

671 
	#LIS302DL_HIGHPASSFILTER_LEVEL_0
 ((
uöt8_t
)0x00)

	)

672 
	#LIS302DL_HIGHPASSFILTER_LEVEL_1
 ((
uöt8_t
)0x01)

	)

673 
	#LIS302DL_HIGHPASSFILTER_LEVEL_2
 ((
uöt8_t
)0x02)

	)

674 
	#LIS302DL_HIGHPASSFILTER_LEVEL_3
 ((
uöt8_t
)0x03)

	)

683 
	#LIS302DL_INTERRUPTREQUEST_NOTLATCHED
 ((
uöt8_t
)0x00)

	)

684 
	#LIS302DL_INTERRUPTREQUEST_LATCHED
 ((
uöt8_t
)0x40)

	)

692 
	#LIS302DL_CLICKINTERRUPT_XYZ_DISABLE
 ((
uöt8_t
)0x00)

	)

693 
	#LIS302DL_CLICKINTERRUPT_X_ENABLE
 ((
uöt8_t
)0x01)

	)

694 
	#LIS302DL_CLICKINTERRUPT_Y_ENABLE
 ((
uöt8_t
)0x04)

	)

695 
	#LIS302DL_CLICKINTERRUPT_Z_ENABLE
 ((
uöt8_t
)0x10)

	)

696 
	#LIS302DL_CLICKINTERRUPT_XYZ_ENABLE
 ((
uöt8_t
)0x15)

	)

704 
	#LIS302DL_DOUBLECLICKINTERRUPT_XYZ_DISABLE
 ((
uöt8_t
)0x00)

	)

705 
	#LIS302DL_DOUBLECLICKINTERRUPT_X_ENABLE
 ((
uöt8_t
)0x02)

	)

706 
	#LIS302DL_DOUBLECLICKINTERRUPT_Y_ENABLE
 ((
uöt8_t
)0x08)

	)

707 
	#LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE
 ((
uöt8_t
)0x20)

	)

708 
	#LIS302DL_DOUBLECLICKINTERRUPT_XYZ_ENABLE
 ((
uöt8_t
)0x2A)

	)

719 
	#LIS302DL_CS_LOW
(Ë
	`GPIO_Re£tBôs
(
LIS302DL_SPI_CS_GPIO_PORT
, 
LIS302DL_SPI_CS_PIN
)

	)

720 
	#LIS302DL_CS_HIGH
(Ë
	`GPIO_SëBôs
(
LIS302DL_SPI_CS_GPIO_PORT
, 
LIS302DL_SPI_CS_PIN
)

	)

728 
LIS302DL_Inô
(
LIS302DL_InôTy≥Def
 *
LIS302DL_InôSåu˘
);

729 
LIS302DL_I¡îru±C⁄fig
(
LIS302DL_I¡îru±C⁄figTy≥Def
 *
LIS302DL_I¡îru±C⁄figSåu˘
);

730 
LIS302DL_FûãrC⁄fig
(
LIS302DL_FûãrC⁄figTy≥Def
 *
LIS302DL_FûãrC⁄figSåu˘
);

731 
LIS302DL_LowpowîCmd
(
uöt8_t
 
LowPowîMode
);

732 
LIS302DL_FuŒSˇÀCmd
(
uöt8_t
 
FS_vÆue
);

733 
LIS302DL_D©aR©eCmd
(
uöt8_t
 
D©aR©eVÆue
);

734 
LIS302DL_ReboŸCmd
();

735 
LIS302DL_RódACC
(
öt32_t
* 
out
);

736 
LIS302DL_Wrôe
(
uöt8_t
* 
pBuf„r
, uöt8_à
WrôeAddr
, 
uöt16_t
 
NumByãToWrôe
);

737 
LIS302DL_Ród
(
uöt8_t
* 
pBuf„r
, uöt8_à
RódAddr
, 
uöt16_t
 
NumByãToRód
);

748 
uöt32_t
 
LIS302DL_TIMEOUT_U£rCÆlback
();

750 #ifde‡
__˝lu•lus


	@libstm/Utilities/printf.c

23 
	~<°d¨g.h
>

26 
	$¥ötch¨
(**
°r
, 
c
)

28 i‡(
°r
) {

29 **
°r
 = 
c
;

30 ++(*
°r
);

33 i‡(
c
 ='\n' ) 
	`u¨tPutch
('\r');

34 
	`u¨tPutch
(
c
);

36 
	}
}

38 
	#PAD_RIGHT
 1

	)

39 
	#PAD_ZERO
 2

	)

41 
	$¥öts
(**
out
, c⁄° *
°rög
, 
width
, 
∑d
)

43 
pc
 = 0, 
∑dch¨
 = ' ';

45 i‡(
width
 > 0) {

46 
Àn
 = 0;

47 c⁄° *
±r
;

48 
±r
 = 
°rög
; *±r; ++±rË++
Àn
;

49 i‡(
Àn
 >
width
) width = 0;

50 
width
 -
Àn
;

51 i‡(
∑d
 & 
PAD_ZERO
Ë
∑dch¨
 = '0';

53 i‡(!(
∑d
 & 
PAD_RIGHT
)) {

54  ; 
width
 > 0; --width) {

55 
	`¥ötch¨
 (
out
, 
∑dch¨
);

56 ++
pc
;

59  ; *
°rög
 ; ++string) {

60 
	`¥ötch¨
 (
out
, *
°rög
);

61 ++
pc
;

63  ; 
width
 > 0; --width) {

64 
	`¥ötch¨
 (
out
, 
∑dch¨
);

65 ++
pc
;

68  
pc
;

69 
	}
}

72 
	#PRINT_BUF_LEN
 12

	)

74 
	$¥öti
(**
out
, 
i
, 
b
, 
sg
, 
width
, 
∑d
, 
Àtba£
)

76 
¥öt_buf
[
PRINT_BUF_LEN
];

77 *
s
;

78 
t
, 
√g
 = 0, 
pc
 = 0;

79 
u
 = 
i
;

81 i‡(
i
 == 0) {

82 
¥öt_buf
[0] = '0';

83 
¥öt_buf
[1] = '\0';

84  
	`¥öts
 (
out
, 
¥öt_buf
, 
width
, 
∑d
);

87 i‡(
sg
 && 
b
 =10 && 
i
 < 0) {

88 
√g
 = 1;

89 
u
 = -
i
;

92 
s
 = 
¥öt_buf
 + 
PRINT_BUF_LEN
-1;

93 *
s
 = '\0';

95 
u
) {

96 
t
 = 
u
 % 
b
;

97 if–
t
 >= 10 )

98 
t
 +
Àtba£
 - '0' - 10;

99 *--
s
 = 
t
 + '0';

100 
u
 /
b
;

103 i‡(
√g
) {

104 if–
width
 && (
∑d
 & 
PAD_ZERO
) ) {

105 
	`¥ötch¨
 (
out
, '-');

106 ++
pc
;

107 --
width
;

110 *--
s
 = '-';

114  
pc
 + 
	`¥öts
 (
out
, 
s
, 
width
, 
∑d
);

115 
	}
}

117 
	$¥öt
(**
out
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
 )

119 
width
, 
∑d
;

120 
pc
 = 0;

121 
s¸
[2];

123 ; *
f‹m©
 != 0; ++format) {

124 i‡(*
f‹m©
 == '%') {

125 ++
f‹m©
;

126 
width
 = 
∑d
 = 0;

127 i‡(*
f‹m©
 == '\0') ;

128 i‡(*
f‹m©
 ='%'Ë
out
;

129 i‡(*
f‹m©
 == '-') {

130 ++
f‹m©
;

131 
∑d
 = 
PAD_RIGHT
;

133 *
f‹m©
 == '0') {

134 ++
f‹m©
;

135 
∑d
 |
PAD_ZERO
;

137  ; *
f‹m©
 >= '0' && *format <= '9'; ++format) {

138 
width
 *= 10;

139 
width
 +*
f‹m©
 - '0';

141 if–*
f‹m©
 == 's' ) {

142 *
s
 = (*)
	`va_¨g
–
¨gs
, );

143 
pc
 +
	`¥öts
 (
out
, 
s
?s:"“uŒ)", 
width
, 
∑d
);

146 if–*
f‹m©
 == 'd' ) {

147 
pc
 +
	`¥öti
 (
out
, 
	`va_¨g
–
¨gs
, ), 10, 1, 
width
, 
∑d
, 'a');

150 if–*
f‹m©
 == 'x' ) {

151 
pc
 +
	`¥öti
 (
out
, 
	`va_¨g
–
¨gs
, ), 16, 0, 
width
, 
∑d
, 'a');

154 if–*
f‹m©
 == 'X' ) {

155 
pc
 +
	`¥öti
 (
out
, 
	`va_¨g
–
¨gs
, ), 16, 0, 
width
, 
∑d
, 'A');

158 if–*
f‹m©
 == 'u' ) {

159 
pc
 +
	`¥öti
 (
out
, 
	`va_¨g
–
¨gs
, ), 10, 0, 
width
, 
∑d
, 'a');

162 if–*
f‹m©
 == 'c' ) {

164 
s¸
[0] = ()
	`va_¨g
–
¨gs
, );

165 
s¸
[1] = '\0';

166 
pc
 +
	`¥öts
 (
out
, 
s¸
, 
width
, 
∑d
);

171 
out
:

172 
	`¥ötch¨
 (
out
, *
f‹m©
);

173 ++
pc
;

176 i‡(
out
) **out = '\0';

177 
	`va_íd
–
¨gs
 );

178  
pc
;

179 
	}
}

181 
	$¥ötf
(c⁄° *
f‹m©
, ...)

183 
va_li°
 
¨gs
;

185 
	`va_°¨t
–
¨gs
, 
f‹m©
 );

186  
	`¥öt
–0, 
f‹m©
, 
¨gs
 );

187 
	}
}

189 
	$•rötf
(*
out
, c⁄° *
f‹m©
, ...)

191 
va_li°
 
¨gs
;

193 
	`va_°¨t
–
¨gs
, 
f‹m©
 );

194  
	`¥öt
–&
out
, 
f‹m©
, 
¨gs
 );

195 
	}
}

198 
	$Te°Prötf
()

200 *
±r
 = "Hello world!";

201 *
≈
 = 0;

202 
i
 = 5;

203 
bs
 = ()*8;

204 
mi
;

205 
buf
[80];

207 
mi
 = (1 << (
bs
-1)) + 1;

208 
	`¥ötf
("%s\n", 
±r
);

209 
	`¥ötf
("SERIALÖrintfÅest\n");

210 
	`¥ötf
("%†i†nuŒÖoöãr\n", 
≈
);

211 
	`¥ötf
("%d = 5\n", 
i
);

212 
	`¥ötf
("%d = - max i¡\n", 
mi
);

213 
	`¥ötf
("char %c = 'a'\n", 'a');

214 
	`¥ötf
("hex %x = ff\n", 0xff);

215 
	`¥ötf
("hex %02x = 00\n", 0);

216 
	`¥ötf
("signed %d = unsigned %u = hex %x\n", -3, -3, -3);

217 
	`¥ötf
("%d %s(s)%", 0, "message");

218 
	`¥ötf
("\n");

219 
	`¥ötf
("%d %s(s) with %%\n", 0, "message");

220 
	`•rötf
(
buf
, "ju°if: \"%-10s\"\n", "À·"); 
	`¥ötf
("%s", buf);

221 
	`•rötf
(
buf
, "ju°if: \"%10s\"\n", "right"); 
	`¥ötf
("%s", buf);

222 
	`•rötf
(
buf
, " 3: %04d zîÿ∑dded\n", 3); 
	`¥ötf
("%s", buf);

223 
	`•rötf
(
buf
, " 3: %-4dÜe· ju°if.\n", 3); 
	`¥ötf
("%s", buf);

224 
	`•rötf
(
buf
, " 3: %4dÑighàju°if.\n", 3); 
	`¥ötf
("%s", buf);

225 
	`•rötf
(
buf
, "-3: %04d zîÿ∑dded\n", -3); 
	`¥ötf
("%s", buf);

226 
	`•rötf
(
buf
, "-3: %-4dÜe· ju°if.\n", -3); 
	`¥ötf
("%s", buf);

227 
	`•rötf
(
buf
, "-3: %4dÑighàju°if.\n", -3); 
	`¥ötf
("%s", buf);

230 
	}
}

	@libstm/Utilities/syscalls.c

12 
	~<°dlib.h
>

13 
	~<ªít.h
>

14 
	~<sys/°©.h
>

18 
_ssize_t
 
	$_ªad_r
(
_ªít
 *
r
, 
fûe
, *
±r
, 
size_t
 
Àn
)

20 
c
;

21 
i
;

22 *
p
;

24 
p
 = (*)
±r
;

26 
i
 = 0; i < 
Àn
; i++)

30 *
p
++ = 
c
;

31 
	`u¨tPutch
(
c
);

33 i‡(
c
 =0x0D && 
i
 <(
Àn
 - 2))

35 *
p
 = 0x0A;

36 
	`u¨tPutch
(0x0A);

37  
i
 + 2;

40  
i
;

41 
	}
}

46 
_ssize_t
 
	$_ªad_r
(

47 
_ªít
 *
r
,

48 
fûe
,

49 *
±r
,

50 
size_t
 
Àn
)

52 
c
;

53 
i
;

54 *
p
;

56 
p
 = (*)
±r
;

58 
i
 = 0; i < 
Àn
; i++) {

60 
c
 = 
	`u¨t0GëchW
();

61 i‡(
c
 == 0x0D) {

62 *
p
='\0';

65 *
p
++ = 
c
;

66 
	`u¨t0Putch
(
c
);

68  
Àn
 - 
i
;

69 
	}
}

72 
_ssize_t
 
	$_wrôe_r
 (

73 
_ªít
 *
r
,

74 
fûe
,

75 c⁄° *
±r
,

76 
size_t
 
Àn
)

78 
i
;

79 c⁄° *
p
;

81 
p
 = (c⁄° *Ë
±r
;

83 
i
 = 0; i < 
Àn
; i++) {

84 i‡(*
p
 ='\n' ) 
	`u¨tPutch
('\r');

85 
	`u¨tPutch
(*
p
++);

88  
Àn
;

89 
	}
}

91 
	$_˛o£_r
(

92 
_ªít
 *
r
,

93 
fûe
)

96 
	}
}

98 
_off_t
 
	$_l£ek_r
(

99 
_ªít
 *
r
,

100 
fûe
,

101 
_off_t
 
±r
,

102 
dú
)

104  (
_off_t
)0;

105 
	}
}

108 
	$_f°©_r
(

109 
_ªít
 *
r
,

110 
fûe
,

111 
°©
 *
°
)

114 
°
->
°_mode
 = 
S_IFCHR
;

120 
	}
}

124 
	$_ißây
(
fûe
)

127 
	}
}

130 
	$_exô
 (
n
) {

131 
œbñ
: label;

132 
	}
}

138 
íd
[];

142 *
	ghóp_±r
;

156 * 
	$_sbrk_r
(

157 
_ªít
 *
_s_r
,

158 
±rdiff_t
 
nbyãs
)

160 *
ba£
;

162 i‡(!
hóp_±r
) {

163 
hóp_±r
 = 
íd
;

165 
ba£
 = 
hóp_±r
;

166 
hóp_±r
 +
nbyãs
;

168  
ba£
;

169 
	}
}

	@libstm/Utilities/uprintf.c

23 
	~<°d¨g.h
>

26 
	$u¥ötch¨
(**
°r
, 
c
)

28 i‡(
°r
) {

29 **
°r
 = 
c
;

30 ++(*
°r
);

33 i‡(
c
 ='\n' ) 
	`UsbOutByã
('\r');

34 
	`UsbOutByã
(
c
);

36 
	}
}

38 
	#PAD_RIGHT
 1

	)

39 
	#PAD_ZERO
 2

	)

41 
	$u¥öts
(**
out
, c⁄° *
°rög
, 
width
, 
∑d
)

43 
pc
 = 0, 
∑dch¨
 = ' ';

45 i‡(
width
 > 0) {

46 
Àn
 = 0;

47 c⁄° *
±r
;

48 
±r
 = 
°rög
; *±r; ++±rË++
Àn
;

49 i‡(
Àn
 >
width
) width = 0;

50 
width
 -
Àn
;

51 i‡(
∑d
 & 
PAD_ZERO
Ë
∑dch¨
 = '0';

53 i‡(!(
∑d
 & 
PAD_RIGHT
)) {

54  ; 
width
 > 0; --width) {

55 
	`u¥ötch¨
 (
out
, 
∑dch¨
);

56 ++
pc
;

59  ; *
°rög
 ; ++string) {

60 
	`u¥ötch¨
 (
out
, *
°rög
);

61 ++
pc
;

63  ; 
width
 > 0; --width) {

64 
	`u¥ötch¨
 (
out
, 
∑dch¨
);

65 ++
pc
;

68  
pc
;

69 
	}
}

72 
	#PRINT_BUF_LEN
 12

	)

74 
	$u¥öti
(**
out
, 
i
, 
b
, 
sg
, 
width
, 
∑d
, 
Àtba£
)

76 
¥öt_buf
[
PRINT_BUF_LEN
];

77 *
s
;

78 
t
, 
√g
 = 0, 
pc
 = 0;

79 
u
 = 
i
;

81 i‡(
i
 == 0) {

82 
¥öt_buf
[0] = '0';

83 
¥öt_buf
[1] = '\0';

84  
	`u¥öts
 (
out
, 
¥öt_buf
, 
width
, 
∑d
);

87 i‡(
sg
 && 
b
 =10 && 
i
 < 0) {

88 
√g
 = 1;

89 
u
 = -
i
;

92 
s
 = 
¥öt_buf
 + 
PRINT_BUF_LEN
-1;

93 *
s
 = '\0';

95 
u
) {

96 
t
 = 
u
 % 
b
;

97 if–
t
 >= 10 )

98 
t
 +
Àtba£
 - '0' - 10;

99 *--
s
 = 
t
 + '0';

100 
u
 /
b
;

103 i‡(
√g
) {

104 if–
width
 && (
∑d
 & 
PAD_ZERO
) ) {

105 
	`u¥ötch¨
 (
out
, '-');

106 ++
pc
;

107 --
width
;

110 *--
s
 = '-';

114  
pc
 + 
	`u¥öts
 (
out
, 
s
, 
width
, 
∑d
);

115 
	}
}

117 
	$u¥öt
(**
out
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
 )

119 
width
, 
∑d
;

120 
pc
 = 0;

121 
s¸
[2];

123 ; *
f‹m©
 != 0; ++format) {

124 i‡(*
f‹m©
 == '%') {

125 ++
f‹m©
;

126 
width
 = 
∑d
 = 0;

127 i‡(*
f‹m©
 == '\0') ;

128 i‡(*
f‹m©
 ='%'Ë
out
;

129 i‡(*
f‹m©
 == '-') {

130 ++
f‹m©
;

131 
∑d
 = 
PAD_RIGHT
;

133 *
f‹m©
 == '0') {

134 ++
f‹m©
;

135 
∑d
 |
PAD_ZERO
;

137  ; *
f‹m©
 >= '0' && *format <= '9'; ++format) {

138 
width
 *= 10;

139 
width
 +*
f‹m©
 - '0';

141 if–*
f‹m©
 == 's' ) {

142 *
s
 = (*)
	`va_¨g
–
¨gs
, );

143 
pc
 +
	`u¥öts
 (
out
, 
s
?s:"“uŒ)", 
width
, 
∑d
);

146 if–*
f‹m©
 == 'd' ) {

147 
pc
 +
	`u¥öti
 (
out
, 
	`va_¨g
–
¨gs
, ), 10, 1, 
width
, 
∑d
, 'a');

150 if–*
f‹m©
 == 'x' ) {

151 
pc
 +
	`u¥öti
 (
out
, 
	`va_¨g
–
¨gs
, ), 16, 0, 
width
, 
∑d
, 'a');

154 if–*
f‹m©
 == 'X' ) {

155 
pc
 +
	`u¥öti
 (
out
, 
	`va_¨g
–
¨gs
, ), 16, 0, 
width
, 
∑d
, 'A');

158 if–*
f‹m©
 == 'u' ) {

159 
pc
 +
	`u¥öti
 (
out
, 
	`va_¨g
–
¨gs
, ), 10, 0, 
width
, 
∑d
, 'a');

162 if–*
f‹m©
 == 'c' ) {

164 
s¸
[0] = ()
	`va_¨g
–
¨gs
, );

165 
s¸
[1] = '\0';

166 
pc
 +
	`u¥öts
 (
out
, 
s¸
, 
width
, 
∑d
);

171 
out
:

172 
	`u¥ötch¨
 (
out
, *
f‹m©
);

173 ++
pc
;

176 i‡(
out
) **out = '\0';

177 
	`va_íd
–
¨gs
 );

178  
pc
;

179 
	}
}

181 
	$u¥ötf
(c⁄° *
f‹m©
, ...)

183 
va_li°
 
¨gs
;

185 
	`va_°¨t
–
¨gs
, 
f‹m©
 );

186  
	`u¥öt
–0, 
f‹m©
, 
¨gs
 );

187 
	}
}

189 
	$u•rötf
(*
out
, c⁄° *
f‹m©
, ...)

191 
va_li°
 
¨gs
;

193 
	`va_°¨t
–
¨gs
, 
f‹m©
 );

194  
	`u¥öt
–&
out
, 
f‹m©
, 
¨gs
 );

195 
	}
}

198 
	$uTe°Prötf
()

200 *
±r
 = "Hello world!";

201 *
≈
 = 0;

202 
i
 = 5;

203 
bs
 = ()*8;

204 
mi
;

205 
buf
[80];

207 
mi
 = (1 << (
bs
-1)) + 1;

208 
	`u¥ötf
("%s\n", 
±r
);

209 
	`u¥ötf
("USBÖrintfÅest\n");

210 
	`u¥ötf
("%†i†nuŒÖoöãr\n", 
≈
);

211 
	`u¥ötf
("%d = 5\n", 
i
);

212 
	`u¥ötf
("%d = - max i¡\n", 
mi
);

213 
	`u¥ötf
("char %c = 'a'\n", 'a');

214 
	`u¥ötf
("hex %x = ff\n", 0xff);

215 
	`u¥ötf
("hex %02x = 00\n", 0);

216 
	`u¥ötf
("signed %d = unsigned %u = hex %x\n", -3, -3, -3);

217 
	`u¥ötf
("%d %s(s)%", 0, "message");

218 
	`u¥ötf
("\n");

219 
	`u¥ötf
("%d %s(s) with %%\n", 0, "message");

220 
	`u•rötf
(
buf
, "ju°if: \"%-10s\"\n", "À·"); 
	`u¥ötf
("%s", buf);

221 
	`u•rötf
(
buf
, "ju°if: \"%10s\"\n", "right"); 
	`u¥ötf
("%s", buf);

222 
	`u•rötf
(
buf
, " 3: %04d zîÿ∑dded\n", 3); 
	`u¥ötf
("%s", buf);

223 
	`u•rötf
(
buf
, " 3: %-4dÜe· ju°if.\n", 3); 
	`u¥ötf
("%s", buf);

224 
	`u•rötf
(
buf
, " 3: %4dÑighàju°if.\n", 3); 
	`u¥ötf
("%s", buf);

225 
	`u•rötf
(
buf
, "-3: %04d zîÿ∑dded\n", -3); 
	`u¥ötf
("%s", buf);

226 
	`u•rötf
(
buf
, "-3: %-4dÜe· ju°if.\n", -3); 
	`u¥ötf
("%s", buf);

227 
	`u•rötf
(
buf
, "-3: %4dÑighàju°if.\n", -3); 
	`u¥ötf
("%s", buf);

230 
	}
}

	@
1
.
0
188
10148
TIM_PWM_Output/main.c
TIM_PWM_Output/main.h
TIM_PWM_Output/stm32f4xx_conf.h
TIM_PWM_Output/stm32f4xx_it.c
TIM_PWM_Output/stm32f4xx_it.h
TIM_PWM_Output/system_stm32f4xx.c
libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/arm_common_tables.h
libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/arm_math.h
libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cm0.h
libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cm3.c
libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cm3.h
libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cm4.h
libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cm4_simd.h
libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cmFunc.h
libstm/STM32F4xx_StdPeriph_Driver/inc/core_support/core_cmInstr.h
libstm/STM32F4xx_StdPeriph_Driver/inc/device_support/stm32f4xx.h
libstm/STM32F4xx_StdPeriph_Driver/inc/device_support/system_stm32f4xx.h
libstm/STM32F4xx_StdPeriph_Driver/inc/misc.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_can.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_crc.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_cryp.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dac.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dbgmcu.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dcmi.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_exti.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_flash.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_fsmc.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_hash.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_i2c.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_iwdg.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_pwr.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rng.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_sdio.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_syscfg.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h
libstm/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_wwdg.h
libstm/STM32F4xx_StdPeriph_Driver/src/misc.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_can.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_crc.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_aes.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_des.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dac.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dbgmcu.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_exti.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_flash.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_fsmc.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_gpio.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_md5.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_iwdg.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_sdio.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_syscfg.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_tim.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c
libstm/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_wwdg.c
libstm/STM32_USB-FS-Device_Lib/inc/otgd_fs_cal.h
libstm/STM32_USB-FS-Device_Lib/inc/otgd_fs_dev.h
libstm/STM32_USB-FS-Device_Lib/inc/otgd_fs_int.h
libstm/STM32_USB-FS-Device_Lib/inc/otgd_fs_pcd.h
libstm/STM32_USB-FS-Device_Lib/inc/otgd_fs_regs.h
libstm/STM32_USB-FS-Device_Lib/inc/usb_core.h
libstm/STM32_USB-FS-Device_Lib/inc/usb_def.h
libstm/STM32_USB-FS-Device_Lib/inc/usb_init.h
libstm/STM32_USB-FS-Device_Lib/inc/usb_int.h
libstm/STM32_USB-FS-Device_Lib/inc/usb_lib.h
libstm/STM32_USB-FS-Device_Lib/inc/usb_mem.h
libstm/STM32_USB-FS-Device_Lib/inc/usb_regs.h
libstm/STM32_USB-FS-Device_Lib/inc/usb_sil.h
libstm/STM32_USB-FS-Device_Lib/inc/usb_type.h
libstm/STM32_USB-FS-Device_Lib/src/otgd_fs_cal.c
libstm/STM32_USB-FS-Device_Lib/src/otgd_fs_dev.c
libstm/STM32_USB-FS-Device_Lib/src/otgd_fs_int.c
libstm/STM32_USB-FS-Device_Lib/src/otgd_fs_pcd.c
libstm/STM32_USB-FS-Device_Lib/src/usb_core.c
libstm/STM32_USB-FS-Device_Lib/src/usb_init.c
libstm/STM32_USB-FS-Device_Lib/src/usb_int.c
libstm/STM32_USB-FS-Device_Lib/src/usb_mem.c
libstm/STM32_USB-FS-Device_Lib/src/usb_regs.c
libstm/STM32_USB-FS-Device_Lib/src/usb_sil.c
libstm/STM32_USB_Device_Library/Class/audio/inc/usbd_audio_core.h
libstm/STM32_USB_Device_Library/Class/audio/inc/usbd_audio_out_if.h
libstm/STM32_USB_Device_Library/Class/audio/src/usbd_audio_core.c
libstm/STM32_USB_Device_Library/Class/audio/src/usbd_audio_out_if.c
libstm/STM32_USB_Device_Library/Class/cdc/inc/usbd_cdc_core.h
libstm/STM32_USB_Device_Library/Class/cdc/inc/usbd_cdc_if_template.h
libstm/STM32_USB_Device_Library/Class/cdc/src/usbd_cdc_core.c
libstm/STM32_USB_Device_Library/Class/cdc/src/usbd_cdc_if_template.c
libstm/STM32_USB_Device_Library/Class/dfu/inc/usbd_dfu_core.h
libstm/STM32_USB_Device_Library/Class/dfu/inc/usbd_dfu_mal.h
libstm/STM32_USB_Device_Library/Class/dfu/inc/usbd_flash_if.h
libstm/STM32_USB_Device_Library/Class/dfu/inc/usbd_mem_if_template.h
libstm/STM32_USB_Device_Library/Class/dfu/inc/usbd_otp_if.h
libstm/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_core.c
libstm/STM32_USB_Device_Library/Class/dfu/src/usbd_dfu_mal.c
libstm/STM32_USB_Device_Library/Class/dfu/src/usbd_flash_if.c
libstm/STM32_USB_Device_Library/Class/dfu/src/usbd_mem_if_template.c
libstm/STM32_USB_Device_Library/Class/dfu/src/usbd_otp_if.c
libstm/STM32_USB_Device_Library/Class/hid/inc/usbd_hid_core.h
libstm/STM32_USB_Device_Library/Class/hid/src/usbd_hid_core.c
libstm/STM32_USB_Device_Library/Class/msc/inc/usbd_msc_bot.h
libstm/STM32_USB_Device_Library/Class/msc/inc/usbd_msc_core.h
libstm/STM32_USB_Device_Library/Class/msc/inc/usbd_msc_data.h
libstm/STM32_USB_Device_Library/Class/msc/inc/usbd_msc_mem.h
libstm/STM32_USB_Device_Library/Class/msc/inc/usbd_msc_scsi.h
libstm/STM32_USB_Device_Library/Class/msc/src/usbd_msc_bot.c
libstm/STM32_USB_Device_Library/Class/msc/src/usbd_msc_core.c
libstm/STM32_USB_Device_Library/Class/msc/src/usbd_msc_data.c
libstm/STM32_USB_Device_Library/Class/msc/src/usbd_msc_scsi.c
libstm/STM32_USB_Device_Library/Class/msc/src/usbd_storage_template.c
libstm/STM32_USB_Device_Library/Core/inc/usbd_conf_template.h
libstm/STM32_USB_Device_Library/Core/inc/usbd_core.h
libstm/STM32_USB_Device_Library/Core/inc/usbd_def.h
libstm/STM32_USB_Device_Library/Core/inc/usbd_ioreq.h
libstm/STM32_USB_Device_Library/Core/inc/usbd_req.h
libstm/STM32_USB_Device_Library/Core/inc/usbd_usr.h
libstm/STM32_USB_Device_Library/Core/src/usbd_core.c
libstm/STM32_USB_Device_Library/Core/src/usbd_ioreq.c
libstm/STM32_USB_Device_Library/Core/src/usbd_req.c
libstm/STM32_USB_HOST_Library/Class/HID/inc/usbh_hid_core.h
libstm/STM32_USB_HOST_Library/Class/HID/inc/usbh_hid_keybd.h
libstm/STM32_USB_HOST_Library/Class/HID/inc/usbh_hid_mouse.h
libstm/STM32_USB_HOST_Library/Class/HID/src/usbh_hid_core.c
libstm/STM32_USB_HOST_Library/Class/HID/src/usbh_hid_keybd.c
libstm/STM32_USB_HOST_Library/Class/HID/src/usbh_hid_mouse.c
libstm/STM32_USB_HOST_Library/Class/MSC/inc/usbh_msc_bot.h
libstm/STM32_USB_HOST_Library/Class/MSC/inc/usbh_msc_core.h
libstm/STM32_USB_HOST_Library/Class/MSC/inc/usbh_msc_scsi.h
libstm/STM32_USB_HOST_Library/Class/MSC/src/usbh_msc_bot.c
libstm/STM32_USB_HOST_Library/Class/MSC/src/usbh_msc_core.c
libstm/STM32_USB_HOST_Library/Class/MSC/src/usbh_msc_fatfs.c
libstm/STM32_USB_HOST_Library/Class/MSC/src/usbh_msc_scsi.c
libstm/STM32_USB_HOST_Library/Core/inc/usbh_conf_template.h
libstm/STM32_USB_HOST_Library/Core/inc/usbh_core.h
libstm/STM32_USB_HOST_Library/Core/inc/usbh_def.h
libstm/STM32_USB_HOST_Library/Core/inc/usbh_hcs.h
libstm/STM32_USB_HOST_Library/Core/inc/usbh_ioreq.h
libstm/STM32_USB_HOST_Library/Core/inc/usbh_stdreq.h
libstm/STM32_USB_HOST_Library/Core/src/usbh_core.c
libstm/STM32_USB_HOST_Library/Core/src/usbh_hcs.c
libstm/STM32_USB_HOST_Library/Core/src/usbh_ioreq.c
libstm/STM32_USB_HOST_Library/Core/src/usbh_stdreq.c
libstm/STM32_USB_OTG_Driver/inc/usb_bsp.h
libstm/STM32_USB_OTG_Driver/inc/usb_conf_template.h
libstm/STM32_USB_OTG_Driver/inc/usb_core.h
libstm/STM32_USB_OTG_Driver/inc/usb_dcd.h
libstm/STM32_USB_OTG_Driver/inc/usb_dcd_int.h
libstm/STM32_USB_OTG_Driver/inc/usb_defines.h
libstm/STM32_USB_OTG_Driver/inc/usb_hcd.h
libstm/STM32_USB_OTG_Driver/inc/usb_hcd_int.h
libstm/STM32_USB_OTG_Driver/inc/usb_otg.h
libstm/STM32_USB_OTG_Driver/inc/usb_regs.h
libstm/STM32_USB_OTG_Driver/src/usb_bsp_template.c
libstm/STM32_USB_OTG_Driver/src/usb_core.c
libstm/STM32_USB_OTG_Driver/src/usb_dcd.c
libstm/STM32_USB_OTG_Driver/src/usb_dcd_int.c
libstm/STM32_USB_OTG_Driver/src/usb_hcd.c
libstm/STM32_USB_OTG_Driver/src/usb_hcd_int.c
libstm/STM32_USB_OTG_Driver/src/usb_otg.c
libstm/Utilities/STM32F4-Discovery/discoveryf4utils.c
libstm/Utilities/STM32F4-Discovery/discoveryf4utils.h
libstm/Utilities/STM32F4-Discovery/stm32f4_discovery.c
libstm/Utilities/STM32F4-Discovery/stm32f4_discovery.h
libstm/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.c
libstm/Utilities/STM32F4-Discovery/stm32f4_discovery_audio_codec.h
libstm/Utilities/STM32F4-Discovery/stm32f4_discovery_lis302dl.c
libstm/Utilities/STM32F4-Discovery/stm32f4_discovery_lis302dl.h
libstm/Utilities/printf.c
libstm/Utilities/syscalls.c
libstm/Utilities/uprintf.c
